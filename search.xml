<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>带货直播违禁词</title>
      <link href="/post/3445f7c4.html"/>
      <url>/post/3445f7c4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="禁止使用极限用语："><a href="#禁止使用极限用语：" class="headerlink" title="禁止使用极限用语："></a>禁止使用极限用语：</h2><p>1、严禁使用国家级、世界级、最高级、第一、唯一、首个、首选、顶级、国家1级产品、填补国内空白、独家、首家、最新、最先进、第一品牌、金牌、名牌、优秀、顶级、独家、全网销量第一、全球首发、全国首家、全网首发、世界领先、顶级工艺、王牌、销量冠军、第一(NO1\Top1)、极致、永久、王牌、掌门人，领袖品牌、独一无二、绝无仅有、史无前例、万能等。</p><p>2、严禁使用最高、最低、最、最具、最便宜、最新、最先进、最大程度、最新技术、最先进科学、最佳、最大、最好、最新科学、最新技术、最先进加工工艺、最时尚、最受欢迎、最先、等含义相同或近似的绝对化用语。</p><p>3、严禁使用绝对值、绝对、大牌、精确、超赚、领导品牌、领先上市、巨星、著名、奢侈、世界全国X大品牌之一等无法考证的词语。</p><p>4、严禁使用100%、国际品质、高档、正品、国家级、世界级、最高级最佳等虚假或无法判断真伪的夸张性表述词语。</p><h2 id="禁止使用时限用语："><a href="#禁止使用时限用语：" class="headerlink" title="禁止使用时限用语："></a>禁止使用时限用语：</h2><p>限时须有具体时限，所有团购须标明具体活动日期，严禁使用随时结束、仅此一次、随时涨价、马上降价、最后一波等无法确定时限的词语。</p><h2 id="禁止使用权威性词语："><a href="#禁止使用权威性词语：" class="headerlink" title="禁止使用权威性词语："></a>禁止使用权威性词语：</h2><p>1、严禁使用国家XXX领导人推荐、国家XX机关推荐、国家XX机关专供、特供等借国家、国家机关工作人员名称进行宣传的用语</p><p>2、严禁使用质量免检、无需国家质量检测、免抽检等宣称质量无需检测的用语</p><p>3、严禁使用人民币图样（央行批准的除外)</p><p>4、严禁使用老字号、中国驰名商标、特供、专供等词语（唯品会专供除外）。</p><h2 id="禁止使用“点击XX”词语："><a href="#禁止使用“点击XX”词语：" class="headerlink" title="禁止使用“点击XX”词语："></a>禁止使用“点击XX”词语：</h2><p>严禁使用疑似欺骗消费者的词语，例如“恭喜获奖”“全民免单”“点击有惊喜”“点击获取”“点击试穿”“领取奖品”“非转基因更安全”等文案元素。</p><h2 id="禁止使用刺激消费词语："><a href="#禁止使用刺激消费词语：" class="headerlink" title="禁止使用刺激消费词语："></a>禁止使用刺激消费词语：</h2><p>严禁使用激发消费者抢购心理词语，如“秒杀”“抢爆”“再不抢就没了”“不 会再便宜了”“错过就没机会了”“万人疯抢”“抢疯了”等词语。</p><h2 id="禁止使用疑似医疗用语（普通商品，不含特殊用途化妆品、保健品、医疗器械）"><a href="#禁止使用疑似医疗用语（普通商品，不含特殊用途化妆品、保健品、医疗器械）" class="headerlink" title="禁止使用疑似医疗用语（普通商品，不含特殊用途化妆品、保健品、医疗器械）"></a>禁止使用疑似医疗用语（普通商品，不含特殊用途化妆品、保健品、医疗器械）</h2><p>1、全面调整人体内分泌平衡；增强或提高免疫力；助眠；失眠；滋阴补阳</p><p>2、消炎；可促进新陈代谢；减少红血丝；产生优化细胞结构；修复受损肌肤；治愈（治愈系除外）；抗炎：活血；解毒；抗敏；脱敏；</p><p>3、减肥；清热解毒；清热祛湿；治疗；除菌；杀菌；灭菌；防菌；消毒；排毒</p><p>4、防敏；柔敏；舒敏；缓敏；脱敏；褪敏；改善敏感肌肤；改善过敏现象；降低肌肤敏感度；</p><p>5、镇定；镇静；理气；行气；活血；生肌肉；补血；安神；养脑；益气；通脉；</p><p>6、胃胀蠕动；利尿；驱寒解毒；调节内分泌；延缓更年期；补肾；祛风；生发；</p><p>7、防癌；抗癌；</p><p>8、祛疤；降血压；防治高血压；治疗；</p><p>9、改善内分泌；平衡荷尔蒙；防止卵巢及子宫的功能紊乱；去除体内毒素；</p><p>10、除湿；润燥；治疗腋臭；治疗体臭；治疗阴臭；</p><p>11、美容治疗；消除斑点；斑立净；无斑；治疗斑秃；逐层减退多种色斑：</p><p>12、毛发新生；毛发再生；生黑发；止脱；生发止脱；脂溢性脱发；病变性脱发；毛囊激活；</p><p>13、酒糟鼻；伤口愈合清除毒素；</p><p>14、缓解痉挛抽搐；减轻或缓解疾病症状；经例临床观察具有明显效果；</p><p>15、丘疹；脓疱；手癣；甲癣；体癣；头癣；股癣；脚癣；脚气；鹅掌癣；花斑癣；牛皮癣；传染性湿疹；</p><p>16、伤风感冒：经痛肌痛；头痛；腹痛；便秘；哮喘；支气管炎；消化不良；</p><p>17、刀伤；烧伤；烫伤；疮痈；毛囊炎；皮肤感染；皮肤面部痉挛等疾病名称</p><p>18、细菌、真菌、念珠菌、糠秕孢子菌、厌氧菌、牙孢菌、座疮、毛囊寄生虫等微生物名称；</p><p>19、雌性激素、雄性激素、荷尔蒙、抗生素、激素；</p><p>20、药物；中草药；中枢神经；</p><p>21、细胞再生；细胞增殖和分化；免疫力；患处；疤痕；关节痛；冻疮；冻伤；</p><p>22、皮肤细胞间的氧气交换；红肿；淋巴液；毛细血管；淋巴毒等。</p><h2 id="禁止使用迷信用语："><a href="#禁止使用迷信用语：" class="headerlink" title="禁止使用迷信用语："></a>禁止使用迷信用语：</h2><p>带来好运气，增强第六感、化解小人、增加事业运、招财进宝、健康富贵、提 升运气、有助事业、护身、平衡正负能量、消除精神压力、调和气压、逢凶化吉、时来运转、万事亨通、旺人、旺财、助吉避凶、转富招福等。</p><h2 id="禁止使用化妆品虚假宣传用语："><a href="#禁止使用化妆品虚假宣传用语：" class="headerlink" title="禁止使用化妆品虚假宣传用语："></a>禁止使用化妆品虚假宣传用语：</h2><p>特效；高效；全效；强效；速效：速白；一洗白；X天见效；X周期见效；超强；激活；全方位；全面；安全；无毒；溶脂、吸脂、燃烧脂肪；瘦身；瘦 脸；瘦腿；减肥；延年益寿；提高（保护）记忆力：提高肌肤抗刺激；消除；清除；化解死细胞；去（祛）除皱纹；平皱；修复断裂弹性（力）纤维；止脱；采用新型着色机理永不褪色；迅速修复受紫外线伤害的肌肤；更新肌肤；破坏黑色素细胞；阻断（阻碍）黑色素的形成；丰乳、丰胸、使乳房丰满、预防乳房松弛下垂（美乳、健美类化 妆品除外）；改善（促进）睡眠；舒眠等（老板综合整理出品）</p><h1 id="内容违规类-发布违法信息"><a href="#内容违规类-发布违法信息" class="headerlink" title="内容违规类 发布违法信息"></a>内容违规类 发布违法信息</h1><p><strong>内容涉及</strong>：易燃易爆，管制刀具，违法药品，毒品，捕杀野生动物，恶意曝光他人隐私，未经他人允许偷拍，盗用作品等，宣传伪科学赌博，非法集资，暴力行为，打架自残，家暴，虐待动物，体罚未成年人。</p><p><strong>内容低俗色情不雅着装</strong>：透视能见内衣内裤，特意展示敏感部位的衣服等。男 女过分亲密，以展示敏感部位，或性暗示的自拍他拍：舔手指，嘴部诱惑，舞蹈故意大幅度抖动胸部等。</p><p><strong>危险行为</strong>：危险驾驶，酒驾，不系安全带等危险的户外行为，火车轨道，高等等危险地玩非专业人表演特技，极限运动</p><p><strong>内容禁用词：</strong>药品类词汇，金钱词汇，违反社会治安类，占卜类，整形类，涉黄，赌博，烟酒类，违法类，刑拘类等。 </p><p><strong>不良价值：</strong>观违反公共秩序、良好民俗的社会价值观内容。抽烟，酗酒，辱骂他人，虐待恶搞动物的不良行为恶搞人民币，嘲笑弱势群体，卖惨营销，宣扬不正当男女关系等，违反交通，恶搞古迹名，作弊，翻越闸机，乱涂乱画等。</p><p><strong>危害未成年人身心健康的内容：</strong>未成年人穿着成人化，早恋，纹身，校园暴力，炫富攀比，成人化演绎，整蛊恶，搞惊吓未成人，无保护和儿童拍摄危险动作。</p><p><strong>搬运盗用的行为</strong>：未经允许上传他人作品。无授权转载平台的内容。无任何加工的电视电影内容。</p>]]></content>
      
      
      <categories>
          
          <category> 带货直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带货直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平台规则</title>
      <link href="/post/bfa00e34.html"/>
      <url>/post/bfa00e34.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>随着直播带货的快速普及和优惠力度的增长，目前直播带货的用户增长基本上已经持续放缓的一个阶段了，现在的这个市场基本上已经从增量到存量的一个竞争阶段。</p><h1 id="淘宝"><a href="#淘宝" class="headerlink" title="淘宝"></a>淘宝</h1><p>​淘宝是最早开始入局直播带货的，而且它本身就拥有大量的商品资源，所以在这个直播带货方面是具有天然的一定的优势的。而且他淘宝的主流用户大部分都是一线和新一线城市，且各线城市女性居多，这也促就了淘宝直播带货它最大品类是<strong>女性服装，其次是美妆、母婴、美食、珠宝</strong>这些种类丰富。但淘宝在下沉市场的渗透率还有待提高，目前仍低于快手平台。总体来说他的品类和价格跨度很大。他的整个直播风格偏向于理性、专业，同时它能带出自己的私域流量。</p><h1 id="快手"><a href="#快手" class="headerlink" title="快手"></a>快手</h1><p>​快手的话起步比淘宝稍晚，但是他依靠自身的短视频流量所以他的带货起量却比淘宝快。快手它本身主打的就是下沉市场，所以他的主流用户也大部分都是三四线城市甚至乡镇农村都有大量的覆盖，与淘宝不同的是快手的人设属性更强，像“老铁文化”、“草根文化”，展现的是更原生态的现实生活。同时它还拥有大量的打赏和带货流量。他的主要品类就是<strong>食品饮料和居家日常、3C产品</strong>。快手的品类和价格都偏低，主要分布的是工厂货和白牌商品，更能突显他的价格优势。快手的整个直播风格偏向于感性、热情。</p><h1 id="抖音"><a href="#抖音" class="headerlink" title="抖音"></a>抖音</h1><p>​相比于淘宝和快手，抖音算是比较晚进入直播带货的平台。她最大的优势也是短视频流量，所以他的带货起量也是特别快的。但是抖音的流量很难私有化，它主要通过短视频广告来实现变现。抖音的主流用户主要分布在一线二线城市，且主要以年轻时尚潮流为主。抖音的主要的品类是<strong>美妆和居家日常</strong>。总体来说抖音的品类和价格，主要是一些年轻品牌和工厂货，更适合追求时尚的用户。抖音的整个直播风格偏向于娱乐和种草，主播会利用内容人设和种草来吸引用户。</p><hr><p>​第一个：现在直播带货的玩法，已经从最开始的“灰产、擦遍、低俗”这种大众已经审美疲劳的方式转化为“一边带货，一边讲解知识”，例如：“东方甄选”。这也是去年直播带货中以<strong>内容</strong>出圈的代表作之一，同时还有一种说唱直播间的内容玩法也直接爆火。从这里你可以看出在这种存量竞争的阶段，越来越多的品牌企业开始注重直播内容。满足商品需求已经不能保证销量，现在还需要在内容上出圈才可能更大程度的获取消费者的关注。第二个：现在你也知道很多品牌都已经开始很久了的<strong>矩阵化</strong>品牌旗舰店直播间，为的就是稳住自家大本营。然后再去配合达人种草和铺量矩阵式多点营销转化，这样一来的话品牌直播间会非常全面的增长，这一点是可以看到的。第三个：直播带货以前主要以头部<strong>主播</strong>、明星为主，这也可以理解，商家为了保证销量嘛，但同时也会给予这些头部主播几乎前所未有的优惠力度。但是如果过渡依赖这些大主播的方式，显然可持续发展是很低的，这样一来平台和商家都开始针对腰部主播进行扶持，去慢慢切断对大主播的依赖性，这也更进一步确定了品牌的自播模式，以及衍生出来的矩阵化和团队化。</p>]]></content>
      
      
      <categories>
          
          <category> 带货直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带货直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带货直播整体逻辑</title>
      <link href="/post/e5c9f826.html"/>
      <url>/post/e5c9f826.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><ol><li><p>策划准备阶段：</p><ul><li><p>选择适合的直播平台：根据目标受众和产品类型选择合适的直播平台，如淘宝直播、快手、抖音等。</p></li><li><p>产品选择：挑选具有销售潜力的产品，并确保货源充足。</p></li><li><p>直播主选取：选择与产品和目标受众匹配的有影响力的直播主。</p></li><li><p>营销推广：提前宣传和推广直播时间、内容和特别活动，吸引观众关注。</p></li></ul></li><li><p>直播准备阶段：</p><ul><li>舞台布置：设置合适的背景、道具和灯光，以提升观看体验。</li><li>商品准备：将要推销的商品准备齐全，并进行展示和包装。</li><li>脚本和演讲准备：直播主需要准备脚本，确保流畅的演讲和介绍商品的能力。</li><li>技术设备准备：确保网络、摄像头、音频设备等设备正常运作。</li></ul></li><li><p>直播进行阶段：</p><ul><li>开场介绍：直播主向观众介绍直播主题、特别活动和商品背景。</li><li>商品展示：直播主向观众展示商品，详细介绍产品特点、优势和用途，并演示使用方法。</li><li>互动环节：直播主与观众进行实时互动，回答问题、解答疑惑，并与观众保持良好的互动氛围。</li><li>促销和购买链接：直播主提供购买商品的链接、二维码或优惠码，引导观众进行购买。</li><li>限时特惠和奖励：通过设置限时特惠或额外奖励鼓励观众尽快购买商品。</li><li>直播互动和分享：观众可以通过弹幕、评论、点赞等方式表达意见，并将直播分享给更多人。</li></ul></li><li><p>直播结束和后续处理：</p><ul><li><p>感谢观众和总结：直播主对观众表示感谢，并总结直播中的亮点和反馈。</p></li><li><p>数据分析和优化：分析直播期间的数据，包括观众参与度、销售数据等，以评估直播效果并做出优化调整。</p><ul><li>跟进订单和售后：直播结束后，及时处理观众的订单和售后问题，提供优质的客户服务。</li><li>直播回放和宣传：将直播内容制作成回放视频，在其他渠道进行宣传和推广，吸引更多潜在客户。</li><li>合作伙伴评估和洽谈：根据直播效果和合作伙伴的表现，评估是否继续合作或寻找新的合作机会。</li></ul><p>例子：<br>假设某家服装品牌计划进行一场带货直播活动，以下是活动的详细逻辑：</p><ol><li>策划准备阶段：品牌选择在淘宝直播进行活动，选取知名时尚博主作为直播主，挑选最新的夏季服装系列作为推广商品，并通过预告、广告等方式提前宣传活动。</li><li>直播准备阶段：在直播间设置时尚舞台背景，摆放服装展示架和灯光装饰，准备好夏季服装系列，同时直播主进行产品了解和演讲稿的准备。</li><li>直播进行阶段：直播开始时，直播主介绍活动主题和服装背景，展示夏季服装系列，详细介绍每款服装的设计理念、面料特点等，并穿着展示服装的效果。期间与观众互动，回答他们的问题，并通过淘宝直播的购买链接提供购买渠道。</li><li>直播结束和后续处理：直播结束后，直播主向观众表示感谢，并总结直播中的亮点和观众反馈。品牌团队分析直播期间的数据，包括观看人数、销售数量等，并根据数据结果进行优化调整。同时跟进观众的订单和售后服务，并将直播回放视频制作成精彩片段进行宣传推广，寻找更多的合作伙伴和机会。</li></ol><p>通过这样的带货直播活动，品牌可以有效地推广夏季服装系列，提升销售量，同时与观众建立更紧密的互动关系，并通过数据分析和优化，进一步提升活动效果和客户满意度。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 带货直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带货直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五分钟试播话术</title>
      <link href="/post/6f829358.html"/>
      <url>/post/6f829358.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>理清卖货逻辑：</p><ol><li><p>痛点2. 卖点3. 福利4. 稀缺性5. 打消顾虑</p></li><li><p>为啥要买？说场景和需求2. 为啥要买你家的？产品特色 3. 现在为啥要买？说价格优势</p></li></ol><p>哈喽，宝宝们今天给大家种草的呢，是迪士尼的婴儿手口湿巾，因为湿巾的话家家户户都需要用啊，无论家里有小朋友，老人家还是孕妇妈妈或者自己平时擦手擦嘴都要用到它，但是您平时买的啊，这种湿巾的纸质是不是特别薄？今天给大家看看咱们家的啊，纸质是非常厚实的，而且呢，它是经过了七次EDI纯水净化的，给大家看一下我们的检测报告，里面还有金银花提取物和芦荟提取物，所以在您擦手擦脸擦嘴的同时，还能够很好的去滋润我们的皮肤，包括这一包啊，量还是非常足够的。一包里面是整整80抽在里面，再给各位看一下我们整个湿巾的一个水润度啊，这是拿出来的一抽，用我的手轻轻一攥，看到了没有，里面是有很多的水分呢，都是我们的EDI纯水，所以对宝宝娇嫩的皮肤它是没有任何不好的影响的。如果你是敏敏性的皮肤，想要擦脸，包括想要擦嘴擦手都是OK的。来再给大家展示一下啊，我们整个的包装看到没有，这里是清晰的写到不含荧光剂，不含香精，不含酒精，不含防腐剂，不含增白剂。所以大家可以放心去用，那平时的话呢，去买这样的一包都是在四五块钱左右，我们今天给直播间做的朋友直接来上福利，一包80抽，直接两块九毛钱一包，还没完来再加一包，两包直接给大家两块九毛钱，所有在我们直播间给我点了关注的亮灯牌的，我还给大家安排运险险，所以回到家以后啊，大家可以先拆开包装去感受一下，我们整个纸质是比较偏厚实的。另外再给大家升级一个服务啊，朋友们过敏包退，因为这个纸质你想都是婴儿手口湿巾了，我们对这个产品是有充分的自信的，不会有任何不好的情况的发生，所以大家可以放心去入，两块九毛钱，只有50单，准备好的宝宝们记得给我们点关注，亮粉丝的灯牌，给大家安排运险险和过敏包退，我们准备倒计时五四三二一来上链接。</p>]]></content>
      
      
      <categories>
          
          <category> 带货直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带货直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题</title>
      <link href="/post/8acd50ed.html"/>
      <url>/post/8acd50ed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="如何与直播间的用户互动？"><a href="#如何与直播间的用户互动？" class="headerlink" title="如何与直播间的用户互动？"></a>如何与直播间的用户互动？</h2><ol><li><p>在直播间提用户的名字，让用户感受到自己被重视。</p></li><li><p>鼓励直播间的用户发言，回答他们的问题来增加互动交流。</p></li><li><p>产品演示和讲解，可以展示和演示产品的使用方法、特点和优势，解答用户对产品的疑问，增加用户的购买欲望。</p></li><li><p>主播可以组织一些有趣的互动游戏，如抽奖、答题或参与挑战，以吸引用户的参与并提高互动性。</p></li></ol><h2 id="如何活跃直播间气氛？调动粉丝情绪"><a href="#如何活跃直播间气氛？调动粉丝情绪" class="headerlink" title="如何活跃直播间气氛？调动粉丝情绪"></a>如何活跃直播间气氛？调动粉丝情绪</h2><ol><li><p>提前策划：在直播前提前制定好直播内容和互动环节，制定好直播目标，并告知观众。让观众对直播有期待，提高他们的参与度。</p></li><li><p>互动环节：通过互动环节，让观众和主播有更深入的互动。例如在直播间中抽奖，提问等环节，让观众积极参与，提高直播间气氛。</p></li><li><p>借助表情和动画：用表情和动画丰富直播内容能够吸引观众的注意力并增加互动的机会。例如，使用表情包来表达更加复杂的情感。</p></li><li><p>用户分享：让观众分享自己的体验和建议，可以帮助主播增加用户黏性。主播可以一边直播一边回复观众的问题和提出建议，得到观众的关注和支持。</p></li><li><p>适时分享：分享一些有趣，有灵感的内容，例如美妆、潮流、音乐和其他可吸引年轻观众的话题。</p></li><li><p>提高直播质量：提高直播质量可以提高观众的观看体验和参与意愿。例如准备好光线和声音设备，确保高清晰度画面和清晰的音质。</p></li><li><p>不同形式的直播：不要总是做一个单一的定向内容，可以考虑多维度的吸引用户，可起到意外的效果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 带货直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带货直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带货直播小白话术</title>
      <link href="/post/4f658f37.html"/>
      <url>/post/4f658f37.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="开场话术"><a href="#开场话术" class="headerlink" title="开场话术"></a>开场话术</h1><ol><li>自我介绍：欢迎大家来到某某官方旗舰店，我是本场主播小艺。（如果是服装类的介绍自己的身高体重）</li><li>（带来的福利）先给大家带来一个福利，左上角的无门槛福袋大家可以领一领，所有宝贝都是可以参与的。日常价格是**米，我直接送给大家。这个虽然我们价格是**米，但是我们线下的跟我们直播间的全部是对外不售卖的，是我们内部的VIP礼物，而今天我们直播间我直接拿出来给大家做0米的抽奖。只要帮我点了关注加了粉丝团的通通可以参与我们的抽奖。</li></ol><p> 2.1. （秒杀）我们日常的价格呢是299，但我今天直播间两位数19.9的价格给大家炸，只有开播前才是可以抢到的，之后直播里全       部都没有了。</p><p>（由于福利有限，评论的话会存在很多没有抢到的话题，这个时候不要有过多的纠缠，没必要逐个回复，而且会破坏自己的节奏）</p><p>（适当回复。抢到的宝贝们呢记得给主播亮个粉丝灯牌，这样以后来直播间就脸熟啦，没抢到的宝宝们也没关系，因为我们每天早上九点钟会开播的，开播都会给大家送福利的）</p><ol start="3"><li>（顺水推舟，承上启下）我看大家今天的热情还是蛮高的，那我就临时给大家额外准备第二波的福利，第二波福利是什么呢，就是我们今天的爆款产品）</li></ol><h1 id="讲品话术"><a href="#讲品话术" class="headerlink" title="讲品话术"></a>讲品话术</h1><ol><li><p>卖点罗列（（引人入胜）这个东西是干什么的，他有什么值得买的地方）</p><ol><li>举例服装：（要从内而外，内就是材质面料优点，外就是颜色款式优点）</li></ol></li><li><p>痛点引出（痛点就是把产品想象成解药，它在医什么病，按照这个逻辑去找痛点）</p><ol><li>举例服装：是不是梨形身材都特别显胖显臃肿？不小心买错颜色还特别会显黑（这个时候会和粉丝产生共鸣，拉近了距离，他是很希望你去帮他一把的）</li></ol></li><li><p>生活场景化（引起粉丝思考，让粉丝的脑子跟着你的节奏走，真正参与到直播间来）</p><ol><li>举例服装：有没有上班通勤穿的很休闲日常，一到约会的时候，拿不出一条像样的小裙子</li><li>颜色对比：大红色太硬了不是很日常，暗红色又显的特别的老气，勃艮第酒红色刚刚好衬你的气质</li><li>造梦式：</li></ol></li><li><p>定心丸：</p><ol><li><strong>（运费险）</strong>第一次来咱家直播间的宝宝们，担心衣服买回家不一样的也不用担心，把咱们头顶上方的关注点一点，点关注咱们都送运险险的，朋友们，我们家是做品牌的，线下全国都有专柜，给大家做专柜的售后，任何不满意，七天之内随时退。</li><li><strong>（价格低，品质平）</strong>同等质量的情况下，不会再有比我们更低的价格了。</li><li><strong>（品质高）</strong>产品质量好，只是我们的根本，后期的服务才是判断合作效果的关键。</li><li><strong>（价格低，品质平）</strong>直播间的宝宝们放心，任何一家公司都不会傻到把同等价值的东西卖到比别人更高的价格，除非这家公司压根就不想做大，除非这家公司鼠目寸光。</li><li><strong>（价格高，品质低）</strong>我们的价格确实高一点，但客户明知道花更高的价格选择我们，并不是因为他们人傻钱多，而是因为他们已经在低价和品质之间做了选择。</li><li><strong>（最是否低价格）</strong>市场竞争这么激烈，我不会傻到报高价把家人们往外送，能给你少报100，我绝不会给你少报10块，因为我们的目的是留下你，又怎么会报高价把你拒之门外。</li><li><strong>（逼单）</strong>产品质量的好坏，是你最后亲眼可见的结论，在你买到之前我说的再怎么天花乱坠，那也还是没有发生的事，接下来我说你听，今天全店赠送运险险，七天无理由，你看到的才是真的</li><li>今天全店赠送运险险，七天以内有不喜欢的宝宝们，联系我们的客服，退回来就可以了</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 带货直播 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 带货直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【2023年】五分钟注册美区AppleID，手把手教，稳定且耐用！</title>
      <link href="/post/846aa5c1.html"/>
      <url>/post/846aa5c1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a><strong>一、准备工作</strong></h2><p>1.一个能接收短信的国内手机号2.一个全新邮箱（指从没注册过Apple ID的邮箱）3.美国地址生成器（后面我会给大家提供）4.无需任何代理工具</p><p><strong>注意以下四点可以避免很多问题：</strong></p><p>出生日期：一定要设置成大于 18 周岁的日期，否则会导致部分应用由于年龄限制无法使用。</p><p>电子邮件：建议新注册一个全新的从未注册过 Apple ID 的邮箱，比如 163 邮箱、126邮箱。</p><p>手机号码：亲测，注册过中国区 Apple ID 的手机号码可以用来注册美区账号，不会产生冲突。</p><p>密码：设置密码时，密码中不要包含有名字、生日、邮箱中的信息，否则会卡在验证码那一步。</p><h2 id="二、注册教程"><a href="#二、注册教程" class="headerlink" title="二、注册教程"></a><strong>二、注册教程</strong></h2><p>为了方便大家注册，该方法全程都在手机中操作，不用借助电脑。</p><p>首先进入美国 Apple ID 注册页面，复制下方网址至 Safari 浏览器中打开即可进入。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://appleid.apple.com/account </span><br></pre></td></tr></table></figure><p>具体注册方法如下长图，跟着我的步骤走就行了，一定要严格按照我写的要求操作。</p><img src="https://images.cherain-wh.cloud/v2-3e1c026cc9396785f6c2f747d2e9bc8f_r.jpg" alt="v2-3e1c026cc9396785f6c2f747d2e9bc8f_r" style="zoom:50%;" /><p>接着需要对<strong>电子邮件&#x2F;手机号码</strong>进行验证。把收到的验证码输入进去，依次点击<strong>下一步</strong>就行了。</p><p>注册成功后，账号会自动登录，如果没登录的话重新登录一遍刚注册的账号即可。</p><p>登陆成功后，点击右上角的<img src="https://images.cherain-wh.cloud/55FD5C2F-0F4E-4797-92B6-DEEF0C70E0DB_1_201_a.jpeg" alt="55FD5C2F-0F4E-4797-92B6-DEEF0C70E0DB_1_201_a" style="zoom:25%;" />进入<strong>个人信息</strong>。</p><p>选择语言，将其修改为美国。</p><center class="half"><img src="https://images.cherain-wh.cloud/50B582E5-12D6-4BAF-BA2B-D0A4C871F372_1_201_a.jpeg" width=200/><img src="https://images.cherain-wh.cloud/4F183400-42EA-4A09-99C6-B515C9841903_1_101_o.jpeg" width=200/></center><p>返回手机桌面，将系统设置为应为：设置–通用–语言与地区–添加语言–English。</p><h2 id="三、登陆美区ID，填写信息"><a href="#三、登陆美区ID，填写信息" class="headerlink" title="三、登陆美区ID，填写信息"></a>三、登陆美区ID，填写信息</h2><p>最后进入App store，用你新注册的苹果号登陆。然后下载软件提示点选review（检查），之后就会跳出付款信息的填写，<strong>此时会看见强制填写的信用卡号等信息变成了选填。</strong></p><blockquote><p>生成地址前，建议选以下<strong>五个免税州</strong>：蒙大拿州（Montana）俄勒冈州（Oregon）</p><p>阿拉斯加州（Alaska）</p><p>特拉华州（Delaware）</p><p>新罕布什尔州（New Hampshire）</p></blockquote><p>进入<a href="https://www.shenfendaquan.com/Index/index/custom_result">美国地址生成器1</a> <a href="https://www.meiguodizhi.com/">美国地址生成器2</a> <a href="http://www.haoweichi.com/">美区地址生成器3</a> （选其一即可），生成生成街道地址、城市、邮编、电话号码等信息。<img src="https://images.cherain-wh.cloud/image-20230424171308549.png" alt="image-20230424171308549"></p><p>完善完城市街道等基本信息，点选next，就会跳出完成注册的提示啦～</p><img src="https://images.cherain-wh.cloud/iShot_2023-04-24_17.19.56.png" alt="iShot_2023-04-24_17.19.56" style="zoom:50%;" /><p>点击<strong>Continue</strong>，到这里我们的美区 Apple ID 就已经成功登录了。注册登录成功后，我们就能下载美区中的各种 App 了。</p><h2 id="四、一些需要注意的地方"><a href="#四、一些需要注意的地方" class="headerlink" title="四、一些需要注意的地方"></a>四、一些需要注意的地方</h2><p>1.设置密码时，密码中不要包含前面填写的名字、生日、邮箱中的任何信息，否则可能会卡在验证码那一步，总之就是密码尽量原创一个。</p><p>2.不要在「设置」中登录美区Apple ID，以免造成不必要的麻烦。下载美区 App 只需在 App Store 中登录即可，下载完后再换回国区账号即可，对 iCloud 等不会有任何影响。</p><p>3.如果你有在用Apple Music，切换成美区后会导致已下载的歌曲全被清空。</p><p>4.建议不要把美区 Apple ID 当成主力账号，需要下美区应用时登录就行了，以免出现啥问题。</p>]]></content>
      
      
      <categories>
          
          <category> 外区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内置模块itertools</title>
      <link href="/post/93d1f250.html"/>
      <url>/post/93d1f250.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>itertools</code> 是 Python 标准库中提供的一个工具模块，包含了很多用于迭代器和生成器操作的函数。它可以用于快速高效地构建迭代器和生成器，提高程序的效率和可读性。</p><p>其中itertools主要来分为三类函数，分别为无限迭代器、输入序列迭代器、组合生成器</p><h1 id="无限迭代器"><a href="#无限迭代器" class="headerlink" title="无限迭代器"></a>无限迭代器</h1><h4 id="1-count-start-0-step-1-：生成一个从-start-开始、以-step-为步长的无限迭代器。"><a href="#1-count-start-0-step-1-：生成一个从-start-开始、以-step-为步长的无限迭代器。" class="headerlink" title="1. count(start=0, step=1)：生成一个从 start 开始、以 step 为步长的无限迭代器。"></a>1. <code>count(start=0, step=1)</code>：生成一个从 start 开始、以 step 为步长的无限迭代器。</h4><p>如果省略了start则默认从0开始，步长默认为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> count(<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment"># 输出从 1 开始的无限计数器</span></span><br></pre></td></tr></table></figure><h4 id="2-cycle-iterable-：无限地重复-iterable-中的元素"><a href="#2-cycle-iterable-：无限地重复-iterable-中的元素" class="headerlink" title="2. cycle(iterable)：无限地重复 iterable 中的元素"></a>2. <code>cycle(iterable)</code>：无限地重复 iterable 中的元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.cycle([<span class="string">&quot;red&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;green&quot;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment"># 输出 red, green, blue, red, green, blue, ...</span></span><br></pre></td></tr></table></figure><h4 id="3-repeat-elem-n-None-：将一个元素elem重复-n-次，如果n-为-None-则无限重复。"><a href="#3-repeat-elem-n-None-：将一个元素elem重复-n-次，如果n-为-None-则无限重复。" class="headerlink" title="3. repeat(elem, n=None)：将一个元素elem重复 n 次，如果n 为 None 则无限重复。"></a>3. <code>repeat(elem, n=None)</code>：将一个元素<code>elem</code>重复 <code>n</code> 次，如果<code>n</code> 为 None 则无限重复。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> repeat</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> repeat(<span class="string">&#x27;hello&#x27;</span>, <span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment"># 输出 hello, hello, hello</span></span><br></pre></td></tr></table></figure><h1 id="组合迭代器"><a href="#组合迭代器" class="headerlink" title="组合迭代器"></a>组合迭代器</h1><h4 id="1-product-iterables-repeat-1-：求多个迭代器的笛卡尔积，repeat-表示重复次数。"><a href="#1-product-iterables-repeat-1-：求多个迭代器的笛卡尔积，repeat-表示重复次数。" class="headerlink" title="1. product(*iterables, repeat=1)：求多个迭代器的笛卡尔积，repeat 表示重复次数。"></a>1. <code>product(*iterables, repeat=1)</code>：求多个迭代器的笛卡尔积，repeat 表示重复次数。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> itertools.product([<span class="number">1</span>,<span class="number">2</span>],<span class="string">&#x27;ab&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(item) <span class="comment"># 输出 (1, &#x27;a&#x27;), (1, &#x27;b&#x27;), (2, &#x27;a&#x27;), (2, &#x27;b&#x27;)</span></span><br></pre></td></tr></table></figure><p>repeat参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> itertools.product([<span class="number">1</span>,<span class="number">2</span>],<span class="string">&#x27;ab&#x27;</span>,repeat=<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-permutations-iterable-r-None-：返回的是iterable中长度为r的排列。r默认长度为None即iterable的长度，并且是按顺序返回的，且不包含重复的结果，除非iterable内有重复的元素。"><a href="#2-permutations-iterable-r-None-：返回的是iterable中长度为r的排列。r默认长度为None即iterable的长度，并且是按顺序返回的，且不包含重复的结果，除非iterable内有重复的元素。" class="headerlink" title="2. permutations(iterable, r=None)：返回的是iterable中长度为r的排列。r默认长度为None即iterable的长度，并且是按顺序返回的，且不包含重复的结果，除非iterable内有重复的元素。"></a>2. <code>permutations(iterable, r=None)</code>：返回的是<code>iterable</code>中长度为<code>r</code>的<strong>排列</strong>。<code>r</code>默认长度为None即<code>iterable</code>的长度，并且是按顺序返回的，且不包含重复的结果，除非<code>iterable</code>内有重复的元素。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-combinations-iterable-r-：返回的是iterable中长度为r的组合。与上面的permutations不同：所谓排列，就是指从给定个数的元素中取出指定个数的元素进行排序。组合则是指从给定个数的元素中仅仅取出指定个数的元素，不考虑排序。"><a href="#3-combinations-iterable-r-：返回的是iterable中长度为r的组合。与上面的permutations不同：所谓排列，就是指从给定个数的元素中取出指定个数的元素进行排序。组合则是指从给定个数的元素中仅仅取出指定个数的元素，不考虑排序。" class="headerlink" title="3. combinations(iterable, r)：返回的是iterable中长度为r的组合。与上面的permutations不同：所谓排列，就是指从给定个数的元素中取出指定个数的元素进行排序。组合则是指从给定个数的元素中仅仅取出指定个数的元素，不考虑排序。"></a>3. <code>combinations(iterable, r)</code>：返回的是<code>iterable</code>中长度为<code>r</code>的<strong>组合</strong>。与上面的<code>permutations</code>不同：所谓排列，就是指从给定个数的元素中取出指定个数的元素进行排序。组合则是指从给定个数的元素中仅仅取出指定个数的元素，不考虑排序。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.combinations(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="4-combinations-with-replacement-iterable-r-：求-iterable-中长度为-r-的组合，允许重复元素。"><a href="#4-combinations-with-replacement-iterable-r-：求-iterable-中长度为-r-的组合，允许重复元素。" class="headerlink" title="4. combinations_with_replacement(iterable, r)：求 iterable 中长度为 r 的组合，允许重复元素。"></a>4. <code>combinations_with_replacement(iterable, r)</code>：求 iterable 中长度为 r 的<strong>组合</strong>，<strong>允许重复元素</strong>。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.combinations_with_replacement(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="有限迭代器"><a href="#有限迭代器" class="headerlink" title="有限迭代器"></a>有限迭代器</h1><p>常用函数：</p><h4 id="1-chain-iterables-：可以把多个可迭代对象组合起来，形成一个更大的迭代器。"><a href="#1-chain-iterables-：可以把多个可迭代对象组合起来，形成一个更大的迭代器。" class="headerlink" title="1. chain(*iterables)：可以把多个可迭代对象组合起来，形成一个更大的迭代器。"></a>1. <code>chain(*iterables)</code>：可以把多个可迭代对象组合起来，形成一个更大的迭代器。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.chain(<span class="string">&#x27;he&#x27;</span>,<span class="string">&#x27;she&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h</span><br><span class="line">e</span><br><span class="line">s</span><br><span class="line">h</span><br><span class="line">e</span><br></pre></td></tr></table></figure><h4 id="2-groupby-iterable-key-None-：按照某个函数分组，类似于pandas的groupby"><a href="#2-groupby-iterable-key-None-：按照某个函数分组，类似于pandas的groupby" class="headerlink" title="2. groupby(iterable,key=None)：按照某个函数分组，类似于pandas的groupby"></a>2. <code>groupby(iterable,key=None)</code>：按照某个函数分组，类似于<code>pandas</code>的<code>groupby</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(<span class="string">&#x27;AaaBBbcCAAa&#x27;</span>, <span class="keyword">lambda</span> c: c.upper()): <span class="comment"># 将所有字母大写后分组</span></span><br><span class="line">    <span class="built_in">print</span>(key,<span class="built_in">list</span>(group))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">B [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">C [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">A [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="string">&quot;a&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;a&quot;</span>:<span class="number">3</span>&#125;]</span><br><span class="line"><span class="keyword">for</span> name,group <span class="keyword">in</span> itertools.groupby(x,<span class="keyword">lambda</span> y: y[<span class="string">&#x27;a&#x27;</span>]&lt;=<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(name,<span class="built_in">list</span>(group))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span> [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>&#125;]</span><br><span class="line"><span class="literal">False</span> [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="3-accumulate-iterable-func-：对iterable内的元素进行累加"><a href="#3-accumulate-iterable-func-：对iterable内的元素进行累加" class="headerlink" title="3. accumulate(iterable [,func])：对iterable内的元素进行累加"></a>3. <code>accumulate(iterable [,func])</code>：对<code>iterable</code>内的元素进行累加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.accumulate([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>换为乘法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.accumulate([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],operator.mul):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-itertools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mycat实现mysql读写分离</title>
      <link href="/post/4b8b781e.html"/>
      <url>/post/4b8b781e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文使用环境：</p><ul><li><p>Centos8</p></li><li><p>docker20.10.21</p></li><li><p>Mysql8.0.24镜像</p></li><li><p>两个mysql容器（一主一从，已实现主从复制）</p></li><li><p>jdk1.8.0_312环境（MyCat是使用 JAVA 语言进行编写开发，由于MyCAT 中使用了 JDK7 中的一些特性，所以要求必须在 JDK7 以上的版本上运行）</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum源安装</span></span><br><span class="line">yum search jdk</span><br><span class="line"></span><br><span class="line">yum -y install java-1.8.0-openjdk.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看jdk版本</span></span><br><span class="line">java -version</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>mycat1.6.7.6下载（<a href="https://github.com/MyCATApache/Mycat-Server/releases">官网</a>）</li></ul><p><strong>本地下载</strong>：选择打包缓存下载地址，然后上传至服务器</p><p>或<strong>服务器下载</strong>：<code>wget http://dl.mycat.org.cn/1.6.7.6/20220524101549/Mycat-server-1.6.7.6-release-20220524173810-linux.tar.gz</code></p><img src="https://images.cherain-wh.cloud/image-20230322221253888.png" alt="image-20230322221253888" style="zoom:50%;" /><p><img src="https://images.cherain-wh.cloud/image-20230322222000135.png" alt="image-20230322222000135"></p><p><img src="https://images.cherain-wh.cloud/image-20230322222019928.png" alt="image-20230322222019928"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf Mycat-server-1.6.7.6-release-20220524173810-linux.tar.gz</span><br></pre></td></tr></table></figure><h2 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h2><p>conf文件夹下</p><ul><li>server.xml 连接mycat配置文件</li><li>schema.xml 数据库读写分离配置文件</li></ul><p>bin文件夹下</p><ul><li>mycat 启动mycat文件</li></ul><h2 id="指定jdk环境"><a href="#指定jdk环境" class="headerlink" title="指定jdk环境"></a>指定jdk环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd bin</span><br><span class="line">vim wrapper.conf</span><br></pre></td></tr></table></figure><p>在bin目录下，配置文件<code>wrapper.conf</code>（没有则创建）内添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrapper.jave.commend = /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-2.el8_5.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure><h2 id="配置server-xml文件"><a href="#配置server-xml文件" class="headerlink" title="配置server.xml文件"></a>配置server.xml文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入解压后的文件夹conf文件夹下</span></span><br><span class="line">cd conf</span><br><span class="line">vim server.xml</span><br></pre></td></tr></table></figure><p>进去会发现有一大堆配置，我们只需要找到user标签，修改这一项即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;proxy1&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="comment">&lt;!-- mycat登陆用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- mycat登陆密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>mytest<span class="tag">&lt;/<span class="name">property</span>&gt;</span>            <span class="comment">&lt;!-- mycat连接逻辑库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultSchema&quot;</span>&gt;</span>mytest<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- mycat连接逻辑库 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class="line"><span class="comment">                        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">                        &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">                &lt;/schema&gt;</span></span><br><span class="line"><span class="comment">        &lt;/privileges&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;mycat&quot;</span>&gt;</span><span class="comment">&lt;!-- mycat登陆用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- mycat登陆密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>mytest<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- mycat连接逻辑库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- mycat此用户只读 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultSchema&quot;</span>&gt;</span>mytest<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- mycat连接逻辑库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>整个server.xml文件展示：<a href="https://www.aliyundrive.com/s/9smA52FUUSr">https://www.aliyundrive.com/s/9smA52FUUSr</a></p><h3 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h3><ul><li><p>name&#x3D;”mycat”：通过Mycat服务连接Mysql服务的用户名mycat，可随意修改</p></li><li><p>name&#x3D;”schemas”：Mycat的逻辑库testdb，可随意修改。为了便于理解， 如图（navicate展示）</p></li></ul><p><img src="https://images.cherain-wh.cloud/image-20230322230337760.png" alt="image-20230322230337760"></p><h2 id="配置schema-xml文件"><a href="#配置schema-xml文件" class="headerlink" title="配置schema.xml文件"></a>配置schema.xml文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入解压后的文件夹conf文件夹下</span></span><br><span class="line">cd conf</span><br><span class="line">vim server.xml</span><br></pre></td></tr></table></figure><h3 id="逻辑库和分表设置"><a href="#逻辑库和分表设置" class="headerlink" title="逻辑库和分表设置"></a>逻辑库和分表设置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;testdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">randomDataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>name：对应Server.xml中配置的逻辑库名testdb</p></li><li><p>checkSQLschema：检查发给mycat的SQL是否含有库名。当该值为true时，例如执行语句 <code>select * from TESTDB.company</code> mycat会把语句修改为 <code>select * from company</code> ，会去掉库名 TESTDB</p></li><li><p>sqlMaxLimit：当该值设置为某个数值时。每条执行的SQL语句，如果没有加上limit语句，MyCat也会自动的加上所对应的值。例如设置值为100，执行select * from TESTDB.travelrecord;的效果为和执行select * from TESTDB.travelrecord limit 100;没有设置该值的话，MyCat默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。当然SQL语句中指定了limit的大小，那就不受该属性的约束。需要注意的是，如果运行的schema为非拆分库的，那么该属性不会生效。需要手动添加limit语句。</p></li><li><p>randomDataNode：一些非DQL语句在没有randomDataNode属性前是随机发送的，有了randomDataNode语句可以指定一个节点而不是随机发送</p></li><li><p>dataNode：数据节点，也就是我们所说的数据分片，指向下面dataNode的name属性，进行关联</p></li></ul><h3 id="数据节点"><a href="#数据节点" class="headerlink" title="数据节点"></a>数据节点</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;master1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mytest&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>name：与上面schema的dataNode属性保持一致</li><li>dataHost：指向下面dataHost标签中name属性值，进行关联</li><li>database：真正要使用的数据库名称</li></ul><h3 id="主机组"><a href="#主机组" class="headerlink" title="主机组"></a>主机组</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;master1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>name</code>：主机名称，与上面dataNode的dataHost属性保持一致</p></li><li><p><code>maxCon</code>：指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数。</p></li><li><p><code>minCon</code>：指定每个读写实例连接池的最小连接，初始化连接池的大小。</p></li><li><p><code>balance</code>：负载均衡类型，推荐balance设置为1，目前的取值有4种：<br>              balance&#x3D;”0”，不开启读写分离机制，所有读操作都发送到当前可用的writeHost上；<br>                    balance&#x3D;”1”，全部的readHost与stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与 M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡；<br>                    balance&#x3D;”2”，所有读操作都随机的在writeHost、readhost上分发；<br>                    balance&#x3D;”3”，所有读请求随机的分发到wiriterHost对应的readhost执行，writerHost不负担读压力；</p></li><li><p><code>writeType</code>：负载均衡类型，目前的取值有3种：</p><p>​                     writeType&#x3D;”0″, 所有写操作发送到配置的第一个writeHost，第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties；</p><p>​                     writeType&#x3D;”1″，所有写操作都随机的发送到配置的writeHost，1.5以后废弃不推荐；</p></li><li><p><code>dbType</code>：指定后端连接的数据库类型，目前支持二进制的mysql协议，还有其他使用JDBC连接的数据库。例如：mongodb、oracle、spark等。</p></li><li><p><code>dbDriver</code>：指定连接后端数据库使用的Driver，目前可选的值有native和JDBC。使用native的话，因为这个值执行的是二进制的mysql协议，所以可以使用mysql和maridb。其他类型的数据库则需要使用JDBC驱动来支持。从1.6版本开始支持postgresql的native原始协议。如果使用JDBC的话需要将符合JDBC 4标准的驱动JAR包放到MYCAT\lib目录下，并检查驱动JAR包中包括如下目录结构的文件：META-INF\services\java.sql.Driver。在这个文件内写上具体的Driver类名，例如：com.mysql.jdbc.Driver。</p></li><li><p><code>switchType</code>： switchType&#x3D;-1 表示不自动切换</p><p>​ switchType&#x3D;1 默认值，自动切换(在多个从时进行自动轮询查询)</p><p>​ switchType&#x3D;2 基于MySQL主从同步的状态决定是否切换</p></li><li><p><code>slaveThreshold</code>：定义主从复制延时阈值</p></li></ul><h3 id="心跳（健康检查）"><a href="#心跳（健康检查）" class="headerlink" title="心跳（健康检查）"></a>心跳（健康检查）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>heartbeat 标签：指明用于和后端数据库进行心跳检查的语句。例如，MySQL可以使用<code>select user()</code>，Oracle可以使用<code>select 1 from dual</code> 等</li></ul><h3 id="读写主机配置"><a href="#读写主机配置" class="headerlink" title="读写主机配置"></a>读写主机配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;master1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.17.0.2:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;proxy1&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;slave1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;172.17.0.3:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;proxy1&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>writeHost标签：用来写的主机<ul><li>host：主机名，随便定义即可</li><li>url：ip+port，如果dbDriver属性是 native，则一般为<code>address:port</code>这种形式。如果是jdbc或其他的，则需要特殊指定。</li><li>user：用户名</li><li>password：密码</li></ul></li><li>readHost标签：用来读的主机<ul><li>host：主机名，随便定义即可</li><li>url：ip+port，如果dbDriver属性是 native，则一般为<code>address:port</code>这种形式。如果是jdbc或其他的，则需要特殊指定。</li><li>user：用户名</li><li>password：密码</li></ul></li></ul><p>整个schema.xml文件展示：<a href="https://www.aliyundrive.com/s/MaXs2Ud4z6k">https://www.aliyundrive.com/s/MaXs2Ud4z6k</a></p><h2 id="配置用户权限"><a href="#配置用户权限" class="headerlink" title="配置用户权限"></a>配置用户权限</h2><p>已实现主从复制且没屏蔽自身名为mysql数据库的，在主库执行一次即可。</p><ul><li>proxy1用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;proxy1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 执行授权</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;proxy1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"># 刷新</span><br><span class="line">flush privileges;</span><br><span class="line"># 授权远程</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;proxy1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 刷新</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入解压后的文件夹bin文件夹下</span></span><br><span class="line">cd bin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">./mycat start</span><br></pre></td></tr></table></figure><p>mycat 相关命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./mycat start 启动</span><br><span class="line">./mycat stop 停止</span><br><span class="line">./mycat console 前台运行</span><br><span class="line">./mycat restart 重启服务</span><br><span class="line">./mycat pause 暂停</span><br><span class="line">./mycat status 查看启动状态</span><br></pre></td></tr></table></figure><h2 id="开启防火墙端口"><a href="#开启防火墙端口" class="headerlink" title="开启防火墙端口"></a>开启防火墙端口</h2><blockquote><p>mycat默认8066端口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙3306端口是否开放</span></span><br><span class="line">firewall-cmd --query-port=3306/tcp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开放防火墙8066端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8066/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>如果先前更改过mysql8 的密码加密方式为mysql_native_password，则需要在命令后添加<code> --default-auth=mysql_native_password</code></p></blockquote><ul><li>本服务器连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -p -uproxy1 -P8066 -h127.0.0.1</span><br></pre></td></tr></table></figure><ul><li>本地mac连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -p -uproxy1 -P8066 -h39.106.88.46 --default-auth=mysql_native_password</span><br></pre></td></tr></table></figure><ul><li>测试结果比对（详细过程不再展示）：</li></ul><p>主库数据：</p><p><img src="https://images.cherain-wh.cloud/image-20230323003430877.png" alt="image-20230323003430877"></p><p>从库数据：</p><p><img src="https://images.cherain-wh.cloud/image-20230323003513708.png" alt="image-20230323003513708"></p><p>通过mycat查出来的数据：</p><p><img src="https://images.cherain-wh.cloud/image-20230323003334225.png" alt="image-20230323003334225"></p><p>结论：与我们配置的从库查询数据一致，成功。</p><h1 id="python连接测试："><a href="#python连接测试：" class="headerlink" title="python连接测试："></a>python连接测试：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;39.106.88.46&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>: <span class="number">8066</span>,</span><br><span class="line">    <span class="string">&#x27;databases&#x27;</span>: <span class="string">&#x27;testdb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;proxy1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">URL = <span class="string">&#x27;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databases&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(**config)</span><br><span class="line">engine = create_engine(URL)</span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">&#x27;select * from t&#x27;</span></span><br><span class="line"></span><br><span class="line">data = session.execute(sql)</span><br><span class="line"><span class="built_in">print</span>(data.fetchall())</span><br><span class="line">session.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试过程报错：Unknown-system-variable-39-tx-isolation-39"><a href="#测试过程报错：Unknown-system-variable-39-tx-isolation-39" class="headerlink" title="测试过程报错：Unknown system variable &#39;tx_isolation&#39;"></a>测试过程报错：<code>Unknown system variable &#39;tx_isolation&#39;</code></h4><p>通过分析源码得知，他通过不同的服务版本执行不同的查看事务隔离级别，老版本 MySQL 比如 5 中用的是 <code>tx_isolation</code>，而在 5.7.20 版本之后，用的是 <code>transaction_isolation</code>，由于我的mysql服务已知是8.0.24，但走的确是&lt;5.7.20的版本逻辑</p><p><img src="https://images.cherain-wh.cloud/image-20230323005248916.png" alt="image-20230323005248916"></p><p><strong>通过mycat连接，查看版本号，执行命令：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> version();</span><br></pre></td></tr></table></figure><p>输出结果：5.6.24-mycat-1.6.7.6-release-20220524173810</p><p>由此可见获取到的版本号是mycat默认的版本号，与原mysql服务版本不一致。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>进入mycat安装目录，修改mycat&#x2F;conf&#x2F;server.xml配置文件，如下：</p><p><strong>将此配置修改为原mysql版本：8.0.24</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;fakeMySQLVersion&quot;</span>&gt;</span>8.0.24<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!--设置模拟的MySQL版本号--&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>fakeMySQLVersion</code>：mycat 模拟的 mysql 版本号，默认值为 5.6 版本，如非特需，不要修改这个值，目前支持设置 5.5,5.6 版本，其他版本可能会有问题。此特性从 1.6 版本开始支持。</li></ul><p><strong>最后重启：<code>./mycat restart</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql启动报错：Cannot boot server version 80024 on data directory built by version 80026. Downgrade is not supported</title>
      <link href="/post/32481e13.html"/>
      <url>/post/32481e13.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p> 环境：centos8、mysql8.0.24</p></blockquote><p>记录一次这个坑，今天上服务器使用mysql，突然发现<code>mysql -p -uroot</code>连接不上还报错，加上<code>-h 127.0.0.1</code>才能连接。就很纳闷怎么会这样，报错是缺少一个&#x2F;tmp&#x2F;mysql.sock文件。后面看了一个日志<code>iZ2ze41qg0fuzjvz3491rjZ.err</code>，里面写的内容我直接震惊了。。。<code> Cannot boot server version 80024 on data directory built by version 80026. Downgrade is not supported mysqld: Can&#39;t open file: &#39;mysql.ibd&#39; (errno: 0 - )</code></p><p>报错信息如下：</p><p><img src="https://images.cherain-wh.cloud/image-20230319015533365.png" alt="image-20230319015533365"></p><p>我一看这不是数据目录有问题吗，而且版本还不一致。立马去看了眼数据库，然后啥都没了。。就像是刚搭建的mysql。。。无语了</p><p>然后我就开始kuchikuchi一顿查：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230319020024493.png" alt="image-20230319020024493"></p><p>终于经过我的深入探索，发现上面两个文件都是mysql的数据目录。。</p><p>通过查看mysql配置文件：<code>/etc/my.cnf</code>发现<code>/www/server/data/mysql</code>是我正在使用的数据目录。</p><img src="https://images.cherain-wh.cloud/image-20230319020436508.png" alt="image-20230319020436508" style="zoom:50%;" /><p>这家伙看了一遍啥也没有啊，再看看第一个数据目录：</p><img src="https://images.cherain-wh.cloud/image-20230319020535328.png" alt="image-20230319020535328" style="zoom:50%;" /><p>这之前建的数据库什么的都在这呢，差点以为数据不见了。虚惊一场。下面说操作（困了</p><ol><li>把数据库配置文件之前<code>/www/server/data/mysql</code>全部替换成<code>/var/lib/mysql</code></li><li><code>socker=&#39;/var/lib/mysql/mysql.sock&#39;</code>这个你保持原样也可以，但是启动的时候报错：找不到<code>/tmp/mysql.sock</code>，那就<code>find / -name mysql.sock</code>，把找到的文件路径替换到这。</li><li>启动服务<code>systemctl start mysql</code></li></ol><img src="https://images.cherain-wh.cloud/image-20230319020844623.png" alt="image-20230319020844623" style="zoom:60%;" /><ol start="4"><li>我这报错了，不知道其他的会不会成。报错：<code>Different lower_case_table_names settings for server</code></li></ol><p><img src="https://images.cherain-wh.cloud/image-20230319021735326.png" alt="image-20230319021735326"></p><ol start="5"><li>去配置文件<code>my.cnf</code>，把它注销了，再启一遍，你就会发现以前的数据又回来了。</li></ol><img src="https://images.cherain-wh.cloud/image-20230319022021365.png" alt="image-20230319022021365" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql8.0更好的使用uuid函数</title>
      <link href="/post/948eead9.html"/>
      <url>/post/948eead9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>UUID 是大家常用的，是一个 128bit 的字符串，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">59</span>ab1977<span class="operator">-</span>c8ba<span class="number">-11</span>ed<span class="operator">-</span>b906<span class="number">-0242</span>ac110002</span><br></pre></td></tr></table></figure><p>UUID 是有版本的，不同版本有不同的底层结构，<em>RFC4122</em> 定义了<strong>5个</strong>版本，<a href="https://cloud.tencent.com/product/cdb?from=10680">MySQL</a> 实现的是<strong>版本1</strong>，由 <code>时间戳</code>、<code>UUID版本</code>、<code>MAC地址</code>构成</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>MySQL 中使用 UUID 是对 <code>AUTO_INCREMENT PRIMARY KEY</code>的一个很好的替代，有如下好处：</p><ul><li>keys 在不同 表、库、<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a> 中都是唯一的</li><li>安全性更好，很难猜</li><li>可以离线生成</li><li>可以简化<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>复制</li></ul><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul><li>增加了存储空间</li><li>增加了问题调试的难度</li><li>有性能问题，因为长度更长，并且无序</li></ul><h1 id="MySQL-8-0-的处理方法"><a href="#MySQL-8-0-的处理方法" class="headerlink" title="MySQL 8.0 的处理方法"></a>MySQL 8.0 的处理方法</h1><p>MySQL8.0 新增了3个函数：</p><ol><li>UUID_TO_BIN</li><li>BIN_TO_UUID</li><li>IS_UUID</li></ol><p>通过这3个函数，使我们可以更方便的应用UUID，并且是对上面提到的几点不足的一个解决方案</p><p><code>UUID_TO_BIN</code> 用于对 UUID 字符串进行二进制压缩，32字符–&gt;16bit</p><p><code>BIN_TO_UUID</code> 是相应的解压操作，16bit–&gt;32字符</p><p>用法示例:</p><ul><li>建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t (id <span class="type">binary</span>(<span class="number">16</span>) <span class="keyword">PRIMARY</span> KEY); </span><br></pre></td></tr></table></figure><ul><li>插入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">VALUES</span>(UUID_TO_BIN(UUID()));</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BIN_TO_UUID(id) <span class="keyword">FROM</span> t; </span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> BIN_TO_UUID(id); <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">586</span>bcc2d<span class="number">-9</span>a96<span class="number">-11e6</span><span class="number">-852</span>c<span class="number">-4439</span>c456d444 <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">5942e49</span>a<span class="number">-9</span>a96<span class="number">-11e6</span><span class="number">-852</span>c<span class="number">-4439</span>c456d444 <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> af0f27e2<span class="number">-9</span>aad<span class="number">-11e6</span><span class="number">-852</span>c<span class="number">-4439</span>c456d444 <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+ </span></span><br></pre></td></tr></table></figure><p>通过压缩，很好的改善了存储空间过大的问题，但还存在性能问题，无序意味着要向索引树中随机位置插入，在不能很好的利用内存的情况下，将会产生不少IO操作，也就明显的影响了性能</p><p><code>UUID_TO_BIN</code> 有一个可选的第二个参数，就是用来解决无序引起的性能问题的</p><p>把第二个参数设置为 <strong>true</strong>，将会生成连续的有序值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">VALUES</span>(UUID_TO_BIN(UUID(), <span class="literal">true</span>));</span><br></pre></td></tr></table></figure><p><code>IS_UUID</code> 可以帮助我们验证传递过来的参数是否为有效的 UUID，合法的 UUID 是由 32个十六进制字符与几个可选字符（’{‘, ‘-‘, ‘}’）构成</p><p>下面几个示例都会返回 <strong>true</strong>，是合法的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> is_uuid(<span class="string">&#x27;&#123;12345678-1234-5678-1234-567812345678&#125;&#x27;</span>); </span><br><span class="line"><span class="keyword">SELECT</span> is_uuid(<span class="string">&#x27;12345678123456781234567812345678&#x27;</span>); </span><br><span class="line"><span class="keyword">SELECT</span> is_uuid(<span class="string">&#x27;12345678-1234-5678-1234-567812345678&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mysql-proxy实现mysql读写分离</title>
      <link href="/post/d7655b1a.html"/>
      <url>/post/d7655b1a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>Mysql官方已经不建议在生产环境使用mysql-proxy。我推荐使用Mycat中间件，当然市面也有很多其他的mysql中间件。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文使用环境（由于服务器性能吃力，仅限于此了）：</p><ul><li><p>Centos8</p></li><li><p>docker20.10.21</p></li><li><p>Mysql8.0.24镜像</p></li><li><p>两个mysql容器（一主一从，已实现主从复制）</p></li><li><p>mysql-proxy下载（<a href="https://downloads.mysql.com/archives/proxy/">官网</a>）</p></li></ul><p><img src="https://images.cherain-wh.cloud/image-20230317224258268.png" alt="image-20230317224258268"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="下载解压文件到指定目录"><a href="#下载解压文件到指定目录" class="headerlink" title="下载解压文件到指定目录"></a>下载解压文件到指定目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载文件</span></span><br><span class="line">wget http://dev.mysql.com/downloads/mysql-proxy/mysql-proxy-0.8.5-linux-glibc2.3-x86-64bit.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">sudo tar zxf mysql-proxy-0.8.5-linux-glibc2.3-x86-64bit.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动并重命名</span></span><br><span class="line">sudo mv mysql-proxy-0.8.5-linux-glibc2.3-x86-64bit /usr/local/mysql-proxy</span><br></pre></td></tr></table></figure><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入mysql-proxy安装文件夹</span></span><br><span class="line">cd /usr/local/mysql-proxy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建mysql-proxy配置文件夹</span></span><br><span class="line">sudo mkdir conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建mysql-proxy日志文件夹</span></span><br><span class="line">sudo mkdir log</span><br></pre></td></tr></table></figure><h2 id="复制读写分离文件"><a href="#复制读写分离文件" class="headerlink" title="复制读写分离文件"></a>复制读写分离文件</h2><p>在我们解压好的文件夹mysql-proxy下&#x2F;share&#x2F;doc&#x2F;mysql-proxy&#x2F; 目录内，有很多已经编辑好的lua脚本文件，基本都可以直接使用。<code>rw-splitting.lua</code>是实现读写分离的脚本文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/local/mysql-proxy/share/doc/mysql-proxy/rw-splitting.lua /usr/local/mysql-proxy/conf</span><br></pre></td></tr></table></figure><h2 id="配置读写分离文件"><a href="#配置读写分离文件" class="headerlink" title="配置读写分离文件"></a>配置读写分离文件</h2><blockquote><p>这是为了方便测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/mysql-proxy/conf/rw-splitting.lua</span><br></pre></td></tr></table></figure><p>min_idle_connections &#x3D; 1（默认超过4个连接数时，才开始读写分离，改为1）<br>       max_idle_connections &#x3D; 2（默认8，修改为2或1）</p><p><img src="https://images.cherain-wh.cloud/image-20230317230418379.png" alt="image-20230317230418379"></p><h2 id="配置主从数据库共用用户"><a href="#配置主从数据库共用用户" class="headerlink" title="配置主从数据库共用用户"></a>配置主从数据库共用用户</h2><p>主库和从库都要设置到</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;proxy1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 执行授权</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;proxy1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"># 刷新</span><br><span class="line">flush privileges;</span><br><span class="line"># 授权远程</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;proxy1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 刷新</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="配置mysql-proxy启动文件"><a href="#配置mysql-proxy启动文件" class="headerlink" title="配置mysql-proxy启动文件"></a>配置mysql-proxy启动文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/local/mysql-proxy/conf/mysql-proxy.conf</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[mysql-proxy]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行mysql-proxy用户</span></span><br><span class="line">user = root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主从mysql共有的用户</span></span><br><span class="line">admin-username = proxy1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主从mysql共有的用户密码</span></span><br><span class="line">admin-password = 123456</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监听所有IP的4000端口,如果不加端口，默认4040</span></span><br><span class="line">proxy-address = 0.0.0.0:4000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行写的数据库server</span></span><br><span class="line">proxy-backend-addresses = 39.106.88.46:3307</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行读的数据库server</span></span><br><span class="line">proxy-read-only-backend-addresses = 39.106.88.46:3308</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置读写分离脚本</span></span><br><span class="line">proxy-lua-script = /usr/local/mysql-proxy/conf/rw-splitting.lua</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pid文件存放位置</span></span><br><span class="line">pid-file = /usr/local/mysql-proxy/log/mysql-proxy.pid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志文件</span></span><br><span class="line">log-file = /usr/local/mysql-proxy/log/mysql-proxy.log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">proxy插件</span></span><br><span class="line">plugins = proxy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志文件等级，由高到低分别为(error|warning|info|message|debug)</span></span><br><span class="line">log-level = debug</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">心跳检测</span></span><br><span class="line">keepalive = true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">守护进程</span></span><br><span class="line">daemon = true</span><br></pre></td></tr></table></figure><h2 id="配置启动文件执行权限"><a href="#配置启动文件执行权限" class="headerlink" title="配置启动文件执行权限"></a>配置启动文件执行权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 660 /usr/local/mysql-proxy/conf/mysql-proxy.conf</span><br></pre></td></tr></table></figure><h2 id="添加程序启动项到自启动文件"><a href="#添加程序启动项到自启动文件" class="headerlink" title="添加程序启动项到自启动文件"></a>添加程序启动项到自启动文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>在文件加入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可能存在的其他项...</span></span><br><span class="line">/usr/local/mysql-proxy/bin/mysql-proxy --defaults-file=/usr/local/mysql-proxy/conf/mysql-proxy.conf &amp;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230317231531435.png" alt="image-20230317231531435"></p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql-proxy/bin</span><br><span class="line">sudo ./mysql-proxy --defaults-file=/usr/local/mysql-proxy/conf/mysql-proxy.conf</span><br></pre></td></tr></table></figure><p>查看运行的进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep mysql-proxy</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230317232218971.png" alt="image-20230317232218971"></p><p>查看端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tupln | grep 4000</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230317232239709.png" alt="image-20230317232239709"></p><p>关闭命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -9 mysql-proxy</span><br></pre></td></tr></table></figure><p>查看防火墙是否开启4000端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-port=4000/tcp</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230317232414495.png" alt="image-20230317232414495"></p><p>如果没有就开启防火墙4000端口，并刷新防火墙规则；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=4000/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="测试读写分离"><a href="#测试读写分离" class="headerlink" title="测试读写分离"></a>测试读写分离</h1><h2 id="连接mysql-proxy"><a href="#连接mysql-proxy" class="headerlink" title="连接mysql-proxy"></a>连接mysql-proxy</h2><ol><li>Navicate连接服务器上的mysql-proxy</li></ol><p><img src="https://images.cherain-wh.cloud/image-20230317235538622.png" alt="image-20230317235538622"></p><ol start="2"><li><p>终端连接mysql-proxy</p><blockquote><p>可能会因为mysql版本不同，通信数据有问题，造成一直中断。需重启mysql-proxy服务。</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u proxy1 -h 39.106.88.46 -P 4000 -p</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230317233919972.png" alt="image-20230317233919972"></p><h2 id="新建库-使用库-新建表-插入数据-查看记录"><a href="#新建库-使用库-新建表-插入数据-查看记录" class="headerlink" title="新建库-使用库-新建表-插入数据-查看记录"></a>新建库-使用库-新建表-插入数据-查看记录</h2><ol><li><p>navicate工具操作新建库、新建表（这里不再展示）。</p><p>终端操作新建库、新建表：</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database mytest;</span><br><span class="line">use mytest;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>), uuid <span class="type">varchar</span>(<span class="number">128</span>));</span><br></pre></td></tr></table></figure><p>navicate工具或终端插入数据、查看数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(id, name, uuid) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;test_proxy&#x27;</span>,<span class="string">&#x27;test_uuid&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure><ol start="2"><li>navicate查看数据（此时主从复制在开启状态，所以主库从库都可以查到）</li></ol><p><img src="https://images.cherain-wh.cloud/image-20230318000951383.png" alt="image-20230318000951383"></p><ol start="3"><li>在服务器从库上添加一条数据</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(id, name, uuid) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;test_proxy2&#x27;</span>,<span class="string">&#x27;test_uuid2&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>navicate查看数据</li></ol><p><img src="https://images.cherain-wh.cloud/image-20230318010215842.png" alt="image-20230318010215842"></p><ol start="5"><li>在服务器主库查看数据（由于主库不同步从库所以查不到从库刚刚添加的数据）</li></ol><p><img src="https://images.cherain-wh.cloud/image-20230318010340655.png" alt="image-20230318010340655"></p><ol start="6"><li>此时在服务器从库关闭主从复制</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><ol start="7"><li>在服务器主库插入一条数据，并查看数据（主库存在id为3的数据）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(id, name, uuid) <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">&#x27;test_proxy3&#x27;</span>,<span class="string">&#x27;test_uuid3&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230318011344612.png" alt="image-20230318011344612"></p><ol start="8"><li>navicate再次查看数据（验证了，查询查的是从库的数据，因为他没有id为3的数据。如果显示了3的数据，才是查的主库数据）</li></ol><p><img src="https://images.cherain-wh.cloud/image-20230318011635800.png" alt="image-20230318011635800"></p><ol start="9"><li>记得在从库恢复开启slave（开启后数据同步，navicate又能才能查到id为3的数据）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><p>困死了，脑子已经不清晰了，就写到这吧。。。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8防火墙开启端口</title>
      <link href="/post/cd874d76.html"/>
      <url>/post/cd874d76.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><ul><li><font color=blue>查看防火墙是否启动</font></li></ul><p>​返回的是一个简单的状态信息，如 “running” 或 “not running”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><ul><li><p><font color=green>查看所有开放的端口列表</font><br><code>firewall-cmd --zone=public --list-ports</code></p></li><li><p><font color=green>查看防火墙3306端口是否开放</font></p><p><code>firewall-cmd --query-port=3306/tcp</code></p></li><li><p><font color=green>开放防火墙3306端口</font></p><p>给予外部访问权限。通常在开启防火墙之后，我们有些服务就会访问不到，是因为服务的防火墙端口没开。</p><p><code>firewall-cmd --zone=public --add-port=3306/tcp --permanent</code><br><font size=5><strong>注意：开放端口后要重启防火墙规则生效(⬇️)</strong></font></p></li><li><p><font color=red>重启防火墙</font></p><p>重新加载防火墙规则，但不会重启防火墙服务运行的状态</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li><p><font color=blue>查看防火墙状态</font></p><p>返回的是一个详细的状态报告，其中包含了服务的运行状态、进程 ID、主进程、工作目录、日志输出等信息。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><ul><li><p><font color=red>重启防火墙</font></p><p>重启防火墙服务，会导致防火墙服务停止并重新启动，并重新加载防火墙规则，可能会影响其他依赖于该服务的应用程序。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><ul><li><p>关闭防火墙端口<br><code>firewall-cmd --remove-port=3306/tcp --permanent</code></p></li><li><p>打开防火墙<br><code>systemctl start firewalld</code></p></li><li><p>开放一段端口<br><code>firewall-cmd --zone=public --add-port=40000-45000/tcp --permanent</code></p></li><li><p>查看被监听(Listen)的端口<br><code>netstat -lntp</code></p></li><li><p>检查端口被哪个进程占用<br><code>netstat -lnp|grep 3306</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>binlog日志的三种模式</title>
      <link href="/post/35236edd.html"/>
      <url>/post/35236edd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先我们应该知道binlog日志三种模式是在配置文件的<code>binlog_format</code>进行设置。分为statement、row、mixed</p><h1 id="statement（默认）"><a href="#statement（默认）" class="headerlink" title="statement（默认）"></a>statement（默认）</h1><p>每一条会修改数据的sql都会记录到master的binlog中，slave在复制的时候sql进程会解析成和原来master端执行多相同的sql再执行。<br><strong>优点</strong>：在statement模式下首先就是解决了row模式的缺点，不需要记录每一行数据的变化减少了binlog日志量，节省了I&#x2F;O以及存储资源，提高性能。因为他只需要记录在master上所执行的语句的细节以及执行语句的上下文信息。<br><strong>缺点</strong>：在statement模式下，由于他是记录的执行语句，所以，为了让这些语句在slave端也能正确执行，那么他还必须记录每条语句在执行的时候的一些相关信息，也就是上下文信息，以保证所有语句在slave端被执行的时候能够得到和在master端执行时候相同的结果。另外就是，由于mysql现在发展比较快，很多的新功能不断的加入，使mysql的复制遇到了不小的挑战，自然复制的时候涉及到越复杂的内容，bug也就越容易出现。在statement中，目前已经发现不少情况会造成Mysql的复制出现问题，主要是修改数据的时候使用了某些特定的函数或者功能的时候会出现，比如：<code>UUID</code>、<code>LOAD DATA INFILE</code>等在复制过程可能导致数据不一致甚至出错。sleep()函数在有些版本中就不能被正确复制，在存储过程中使用了last_insert_id()函数，可能会使slave和master上得到不一致的id等等。由于row是基于每一行来记录的变化，所以不会出现，类似的问题。</p><h1 id="row"><a href="#row" class="headerlink" title="row"></a>row</h1><p>日志中会记录成每一行数据被修改的形式，然后在slave端再对相同的数据进行修改，只记录要修改的数据，只有value，不会有sql多表关联的情况。<br><strong>优点</strong>：在row模式下，bin-log中可以不记录执行的sql语句的上下文相关的信息，仅仅只需要记录那一条记录被修改了，修改成什么样了，所以row的日志内容会非常清楚的记录下每一行数据修改的细节，非常容易理解。而且不会出现某些特定情况下的存储过程和function，以及trigger的调用和出发无法被正确复制问题。<br><strong>缺点</strong>：在row模式下，所有的执行的语句当记录到日志中的时候，都将以每行记录的修改来记录，这样可能会产生大量的日志内容，比起他两种模式大很多。在一些大表中清除大量数据时在binlog中会生成很多条语句，可能导致从库延迟变大。</p><h1 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h1><p>从官方文档中看到，之前的 MySQL 一直都只有基于 statement 的复制模式，直到 5.1.5 版本的 MySQL 才开始支持 row 复制。从 5.0 开始，MySQL 的复制已经解决了大量老版本中出现的无法正确复制的问题。但是由于存储过程的出现，给 MySQL Replication 又带来了更大的新挑战。另外，看到官方文档说，从 5.1.8 版本开始，MySQL 提供了除 Statement 和 Row 之外的第三种复制模式：Mixed，实际上就是前两种模式的结合。在 Mixed 模式下，MySQL 会根据执行的每一条具体的 SQL 语句来区分对待记录的日志形式，也就是在 statement 和 row 之间选择一种。新版本中的 statment 还是和以前一样，仅仅记录执行的语句。而新版本的 MySQL 中对 row 模式也被做了优化，并不是所有的修改都会以 row 模式来记录，比如遇到表结构变更的时候就会以 statement 模式来记录，如果 SQL 语句确实就是 update 或者 delete 等修改数据的语句，那么还是会记录所有行的变更。</p><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>不同版本的mysql在主从复制要慎重，虽然mysql5.0之后都用的V4版本的binlog了，估计还是会有些坑在里面，特别是高版本为主库，低版本为从库时容易出问题。在主从复制时最好还是主库从库版本一致，至少是大版本一致。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql--添加、删除主键</title>
      <link href="/post/d1b682b1.html"/>
      <url>/post/d1b682b1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="创建表后添加主键："><a href="#创建表后添加主键：" class="headerlink" title="创建表后添加主键："></a><strong>创建表后添加主键：</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">primary</span> key(字段名);</span><br></pre></td></tr></table></figure><h4 id="创建表后设置复合主键"><a href="#创建表后设置复合主键" class="headerlink" title="创建表后设置复合主键"></a>创建表后设置复合主键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">primary</span> key(字段名,字段名...);</span><br></pre></td></tr></table></figure><h4 id="主键存在后删除主键："><a href="#主键存在后删除主键：" class="headerlink" title="主键存在后删除主键："></a>主键存在后删除主键：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">Primary</span> Key;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql--修改表结构</title>
      <link href="/post/4cddd541.html"/>
      <url>/post/4cddd541.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>建议，在实际操作中为了避免数据丢失和损坏，请先备份好表中的数据；大数据量情况下此命令可能会影响性能和稳定；</p></blockquote><h4 id="添加字段："><a href="#添加字段：" class="headerlink" title="添加字段："></a><strong>添加<font color=blue>字段</font>：</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span><span class="operator">/</span><span class="keyword">null</span>（可选，默认为<span class="keyword">null</span>） <span class="keyword">default</span> 值（可选）;</span><br></pre></td></tr></table></figure><h4 id="修改字段（数据类型）："><a href="#修改字段（数据类型）：" class="headerlink" title="修改字段（数据类型）："></a><strong>修改<font color=blue>字段</font>（数据类型）：</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 新数据类型;</span><br></pre></td></tr></table></figure><h4 id="修改字段（字段名）："><a href="#修改字段（字段名）：" class="headerlink" title="修改字段（字段名）："></a><strong>修改<font color=blue>字段</font>（字段名）：</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 新字段的数据类型;</span><br></pre></td></tr></table></figure><h4 id="修改字段（自增或主键）"><a href="#修改字段（自增或主键）" class="headerlink" title="修改字段（自增或主键）"></a>修改<font color=blue>字段</font>（自增或主键）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 字段名 字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><h4 id="删除字段："><a href="#删除字段：" class="headerlink" title="删除字段："></a><strong>删除<font color=blue>字段</font>：</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure><h4 id="删除字段（自增）"><a href="#删除字段（自增）" class="headerlink" title="删除字段（自增）"></a>删除字段（自增）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 字段名 字段名 数据类型;</span><br></pre></td></tr></table></figure><h4 id="修改表（名）："><a href="#修改表（名）：" class="headerlink" title="修改表（名）："></a><strong>修改<font color=red>表</font>（名）：</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 rename 新表名;</span><br></pre></td></tr></table></figure><h4 id="查看表结构："><a href="#查看表结构：" class="headerlink" title="查看表结构："></a><strong>查看<font color=red>表</font>结构：</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从复制数据不一致</title>
      <link href="/post/de078f.html"/>
      <url>/post/de078f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="1-关于mysql使用uuid-函数，出现主从数据不一致"><a href="#1-关于mysql使用uuid-函数，出现主从数据不一致" class="headerlink" title="1. 关于mysql使用uuid()函数，出现主从数据不一致"></a>1. 关于mysql使用uuid()函数，出现主从数据不一致</h1><p>当我们在使用<code>uuid()</code>函数时，出现主从数据不一致，基本上都是因为日志模式是statement的问题，需要改为row或mixed模式。</p><h2 id="问题复现："><a href="#问题复现：" class="headerlink" title="问题复现："></a>问题复现：</h2><p>表结构：</p><p><img src="https://images.cherain-wh.cloud/image-20230316231633426.png" alt="image-20230316231633426"></p><ol><li><strong>使用uuid函数，插入一条数据，例如（根据自身表结构插入）：</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(id,name,uuid) <span class="keyword">values</span>(<span class="number">2</span>,&quot;test_uuid&quot;,uuid());</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>在主库，查询刚刚插入的那条数据。</strong></li></ol><p><img src="https://images.cherain-wh.cloud/image-20230316223222853.png" alt="image-20230316223222853"></p><ol start="3"><li><strong>在从库，查询同步过来的数据；</strong></li></ol><p><img src="https://images.cherain-wh.cloud/image-20230316223403752.png" alt="image-20230316223403752"></p><p>我们发现，主库和从库插入的uuid字段的数据不一样。为了查找原因，我们看看binlog日志写入的内容是什么。</p><ol start="4"><li><strong>在主库执行，查找到最早的binlog文件名；</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230316225425339.png" alt="image-20230316225425339"></p><ol start="5"><li><strong>找到对应binlog文件名后，按照事件的方式来看一下 binlog。</strong>（主库）</li></ol><p>命令格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> binlog events [<span class="keyword">IN</span> <span class="string">&#x27;log_name&#x27;</span>] [<span class="keyword">FROM</span> pos] [LIMIT [<span class="keyword">offset</span>,] row_count];</span><br></pre></td></tr></table></figure><ul><li>log_name：可以指定要查看的 binlog 日志文件名，如果不指定的话，表示查看最早的 binlog 文件。</li><li>pos：从哪个 pos 点开始查看，凡是 binlog 记录下来的操作都有一个 pos 点，这个其实就是相当于我们可以指定从哪个操作开始查看日志，如果不指定的话，就是从该 binlog 的开头开始查看。</li><li>offset：这是是偏移量，不指定默认就是 0。</li><li>row_count：查看多少行记录，不指定就是查看所有。</li></ul><ol start="6"><li><strong>我这里就从 pos 为 317 的位置开始，你不确定就去掉命令里FROM参数，表示从头查看。</strong>（主库）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> binlog events <span class="keyword">IN</span> <span class="string">&#x27;mall-mysql-bin.000002&#x27;</span> <span class="keyword">FROM</span> <span class="number">317</span>;</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230316230243452.png" alt="image-20230316230243452"></p><ol start="7"><li><strong>这里我们可以看到，主库binlog日志中写入的也是uuid()，这样被同步到从库slave的话，从库照着一样的执行一遍，就必然会出现结果不一致的情况。uuid函数每次执行的结果都不一样。</strong></li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>这是因为我们的配置文件 binlog_format 格式默认是<code>statement</code>。关于binlog日志的三种模式自行百度或看在本博客搜索了解。</p><p>配置文件目录：<code>/etc/mysql/my.cnf</code>或<code>/etc/mysql/mysql.conf.d</code></p><p><img src="https://images.cherain-wh.cloud/image-20230316223819711.png" alt="image-20230316223819711"></p><ol><li><p><font color=blue>把主库和从库的配置文件都修改为：</font><code>binlog_format=row </code>或<code>binlog_format=mixed</code>，都可以解决。</p></li><li><p><font color=blue>修改完配置文件后，必须重启mysql服务。</font></p></li><li><p>然后，自己重新插入一条看看，uuid字段的值是否一样了。</p></li></ol><p><img src="https://images.cherain-wh.cloud/image-20230316231924586.png" alt="image-20230316231924586"></p><p><img src="https://images.cherain-wh.cloud/image-20230316231947012.png" alt="image-20230316231947012"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建Mysql主从复制</title>
      <link href="/post/4a9bb5f6.html"/>
      <url>/post/4a9bb5f6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 MySQL 主从复制中，主库负责将写入的数据记录到二进制日志（binary log）中，并为每一个从节点生成一个log dump 线程，用来读取binary log文件，在读取时会给该日志文件加一把锁，读取完成后释放，再给从库 I&#x2F;O 线程传输 Binlog 数据。同时，从库的 I&#x2F;O 线程会去连接主库去请求主库的 Binlog，并将得到的 Binlog 解析为各类Events写到本地的 relay log (中继日志)文件中。然后通过sql线程将 relay log (中继日志)文件中的数据写入到自己的数据库中。这样，从服务器上的数据就与主服务器上的数据保持一致了。</p><p><img src="https://images.cherain-wh.cloud/1436863-20220420212056500-1215622433.png" alt="1436863-20220420212056500-1215622433"></p><p>环境：centos8  docker   mysql:8.0.24</p><ul><li>没有mysql 环境的安装</li></ul><p><code>docker pull mysql:8.0.24</code></p><h1 id="创建主库"><a href="#创建主库" class="headerlink" title="创建主库"></a>创建主库</h1><h2 id="创建master库命令："><a href="#创建master库命令：" class="headerlink" title="创建master库命令："></a>创建master库命令：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-master --privileged=true -v /mydata/mysql-master/log:/var/log/mysql -v /mydata/mysql-master/data:/var/lib/mysql -v /mydata/mysql-master/conf:/etc/mysql -v /mydata/mysql-master/mysql-files:/var/lib/mysql-files -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.24</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：使用mysql8镜像时，当指定了外部配置文件与外部存储路径时，也需要指定 &#x2F;var&#x2F;lib&#x2F;mysql-files的外部目录，所以在主机新建&#x2F;home&#x2F;mysql&#x2F;mysql-files目录，在启动容器时需要加上：-v &#x2F;mydata&#x2F;mysql-master&#x2F;mysql-files:&#x2F;var&#x2F;lib&#x2F;mysql-files</p></blockquote><h2 id="进入-x2F-mydata-x2F-mysql-master-x2F-conf目录下新建my-cnf"><a href="#进入-x2F-mydata-x2F-mysql-master-x2F-conf目录下新建my-cnf" class="headerlink" title="进入&#x2F;mydata&#x2F;mysql-master&#x2F;conf目录下新建my.cnf"></a>进入&#x2F;mydata&#x2F;mysql-master&#x2F;conf目录下新建my.cnf</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置server_id，注意主从的server_id不能一样</span></span></span><br><span class="line">server_id=101 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定不需要同步的数据库名称</span></span></span><br><span class="line">binlog-ignore-db=mysql  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 开启二进制日志功能</span></span></span><br><span class="line">log-bin=mall-mysql-bin  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置二进制日志使用内存大小（事务）</span></span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置使用的二进制日志格式（mixed,statement,row）</span></span></span><br><span class="line">binlog_format=mixed  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span></span><br><span class="line">expire_logs_days=7  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>当我们搭建<code>MySQL</code>集群时，自然需要完成数据库的主从同步来保证数据一致性。而主从同步的方式也分很多种，一主多从、链式主从、多主多从，根据你的需要来进行设置。但只要你需要主从同步，就一定要注意<code>server-id</code>的配置，否则会出现主从复制异常。</p><p><code>server-id</code>用于标识数据库实例，防止在链式主从、多主多从拓扑中导致<code>SQL</code>语句的无限循环：</p><ol><li>标记<code>binlog event</code>的源实例</li><li>过滤主库<code>binlog</code>，当发现<code>server-id</code>相同时，跳过该<code>event</code>执行，避免无限循环执行。</li></ol><p>当主库和从库server_id重复时，从库会跳过所有主库同步的数据，导致主从数据的不一致。</p><p>当两个从库server_id重复时，会导致从库跟主库的连接时断时连，产生大量异常。根据<code>MySQL</code>的设计，主库和从库通过事件机制进行连接和同步，当新的连接到来时，如果发现<code>server-id</code>相同，主库会断开之前的连接并重新注册新连接。当<code>A</code>库连接上主库时，此时<code>B</code>库连接到来，会断开<code>A</code>库连接，<code>A</code>库再进行重连，周而复始导致大量异常信息。</p><p>常用的server_id方法：随机数、时间戳、IP地址+端口</p><hr><h2 id="重启实例"><a href="#重启实例" class="headerlink" title="重启实例"></a>重启实例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-master</span><br></pre></td></tr></table></figure><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-master /bin/bash</span><br></pre></td></tr></table></figure><h2 id="登陆mysql"><a href="#登陆mysql" class="headerlink" title="登陆mysql"></a>登陆mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h2 id="主库创建授权用户"><a href="#主库创建授权用户" class="headerlink" title="主库创建授权用户"></a>主库创建授权用户</h2><blockquote><p>因为我们是mysql8.0往上的版本，所以需要先创建用户</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;slave1&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行授权</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;slave1&#x27;@&#x27;%&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">授权远程</span></span><br><span class="line">ALTER USER &#x27;slave1&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="创建从库"><a href="#创建从库" class="headerlink" title="创建从库"></a>创建从库</h1><h2 id="创建从库命令："><a href="#创建从库命令：" class="headerlink" title="创建从库命令："></a>创建从库命令：</h2><blockquote><ol><li>注意替换–name后面的容器名</li><li>注意替换映射路径-v后面的 本地服务器地址：容器地址（别和主库重复了！）</li><li>注意-p后面的映射端口</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-slave --privileged=true -v /mydata/mysql-slave/log:/var/log/mysql -v /mydata/mysql-slave/data:/var/lib/mysql -v /mydata/mysql-slave/conf:/etc/mysql -v /mydata/mysql-slave/mysql-files:/var/lib/mysql-files -p 3308:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.24</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="进入-x2F-mydata-x2F-mysql-slave-x2F-conf目录下新建my-cnf"><a href="#进入-x2F-mydata-x2F-mysql-slave-x2F-conf目录下新建my-cnf" class="headerlink" title="进入&#x2F;mydata&#x2F;mysql-slave&#x2F;conf目录下新建my.cnf"></a>进入&#x2F;mydata&#x2F;mysql-slave&#x2F;conf目录下新建my.cnf</h2><blockquote><p>注意 server_id不能重复！</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置server_id</span></span></span><br><span class="line">server_id=102</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定不需要同步的数据库名称</span></span></span><br><span class="line">binlog-ignore-db=mysql  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span></span></span><br><span class="line">log-bin=mall-mysql-slave1-bin  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置二进制日志使用内存大小（事务）</span></span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置使用的二进制日志格式（mixed,statement,row）</span></span></span><br><span class="line">binlog_format=mixed  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span></span><br><span class="line">expire_logs_days=7  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span></span><br><span class="line">slave_skip_errors=1062  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># relay_log配置中继日志</span></span></span><br><span class="line">relay_log=mall-mysql-relay-bin  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span></span><br><span class="line">log_slave_updates=1  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># slave设置为只读（具有super权限的用户除外）</span></span></span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure><p> <code>read_only=1</code>只读模式，限定的是普通用户进行数据修改的操作，但不会限定具有super权限的用户的数据修改操作。只有<code>super_read_only=on</code>会限定具有super权限的用户的数据修改操作了，一旦限定主从复制也会被阻止写入。<code>read_only=1</code>可读写模式，一般从库不建议这样使用。</p><h2 id="重启mysql-slave"><a href="#重启mysql-slave" class="headerlink" title="重启mysql-slave"></a>重启mysql-slave</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-slave</span><br></pre></td></tr></table></figure><h2 id="在主数据库中查看主从同步状态"><a href="#在主数据库中查看主从同步状态" class="headerlink" title="在主数据库中查看主从同步状态"></a>在主数据库中查看主从同步状态</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><p>记录<code>File</code>和<code>Position</code>后面会用到。</p><p><img src="https://images.cherain-wh.cloud/image-20230315190840753.png" alt="image-20230315190840753"></p><h2 id="查看docker容器对应的IP地址："><a href="#查看docker容器对应的IP地址：" class="headerlink" title="查看docker容器对应的IP地址："></a>查看docker容器对应的IP地址：</h2><blockquote><p>最下面有一个：”IPAddress”:”xxx.xx.x.x”，就是容器的IP地址，记录后面会用到</p></blockquote><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230315221944254.png" alt="image-20230315221944254"></p><h2 id="进入从容器"><a href="#进入从容器" class="headerlink" title="进入从容器"></a>进入从容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-slave /bin/bash</span><br></pre></td></tr></table></figure><h2 id="登陆mysql-1"><a href="#登陆mysql-1" class="headerlink" title="登陆mysql"></a>登陆mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure><h2 id="在从数据库中配置主从复制"><a href="#在从数据库中配置主从复制" class="headerlink" title="在从数据库中配置主从复制"></a>在从数据库中配置主从复制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&#x27;172.17.0.2&#x27;, master_user=&#x27;slave1&#x27;, master_password=&#x27;123456&#x27;, master_port=3306, master_log_file=&#x27;mall-mysql-bin.000001&#x27;, master_log_pos=3411, master_connect_retry=30;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数介绍：</p><ul><li>master_host：主数据库的IP地址<font color=blue>（刚刚查询的docker容器的IP，或服务器IP）</font>；</li><li>master_port：主数据库的运行端口<font color=blue>（容器内部的mysql端口3306，如果是服务器IP就按照启动时映射端口）</font>；</li><li>master_user：在主数据库创建的用于同步数据的用户账号<font color=blue>（注意替换）</font>；</li><li>master_password：在主数据库创建的用于同步数据的用户密码；</li><li>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数<font color=blue>（刚刚查询的File）</font>；</li><li>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数<font color=blue>（刚刚查询的Position）</font></li><li>master_connect_retry：连接失败重试的时间间隔，单位为秒。</li></ul><h2 id="从数据库开启主从同步"><a href="#从数据库开启主从同步" class="headerlink" title="从数据库开启主从同步"></a>从数据库开启主从同步</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><h2 id="在从数据库中查看主从同步状态"><a href="#在从数据库中查看主从同步状态" class="headerlink" title="在从数据库中查看主从同步状态"></a>在从数据库中查看主从同步状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230315191444892.png" alt="image-20230315191444892"></p><blockquote><p>注意：如果此时你的主从复制命令配置的有问题，先停止<code>stop slave;</code>再修改最后启动<code>start slave;</code></p></blockquote><h3 id="可能你还会报错："><a href="#可能你还会报错：" class="headerlink" title="可能你还会报错："></a>可能你还会报错：</h3><ol><li><p><strong>报错</strong>：</p><p><img src="https://images.cherain-wh.cloud/image-20230315221201852.png" alt="image-20230315221201852"></p></li></ol><p>基本上是配置主从<code>change master命令</code>的问题。。。</p><ol start="2"><li><strong>报错：</strong><code>1 message: Authentication plugin &#39;caching_sha2_password&#39; reported error: Authentication requires secure connection.</code></li></ol><p>解决方案（在主库下执行）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">SELECT plugin FROM `user` where user = &#x27;slave1&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230315192009345.png" alt="image-20230315192009345"></p><p>报错解析：这其实是主库slave1的plugin是caching_sha2_password 导致连接不上，修改为mysql_native_password即可解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;slave1&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230315191936617.png" alt="image-20230315191936617"></p><h2 id="再次查看从数据库的状态"><a href="#再次查看从数据库的状态" class="headerlink" title="再次查看从数据库的状态"></a>再次查看从数据库的状态</h2><blockquote><p>直到状态都显示为Yes才可以</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><h1 id="测试主从复制"><a href="#测试主从复制" class="headerlink" title="测试主从复制"></a>测试主从复制</h1><h2 id="主库：新建库-使用库-新建表-插入数据-查看记录"><a href="#主库：新建库-使用库-新建表-插入数据-查看记录" class="headerlink" title="主库：新建库-使用库-新建表-插入数据-查看记录"></a>主库：新建库-使用库-新建表-插入数据-查看记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database test;</span><br><span class="line">use test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>), uuid <span class="type">varchar</span>(<span class="number">128</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(id, name, uuid) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;hello&#x27;</span>,uuid());</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="从库：使用库-查看记录"><a href="#从库：使用库-查看记录" class="headerlink" title="从库：使用库-查看记录"></a>从库：使用库-查看记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use test;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主从记录对比"><a href="#主从记录对比" class="headerlink" title="主从记录对比"></a>主从记录对比</h2><p><img src="https://images.cherain-wh.cloud/image-20230317141503364.png" alt="image-20230317141503364"></p><h2 id="如果到这发现你的数据没同步过来"><a href="#如果到这发现你的数据没同步过来" class="headerlink" title="如果到这发现你的数据没同步过来"></a>如果到这发现你的数据没同步过来</h2><p>先确定从数据的状态，看看有没有报错信息；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><p>看看是不是下图这种类似的错误，基本上以下命令都能解决（其他问题就自己解决啦）。</p><p><img src="https://images.cherain-wh.cloud/image-20230315192637061.png" alt="image-20230315192637061"></p><p>报错解析：这是因为在docker中主从同步的时候产生的：原因是我删除了主库中从库没有的数据库，我也没想到还会导致集群宕机，解决方法就是在业务不保证数据强一致性的情况下，可以选择忽略，继续同步让指针往下移动：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">GLOBAL</span> SQL_SLAVE_SKIP_COUNTER<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><h1 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h1><p>从<strong>创建从库</strong>开始，再配置一个从库就OK。注意挂载目录、容器名、端口号记得改</p><h1 id="多主多从"><a href="#多主多从" class="headerlink" title="多主多从"></a>多主多从</h1><p>有了上面一主多从的经验，对于多主多从，我们就可以举一反三了。多主说明任何一个主库数据有修改其他主库也会被同步修改。也就是这两个主库互为主-从关系，互相监控对方数据的变化，并且做出同样响应的改变，从而保证两个数据库的变化都会同步到对方的数据库中。</p><p>配置多主多从思路：</p><ol><li>创建另一个主库容器（mysql-master2）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-master2 --privileged=true -v /mydata/mysql-master2/log:/var/log/mysql -v /mydata/mysql-master2/data:/var/lib/mysql -v /mydata/mysql-master2/conf:/etc/mysql -v /mydata/mysql-master2/mysql-files:/var/lib/mysql-files -p 3310:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.24</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>修改配置文件my.cnf，重启mysql服务或重启容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 设置server_id，注意server_id不能一样</span><br><span class="line">server_id<span class="operator">=</span><span class="number">104</span></span><br><span class="line">## 指定不需要同步的数据库名称</span><br><span class="line">binlog<span class="operator">-</span>ignore<span class="operator">-</span>db<span class="operator">=</span>mysql  </span><br><span class="line">## 开启二进制日志功能</span><br><span class="line">log<span class="operator">-</span>bin<span class="operator">=</span>mall<span class="operator">-</span>mysql<span class="operator">-</span>bin  </span><br><span class="line">## 设置二进制日志使用内存大小（事务）</span><br><span class="line">binlog_cache_size<span class="operator">=</span><span class="number">1</span>M  </span><br><span class="line">## 设置使用的二进制日志格式（mixed,statement,<span class="type">row</span>）</span><br><span class="line">binlog_format<span class="operator">=</span>mixed  </span><br><span class="line">## 二进制日志过期清理时间。默认值为<span class="number">0</span>，表示不自动清理。</span><br><span class="line">expire_logs_days<span class="operator">=</span><span class="number">7</span>  </span><br><span class="line">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span><br><span class="line">## 如：<span class="number">1062</span>错误是指一些主键重复，<span class="number">1032</span>错误是因为主从数据库数据不一致</span><br><span class="line">slave_skip_errors<span class="operator">=</span><span class="number">1062</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建授权用户（在mysql-master2的数据库内，用来给mysql-master连接使用的）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;master1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 执行授权</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;master1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"># 刷新</span><br><span class="line">flush privileges;</span><br><span class="line"># 授权远程</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;master1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 刷新</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建授权用户（在mysql-master的数据库内，用来给mysql-master2连接使用的）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;master2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 执行授权</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;master2&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"># 刷新</span><br><span class="line">flush privileges;</span><br><span class="line"># 授权远程</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;master2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 刷新</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ol start="5"><li>配置主从复制（在mysql-master2的数据库内，连接mysql-master）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;172.17.0.2&#x27;</span>, master_user<span class="operator">=</span><span class="string">&#x27;master2&#x27;</span>, master_password<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>, master_port<span class="operator">=</span><span class="number">3306</span>, master_log_file<span class="operator">=</span><span class="string">&#x27;mall-mysql-bin.000001&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">4</span>, master_connect_retry<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>配置主从复制（在mysql-master的数据库内，连接mysql-master2）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;172.17.0.3&#x27;</span>, master_user<span class="operator">=</span><span class="string">&#x27;master1&#x27;</span>, master_password<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>, master_port<span class="operator">=</span><span class="number">3306</span>, master_log_file<span class="operator">=</span><span class="string">&#x27;mall-mysql-bin.000001&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">1312</span>, master_connect_retry<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>测试主主复制（在mysql-master2数据库内）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database test2;</span><br><span class="line">use test2;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>), uuid <span class="type">varchar</span>(<span class="number">128</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(id, name, uuid) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;hello&#x27;</span>,uuid());</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure><p><img src="https://images.cherain-wh.cloud/image-20230317142149256.png" alt="image-20230317142149256"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map（）函数</title>
      <link href="/post/e1b02c3d.html"/>
      <url>/post/e1b02c3d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python 的 map() 函数是一个内置函数，用于对一个可迭代对象中的所有元素应用一个给定的函数，返回一个新的可迭代对象，其中包含应用函数后的结果。 </p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>map() 函数的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(function, iterable, ...)</span><br></pre></td></tr></table></figure><p>其中，function 表示要应用的函数，iterable 表示要迭代的对象，可以是列表、元组、集合、字典等可迭代对象。在 map() 函数中，可以同时传入多个可迭代对象，这些可迭代对象的元素将被一一对应传入 function 函数中进行处理。 map() 函数的返回值是一个迭代器，可以通过 list() 函数将其转换为列表，也可以直接使用 for 循环遍历其元素。 </p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>下面是一个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">result = <span class="built_in">map</span>(square, lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result)) <span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><p>在这个示例中，定义了一个函数 square()，用于计算一个数的平方。然后，创建一个包含整数 1 到 5 的列表 lst。通过 map() 函数对 lst 中的每个元素应用 square() 函数，得到一个新的迭代器 result。最后，通过 list() 函数将 result 转换为列表并输出。</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">lst = <span class="string">&#x27;Mon Tue Wed Thu Fri Sat Sun&#x27;</span>.split()</span><br><span class="line"><span class="built_in">print</span>(pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).<span class="built_in">map</span>(pd.Series(lst)))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>    Tue</span><br><span class="line"><span class="number">1</span>    Wed</span><br><span class="line"><span class="number">2</span>    Thu</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>getattr获取对象的属性或方法</title>
      <link href="/post/9b48d52.html"/>
      <url>/post/9b48d52.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 Python 中，getattr() 是一个内置函数，用于获取一个对象的属性或方法。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>它的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="built_in">object</span>, name[, default])</span><br></pre></td></tr></table></figure><p>其中，object 表示要获取属性或方法的对象，name 表示要获取的属性或方法名称，default 是可选参数，表示如果对象中不存在该属性或方法时，返回的默认值，默认值为 None。 如果对象存在属性或方法 name，则返回该属性或方法。如果对象不存在属性或方法 name，则根据 default 参数的值进行处理。如果 default 未提供，则抛出 AttributeError 异常；如果 default 已提供，则返回该默认值。</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>举个例子，假设有一个类 Person，其中有属性 name 和方法 say_hello：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Hello, my name is <span class="subst">&#123;self.name&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure><p>那么可以使用 getattr() 函数来获取实例 p 的属性 name 和方法 say_hello：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = Person(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(p, <span class="string">&quot;name&quot;</span>)) <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">getattr</span>(p, <span class="string">&quot;say_hello&quot;</span>)() <span class="comment"># Hello, my name is Tom.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getattr</span>(p, <span class="string">&quot;age&quot;</span>, <span class="number">18</span>)) <span class="comment"># 18</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，p 是 Person 类的一个实例，由于它具有属性 name 和方法 say_hello，因此第二个和第三个调用返回相应的值。而由于 p 没有属性 age，因此第四个调用返回提供的默认值 18。 getattr() 函数常用于在运行时动态地获取对象的属性或方法，从而在代码中进行相应的处理。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-getattr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hasattr判断对象是否有某属性或方法</title>
      <link href="/post/5af4e2b4.html"/>
      <url>/post/5af4e2b4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python 内置函数 <strong>hasattr() 用于判断一个对象是否具有指定的属性或方法</strong>。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>它的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hasattr</span>(<span class="built_in">object</span>, name)</span><br></pre></td></tr></table></figure><p>其中，object 表示要被检查的对象，name 表示要检查的属性或方法名称。 如果对象 object 中存在属性或方法 name，则返回 True，否则返回 False。</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p> 举个例子，假设有一个类 Person，其中有属性 name 和方法 say_hello：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Hello, my name is <span class="subst">&#123;self.name&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure><p>那么可以使用 hasattr() 函数来检查实例 p 是否具有属性 name 和方法 say_hello：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = Person(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(p, <span class="string">&quot;name&quot;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(p, <span class="string">&quot;say_hello&quot;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(p, <span class="string">&quot;age&quot;</span>)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，p 是 Person 类的一个实例，由于它具有属性 name 和方法 say_hello，因此第二个和第三个调用返回 True。而由于 p 没有属性 age，因此第四个调用返回 False。 hasattr() 函数常用于判断一个对象是否具有某种功能或特性，从而在代码中进行相应的处理。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-hasattr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--时间序列--索引</title>
      <link href="/post/a7f5b6ca.html"/>
      <url>/post/a7f5b6ca.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="时间序列索引"><a href="#时间序列索引" class="headerlink" title="时间序列索引"></a>时间序列索引</h1><h2 id="1-字符串创建的索引"><a href="#1-字符串创建的索引" class="headerlink" title="1. 字符串创建的索引"></a>1. 字符串创建的索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ts = pd.Series([<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>],index=[<span class="string">&#x27;2018-04-12&#x27;</span>, <span class="string">&#x27;2018-05-12&#x27;</span>,</span><br><span class="line">                                                     <span class="string">&#x27;2022-04-12&#x27;</span>, <span class="string">&#x27;2022-05-12&#x27;</span>,</span><br><span class="line">                                                     <span class="string">&#x27;2023-04-12&#x27;</span>, <span class="string">&#x27;2023-05-12&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(ts)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-04-<span class="number">12</span>    <span class="number">111</span></span><br><span class="line"><span class="number">2018</span>-05-<span class="number">12</span>    <span class="number">222</span></span><br><span class="line"><span class="number">2022</span>-04-<span class="number">12</span>    <span class="number">333</span></span><br><span class="line"><span class="number">2022</span>-05-<span class="number">12</span>    <span class="number">444</span></span><br><span class="line"><span class="number">2023</span>-04-<span class="number">12</span>    <span class="number">555</span></span><br><span class="line"><span class="number">2023</span>-05-<span class="number">12</span>    <span class="number">666</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>输出解析：这里看到我们的数据索引是一组年月日的数据格式，但他的数据类型并不是时间序列，而是字符串。</p><h2 id="2-时间戳创建索引"><a href="#2-时间戳创建索引" class="headerlink" title="2. 时间戳创建索引"></a>2. 时间戳创建索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dates = [pd.Timestamp(<span class="string">&#x27;2018-04-12&#x27;</span>), pd.Timestamp(<span class="string">&#x27;2018-05-12&#x27;</span>),</span><br><span class="line">         pd.Timestamp(<span class="string">&#x27;2022-04-12&#x27;</span>), pd.Timestamp(<span class="string">&#x27;2022-05-12&#x27;</span>),</span><br><span class="line">         pd.Timestamp(<span class="string">&#x27;2023-04-12&#x27;</span>), pd.Timestamp(<span class="string">&#x27;2023-05-12&#x27;</span>)]</span><br><span class="line">values = [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line"></span><br><span class="line">s = pd.Series(values, index=dates)</span><br><span class="line"><span class="comment"># 根据时间戳索引进行数据选择</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;2022-04-12&#x27;</span>])  <span class="comment"># 333</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;2022-04-12&#x27;</span>:<span class="string">&#x27;2023-01-04&#x27;</span>]) </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">333</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span>-04-<span class="number">12</span>    <span class="number">333</span></span><br><span class="line"><span class="number">2022</span>-05-<span class="number">12</span>    <span class="number">444</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p><code>pandas.Timestamp</code>对象可以用作时间戳索引，对于时间序列数据的处理非常方便</p><h2 id="3-DatetimeIndex-函数创建时间戳索引："><a href="#3-DatetimeIndex-函数创建时间戳索引：" class="headerlink" title="3. DatetimeIndex () 函数创建时间戳索引："></a>3. DatetimeIndex () 函数创建时间戳索引：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 DatetimeIndex() 函数 转换为时间戳索引</span></span><br><span class="line">index_date = pd.DatetimeIndex([<span class="string">&#x27;2018-04-12&#x27;</span>, <span class="string">&#x27;2018-05-12&#x27;</span>,</span><br><span class="line">                               <span class="string">&#x27;2022-04-12&#x27;</span>, <span class="string">&#x27;2022-05-12&#x27;</span>,</span><br><span class="line">                               <span class="string">&#x27;2023-04-12&#x27;</span>, <span class="string">&#x27;2023-05-12&#x27;</span>])</span><br><span class="line">df_data = pd.Series([<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>], index=index_date)</span><br><span class="line"><span class="built_in">print</span>(df_data)</span><br><span class="line"><span class="comment"># 优点</span></span><br><span class="line"><span class="built_in">print</span>(df_data[<span class="string">&quot;2018&quot;</span>]) </span><br><span class="line"><span class="built_in">print</span>(df_data[<span class="string">&#x27;2022-04-12&#x27;</span>])  <span class="comment"># 具体的时间索引</span></span><br><span class="line"><span class="built_in">print</span>(df_data[<span class="string">&#x27;2022-04-12&#x27;</span>:<span class="string">&#x27;2023-04-13&#x27;</span>])  <span class="comment"># 范围时间索引</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-04-<span class="number">12</span>    <span class="number">111</span></span><br><span class="line"><span class="number">2018</span>-05-<span class="number">12</span>    <span class="number">222</span></span><br><span class="line"><span class="number">2022</span>-04-<span class="number">12</span>    <span class="number">333</span></span><br><span class="line"><span class="number">2022</span>-05-<span class="number">12</span>    <span class="number">444</span></span><br><span class="line"><span class="number">2023</span>-04-<span class="number">12</span>    <span class="number">555</span></span><br><span class="line"><span class="number">2023</span>-05-<span class="number">12</span>    <span class="number">666</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="number">2018</span>-04-<span class="number">12</span>    <span class="number">111</span></span><br><span class="line"><span class="number">2018</span>-05-<span class="number">12</span>    <span class="number">222</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="number">333</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span>-04-<span class="number">12</span>    <span class="number">333</span></span><br><span class="line"><span class="number">2022</span>-05-<span class="number">12</span>    <span class="number">444</span></span><br><span class="line"><span class="number">2023</span>-04-<span class="number">12</span>    <span class="number">555</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>输出解析：在输出结果上和之前没有什么区别，但这里我们能方便的对数据的时间索引进行查找操作，可以直接获得某一年的数据</p><h2 id="4-date-range-函数来生成时间戳索引："><a href="#4-date-range-函数来生成时间戳索引：" class="headerlink" title="4.date_range () 函数来生成时间戳索引："></a>4.date_range () 函数来生成时间戳索引：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 pandas 数据包</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index_date=pd.date_range(start=<span class="string">&quot;2020-12-20 01:00:00&quot;</span>,end=<span class="string">&quot;2020-12-20 12:00:00&quot;</span>,freq=<span class="string">&quot;2H&quot;</span>)</span><br><span class="line">series_data=pd.Series([<span class="number">786</span>,<span class="number">890</span>,<span class="number">977</span>,<span class="number">912</span>,<span class="number">825</span>,<span class="number">586</span>],index=index_date)</span><br><span class="line"><span class="built_in">print</span>(series_data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">20</span> 01:<span class="number">00</span>:<span class="number">00</span>    <span class="number">786</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">20</span> 03:<span class="number">00</span>:<span class="number">00</span>    <span class="number">890</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">20</span> 05:<span class="number">00</span>:<span class="number">00</span>    <span class="number">977</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">20</span> 07:<span class="number">00</span>:<span class="number">00</span>    <span class="number">912</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">20</span> 09:<span class="number">00</span>:<span class="number">00</span>    <span class="number">825</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">12</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">586</span></span><br><span class="line">Freq: 2H, dtype: int64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举</title>
      <link href="/post/633a03ca.html"/>
      <url>/post/633a03ca.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>枚举是用来定义常量的。枚举元素具有不可变的特性，可以用来充当常量。枚举成员名称建议使用大写字母。枚举是Python 3.4版本中引入的新特性。枚举可以让代码更加清晰和易于理解。枚举常量的名称必须是唯一的，否则会引发<code>ValueError</code>异常。</p><p>例如：<code>a = 1</code>，a是常量，是可变的，可以被修改，但用到枚举时，是不可变的。</p><ul><li><code>class enum.Enum</code>：创建枚举常量的基类。</li></ul><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>下面是一个详细的枚举示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    RED = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLUE = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>在这个定义中，我们定义了一个名为<code>Color</code>的枚举类型，它包含三个常量<code>RED</code>、<code>GREEN</code>和<code>BLUE</code>。每个常量由一个唯一的名称和一个值组成，这个值可以是任何Python对象，但在这里我们使用整数来表示颜色值。</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p> 我们可以通过以下方式来访问枚举常量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(Color.RED)  <span class="comment"># Color.RED</span></span><br><span class="line"><span class="built_in">print</span>(Color.RED.name)  <span class="comment"># RED</span></span><br><span class="line"><span class="built_in">print</span>(Color.RED.value)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Color[<span class="string">&quot;RED&quot;</span>]) <span class="comment"># Color.RED</span></span><br><span class="line"><span class="built_in">print</span>(Color(<span class="number">1</span>)) <span class="comment"># Color.RED</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们通常使用枚举类型后跟一个<code>.</code>和常量名的方式来访问枚举常量。我们还可以使用<code>.name</code>属性来获取枚举常量的名称，使用<code>.value</code>属性来获取枚举常量的值。 最后两个通过枚举常量的名称和值获取，是枚举的反向映射获取。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>枚举类型在实际应用中非常实用。例如，如果我们需要定义一些固定的状态或者选项，可以使用枚举来定义它们。下面是一个使用枚举来定义HTTP状态码的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HTTPStatus</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    OK = <span class="number">200</span></span><br><span class="line">    BAD_REQUEST = <span class="number">400</span></span><br><span class="line">    FORBIDDEN = <span class="number">403</span></span><br><span class="line">    NOT_FOUND = <span class="number">404</span></span><br><span class="line">    INTERNAL_SERVER_ERROR = <span class="number">500</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个名为<code>HTTPStatus</code>的枚举类型，它包含了一些常见的HTTP状态码。通过使用枚举来定义这些状态码，我们可以使代码更清晰、易于理解，并且避免了无意义的硬编码。</p><h1 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h1><ul><li><code>enum.unique()</code>：Enum 类的装饰器，确保一个名称只绑定一个值。</li><li><code>class enum.auto</code>：用合适的值代替 Enum 成员的实例。初始默认值从 1 开始。</li></ul><h3 id="确保唯一"><a href="#确保唯一" class="headerlink" title="确保唯一"></a>确保唯一</h3><p>如果我们希望确保枚举常量的值也是唯一的，可以使用<code>unique()</code>装饰器来标记枚举类型，从而避免出现值相同的常量。</p><p>下面是一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum,unique</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weekday</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    MON = <span class="number">1</span></span><br><span class="line">    TUE = <span class="number">2</span></span><br><span class="line">    WED = <span class="number">3</span></span><br><span class="line">    THU = <span class="number">4</span></span><br><span class="line">    FRI = <span class="number">5</span></span><br><span class="line">    SAT = <span class="number">6</span></span><br><span class="line">    SUN = <span class="number">7</span></span><br><span class="line">    <span class="comment"># SUN2 = 7</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Weekday.SUN.value) <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><p>如果我们尝试在<code>Weekday</code>内定义一个值相同的常量，就会引发<code>ValueError</code>异常。</p><p><code>@unique</code>装饰器只能应用于枚举类型本身，而不能应用于枚举常量。如果我们尝试在枚举常量上使用<code>@unique</code>装饰器，会引发<code>AttributeError</code>异常。</p><h3 id="自动创建枚举常量"><a href="#自动创建枚举常量" class="headerlink" title="自动创建枚举常量"></a>自动创建枚举常量</h3><p><code>enum.auto()</code> 函数可自动为枚举成员分配值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum,auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    RED = auto()</span><br><span class="line">    GREEN = auto()</span><br><span class="line">    BLUE = auto()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(Color)) <span class="comment"># [&lt;Color.RED: 1&gt;, &lt;Color.GREEN: 2&gt;, &lt;Color.BLUE: 3&gt;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dict中 exclude_unset和exclude_none的区别</title>
      <link href="/post/d816426a.html"/>
      <url>/post/d816426a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 Pydantic 中，<code>exclude_unset</code> 和 <code>exclude_none</code> 都是用于在将一个 Python 对象转换为字典时排除某些属性。</p><p><strong>区别：</strong></p><ul><li><code>exclude_unset</code> 作用：排除未设置值的属性</li><li><code>exclude_none</code>   作用：排除值为 None 的属性</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>​示例：如果一个属性没有被设置值，则该属性将被排除 （设置为None的，按None赋值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    name: <span class="built_in">str</span> = <span class="literal">None</span></span><br><span class="line">    age: <span class="built_in">int</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user = User(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(user.<span class="built_in">dict</span>(exclude_unset=<span class="literal">True</span>))  <span class="comment"># 输出：&#123;&#x27;id&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><p>示例：如果一个属性的值为 None，则该属性将被排除（没有设置值的，按照默认值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    name: <span class="built_in">str</span> = <span class="literal">None</span></span><br><span class="line">    age: <span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user = User(<span class="built_in">id</span>=<span class="number">1</span>, name=<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(user.<span class="built_in">dict</span>(exclude_none=<span class="literal">True</span>))  <span class="comment"># 输出：&#123;&#x27;id&#x27;: 1, &#x27;age&#x27;: 10&#125;</span></span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>因此，<code>exclude_unset</code> 和 <code>exclude_none</code> 的区别在于它们排除属性的条件不同。</p><p><code>exclude_unset</code> 排除未设置值的属性，而 <code>exclude_none</code> 排除值为 None 的属性。在实际使用中，我们可以根据具体的需求选择使用哪一个参数。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pydantic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pydantic之extra参数</title>
      <link href="/post/872ecc90.html"/>
      <url>/post/872ecc90.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在<code>pydantic</code>中，<code>extra</code>参数用于控制是否允许在创建模型对象时传入额外的属性。</p><ol><li><p><strong>默认</strong>情况下，<code>extra</code>参数的值为<code>Extra.ignore</code>，表示忽略传入的额外属性，这些属性不会被验证和存储在模型对象中。</p></li><li><p>当<code>extra</code>参数的值为<code>Extra.allow</code>时，表示允许传入额外的属性，但是这些额外的属性虽然不会被验证，但会存储在模型对象中。</p></li><li><p>当<code>extra</code>参数的值为<code>Extra.forbid</code>时，表示不允许传入额外的属性，如果传入了额外的属性，将会抛出<code>ValidationError</code>异常。</p></li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>在下面代码中，有<code>page</code>和<code>size</code>两种属性，并设置了<code>extra=Extra.allow</code>，表示允许传入额外的属性。可以看到额外的属性没有被验证，但是在打印base对象的属性时，输出了额外的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field, Extra</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePageModel</span>(BaseModel,extra=Extra.allow):</span><br><span class="line">    page: <span class="built_in">int</span> = Field(default=<span class="literal">None</span>, description=<span class="string">&quot;页&quot;</span>)</span><br><span class="line">    size: <span class="built_in">int</span> = Field(default=<span class="literal">None</span>, description=<span class="string">&quot;个数&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base = BasePageModel(page=<span class="number">1</span>,size=<span class="number">1</span>,name=<span class="string">&quot;hwang&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(base) <span class="comment"># page=1 size=1 name=&#x27;hwang&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base.<span class="built_in">dict</span>()) <span class="comment"># &#123;&#x27;page&#x27;: 1, &#x27;size&#x27;: 1, &#x27;name&#x27;: &#x27;hwang&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>在下面的代码中，我们定义了一个类User，有<code>name</code>和<code>age</code>两个属性，并设置了<code>extra = Extra.forbid</code>，表示不允许传入额外的属性。在创建<code>User</code>对象时，我们传入了一个额外的<code>address</code>属性，这时将会抛出<code>ValueError</code>异常，因为传入了不被允许的额外属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">        extra = Extra.forbid</span><br><span class="line"></span><br><span class="line">user_data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="string">&quot;Beijing&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">user = User(**user_data)</span><br><span class="line"><span class="built_in">print</span>(user.<span class="built_in">dict</span>())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/wanghan/Desktop/code/project_test/Learn/learn_pydantic/pydantic_extra.py&quot;</span>, line <span class="number">27</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    user = User(**user_data)</span><br><span class="line">  File <span class="string">&quot;pydantic/main.py&quot;</span>, line <span class="number">341</span>, <span class="keyword">in</span> pydantic.main.BaseModel.__init__</span><br><span class="line">pydantic.error_wrappers.ValidationError: <span class="number">1</span> validation error <span class="keyword">for</span> User</span><br><span class="line">address</span><br><span class="line">  extra fields <span class="keyword">not</span> permitted (<span class="built_in">type</span>=value_error.extra)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pydantic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pydantic为什么要搭配typing使用</title>
      <link href="/post/6b7d74ae.html"/>
      <url>/post/6b7d74ae.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="为什么pydantic要搭配typing使用？"><a href="#为什么pydantic要搭配typing使用？" class="headerlink" title="为什么pydantic要搭配typing使用？"></a>为什么pydantic要搭配typing使用？</h1><p>Pydantic是一个数据验证和解析库，它的主要目的是帮助开发者创建类型注释更加严格的Python应用程序。在Python中，<code>typing</code>模块用于类型注释，它提供了一组用于指定变量、函数参数和返回值类型的类和函数。Pydantic与<code>typing</code>模块搭配使用的原因有以下几点：</p><ol><li>类型注释：Pydantic通过利用Python的类型注释来定义模型。这些类型注释可以是原生Python类型，也可以是<code>typing</code>模块中定义的类型。这使得Pydantic模型的定义更加直观和易于理解，同时也提高了代码的可读性和可维护性。 </li><li>数据验证：Pydantic使用类型注释来验证输入数据的类型和格式是否正确。通过使用<code>typing</code>模块中定义的类型，Pydantic可以对输入数据进行更加准确的验证，例如使用<code>List[int]</code>来验证一个整数列表，或使用<code>Optional[str]</code>来验证一个可选的字符串。</li><li>数据转换：Pydantic可以将输入数据转换为模型对象，并将模型对象转换为Python原生类型或JSON格式。这些转换过程可以使用<code>typing</code>模块中定义的类型来指定输入和输出数据的格式，例如使用<code>List[int]</code>来指定一个整数列表的输出格式，或使用<code>Dict[str, Any]</code>来指定一个键值对字典的输出格式。</li></ol><p>综上所述，Pydantic与<code>typing</code>模块搭配使用的主要原因是为了提高代码的可读性、可维护性和可扩展性，同时也为了实现更加准确的数据验证和转换。通过使用<code>typing</code>模块中定义的类型，Pydantic可以更加精确地定义输入和输出数据的格式，并对输入数据进行更加准确的验证，从而提高代码的稳定性和可靠性。</p><h1 id="暂放于此"><a href="#暂放于此" class="headerlink" title="暂放于此"></a>暂放于此</h1>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pydantic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>validator校验器、转换器</title>
      <link href="/post/4cbd182c.html"/>
      <url>/post/4cbd182c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 Pydantic 模块中，validator 是用来对模型中的某些字段进行校验或转换的方法。 使用 validator 方法可以在模型定义时为某个字段指定一个方法，该方法将在该字段完成赋值后被调用。该方法应该接受两个参数：第一个参数是该字段的名字，第二个参数是该字段被赋予的值。该方法可以返回处理过的值，或者抛出 ValueError 异常来表示该值无效。 </p><p>例如，下面的代码定义了一个名为 User 的模型，它有一个名为 age 的字段。在 age 字段的 validator 方法中，我们检查了 age 是否为正整数，如果不是，则抛出 ValueError 异常。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, validator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;age&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_age</span>(<span class="params">cls, v</span>):</span><br><span class="line">        <span class="keyword">if</span> v &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Age must be a positive integer&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br></pre></td></tr></table></figure><p>  在上面的示例中，我们使用了装饰器 @validator(‘age’) 来为 age 字段指定了一个 validator 方法 check_age，该方法将在 age 字段完成赋值后被调用。在 check_age 方法中，我们检查了 age 是否为正整数，如果不是，则抛出 ValueError 异常。 当我们使用 User 模型创建实例时，如果 age 字段的值不是正整数，将会抛出 ValueError 异常。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User(name=<span class="string">&#x27;Tom&#x27;</span>, age=-<span class="number">1</span>)  <span class="comment"># ValueError: Age must be a positive integer</span></span><br></pre></td></tr></table></figure><h1 id="高阶用法"><a href="#高阶用法" class="headerlink" title="高阶用法"></a>高阶用法</h1><h3 id="pre-x3D-True"><a href="#pre-x3D-True" class="headerlink" title="pre&#x3D;True"></a>pre&#x3D;True</h3><p>关键字参数pre将导致验证器在其他验证之前被调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;age&#x27;</span>,pre=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_age1</span>(<span class="params">cls,v</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(v) &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;God,you live so long&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">user = User(name=<span class="string">&#x27;Tom&#x27;</span>, age=-<span class="number">101</span>)  <span class="comment"># ValueError: God,you live so long</span></span><br></pre></td></tr></table></figure><p>此时，方法check_age1的调用是在check_age前面的。</p><h3 id="“-“匹配任意字段"><a href="#“-“匹配任意字段" class="headerlink" title="“*“匹配任意字段"></a>“*“匹配任意字段</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;*&#x27;</span>, pre=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_age2</span>(<span class="params">cls, v</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v,<span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;JK-&quot;</span> + v</span><br><span class="line">        <span class="keyword">return</span> v+<span class="number">1</span></span><br><span class="line">      </span><br><span class="line">user = User(name=<span class="string">&#x27;Tom&#x27;</span>, age=<span class="number">22</span>)</span><br><span class="line"><span class="built_in">print</span>(user.name,user.age) <span class="comment"># JK-Tom 23</span></span><br></pre></td></tr></table></figure><h3 id="each-item-x3D-True"><a href="#each-item-x3D-True" class="headerlink" title="each_item&#x3D;True"></a>each_item&#x3D;True</h3><p>将验证字段内部的单个值（例如 List、Dict、Set等），而不是整个对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    nums: <span class="type">List</span>[<span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&quot;nums&quot;</span>,each_item=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_nums</span>(<span class="params">cls,v</span>):</span><br><span class="line">        <span class="comment"># 检查人数小于等于25的通过，不符合条件大于25的给予提示</span></span><br><span class="line">        <span class="keyword">assert</span> v &lt;= <span class="number">25</span>,<span class="string">&quot;More than the specified number of people&quot;</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">S = Student(nums=[<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>]) <span class="comment"># nums -&gt; 2 More than the specified number of people (type=assertion_error)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="always-x3D-True"><a href="#always-x3D-True" class="headerlink" title="always&#x3D;True"></a>always&#x3D;True</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    createtime: datetime = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&#x27;createtime&#x27;</span>, pre=<span class="literal">True</span>, always=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_ts_now</span>(<span class="params">cls, v</span>):</span><br><span class="line">        <span class="keyword">return</span> v <span class="keyword">or</span> datetime.now()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = TimeModel(createtime=datetime(<span class="number">2023</span>,<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(t.createtime) <span class="comment"># 2023-01-01 00:00:00</span></span><br><span class="line">t = TimeModel()</span><br><span class="line"><span class="built_in">print</span>(t.createtime) <span class="comment"># 2023-03-06 17:27:42.947913</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pydantic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅聊InstrumentedAttribut</title>
      <link href="/post/8c31f59c.html"/>
      <url>/post/8c31f59c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>在 SQLAlchemy 中，InstrumentedAttribute 是在 ORM 模型类定义的过程中自动生成的。当我们在 ORM 模型类中定义一个 Column 对象时，SQLAlchemy 会自动为该对象生成一个对应的 InstrumentedAttribute 属性。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.sql.schema <span class="keyword">import</span> Column</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql.sqltypes <span class="keyword">import</span> String, Integer</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     User参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    __tablename__ = <span class="string">&quot;User&quot;</span></span><br><span class="line">    __table_args__ = &#123;<span class="string">&quot;extend_existing&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    __mapper_args__ = &#123;<span class="string">&quot;concrete&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, autoincrement=<span class="literal">True</span>, primary_key=<span class="literal">True</span>, comment=<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    name = Column(String(<span class="number">50</span>),  comment=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    age = Column(Integer, comment=<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  上述代码定义了一个名为 User 的 ORM 模型类，其中包括 id、name 和 age 三个数据库表字段。对于每个字段，SQLAlchemy 会自动生成一个对应的 InstrumentedAttribute 属性，我们可以通过 ORM 模型对象来访问或修改这些属性。比如：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user = User(name=<span class="string">&quot;hwang&quot;</span>,age=<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(user.name) <span class="comment"># hwang</span></span><br><span class="line">user.name = <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="built_in">print</span>(user.name) <span class="comment"># jack</span></span><br></pre></td></tr></table></figure><p>具体来说，在访问或修改 InstrumentedAttribute 属性时，SQLAlchemy 会自动触发相应的事件处理机制。比如，当我们访问一个 InstrumentedAttribute 属性时，SQLAlchemy 会触发属性访问事件；当我们修改一个 InstrumentedAttribute 属性时，SQLAlchemy 会触发属性修改事件。这些事件会被 SQLAlchemy 的事件处理机制捕获并进行相应的数据库操作，从而实现数据的持久化。</p><p>需要注意的是，InstrumentedAttribute 属性是只读的，我们不能直接对其赋值。如果需要修改数据库表中的数据，应该通过 ORM 模型对象的 InstrumentedAttribute 属性来实现。</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm.attributes <span class="keyword">import</span> InstrumentedAttribute</span><br><span class="line"><span class="keyword">from</span> pydantic.fields <span class="keyword">import</span> Field</span><br><span class="line"><span class="keyword">from</span> pydantic.main <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueryColumnFieldModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="comment"># InstrumentedAttribute 就是用来验证传递过来的orm模型有没有这个属性</span></span><br><span class="line">    orm_col: <span class="type">Optional</span>[InstrumentedAttribute] = Field(description=<span class="string">&quot;ORM对应字段&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">        arbitrary_types_allowed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">QueryColumnFieldModel(orm_col=User.age) <span class="comment"># 通过验证</span></span><br><span class="line">QueryColumnFieldModel(orm_col=User.age1) <span class="comment"># 无法通过验证</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-SQLALchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arrow时间处理库</title>
      <link href="/post/d837ee3e.html"/>
      <url>/post/d837ee3e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Arrow 是一个 Python 库，它提供了一个易于使用和功能丰富的 API，用于处理日期、时间和时间戳。Arrow 可以帮助我们在 Python 中更轻松、更可靠地处理时间和日期，而不必担心时区转换、日期格式化和时间戳等问题。</p><p>在Python的标准库和其他一些低级模块也具有日期、时间和时区功能，但从可用性的角度来看他们的效果并不佳 。</p><p><strong>Arrow 的主要特点包括：</strong> </p><ul><li>简单易用的 API：Arrow 提供了简单易用的 API，可以轻松地进行日期、时间和时间戳的计算和转换。 </li><li>支持时区：Arrow 支持多种时区，可以轻松进行时区转换和计算。</li><li>支持多种日期时间格式：Arrow 支持多种日期时间格式，包括 ISO 8601 格式、Unix 时间戳、Python datetime 对象等。 </li><li>支持链式操作：Arrow 支持链式操作，可以轻松地进行多个操作，如格式化、时区转换等。</li></ul><p><strong>安装：</strong>pip install arrow</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建arrow对象</span></span><br><span class="line">dt_utc = arrow.utcnow()</span><br><span class="line"><span class="built_in">print</span>(dt_utc)  <span class="comment"># 2023-03-03T03:58:27.989688+00:00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建arrow对象，国内的时区</span></span><br><span class="line">dt = arrow.now()</span><br><span class="line"><span class="built_in">print</span>(dt) <span class="comment"># 2023-03-03T11:58:27.989744+08:00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="arrow对象"><a href="#arrow对象" class="headerlink" title="arrow对象"></a>arrow对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换时区</span></span><br><span class="line">dt2 = dt_utc.to(<span class="string">&quot;Asia/ShangHai&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dt2.<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD HH：mm：ss ZZ&#x27;</span>)) <span class="comment"># 2023-03-03 11：58：27 +08:00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 时间偏移</span></span><br><span class="line">diff = dt.shift(hours=-<span class="number">8</span>) <span class="comment"># 年：years 月：months 日：days 时：hours 分：minutes 秒：seconds，也可同时使用</span></span><br><span class="line"><span class="built_in">print</span>(diff.<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD HH：mm：ss ZZ&#x27;</span>))  <span class="comment"># 2023-03-03 03：58：27 +08:00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取时间差</span></span><br><span class="line"><span class="built_in">print</span>(diff.humanize())  <span class="comment"># 8 hours ago</span></span><br><span class="line"><span class="built_in">print</span>(diff.humanize(locale=<span class="string">&#x27;zh-cn&#x27;</span>))  <span class="comment"># 8小时前</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="arrow—-gt-转字符串"><a href="#arrow—-gt-转字符串" class="headerlink" title="arrow—&gt;转字符串"></a>arrow—&gt;转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式化arrow对象，为字符串</span></span><br><span class="line">dt1 = dt.<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD HH：mm：ss ZZ&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dt1)  <span class="comment"># 2023-03-03 03：43：05 +00:00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从字符串中获取时间</span></span><br><span class="line">data = <span class="string">&quot;Today is 2023.03.03 11:28:20 and the weather is sunny&quot;</span></span><br><span class="line"><span class="built_in">print</span>(arrow.get(data,<span class="string">&quot;YYYY.MM.DD HH:mm:ss&quot;</span>)) <span class="comment"># 2023-03-03T11:28:20+00:00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串转时间戳"><a href="#字符串转时间戳" class="headerlink" title="字符串转时间戳"></a>字符串转时间戳</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串转化为时间戳</span></span><br><span class="line">dt2 = arrow.get(dt2).int_timestamp</span><br><span class="line"><span class="built_in">print</span>(dt2) <span class="comment"># 1677815907</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="arrow—-gt-转时间戳"><a href="#arrow—-gt-转时间戳" class="headerlink" title="arrow—&gt;转时间戳"></a>arrow—&gt;转时间戳</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前时间的时间戳</span></span><br><span class="line">dt1 = arrow.now().timestamp()</span><br><span class="line"><span class="built_in">print</span>(dt1) <span class="comment"># 1677815907.990858</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="时间戳转字符串"><a href="#时间戳转字符串" class="headerlink" title="时间戳转字符串"></a>时间戳转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 时间戳转化为arrow对象再字符串格式化</span></span><br><span class="line">dt2 = arrow.get(dt1).<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dt2) <span class="comment"># 2023-03-03 03:58:27</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="arrow—-gt-转datetime"><a href="#arrow—-gt-转datetime" class="headerlink" title="arrow—&gt;转datetime"></a>arrow—&gt;转datetime</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arrow对象转化为datetime对象</span></span><br><span class="line">dt3 = dt.datetime</span><br><span class="line"><span class="built_in">print</span>(dt3) <span class="comment"># 2023-03-03 11:58:27.989744+08:00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>获取arrow对象的datetime属性</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取arrow对象的datetime属性</span></span><br><span class="line"><span class="built_in">print</span>(dt.year) <span class="comment"># 2023</span></span><br><span class="line"><span class="built_in">print</span>(dt.month) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(dt.day) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(dt.hour) <span class="comment"># 11</span></span><br><span class="line"><span class="built_in">print</span>(dt.minute) <span class="comment"># 58</span></span><br><span class="line"><span class="built_in">print</span>(dt.second) <span class="comment"># 27</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-arrow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅聊any()函数</title>
      <link href="/post/7458f8a0.html"/>
      <url>/post/7458f8a0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>python内置的any()函数，可接受一个可迭代对象作为参数，比如list、dict、tuple。如果这个可迭代对象的元素存在一个为True的，那么直接返回True，如果所有元素都为False，则结果返回False。如果这个可迭代对象是空的，比如0、[]、{}、()，此时他返回False，因为任何元素都不满足条件。</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">any</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">any</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">any</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">any</span>(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="短路优化"><a href="#短路优化" class="headerlink" title="短路优化"></a>短路优化</h1><h3 id="带For循环的Python-any-函数"><a href="#带For循环的Python-any-函数" class="headerlink" title="带For循环的Python any()函数"></a>带For循环的Python any()函数</h3><p>你也可以使用生成器表达式动态地创建一个迭代，并将其传递到 any() 函数中。这可以称为 “带有for循环的any()函数”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>(x**<span class="number">2</span> == <span class="number">16</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)))</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面举例代码使用的条件是x**2&#x3D;&#x3D;16，它只对x&#x3D;4有效。当你通过使用range()函数将这个表达式应用于从0到9（包括）的所有x值时，它大多返回False。由于短路，any()函数在评估第五个元素x&#x3D;4后返回True。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-any()函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海象运算符:=</title>
      <link href="/post/470f1a05.html"/>
      <url>/post/470f1a05.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>版本要求</strong>：Python3.8以上</p><p><strong>别称</strong>：命名表达式运算符（海象运算符）</p><p><strong>作用：</strong>海象运算符可以给<strong>表达式中的变量</strong>赋值。它使用可以减少代码的行数，可以有效避免重复计算，也可以提高代码的可读性。但这些也存在很多争议。理解即可</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><h2 id="列表用法"><a href="#列表用法" class="headerlink" title="列表用法"></a>列表用法</h2><p><strong>原始写法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lnum = [<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longFunction</span>(<span class="params">n:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;调用了一次longFunction&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> n-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">valid_scores = [longFunction(n) <span class="keyword">for</span> n <span class="keyword">in</span> lnum <span class="keyword">if</span> longFunction(n)]</span><br><span class="line"><span class="built_in">print</span>(valid_scores)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">[<span class="number">21</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">54</span>]</span><br></pre></td></tr></table></figure><p><strong>使用海象运算符的写法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 换海象运算符</span></span><br><span class="line">lnum = [<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longFunction</span>(<span class="params">n:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;调用了一次longFunction&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> n-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">valid_scores = [result <span class="keyword">for</span> n <span class="keyword">in</span> lnum <span class="keyword">if</span> (result:=longFunction(n))]</span><br><span class="line"><span class="built_in">print</span>(valid_scores)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">调用了一次longFunction</span><br><span class="line">[<span class="number">21</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">54</span>]</span><br></pre></td></tr></table></figure><p>从结果可以看出，他调用longFunction方法的次数比原始方法少，避免了重复的计算。</p><h2 id="while用法"><a href="#while用法" class="headerlink" title="while用法"></a>while用法</h2><p><strong>原始写法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">20</span></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">10</span>:</span><br><span class="line">    num-=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>使用海象运算符的写法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">20</span></span><br><span class="line"><span class="keyword">while</span> (num := num-<span class="number">1</span>) &gt;= <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>这次的使用很明显是简化了代码，对可读性的影响也不是很大。</p><h1 id="不能使用的地方"><a href="#不能使用的地方" class="headerlink" title="不能使用的地方"></a>不能使用的地方</h1><p>不能为变量赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">1</span> <span class="comment"># 无效</span></span><br></pre></td></tr></table></figure><p>不能在lambda中为表达式赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="keyword">lambda</span> : (result:=<span class="number">999</span>) <span class="comment"># 有效但并没有什么卵用</span></span><br><span class="line"><span class="built_in">print</span>(data()) <span class="comment"># 999</span></span><br><span class="line">(var := <span class="keyword">lambda</span> x: x+<span class="number">5</span>) <span class="comment"># 直接这么写有效，但这不是多次一举嘛</span></span><br><span class="line"><span class="built_in">print</span>(var(<span class="number">5</span>)) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML读取、写入、删除、创建</title>
      <link href="/post/cb7c93dd.html"/>
      <url>/post/cb7c93dd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>XML：可扩展标记语言。</p><ul><li>SGML：他的先行者功能强大，文档结构复杂，不易于上手使用。</li><li>HTML：由SGML演变而来，继承了SGML的优点，抛弃了SGML复杂庞大的缺点，但语法不可扩展。它是一种页面技术，聚焦的是数据的显示。</li><li>XML  ：也是由SGML演变而来，他不但易于扩展，而且聚焦的是数据的内容，主要用来传送和存储数据。</li></ul><h1 id="解析方式"><a href="#解析方式" class="headerlink" title="解析方式"></a>解析方式</h1><p>Python 有三种 XML 解析方式：SAX（simple API for XML）、DOM（Document Object Model）、ElementTree。</p><ul><li>SAX 方式：SAX 是一个用于处理 XML 事件驱动的模型，它逐行扫描文档，一边扫描一边解析，对于大型文档的解析拥有巨大优势，尽管不是 W3C 标准，但它却得到了广泛认可。主要涉及到解析器和事件处理器，解析器负责读取 XML 文档，并向事件处理器发送事件，事件处理器负责对事件作出响应，对传递的 XML 数据进行处理。</li><li>DOM 方式：DOM 中文译为文档对象模型，是 W3C 组织推荐的标准编程接口，它将 XML 数据在内存中解析成一个树，通过对树的操作来操作 XML。</li><li>ElementTree 方式：ElementTree 相对于 DOM 来说拥有更好的性能，与 SAX 性能差不多，API 使用也很方便。</li></ul><h1 id="思路展开"><a href="#思路展开" class="headerlink" title="思路展开"></a>思路展开</h1><ol><li>读取数据，使用parse（）方法，此时返回ElementTree对象。</li><li>获取根节点，使用getroot（）方法，此时返回Element对象。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">tree = ET.parse(<span class="string">&quot;test.xml&quot;</span>)</span><br><span class="line"><span class="comment"># 根节点</span></span><br><span class="line">root = tree.getroot()</span><br></pre></td></tr></table></figure><p>根节点位置⬇️：&lt;data&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&#x27;1.0&#x27;</span> encoding=<span class="string">&#x27;utf=8&#x27;</span>?&gt;</span><br><span class="line">&lt;data&gt;</span><br><span class="line">&lt;student <span class="built_in">id</span>=<span class="string">&quot;stu1&quot;</span> name=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">   &lt;S_number&gt;<span class="number">1001</span>&lt;/S_number&gt;</span><br><span class="line">   &lt;name&gt;张三&lt;/name&gt;</span><br><span class="line">   &lt;age&gt;<span class="number">22</span>&lt;/age&gt;</span><br><span class="line">   &lt;gender&gt;男&lt;/gender&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line">&lt;student <span class="built_in">id</span>=<span class="string">&quot;stu2&quot;</span> name=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">   &lt;S_number&gt;<span class="number">1002</span>&lt;/S_number&gt;</span><br><span class="line">   &lt;name&gt;李四&lt;/name&gt;</span><br><span class="line">   &lt;age&gt;<span class="number">21</span>&lt;/age&gt;</span><br><span class="line">   &lt;gender&gt;女&lt;/gender&gt;</span><br><span class="line">&lt;/student&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>test.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">S_number</span>&gt;</span>1001<span class="tag">&lt;/<span class="name">S_number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">age</span>&gt;</span>22<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;stu2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">S_number</span>&gt;</span>1002<span class="tag">&lt;/<span class="name">S_number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">age</span>&gt;</span>21<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gender</span>&gt;</span>女<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">country</span> <span class="attr">name</span>=<span class="string">&quot;Panama&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>122<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2023<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gdppc</span>&gt;</span>13600<span class="tag">&lt;/<span class="name">gdppc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;W&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Costa Rica&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Colombia&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">country</span> <span class="attr">name</span>=<span class="string">&quot;America&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>55<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>56<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2023<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gdppc</span>&gt;</span>522490<span class="tag">&lt;/<span class="name">gdppc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;W&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Australia&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Russia&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><h4 id="读取文件：ET-parse-“xxx”"><a href="#读取文件：ET-parse-“xxx”" class="headerlink" title="读取文件：ET.parse(“xxx”)"></a>读取文件：ET.parse(“xxx”)</h4><h4 id="获取根节点：-getroot"><a href="#获取根节点：-getroot" class="headerlink" title="获取根节点：.getroot()"></a>获取根节点：.getroot()</h4><h4 id="获取标签、属性：-tag、-attrib"><a href="#获取标签、属性：-tag、-attrib" class="headerlink" title="获取标签、属性：.tag、.attrib"></a>获取标签、属性：.tag、.attrib</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">tree = ET.parse(<span class="string">&quot;test.xml&quot;</span>)</span><br><span class="line"><span class="comment"># 根节点</span></span><br><span class="line">root = tree.getroot()</span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line"><span class="built_in">print</span>(root.tag)</span><br><span class="line"><span class="comment"># 属性</span></span><br><span class="line"><span class="built_in">print</span>(root.attrib)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># stu：子节点</span></span><br><span class="line"><span class="keyword">for</span> stu <span class="keyword">in</span> root:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;标签:&quot;</span>,stu.tag,<span class="string">&quot;属性:&quot;</span>,stu.attrib)</span><br><span class="line">    <span class="comment"># 属性值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stu_name:&quot;</span>,stu.attrib[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">    <span class="comment"># 标签中的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;S_number:&quot;</span>,stu[<span class="number">0</span>].text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name:&quot;</span>,stu[<span class="number">1</span>].text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;age:&quot;</span>,stu[<span class="number">2</span>].text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;gender:&quot;</span>,stu[<span class="number">3</span>].text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历所有元素：iter-“xx”"><a href="#遍历所有元素：iter-“xx”" class="headerlink" title="遍历所有元素：iter(“xx”)"></a>遍历所有元素：iter(“xx”)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iter遍历他下面所有的元素（包括子，子子等）</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;student&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(child.tag,child.attrib)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;stu1&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;student&#x27;</span>&#125;</span><br><span class="line">student &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;stu2&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;student&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="当前元素的直接子元素：findall-“xx”"><a href="#当前元素的直接子元素：findall-“xx”" class="headerlink" title="当前元素的直接子元素：findall(“xx”)"></a>当前元素的直接子元素：findall(“xx”)</h4><h4 id="获取标签的属性值：-get-“xx”"><a href="#获取标签的属性值：-get-“xx”" class="headerlink" title="获取标签的属性值：.get(“xx”)"></a>获取标签的属性值：.get(“xx”)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># findall找到当前元素的直接子元素</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> root.findall(<span class="string">&#x27;country&#x27;</span>):</span><br><span class="line">    <span class="comment"># 获取标签的属性值</span></span><br><span class="line">    name = child.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="comment"># find找到第一个带有特定标签的子元素</span></span><br><span class="line">    <span class="comment"># text标签的内容</span></span><br><span class="line">    rank = child.find(<span class="string">&quot;rank&quot;</span>).text</span><br><span class="line">    <span class="built_in">print</span>(name,rank)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Panama <span class="number">122</span></span><br><span class="line">America <span class="number">55</span></span><br></pre></td></tr></table></figure><h4 id="带有特定标签的子元素：find-“xx”"><a href="#带有特定标签的子元素：find-“xx”" class="headerlink" title="带有特定标签的子元素：find(“xx”)"></a>带有特定标签的子元素：find(“xx”)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># find找到第一个带有特定标签的子元素</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> root.find(<span class="string">&#x27;country&#x27;</span>):</span><br><span class="line">    <span class="comment"># 因为find查找的是第一个子元素，所以get获取的是第一个子元素下的属性</span></span><br><span class="line">    <span class="built_in">print</span>(child.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">122</span></span><br><span class="line"><span class="number">2023</span></span><br><span class="line"><span class="number">13600</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><p>文件内容：</p><p>test.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">S_number</span>&gt;</span>1001<span class="tag">&lt;/<span class="name">S_number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">age</span>&gt;</span>22<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;stu2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">S_number</span>&gt;</span>1002<span class="tag">&lt;/<span class="name">S_number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">age</span>&gt;</span>21<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gender</span>&gt;</span>女<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">country</span> <span class="attr">name</span>=<span class="string">&quot;Panama&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2023<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gdppc</span>&gt;</span>13600<span class="tag">&lt;/<span class="name">gdppc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;W&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Costa Rica&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Colombia&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">country</span> <span class="attr">name</span>=<span class="string">&quot;America&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>56<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>57<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2023<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gdppc</span>&gt;</span>522490<span class="tag">&lt;/<span class="name">gdppc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;W&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Australia&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Russia&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读取文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">tree = ET.parse(<span class="string">&quot;test.xml&quot;</span>)</span><br><span class="line"><span class="comment"># 根节点</span></span><br><span class="line">root = tree.getroot()</span><br></pre></td></tr></table></figure><h4 id="修改文件内容：write-“xx”"><a href="#修改文件内容：write-“xx”" class="headerlink" title="修改文件内容：write(“xx”)"></a>修改文件内容：write(“xx”)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> rank <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&quot;rank&quot;</span>):</span><br><span class="line">    new_rank = <span class="built_in">int</span>(rank.text) + <span class="number">1</span></span><br><span class="line">    rank.text = <span class="built_in">str</span>(new_rank)</span><br><span class="line">    <span class="comment"># 添加和修改标签的属性和属性值</span></span><br><span class="line">    rank.<span class="built_in">set</span>(<span class="string">&#x27;updated&#x27;</span>,<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line"><span class="comment"># 文件存在则向xml文件中写入，否则创建xml文件</span></span><br><span class="line">tree.write(<span class="string">&quot;test.xml&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">tree.write(<span class="string">&quot;country.xml&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后的文件内容（跟创建的内容也一样）：</p><p>test.xml、country.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">S_number</span>&gt;</span>1001<span class="tag">&lt;/<span class="name">S_number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">age</span>&gt;</span>22<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;stu2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">S_number</span>&gt;</span>1002<span class="tag">&lt;/<span class="name">S_number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">age</span>&gt;</span>21<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gender</span>&gt;</span>女<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">country</span> <span class="attr">name</span>=<span class="string">&quot;Panama&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2023<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gdppc</span>&gt;</span>13600<span class="tag">&lt;/<span class="name">gdppc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;W&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Costa Rica&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Colombia&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">country</span> <span class="attr">name</span>=<span class="string">&quot;America&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>56<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>57<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2023<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gdppc</span>&gt;</span>522490<span class="tag">&lt;/<span class="name">gdppc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;W&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Australia&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">direction</span>=<span class="string">&quot;E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Russia&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h4 id="删除文件内容：remove-xx"><a href="#删除文件内容：remove-xx" class="headerlink" title="删除文件内容：remove(xx)"></a>删除文件内容：remove(xx)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> root.findall(<span class="string">&quot;country&quot;</span>):</span><br><span class="line">    rank = <span class="built_in">int</span>(country.find(<span class="string">&quot;rank&quot;</span>).text)</span><br><span class="line">    <span class="comment"># 删除的是 排名rank大于50的</span></span><br><span class="line">    <span class="keyword">if</span> rank &gt; <span class="number">50</span>:</span><br><span class="line">        root.remove(country)</span><br><span class="line"></span><br><span class="line">tree.write(<span class="string">&quot;country.xml&quot;</span>,encoding=<span class="string">&quot;utf=8&quot;</span>)</span><br></pre></td></tr></table></figure><p>删除后文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf=8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">S_number</span>&gt;</span>1001<span class="tag">&lt;/<span class="name">S_number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">age</span>&gt;</span>22<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;stu2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">S_number</span>&gt;</span>1002<span class="tag">&lt;/<span class="name">S_number</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">age</span>&gt;</span>21<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">gender</span>&gt;</span>女<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h4 id="创建xml文档"><a href="#创建xml文档" class="headerlink" title="创建xml文档"></a>创建xml文档</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">a = ET.Element(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">b = ET.SubElement(a,<span class="string">&quot;b&quot;</span>)</span><br><span class="line">c = ET.SubElement(a,<span class="string">&quot;c&quot;</span>)</span><br><span class="line">d = ET.SubElement(c,<span class="string">&quot;d&quot;</span>)</span><br><span class="line">ET.dump(a)</span><br></pre></td></tr></table></figure><p>创建的文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> /&gt;</span><span class="tag">&lt;<span class="name">c</span>&gt;</span><span class="tag">&lt;<span class="name">d</span> /&gt;</span><span class="tag">&lt;/<span class="name">c</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到这里基础操作已经完毕～，剩下的你再理解看看就不成问题了！</p><h2 id="解析XML命名空间"><a href="#解析XML命名空间" class="headerlink" title="解析XML命名空间"></a>解析XML命名空间</h2><p>文件内容：</p><p>actor.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">actors</span> <span class="attr">xmlns:fictional</span>=<span class="string">&quot;http://characters.example.com&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://people.example.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>John Cleese<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fictional:character</span>&gt;</span>Lancelot<span class="tag">&lt;/<span class="name">fictional:character</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fictional:character</span>&gt;</span>Archie Leach<span class="tag">&lt;/<span class="name">fictional:character</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Eric Idle<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fictional:character</span>&gt;</span>Sir Robin<span class="tag">&lt;/<span class="name">fictional:character</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fictional:character</span>&gt;</span>Gunther<span class="tag">&lt;/<span class="name">fictional:character</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fictional:character</span>&gt;</span>Commander Clement<span class="tag">&lt;/<span class="name">fictional:character</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">actors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ns = &#123;<span class="string">&quot;real_person&quot;</span>:<span class="string">&quot;http://people.example.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;role&quot;</span>:<span class="string">&quot;http://characters.example.com&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">root = ET.parse(<span class="string">&quot;actor.xml&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> actor <span class="keyword">in</span> root.findall(<span class="string">&quot;real_person:actor&quot;</span>,ns):</span><br><span class="line">    name = actor.find(<span class="string">&#x27;real_person:name&#x27;</span>,ns)</span><br><span class="line">    <span class="built_in">print</span>(name.text)</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> actor.findall(<span class="string">&quot;role:character&quot;</span>,ns):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;|--&gt;&quot;</span>,char.text)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">John Cleese</span><br><span class="line">|--&gt; Lancelot</span><br><span class="line">|--&gt; Archie Leach</span><br><span class="line">Eric Idle</span><br><span class="line">|--&gt; Sir Robin</span><br><span class="line">|--&gt; Gunther</span><br><span class="line">|--&gt; Commander Clement</span><br></pre></td></tr></table></figure><h2 id="支持XPATH"><a href="#支持XPATH" class="headerlink" title="支持XPATH"></a>支持XPATH</h2><blockquote><p>注意字符串类型的xml，开头的引号后要紧跟xml文件，结尾的引号不用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意字符串类型的xml，开头的引号后要紧跟xml文件，结尾的引号不用</span></span><br><span class="line">countrydata = <span class="string">&quot;&quot;&quot;&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="string">&lt;list&gt;</span></span><br><span class="line"><span class="string">&lt;student id=&quot;stu1&quot; name=&quot;student&quot;&gt;</span></span><br><span class="line"><span class="string">   &lt;S_number&gt;1001&lt;/S_number&gt;</span></span><br><span class="line"><span class="string">   &lt;name&gt;张三&lt;/name&gt;</span></span><br><span class="line"><span class="string">   &lt;age&gt;22&lt;/age&gt;</span></span><br><span class="line"><span class="string">   &lt;gender&gt;男&lt;/gender&gt;</span></span><br><span class="line"><span class="string">&lt;/student&gt;</span></span><br><span class="line"><span class="string">&lt;student id=&quot;stu2&quot; name=&quot;student&quot;&gt;</span></span><br><span class="line"><span class="string">   &lt;S_number&gt;1002&lt;/S_number&gt;</span></span><br><span class="line"><span class="string">   &lt;name&gt;李四&lt;/name&gt;</span></span><br><span class="line"><span class="string">   &lt;age&gt;21&lt;/age&gt;</span></span><br><span class="line"><span class="string">   &lt;gender&gt;女&lt;/gender&gt;</span></span><br><span class="line"><span class="string">&lt;/student&gt;</span></span><br><span class="line"><span class="string">&lt;country name=&quot;America&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;rank updated=&quot;yes&quot;&gt;15&lt;/rank&gt;</span></span><br><span class="line"><span class="string">    &lt;rank updated=&quot;yes&quot;&gt;16&lt;/rank&gt;</span></span><br><span class="line"><span class="string">    &lt;year&gt;2023&lt;/year&gt;</span></span><br><span class="line"><span class="string">    &lt;gdppc&gt;522490&lt;/gdppc&gt;</span></span><br><span class="line"><span class="string">    &lt;neighbor direction=&quot;W&quot; name=&quot;Australia&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;neighbor direction=&quot;E&quot; name=&quot;Russia&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/country&gt;</span></span><br><span class="line"><span class="string">&lt;/list&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line">root = ET.fromstring(countrydata)</span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> root.findall(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> country.<span class="built_in">iter</span>(<span class="string">&quot;country&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(i.find(<span class="string">&quot;rank&quot;</span>).text)</span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> root.findall(<span class="string">&quot;./country/neighbor&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(country.attrib)</span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> root.findall(<span class="string">&quot;.//year/..[@name=&#x27;America&#x27;]&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(country.find(<span class="string">&quot;rank&quot;</span>).text)</span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> root.findall(<span class="string">&quot;.//*[@name=&#x27;America&#x27;]/year&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(country.text)</span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> root.findall(<span class="string">&quot;.//neighbor[2]&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(country.attrib)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span></span><br><span class="line">&#123;<span class="string">&#x27;direction&#x27;</span>: <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Australia&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;direction&#x27;</span>: <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Russia&#x27;</span>&#125;</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">2023</span></span><br><span class="line">&#123;<span class="string">&#x27;direction&#x27;</span>: <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Russia&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>getopt解析参数</title>
      <link href="/post/7b7f9bde.html"/>
      <url>/post/7b7f9bde.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>getpot模块是用来在程序运行时，解析命令行输入的参数信息。</p><blockquote><p>例如：python test.py -h test。可以看做-h是参数，test是-h参数的值。而getopt就可以轻松解析这个。</p></blockquote><h2 id="getopt函数介绍："><a href="#getopt函数介绍：" class="headerlink" title="getopt函数介绍："></a>getopt函数介绍：</h2><p>他是一个标准库模块，直接import即可。</p><p>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opts,args = getopt.getopt(args, shortopts, longopts = [])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举例</span></span><br><span class="line">opts,args = getopt.getopt(sys.argv[<span class="number">1</span>:],<span class="string">&quot;-h-f:-v:&quot;</span>,[<span class="string">&quot;help&quot;</span>,<span class="string">&quot;filename=&quot;</span>,<span class="string">&quot;version&quot;</span>])</span><br></pre></td></tr></table></figure><p>接收参数：</p><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">args</td><td align="center">从命令行接收到的参数，通常使用sys.argv[1:]获取</td></tr><tr><td align="center">shortopts</td><td align="center">短参数：表示以<code>一个字母</code>表示的参数。如果短参数有值，要求在该短参数后接一个冒号<code>&#39;:&#39;</code></td></tr><tr><td align="center">longopts</td><td align="center">长参数：表示以<code>一个单词</code>表示的参数。如果长参数有值，要求在该长参数后接一个等号<code>&#39;=&#39;</code></td></tr></tbody></table><p>注意：短参数位置是以<font color=red>一个字母</font>表示的参数，不能写成一个单词。如果为一个单词，那么这个单词的所有字母都分别视为一个参数。</p><p>返回参数：</p><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">opts</td><td align="center">表示最终解析出来的参数对:（参数,参数值）。类型：list[元祖]</td></tr><tr><td align="center">args</td><td align="center">表示未被解析的参数值，一般不处理。类型：list</td></tr></tbody></table><p>输入参数：</p><blockquote><p>输入的参数在命令行进行，且短参数和长参数的写法不同。</p></blockquote><p>短参数：要在短参数前加<code>&#39;-&#39;</code>，与参数值中间有空格</p><p>长参数：要在长参数前加<code>&#39;--&#39;</code>。如果长参数后加了<code>&#39;=&#39;</code>，那么与参数值之间不能有空格。例如：<code>python test.py --filename=test3</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py -h -f test1 -v test2 --<span class="built_in">help</span> --filename test3</span><br></pre></td></tr></table></figure><h1 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line">opts,args = getopt.getopt(sys.argv[<span class="number">1</span>:],<span class="string">&quot;-h-f:-v:&quot;</span>,[<span class="string">&quot;help&quot;</span>,<span class="string">&quot;filename=&quot;</span>,<span class="string">&quot;version&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(opts,<span class="string">&quot;||&quot;</span>,args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> option,value <span class="keyword">in</span> opts:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;option&#125;</span> is <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>短参数：不跟<code>&#39;:&#39;</code>表示仅代表参数，跟了就是接收这个参数的参数值。例如：-h纯参数，不接收值。-f：参数+接收参数值</p><p>长参数：同短参数的逻辑，不过是把“: ”换成了“&#x3D;”</p><p><strong>执行：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py -h -f test1 -v test2 --<span class="built_in">help</span> --filename test3</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">&#x27;-h&#x27;</span>, <span class="string">&#x27;&#x27;</span>), (<span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;test1&#x27;</span>), (<span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>), (<span class="string">&#x27;--help&#x27;</span>, <span class="string">&#x27;&#x27;</span>), (<span class="string">&#x27;--filename&#x27;</span>, <span class="string">&#x27;test3&#x27;</span>)] || []</span><br><span class="line">-h <span class="keyword">is</span> </span><br><span class="line">-f <span class="keyword">is</span> test1</span><br><span class="line">-v <span class="keyword">is</span> test2</span><br><span class="line">--<span class="built_in">help</span> <span class="keyword">is</span> </span><br><span class="line">--filename <span class="keyword">is</span> test3</span><br></pre></td></tr></table></figure><p>输出结果解析：</p><p>​短参数：-h为纯参数，没有接收到值。-f、-v都接收到了对应的参数值。</p><p>​长参数：–help为纯参数， 没有接收到值。–filename接收到了对应的参数值。</p><p>其中version没有传递，则不接收。</p><p>建议上手练习，促进理解。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-getopt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询某库哪张表存在某个字段</title>
      <link href="/post/ef96745c.html"/>
      <url>/post/ef96745c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>查询“XX”库、哪张表存在“XX”字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE, DATA_TYPE, IS_NULLABLE, COLUMN_KEY <span class="keyword">FROM</span> information_schema.columns <span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> <span class="string">&#x27;%AttributeInfo%&#x27;</span> <span class="keyword">AND</span> table_schema <span class="operator">=</span> <span class="string">&#x27;Libra&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询“XX”库 “XX”张表是否存在 “XX”字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION, COLUMN_TYPE, DATA_TYPE, IS_NULLABLE, COLUMN_KEY <span class="keyword">FROM</span> information_schema.columns <span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> <span class="string">&#x27;%搜索的字段%&#x27;</span> <span class="keyword">AND</span> table_schema <span class="operator">=</span> <span class="string">&#x27;你的数据库&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span> <span class="string">&#x27;你的表&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda离线安装python、pip</title>
      <link href="/post/551ead98.html"/>
      <url>/post/551ead98.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="第一种下载方法"><a href="#第一种下载方法" class="headerlink" title="第一种下载方法"></a>第一种下载方法</h1><ol><li>进入<a href="https://anaconda.org/anaconda/repo">Anaconda Cloud</a>搜索python</li></ol><p><img src="https://images.cherain-wh.cloud/image-20230112145543964.png" alt="image-20230112145543964"></p><ol start="2"><li>Ctrl+F搜索 想要的python3.10.x的版本，并点击进去</li></ol><p><img src="https://images.cherain-wh.cloud/image-20230112145751174.png" alt="image-20230112145751174"></p><p><img src="https://images.cherain-wh.cloud/image-20230112145849825.png" alt="image-20230112145849825"></p><ol start="3"><li>点击Files –&gt; 选择Version：3.10.8 ，根据自己的系统选择合适的版本下载即可</li></ol><p><img src="https://images.cherain-wh.cloud/image-20230112150408536.png" alt="image-20230112150408536"></p><ol start="3"><li>（<strong>Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具</strong>）安装pip 同理，搜索pip，点击进入对应的pip版本页面，点击Files，选择Version，下载即可</li></ol><p><img src="https://images.cherain-wh.cloud/image-20230112151110642.png" alt="image-20230112151110642"></p><h1 id="第二种下载方法"><a href="#第二种下载方法" class="headerlink" title="第二种下载方法"></a>第二种下载方法</h1><p><a href="https://repo.anaconda.com/pkgs/main/">https://repo.anaconda.com/pkgs/main/</a></p><p>下载原理同上</p><p><img src="https://images.cherain-wh.cloud/image-20230112152309990.png" alt="image-20230112152309990"></p><h1 id="conda离线安装环境"><a href="#conda离线安装环境" class="headerlink" title="conda离线安装环境"></a>conda离线安装环境</h1><h2 id="先创建一个虚拟环境"><a href="#先创建一个虚拟环境" class="headerlink" title="先创建一个虚拟环境"></a>先创建一个虚拟环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n test</span><br></pre></td></tr></table></figure><h2 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate test</span><br></pre></td></tr></table></figure><h2 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --use-local python3.10.8的本地路径</span><br></pre></td></tr></table></figure><p>然后就ok了</p><h1 id="解决用pip安装依赖可能出现的报错"><a href="#解决用pip安装依赖可能出现的报错" class="headerlink" title="解决用pip安装依赖可能出现的报错"></a>解决用pip安装依赖可能出现的报错</h1><p>这里借鉴的文章：<a href="https://blog.csdn.net/yuan2019035055/article/details/127078251">https://blog.csdn.net/yuan2019035055/article/details/127078251</a></p><p>pip安装时报错信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: pip is configured with locations that require TLS/SSL, however the ssl module in Python</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在pip install xxx 之后加上参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i https://pypi.tuna.tsinghua.edu.cn/simple pip -U --trusted-host pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i http://pypi.douban.com/simple/  pip -U --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> conda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gunicorn部署Flask</title>
      <link href="/post/32b50af8.html"/>
      <url>/post/32b50af8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​在开发环境中，启动Flask会有一个常见的警告，Flask官方并不建议我们将此服务器用于生产环境。在实际生产环境中，gunicorn的确比Flask开发时的服务器有肉眼可见的速度提升。由于flask自带的web服务是单线程的，最大支持并发200，显然无法提供的服务，所以需要nginx或其他web服务器来提高服务器的性能。同时记得关闭debug调试模式，防止用户看到代码。</p><p>​一般的部署思路为：nginx指向gunicorn，gunicorn指向flask来做高性能部署。</p><h1 id="安装gunicorn"><a href="#安装gunicorn" class="headerlink" title="安装gunicorn"></a>安装gunicorn</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><h1 id="启动gunicorn"><a href="#启动gunicorn" class="headerlink" title="启动gunicorn"></a>启动gunicorn</h1><p>假设你的flask 项目是：</p><p>manage.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h4 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">manage：为工作文件名。  app：为工作文件内Flask的实例，也就是app变量</span></span><br><span class="line">gunicorn -w 2 -b 127.0.0.1:5000 -D manage:app --reload</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>-c</th><th>指定配置文件</th></tr></thead><tbody><tr><td>-D</td><td>守护进程后台进行</td></tr><tr><td>-b</td><td>绑定某服务器的某端口</td></tr><tr><td>-w</td><td>worker的数量，通常不指定会启动一个master和一个worker</td></tr><tr><td>-k</td><td>工作进程类型：sync(default)      eventlet      gevent      tornado      gthread      gaiohttp</td></tr><tr><td>–reload</td><td>当代码变动时，gunicorn自动重启</td></tr></tbody></table><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>config.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">workers = <span class="number">2</span>        <span class="comment"># 定义同时开启的处理请求的进程数量，根据网站流量适当调整</span></span><br><span class="line">bind = <span class="string">&quot;127.0.0.1:5000&quot;</span></span><br><span class="line">reload = <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -c config.py -D manage:app</span><br></pre></td></tr></table></figure><h1 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h1><p>只需要在配置文件设置一下：server_name 对应你的域名</p><p>location proxy_pass 请求转发到gunicorn服务器</p><p>这样访问你的域名，就能直接找到服务器本地的flask服务来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       443 ssl http2;</span><br><span class="line">       listen       [::]:443 ssl http2;</span><br><span class="line">       server_name  yq.cherain-wh.cloud;</span><br><span class="line">       root         /root/yq_project/templates/main.html;</span><br><span class="line">       ssl on;</span><br><span class="line">       ssl_certificate &quot;/etc/nginx/9009563_yq.cherain-wh.cloud.pem&quot;;</span><br><span class="line">       ssl_certificate_key &quot;/etc/nginx/9009563_yq.cherain-wh.cloud.key&quot;;</span><br><span class="line">       ssl_session_cache shared:SSL:1m;</span><br><span class="line">       ssl_session_timeout  10m;</span><br><span class="line">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">       ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">       if ($scheme = http) &#123;</span><br><span class="line">           return 301 https://$host$request_uri;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       # Load configuration files for the default server block.</span><br><span class="line">       include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:5000;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       error_page 404 /404.html;</span><br><span class="line">           location = /40x.html &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       error_page 500 502 503 504 /50x.html;</span><br><span class="line">           location = /50x.html &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-gunicorn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crontab定时任务</title>
      <link href="/post/e4ca1138.html"/>
      <url>/post/e4ca1138.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>定期执行程序的命令。</p><p>通过 &#x2F;etc&#x2F;cron.allow（白名单） 和 &#x2F;etc&#x2F;cron.deny（黑名单） 文件来限制某些用户是否可以使用 crontab 命令的。</p><h2 id="进入编辑界面"><a href="#进入编辑界面" class="headerlink" title="进入编辑界面"></a>进入编辑界面</h2><p> 操作方法和vim一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><h2 id="编辑内容-，-x2F-的含义"><a href="#编辑内容-，-x2F-的含义" class="headerlink" title="编辑内容* ， - &#x2F;的含义"></a>编辑内容* ， - &#x2F;的含义</h2><p>*号的含义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* * * * *</span><br><span class="line">分 时 天 月 星期</span><br></pre></td></tr></table></figure><p>特殊符号的含义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“,”：不连续的时间</span><br><span class="line">“-”：连续的时间</span><br><span class="line">“/”：每隔多久执行一次</span><br></pre></td></tr></table></figure><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>45 22 * * *   在22点45分</p><p>0 17 * * 1    每周一的17点0分</p><p>0  5  1,15 * *   每月1号和15号的凌晨5点0分</p><p>40 4 * * 1-5 每周一到周五的四点四十分</p><p>*&#x2F;10 4  * * *   每天四点，每隔十分钟执行一次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每天十一点半 执行一次python脚本 并将输出内容写入到/root/domestic_log文件内 同时在后台执行</span></span><br><span class="line">30 11 * * * python /root/yq_project/spider/spider_tx.py domestic &gt;&gt; /root/domestic_log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="查看定时任务"><a href="#查看定时任务" class="headerlink" title="查看定时任务"></a>查看定时任务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><p>发送到外部邮箱,以qq邮箱为例</p><p>在<font color=red>cat &#x2F;etc&#x2F;crontab</font>将<font color=red>MAILTO&#x3D;root</font>&gt; 修改为你需要的外部邮箱账号</p><p>且在<font color=red>crontab -e</font>&gt; 的第一行添加<font color=red>MAILTO&#x3D;外部邮箱账号</font>&gt;</p><p>并且配合<font color=red>linux</font>&gt;发送邮件文章使用</p><p>发送邮件参考链接：<a href="https://blog.csdn.net/XUEYUTIANQI/article/details/113845819?spm=1001.2014.3001.5502">https://blog.csdn.net/XUEYUTIANQI/article/details/113845819?spm=1001.2014.3001.5502</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python百度普通收录API提交工具</title>
      <link href="/post/29dc37fe.html"/>
      <url>/post/29dc37fe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>大家应该都是看了<a href="https://ziyuan.baidu.com/linksubmit/">百度普通收录</a>的API提交到这来的。</p><p>​我看了看网上放了好多这样的脚本，要么很复杂，要么感觉很乱，于是就自己写了一个，这个东西很简单自己又不想写，于是我辛苦一下，放这给大家随手一用。</p><p>这里需要你记录两个东西：</p><p><img src="https://images.cherain-wh.cloud/image-20221206012314029.png" alt="image-20221206012314029"></p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>这里可以选两种sitemap.xml，你本地生成的或你网站上能访问到的都行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SL</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, site, token, sitemap_xml</span>):</span><br><span class="line">        self.site = site</span><br><span class="line">        self.token = token</span><br><span class="line">        self.sitemap_xml = sitemap_xml</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bokeurl</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.sitemap_xml, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">        urls = re.findall(<span class="string">r&#x27;&lt;loc&gt;(.+?)&lt;/loc&gt;&#x27;</span>, data, re.S)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&gt;&gt;&gt; 读取网站地图共有网页链接数 ：<span class="subst">&#123;<span class="built_in">len</span>(urls)&#125;</span> 条!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_site_map</span>(<span class="params">self</span>):</span><br><span class="line">        response = requests.get(url=self.sitemap_xml)</span><br><span class="line">        urls = re.findall(<span class="string">&#x27;&lt;loc&gt;(.*?)&lt;/loc&gt;&#x27;</span>, response.text)</span><br><span class="line">        <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">api</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># sitemap.xml是链接时</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;http&quot;</span> <span class="keyword">in</span> self.sitemap_xml:</span><br><span class="line">            urls = self.get_site_map()</span><br><span class="line">        <span class="comment"># sitemap.xml是文件时</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            urls = self.get_bokeurl()</span><br><span class="line">        post_url = <span class="string">f&#x27;http://data.zz.baidu.com/urls?site=<span class="subst">&#123;self.site&#125;</span>&amp;token=<span class="subst">&#123;self.token&#125;</span>&#x27;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;curl/7.12.1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;data.zz.baidu.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;83&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(post_url, headers=headers, data=<span class="string">&#x27;\n&#x27;</span>.join(urls))</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            data = response.json()</span><br><span class="line">            <span class="comment"># 推送成功的次数</span></span><br><span class="line">            len_url = data.get(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">            <span class="comment"># 剩余的推送次数</span></span><br><span class="line">            remain_url = data.get(<span class="string">&#x27;remain&#x27;</span>)</span><br><span class="line">            <span class="comment"># 不是本站的url</span></span><br><span class="line">            not_same_site_urls = data.get(<span class="string">&quot;not_same_site&quot;</span>)</span><br><span class="line">            <span class="comment"># 不合法的url</span></span><br><span class="line">            not_valid_urls = data.get(<span class="string">&quot;not_valid_url&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;成功推送的url共：<span class="subst">&#123;len_url&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;当天剩余的可推送url条数：<span class="subst">&#123;remain_url&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;由于不是本站url而未处理的url列表：<span class="subst">&#123;not_same_site_urls&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;不合法的url列表：<span class="subst">&#123;not_valid_urls&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 推送失败信息</span></span><br><span class="line">            <span class="built_in">print</span>(response.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    site = <span class="string">&quot;你的网站地址&quot;</span></span><br><span class="line">    token = <span class="string">&quot;你的token&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 你本地的sitemap.xml</span></span><br><span class="line">    sitemap_xml = <span class="string">&quot;/Users/wanghan/Desktop/code/blog/public/sitemap.xml&quot;</span></span><br><span class="line">    <span class="comment"># # 你网站上的sitemap.xml地址</span></span><br><span class="line">    <span class="comment"># sitemap_xml = &quot;https://www.cherain-wh.cloud/sitemap.xml&quot;</span></span><br><span class="line">    </span><br><span class="line">    sl = SL(site=site, token=token, sitemap_xml=sitemap_xml)  <span class="comment"># sitemap_xml 本地或网站 选一种</span></span><br><span class="line">    sl.api()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://images.cherain-wh.cloud/image-20221206012458895.png" alt="image-20221206012458895"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo升级6.2.0及以上版本报错YAMLException</title>
      <link href="/post/d9f6f68b.html"/>
      <url>/post/d9f6f68b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h1><p>关于我Hexo升级6.2.0及以上版本的一个报错，后来回顾了一下这个报错，没有具体的报错信息，只有这么一个大概。</p><p>执行任何关于hexo的命令都会报以下的警告错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WARN</span> <span class="title class_">YAMLException</span>: please see <span class="attr">https</span>:<span class="comment">//github.com/hexojs/hexo/issues/4917</span></span><br><span class="line"><span class="title class_">YAMLException</span>: <span class="title class_">Specified</span> list <span class="keyword">of</span> <span class="variable constant_">YAML</span> types (or a single <span class="title class_">Type</span> object) contains a non-<span class="title class_">Type</span> object.</span><br><span class="line">    at /home/noraj/<span class="title class_">Dev</span>/hackdoc/node_modules/hexo/node_modules/js-yaml/lib/schema.<span class="property">js</span>:<span class="number">104</span>:<span class="number">13</span></span><br><span class="line">    at <span class="title class_">Array</span>.<span class="property">forEach</span> (&lt;anonymous&gt;)</span><br><span class="line">    at <span class="title class_">Schema</span>.<span class="property">extend</span> (<span class="regexp">/home/</span>noraj/<span class="title class_">Dev</span>/hackdoc/node_modules/hexo/node_modules/js-yaml/lib/schema.<span class="property">js</span>:<span class="number">102</span>:<span class="number">12</span>)</span><br><span class="line">    at <span class="title class_">Object</span>.&lt;anonymous&gt; (<span class="regexp">/home/</span>noraj/<span class="title class_">Dev</span>/hackdoc/node_modules/hexo/lib/plugins/renderer/yaml.<span class="property">js</span>:<span class="number">5</span>:<span class="number">36</span>)</span><br><span class="line">    at <span class="title class_">Module</span>.<span class="property">_compile</span> (<span class="attr">node</span>:internal/modules/cjs/<span class="attr">loader</span>:<span class="number">1097</span>:<span class="number">14</span>)</span><br><span class="line">    at <span class="title class_">Object</span>.<span class="property">Module</span>.<span class="property">_extensions</span>..<span class="property">js</span> (<span class="attr">node</span>:internal/modules/cjs/<span class="attr">loader</span>:<span class="number">1151</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="title class_">Module</span>.<span class="property">load</span> (<span class="attr">node</span>:internal/modules/cjs/<span class="attr">loader</span>:<span class="number">975</span>:<span class="number">32</span>)</span><br><span class="line">    at <span class="title class_">Function</span>.<span class="property">Module</span>.<span class="property">_load</span> (<span class="attr">node</span>:internal/modules/cjs/<span class="attr">loader</span>:<span class="number">822</span>:<span class="number">12</span>)</span><br><span class="line">    at <span class="title class_">Module</span>.<span class="property">require</span> (<span class="attr">node</span>:internal/modules/cjs/<span class="attr">loader</span>:<span class="number">999</span>:<span class="number">19</span>)</span><br><span class="line">    at <span class="built_in">require</span> (<span class="attr">node</span>:internal/modules/cjs/<span class="attr">helpers</span>:<span class="number">102</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="variable language_">module</span>.<span class="property">exports</span> (<span class="regexp">/home/</span>noraj/<span class="title class_">Dev</span>/hackdoc/node_modules/hexo/lib/plugins/renderer/index.<span class="property">js</span>:<span class="number">15</span>:<span class="number">16</span>)</span><br><span class="line">...js-yaml...记得后面也都是什么js-yaml文件</span><br></pre></td></tr></table></figure><p>这里去GitHub上搜了一下，说是hexo6.2.0之后的版本应该都需要js-yaml插件才行</p><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><p>这里你可以先查看一下自己的依赖树：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list js-yaml</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/12/03/zDzay4.png" alt="zDzay4.png"></p><p>这里你可以看到js-yaml最高的版本是4.1.0，所以你可以手动去安装这个版本，npm会优先使用它的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install js-yaml@4.1.0</span><br></pre></td></tr></table></figure><h1 id="万能解决方法"><a href="#万能解决方法" class="headerlink" title="万能解决方法"></a>万能解决方法</h1><p>安装一个最新版本的这个插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install js-yaml@latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly雪花背景</title>
      <link href="/post/76336ba9.html"/>
      <url>/post/76336ba9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>效果展示：</p><p><img src="https://s1.ax1x.com/2022/12/02/zBfQgO.png" alt="zBfQgO.png"></p><blockquote><p>创建文件：themes&#x2F;hexo-theme-butterfly&#x2F;source&#x2F;js&#x2F;snow.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line">$.fn.<span class="property">snow</span> = <span class="keyword">function</span>(<span class="params">options</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> $flake = $(<span class="string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).<span class="title function_">css</span>(&#123;<span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;z-index&#x27;</span>:<span class="string">&#x27;9999&#x27;</span>, <span class="string">&#x27;top&#x27;</span>: <span class="string">&#x27;-50px&#x27;</span>&#125;).<span class="title function_">html</span>(<span class="string">&#x27;&amp;#10052;&#x27;</span>),</span><br><span class="line">documentHeight = $(<span class="variable language_">document</span>).<span class="title function_">height</span>(),</span><br><span class="line">documentWidth= $(<span class="variable language_">document</span>).<span class="title function_">width</span>(),</span><br><span class="line">defaults = &#123;</span><br><span class="line">minSize: <span class="number">10</span>,</span><br><span class="line">maxSize: <span class="number">20</span>,</span><br><span class="line">newOn: <span class="number">1000</span>,</span><br><span class="line">flakeColor: <span class="string">&quot;#FFFFFF&quot;</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">&#125;,</span><br><span class="line">options= $.<span class="title function_">extend</span>(&#123;&#125;, defaults, options);</span><br><span class="line"><span class="keyword">var</span> interval= <span class="built_in">setInterval</span>( <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> startPositionLeft = <span class="title class_">Math</span>.<span class="title function_">random</span>() * documentWidth - <span class="number">100</span>,</span><br><span class="line">startOpacity = <span class="number">0.5</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>(),</span><br><span class="line">sizeFlake = options.<span class="property">minSize</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * options.<span class="property">maxSize</span>,</span><br><span class="line">endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">500</span>,</span><br><span class="line">durationFall = documentHeight * <span class="number">10</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">5000</span>;</span><br><span class="line">$flake.<span class="title function_">clone</span>().<span class="title function_">appendTo</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line"><span class="attr">left</span>: startPositionLeft,</span><br><span class="line"><span class="attr">opacity</span>: startOpacity,</span><br><span class="line"><span class="string">&#x27;font-size&#x27;</span>: sizeFlake,</span><br><span class="line"><span class="attr">color</span>: options.<span class="property">flakeColor</span></span><br><span class="line">&#125;).<span class="title function_">animate</span>(&#123;</span><br><span class="line"><span class="attr">top</span>: endPositionTop,</span><br><span class="line"><span class="attr">left</span>: endPositionLeft,</span><br><span class="line"><span class="attr">opacity</span>: <span class="number">0.2</span></span><br><span class="line">&#125;,durationFall,<span class="string">&#x27;linear&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">remove</span>()</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, options.<span class="property">newOn</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.fn.<span class="title function_">snow</span>(&#123;</span><br><span class="line">    <span class="attr">minSize</span>: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">    <span class="attr">maxSize</span>: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">    <span class="attr">newOn</span>: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>themes&#x2F;hexo-theme-butterfly&#x2F;layout&#x2F;includes&#x2F;layout.pug 添加内容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;https://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 雪花特效 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;\js\snow.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>click命令行神器</title>
      <link href="/post/f954cd74.html"/>
      <url>/post/f954cd74.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>click可以将函数装饰为命令行接口，支持高度自定义的配置。</p><p>使用Click 分为两个步骤：</p><ol><li>使用 <strong><code>@click.command()</code></strong> 装饰一个函数，使之成为命令行接口</li><li>使用 <strong><code>@click.option()</code></strong> 装饰函数，为其添加可选命令行参数，支持设置固定长度的参数值</li><li>使用 <strong><code>@click.argument()</code></strong>  装饰函数，为其添加固定命令行参数，支持设置不定长度的参数值</li></ol><p>@click.option() 最基本的用法就是通过指定命令行选项的名称，从命令行读取参数值，再将其传递给函数。常用参数值如下：</p><ul><li>default：设置命令行参数的默认值</li><li>help：参数说明</li><li>type：参数类型，可以是 string, int, float 等 </li><li>choice：可选值，可选多个值</li><li>echo：输出，和print一样</li><li>nargs：指定命令行参数接收的值的个数，他就是option()支持设置固定长度的参数值</li><li>hide_input：用于隐藏输入</li><li>confirmation_promt：用于重复输入</li><li>prompt：当在命令行中没有输入相应的参数时，会根据 prompt 提示用户输入</li><li>is_eager：True表明该命令行选项优先级高于其他选项</li><li>expose_value：False表示如果没有输入该命令行选项，会执行既定的命令行流程</li><li>callback：回调函数，指定了输入该命令行选项时，要跳转执行的函数</li><li>metavar：如何在帮助页面表示值</li></ul><p>@click.argument()常见的参数值如下：</p><ul><li>nargs：布丁参数，nargs&#x3D;-1时，表明参数接收不定量的参数值，参数值会以 tuple 的形式传入函数；如果 nargs 大于等于 1，表示接收 nargs 个参数值</li></ul><h1 id="click-option"><a href="#click-option" class="headerlink" title="click.option()"></a>click.option()</h1><h3 id="default默认值"><a href="#default默认值" class="headerlink" title="default默认值"></a>default默认值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰这个函数为命令行接口</span></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="comment"># 为这个命令行接口添加参数</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--num_default&#x27;</span>,default=<span class="number">1</span>,<span class="built_in">help</span>=<span class="string">&#x27;num_default&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_default</span>(<span class="params">num_default</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num_default: %s&quot;</span>%num_default)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    show_default() <span class="comment"># python click_test.py</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py</span><br><span class="line">num_default: <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="type参数类型"><a href="#type参数类型" class="headerlink" title="type参数类型"></a>type参数类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--num_type&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">float</span>,<span class="built_in">help</span>=<span class="string">&#x27;num_float&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_type</span>(<span class="params">num_type</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num_type: %s&quot;</span>%num_type)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    show_type() <span class="comment"># python click_test.py --num_type 1</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py --num_type <span class="number">1</span></span><br><span class="line">num_type: <span class="number">1.0</span></span><br></pre></td></tr></table></figure><h3 id="choice参数值可选"><a href="#choice参数值可选" class="headerlink" title="choice参数值可选"></a>choice参数值可选</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--num_choice&#x27;</span>,<span class="built_in">type</span>=click.Choice(<span class="params">[<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;woman&#x27;</span>]</span>),<span class="built_in">help</span>=<span class="string">&quot;choice man woman&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_choice</span>(<span class="params">num_choice</span>):</span><br><span class="line">    <span class="comment"># 输出</span></span><br><span class="line">    click.echo(<span class="string">&#x27;num_choice: %s&#x27;</span>%num_choice)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    show_choice() <span class="comment"># python click_test.py --num_choice man</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py --num_choice man</span><br><span class="line">num_choice: man</span><br></pre></td></tr></table></figure><h3 id="nargs设置参数值的长度"><a href="#nargs设置参数值的长度" class="headerlink" title="nargs设置参数值的长度"></a>nargs设置参数值的长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-num_nargs&#x27;</span>,nargs=<span class="number">2</span>,<span class="built_in">type</span>=<span class="built_in">int</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_nargs</span>(<span class="params">num_nargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;接收到的参数：<span class="subst">&#123;num_nargs&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    show_nargs() <span class="comment"># python click_test.py -num_nargs 1 2</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py -num_nargs <span class="number">1</span> <span class="number">2</span></span><br><span class="line">接收到的参数：(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="hide-input-confirmation-promt-隐藏-重复输入参数、prompt提示用户输入"><a href="#hide-input-confirmation-promt-隐藏-重复输入参数、prompt提示用户输入" class="headerlink" title="hide_input\confirmation_promt 隐藏\重复输入参数、prompt提示用户输入"></a>hide_input\confirmation_promt 隐藏\重复输入参数、prompt提示用户输入</h3><p>通常用于输入密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--password&#x27;</span>, prompt=<span class="literal">True</span>, hide_input=<span class="literal">True</span>, confirmation_prompt=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_password</span>(<span class="params">password</span>):</span><br><span class="line">    click.echo(<span class="string">&#x27;password: %s&#x27;</span> % password)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    input_password() <span class="comment"># python click_test.py</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py</span><br><span class="line">Password: </span><br><span class="line">Repeat <span class="keyword">for</span> confirmation: </span><br><span class="line">password: <span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="is-eager优先级标识-x2F-callback回调函数"><a href="#is-eager优先级标识-x2F-callback回调函数" class="headerlink" title="is_eager优先级标识&#x2F;callback回调函数"></a>is_eager优先级标识&#x2F;callback回调函数</h3><p>通常用于改变命令行程序的执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">ctx, param, value</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value <span class="keyword">or</span> ctx.resilient_parsing:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;回调函数执行&quot;</span>)</span><br><span class="line">    ctx.exit()</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-num_eager&quot;</span>,is_flag=<span class="literal">True</span>,callback=func,expose_value=<span class="literal">False</span>,is_eager=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&quot;-name&quot;</span>,default=<span class="string">&quot;hwang&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_eager_callback</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    show_eager_callback() <span class="comment"># python click_test.py</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py</span><br><span class="line">hwang</span><br><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py -name <span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py -num_eager</span><br><span class="line">回调函数执行</span><br></pre></td></tr></table></figure><h1 id="click-argument"><a href="#click-argument" class="headerlink" title="click.argument()"></a>click.argument()</h1><h3 id="nargs不定长参数"><a href="#nargs不定长参数" class="headerlink" title="nargs不定长参数"></a>nargs不定长参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.argument(<span class="params"><span class="string">&#x27;x&#x27;</span>, nargs=-<span class="number">1</span></span>)</span></span><br><span class="line"><span class="meta">@click.argument(<span class="params"><span class="string">&#x27;y&#x27;</span>, nargs=<span class="number">1</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_argument_nargs</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收到的x参数：&quot;</span>,x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收到的y参数：&quot;</span>,y)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    show_argument_nargs() <span class="comment"># python click_test.py file1 file2 file3 file4</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py file1 file2 file3 file4</span><br><span class="line">接收到的x参数： (<span class="string">&#x27;file1&#x27;</span>, <span class="string">&#x27;file2&#x27;</span>, <span class="string">&#x27;file3&#x27;</span>)</span><br><span class="line">接收到的y参数： file4</span><br></pre></td></tr></table></figure><h1 id="彩色输出-click-colorama"><a href="#彩色输出-click-colorama" class="headerlink" title="彩色输出(click + colorama)"></a>彩色输出(click + colorama)</h1><blockquote><p>pip install colorama</p></blockquote><ul><li>fg 表示前景颜色（即字体颜色），可选值有：BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE 等；</li><li>bg 表示背景颜色，可选值有：BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE 等；</li><li>underline 表示下划线，可选的样式还有：dim&#x3D;True，bold&#x3D;True 等；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--name&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;name&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    click.secho(<span class="string">&#x27;Hello %s!&#x27;</span> % name, fg=<span class="string">&#x27;red&#x27;</span>, underline=<span class="literal">True</span>)</span><br><span class="line">    click.secho(<span class="string">&#x27;Hello %s!&#x27;</span> % name, fg=<span class="string">&#x27;yellow&#x27;</span>, bg=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hello() <span class="comment"># python click_test.py --name hwang</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(project_test) wanghan@wanghandeMacBook-Pro learn_click % python click_test.py --name hwang</span><br><span class="line">Hello hwang!</span><br><span class="line">Hello hwang!</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/12/02/z0OJnP.png" alt="z0OJnP.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-click </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解装饰器</title>
      <link href="/post/4dcee1d3.html"/>
      <url>/post/4dcee1d3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>​装饰器本质上就是一个函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外的功能，装饰器的返回值也是一个函数对象。</p><p>​它经常用于以下场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景，是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与功能函数本身无关的雷同代码继续重用。</p><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h3 id="函数装饰器（普通装饰器）"><a href="#函数装饰器（普通装饰器）" class="headerlink" title="函数装饰器（普通装饰器）"></a>函数装饰器（普通装饰器）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">  @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用func之前&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用func之后&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"></span><br><span class="line"><span class="meta">@a_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个a_function函数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a_function()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">调用func之前</span><br><span class="line">这是一个a_function函数</span><br><span class="line">调用func之后</span><br></pre></td></tr></table></figure><h3 id="带参数的函数装饰器"><a href="#带参数的函数装饰器" class="headerlink" title="带参数的函数装饰器"></a>带参数的函数装饰器</h3><p>在函数wrapper外部包一层logger用来接收参数msg，接收回来的参数就可以在内部的函数调用了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logger</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>日志开始<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;装饰器的参数：<span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>日志结束<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># return func(*args,**kwargs) # 可以替换上面的日志逻辑为其他操作，然后直接返回原函数 处理其他业务</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper_function</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger(<span class="params">msg=&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hwang&quot;</span>&#125;</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收到的参数：&quot;</span>, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    my_function(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------日志开始--------------------------------------------------</span><br><span class="line">装饰器的参数：&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;hwang&#x27;</span>&#125;</span><br><span class="line">接收到的参数： Hello</span><br><span class="line">--------------------------------------------------日志结束--------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>类装饰器与函数装饰器并没有太大区别，实质是使用了类方法中的<strong>call</strong>魔法方法来实现类的直接调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">logging</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>日志开始<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>&quot;</span>)</span><br><span class="line">        self.func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>日志结束<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># return self.func(*args, **kwargs) # 可以替换上面的日志逻辑为其他操作，然后直接返回原函数 处理其他业务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logging</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hello(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------日志开始--------------------------------------------------</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">--------------------------------------------------日志结束--------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="带参数的类装饰器"><a href="#带参数的类装饰器" class="headerlink" title="带参数的类装饰器"></a>带参数的类装饰器</h3><ul><li>通过__init__（）方法初始化类</li><li>通过__call__（）方法调用真正的装饰方法</li></ul><p>关于call方法的概念：就是可调用对象，但凡在类中实现了<code>__call__</code>方法，那么实例对象也将成为一个可调用对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">logging</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, level</span>):</span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>日志<span class="subst">&#123;self.level&#125;</span>开始<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>&quot;</span>)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>日志<span class="subst">&#123;self.level&#125;</span>结束<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># return func(*args, **kwargs) # 可以替换上面的日志逻辑为其他操作，然后直接返回原函数 处理其他业务</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logging(<span class="params">level=<span class="string">&quot;TEST&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hello(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------日志TEST开始--------------------------------------------------</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">--------------------------------------------------日志TEST结束--------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解闭包</title>
      <link href="/post/6a5062be.html"/>
      <url>/post/6a5062be.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>​通俗的讲闭包就是在一个函数中嵌套了另一个函数（外面那层函数叫外部函数，反之亦然），然后内部函数引用了外部函数的变量，（并且一般外部函数的返回值都是内部函数），那么这个内部函数就被认定为是闭包。</p><p><strong>注意：</strong></p><ol><li>闭包可以将外部函数的变量始终保存到内存中（下面会解释到）。</li><li>闭包不能修改外部函数的局部变量。</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">y:<span class="built_in">int</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(y) <span class="comment"># 2</span></span><br><span class="line">        <span class="built_in">print</span>(x+y) <span class="comment"># 3</span></span><br><span class="line">    <span class="keyword">return</span> func2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = func(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(f) <span class="comment"># &lt;function func.&lt;locals&gt;.func2 at 0x7f8028600200&gt;</span></span><br><span class="line">f(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(f.__name__) <span class="comment"># func2</span></span><br></pre></td></tr></table></figure><p>​通过上面的示例可以看出，f是函数func2，而不是func，因为func返回的就是func2函数。所以当向f传值的时候，就相当于向函数func2传值。</p><p>​读到这里你一定想，为什么要用这个闭包呢？直接用下面这个就可以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>)</span><br><span class="line"><span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>上面的程序确实可以实现，但是使用闭包可以让代码更简洁易读。假设你要用1加多个数，用上面这个就每次要多传递一个参数，而用闭包调用就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">2</span>) <span class="comment"># 3</span></span><br><span class="line">f(<span class="number">3</span>) <span class="comment"># 4</span></span><br><span class="line">f(<span class="number">4</span>) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>**__closure__**，可以展示出闭包储存了外部函数的几个变量，cell的内存地址是什么，cell储存类型是什么，这个int储存的内存地址是什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(f.__closure__) <span class="comment"># (&lt;cell at 0x7fa7d026d490: int object at 0x104e32160&gt;,)</span></span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><h4 id="闭包可以将外部函数的变量始终保存到内存中"><a href="#闭包可以将外部函数的变量始终保存到内存中" class="headerlink" title="闭包可以将外部函数的变量始终保存到内存中"></a>闭包可以将外部函数的变量始终保存到内存中</h4><p>​闭包可以保存当前的运行环境，以一个类似棋盘游戏的例子来说明。假设棋盘大小为50*50，左上角为坐标系原点(0,0)，我需要一个函数，接收2个参数，分别为方向(direction)，步长(step)，该函数控制棋子的运动。 这里需要说明的是，每次运动的起点都是上次运动结束的终点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">pos=[<span class="number">0</span>,<span class="number">0</span>]</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">direction, step</span>):</span><br><span class="line">        new_x = pos[<span class="number">0</span>]+direction[<span class="number">0</span>]*step</span><br><span class="line">        new_y = pos[<span class="number">1</span>]+direction[<span class="number">1</span>]*step</span><br><span class="line">        </span><br><span class="line">        pos[<span class="number">0</span>] = new_x</span><br><span class="line">        pos[<span class="number">1</span>] = new_y</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pos</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> go</span><br><span class="line"></span><br><span class="line">player = create()</span><br><span class="line"><span class="built_in">print</span>(player([<span class="number">1</span>,<span class="number">0</span>],<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(player([<span class="number">0</span>,<span class="number">1</span>],<span class="number">20</span>))</span><br><span class="line"><span class="built_in">print</span>(player([-<span class="number">1</span>,<span class="number">0</span>],<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">20</span>]</span><br></pre></td></tr></table></figure><h4 id="闭包不能修改外部函数的局部变量"><a href="#闭包不能修改外部函数的局部变量" class="headerlink" title="闭包不能修改外部函数的局部变量"></a>闭包不能修改外部函数的局部变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">        x = <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(x) <span class="comment"># 2</span></span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment"># 1</span></span><br><span class="line">    func2()</span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果函数func2可以修改x 的值，那x的值应该为2，但实际结果并不会改变x的值。这个就是闭包不能修改外部函数的局部变量</p><h4 id="python循环中不包含域的概念"><a href="#python循环中不包含域的概念" class="headerlink" title="python循环中不包含域的概念"></a>python循环中不包含域的概念</h4><p>看到这你可能在想这和闭包有什么关系？不着急慢慢往下看，会有惊喜等你的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">return</span> x + i</span><br><span class="line">    <span class="built_in">list</span>.append(func)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(f(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>按照大家正常的理解，第二个循环过程应该为2+0、2+1、2+2，输出的是2, 3, 4对吧？但实际过程却是2+2、2+2、2+2，输出的结果是:4, 4, 4. 原因是什么呢？</p><p><strong>分析：</strong></p><p>​我们先通过debug打断点来看下这段代码，你会发现，第一个for循环的时候，i变量一直在变化直到2停下，函数func也被依次添加到变量list。因为我们并没有去执行这个函数，所以这个过程中并没有打印i的值，也就意味着此时func内部是没有记录变量i的，而是只走了添加func到list；</p><p>​在执行第二个for循环的时候，此时list里面的元素就是函数func，所以当我们向f传递参数2的时候，就是在向函数func传递参数2，这也就相当于去执行函数func，这时他会跳回func函数，去打印变量i，而这个时候的i已经是2了。所以return返回的结果应该为2+2、2+2、2+2。导致最终输出的结果为4，4，4</p><p><strong>结论：</strong></p><p>​在python中是没有域的概念的。在向列表list中添加func的时候，并没有保存i的值，而是当执行f(2)的时候才去取变量i，这时候循环已经结束，i的值已经是2了</p><p>如何将这段代码改为我们理解那种循环过程而又和闭包有关系呢？</p><p><strong>修改：</strong></p><p>在func外面嵌套一层add_func函数，那么func就形成了一个闭包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_func</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;i：&quot;</span>, i)</span><br><span class="line">            <span class="keyword">return</span> x + i</span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    <span class="built_in">list</span>.append(add_func(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(f(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i： <span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">i： <span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">i： <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel 被墙后国内无法访问的解决方案</title>
      <link href="/post/947f5b53.html"/>
      <url>/post/947f5b53.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="域名解析配置"><a href="#域名解析配置" class="headerlink" title="域名解析配置"></a>域名解析配置</h1><p><font color=red>也许你不是在硅云下购买的域名，也可以按同样的逻辑处理。</font></p><p>进入域名控制面板（其他地方的域名同理）</p><p><img src="https://s1.ax1x.com/2022/11/27/zUZ528.png" alt="zUZ528.png"></p><p>在域名控制面板下，找到DNS解析，然后选择添加记录：主机记录随便起，记录类型为A的记录值必须是76.233.126.88，记录类型为CHNAME的记录值可以在下面步骤Vercel部署时提示你填什么，根据自己的内容，再补充上去即可。（其他地方的域名同理）</p><p><img src="https://s1.ax1x.com/2022/11/27/zUekI1.png" alt="zUekI1.png"></p><h1 id="修改Vercel配置"><a href="#修改Vercel配置" class="headerlink" title="修改Vercel配置"></a>修改Vercel配置</h1><p>进入<a href="https://vercel.com/dashboard">vercel控制台</a></p><p><img src="https://s1.ax1x.com/2022/11/28/zawXlT.png" alt="zawXlT.png"></p><p><img src="https://s1.ax1x.com/2022/11/28/za0kp6.png" alt="za0kp6.png"></p><p>等待片刻，他就会解析出来了。如果解析失败会提示你，在你输入域名的DNS解析下添加【记录类型、记录值】</p><p><img src="https://s1.ax1x.com/2022/11/28/za0Pt1.png" alt="za0Pt1.png"></p><p>再次访问，发现正常了。</p><p><img src="https://s1.ax1x.com/2022/11/28/zawcFI.png" alt="zawcFI.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费域名申请（硅云）</title>
      <link href="/post/393104e9.html"/>
      <url>/post/393104e9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>先去注册以下吧：<a href="https://www.vpsor.cn/?userCode=kh1fc03">硅云</a></p><p>输入一个自己想要的域名，就可以嗷嗷选了</p><p><img src="https://s1.ax1x.com/2022/11/28/za2GjI.png" alt="za2GjI.png"></p><p>注册过程中需要你先实名创建一个域名模板，这个过程有点慢，因为需要先等待模板审核好。不过别着急，一般都是一两个小时左右。</p><p>其他的云也是需要审核。所以我们也先等等啦。😄</p><p><img src="https://s1.ax1x.com/2022/11/28/za2HDx.png" alt="za2HDx.png"></p><p>注册完到这来<a href="https://www.vpsor.cn/center/personal/myProduct/domain">控制台</a>，就可以看到了✌️</p><p><img src="https://s1.ax1x.com/2022/11/28/za2cD0.png" alt="za2cD0.png"></p><p>如果你想配置DNS解析、或者修改域名DNS，都需要从这进入哦。他就是你们想要的<a href="https://dnsmsn.com/panel/domain/default/index.do">域名控制面板</a>。</p><p><img src="https://s1.ax1x.com/2022/11/28/zaRFVf.png" alt="zaRFVf.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Butterfly Twikoo评论系统</title>
      <link href="/post/a30824ee.html"/>
      <url>/post/a30824ee.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><a href="https://www.bilibili.com/video/BV1Fh411e7ZH/?share_source=copy_web&vd_source=4eed739224c17f49129d9136a4b95aa0">官方视频教程</a></p><blockquote><p>你可以结合本文内容和官方的视频教程一起配置。本文为主，视频为辅。</p></blockquote><details><summary><font color=red>展开预览评论效果</font></summary><p><img src="https://s1.ax1x.com/2022/11/27/zUP8w6.png"</p></details><h1 id="配置数据库MongoDB"><a href="#配置数据库MongoDB" class="headerlink" title="配置数据库MongoDB"></a>配置数据库MongoDB</h1><p>使用<code>MongoDB</code>数据库来存储数据，先<a href="https://www.mongodb.com/zh-cn/cloud/atlas/register">注册 MongoDB 账号</a></p><p>1. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUPtYD.png" alt="zUPtYD.png"></p><p>2. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUPGTK.png" alt="zUPGTK.png"></p><p>3. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUPYFO.png" alt="zUPYFO.png"></p><p>4. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUPNfe.png" alt="zUPNfe.png"></p><p>5. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUPaSH.png" alt="zUPaSH.png"></p><p>6. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUP0OI.png" alt="zUP0OI.png"></p><p>7. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUPdld.png" alt="zUPdld.png"></p><p>8. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUiW4O.png" alt="zUiW4O.png"></p><p><strong>允许所有 IP 地址的连接</strong>，并<strong>创建数据库用户</strong></p><p>9. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUi7DI.png" alt="zUi7DI.png"></p><p>10. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUiLUf.png" alt="zUiLUf.png"></p><p>11. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUFurR.png" alt="zUFurR.png"></p><p>12. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUFGGD.png" alt="zUFGGD.png"></p><p>13. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUFwZt.png" alt="zUFwZt.png"></p><p>14. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUFqy9.png" alt="zUFqy9.png"></p><p>15. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUkCSe.png" alt="zUkCSe.png"></p><p><font color=red>替换好了先放着，后面有用</font></p><h1 id="配置云函数Vercel"><a href="#配置云函数Vercel" class="headerlink" title="配置云函数Vercel"></a>配置云函数Vercel</h1><p>使用<code>Vercel</code>来运行云函数，先<a href="https://vercel.com/signup">注册 vercel 账号</a>，可以选择从<code>GitHub</code>之类的登录，也可以选择通过邮箱注册</p><p>1. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUkf6H.png" alt="zUkf6H.png"></p><p>登陆之后，进入<a href="https://twikoo.js.org/quick-start.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%83%A8%E7%BD%B2">官方文档</a>，点击跳转Vercel部署页面</p><p>2. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUkzBn.png" alt="zUkzBn.png"></p><p>下图：可以按照视频的逻辑，选择github授权登陆（当然你也可以选择别的）</p><p>3. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUAeBR.png" alt="zUAeBR.png"></p><p>等待片刻。。。等待礼花出现。。。</p><p>4. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUAO56.png" alt="zUAO56.png"></p><p>5. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUATKJ.png" alt="zUATKJ.png"></p><p>进入Deployments，点击Redeploy，是重新部署一下。</p><p>6. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUE9rd.png" alt="zUE9rd.png"></p><p>7. </p><img src="https://s1.ax1x.com/2022/11/27/zUE4ot.png" alt="zUE4ot.png" style="zoom:50%;" /><p>8. </p><img src="https://s1.ax1x.com/2022/11/27/zUVFOJ.png" alt="zUVFOJ.png" style="zoom:50%;" /><p>9. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUVmY6.png" alt="zUVmY6.png"></p><p>正常访问的样子：</p><p>10. </p><p><img src="https://s1.ax1x.com/2022/11/27/zUVKSO.png" alt="zUVKSO.png"></p><p>如果不能访问，就是Vercel.app被墙了，需要自己配置一个域名。</p><p>看另一篇宝藏文章<a href="https://www.cherain-wh.cloud/post/393104e9.html">免备案 + 一年免费域名申请</a></p><p>如果有money可以选择，<a href="https://www.aliyun.com/activity/creativity/jinqiuyunchuang?utm_content=se_1012816010">阿里云</a>，<a href="https://cloud.tencent.com/act/pro/2022double11?channel=sp&fromSource=gwzcw.7000316.7000316.7000316&utm_medium=cpc&utm_id=gwzcw.7000316.7000316.7000316">腾讯云</a>等，特别便宜可以去买一个域名来配置。不过需要备案。</p><h1 id="Vercel被墙解决方案"><a href="#Vercel被墙解决方案" class="headerlink" title="Vercel被墙解决方案"></a>Vercel被墙解决方案</h1><p>请看另一片文章：<a href="https://www.cherain-wh.cloud/post/947f5b53.html">Vercel被墙解决方案</a></p><h1 id="本地Hexo-butterfly配置"><a href="#本地Hexo-butterfly配置" class="headerlink" title="本地Hexo butterfly配置"></a>本地Hexo butterfly配置</h1><p>打开<code>_config.butterfly.yml</code>，找到comments，做以下内容的修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comments System</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">twikoo</span> <span class="comment"># Valine,Disqus</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><p>再在下方找到<code>Twikoo</code>并设置，下面是我的样例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Twikoo</span></span><br><span class="line"><span class="comment"># https://github.com/imaegoo/twikoo</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://www.plmm.space/</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-shanghai</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>重新生成并部署下，就可以看到了。。。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署阿里云轻量应用服务器</title>
      <link href="/post/257e11b8.html"/>
      <url>/post/257e11b8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开始部署前已经存在的一些条件</p><ol><li>阿里云轻量应用服务器（Centos8.2，域名已申请完毕，目前在备案中。。。）</li><li>本地的Hexo博客（已经部署过github）</li></ol><h1 id="服务器安装环境"><a href="#服务器安装环境" class="headerlink" title="服务器安装环境"></a>服务器安装环境</h1><blockquote><p>这是一台干净的服务器，安装步骤你可以视情况而定</p></blockquote><h2 id="安装yum源"><a href="#安装yum源" class="headerlink" title="安装yum源"></a>安装yum源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d</span><br><span class="line">ll</span><br><span class="line">rm -rf ./* # 删除以前的yum</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo  # 下载镜像</span><br><span class="line">yum -y clean all# 清除所有文件</span><br><span class="line">yum -y makecache  # 建立缓存</span><br><span class="line">yum repolist  # 查看yum仓库信息，对比是否为阿里云</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">到这就可以任意下载后面的了</span></span><br></pre></td></tr></table></figure><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><strong>安装：</strong>离线包地址：<a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wget https://registry.npmmirror.com/-/binary/node/v16.15.1/node-v16.15.1-linux-x64.tar.gz # 版本可以自己去离线地址找</span><br><span class="line">tar -zxvf node-v16.15.1-linux-x64.tar.gz</span><br><span class="line">mv node-v16.15.1-linux-x64 ./node</span><br><span class="line">which node # 查看当前node的安装路径</span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.bash_profile文件加入下面两行</span></span><br><span class="line">export N_PREFIX=/usr/local # node实际的安装位置（用自己的node安装路径）</span><br><span class="line">export PATH=$N_PREFIX/bin:$PATH</span><br><span class="line"></span><br><span class="line">source ~/.bash_profile # 使修改的配置生效</span><br><span class="line">node -v # 查看版本</span><br><span class="line">npm -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>升级：</strong>这里多一嘴，如果该版本不是你想要的，可以通过补充下面的步骤升级到你想要的，否则跳过。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n # n是node.js的管理工具</span><br><span class="line">n 16.15.1 # 升级到你想要的版本</span><br><span class="line">n # 选择已安装的版本（通过上下左右键切换到版本，最后回车即可）</span><br><span class="line">node -v # 查看是否切换成功</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如若版本没有变化请从上面 安装的：查看node路径 步骤开始操作即可！！！</span></span><br></pre></td></tr></table></figure><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line">sudo systemctl enable nginx</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl status nginx # 检查nginx运行状态</span><br></pre></td></tr></table></figure><h1 id="服务器配置环境"><a href="#服务器配置环境" class="headerlink" title="服务器配置环境"></a>服务器配置环境</h1><h2 id="1-用创建新用户的方式（第一种方法）"><a href="#1-用创建新用户的方式（第一种方法）" class="headerlink" title="1. 用创建新用户的方式（第一种方法）"></a>1. 用创建新用户的方式（第一种方法）</h2><h4 id="配置新用户"><a href="#配置新用户" class="headerlink" title="配置新用户"></a>配置新用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">useradd git # 创建git用户</span><br><span class="line"></span><br><span class="line">chmod 740 /etc/sudoers # 修改用户权限</span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入下面这一行</span></span><br><span class="line">git        ALL=(ALL)     ALL</span><br><span class="line"></span><br><span class="line">passwd git # 给git用户加密码</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/11/25/ztC3aF.png" alt="ztC3aF.png"></p><h4 id="配置私有仓库目录（-x2F-var-x2F-repo）"><a href="#配置私有仓库目录（-x2F-var-x2F-repo）" class="headerlink" title="配置私有仓库目录（&#x2F;var&#x2F;repo）"></a>配置私有仓库目录（&#x2F;var&#x2F;repo）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/repo/ # 在/var/repo/下，创建一个私有Git仓库</span><br><span class="line">chown -R git:git /var/repo/</span><br><span class="line">chmod -R 755 /var/repo/ # 让git用户有该目录的所有权和用户权限</span><br><span class="line">cd /var/repo/</span><br><span class="line">git init --bare hexo_static.git # 创建一个私有Git仓库</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置nginx托管目录（-x2F-var-x2F-www-x2F-hexo）"><a href="#配置nginx托管目录（-x2F-var-x2F-www-x2F-hexo）" class="headerlink" title="配置nginx托管目录（&#x2F;var&#x2F;www&#x2F;hexo）"></a>配置nginx托管目录（&#x2F;var&#x2F;www&#x2F;hexo）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/www/hexo # 创建 /var/www/hexo 目录，用于 Nginx 托管！！！</span><br><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod -R 755 /var/www/hexo # 作用：同上</span><br><span class="line">nginx -t # 查看nginx.conf配置文件路径</span><br><span class="line">vim /etc/nginx/nginx.cof # 用自己配置文件目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按照这个格式来改，下面的图有说明</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  xxx.xxx.xxx.xxx www.xxx.xxx xxx.cloud;</span><br><span class="line">        root         /var/www/hexo; # 这个就是你创建的Nginx托管目录</span><br><span class="line">        </span><br><span class="line">nginx -s reload # 重新加载nginx配置</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/11/25/ztiXUU.png" alt="ztiXUU.png"></p><h4 id="配置Git钩子"><a href="#配置Git钩子" class="headerlink" title="配置Git钩子"></a>配置Git钩子</h4><p>利用post-receive钩子，在接收到时，他会将静态HTML文件传送到刚刚创建的nginx托管目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo_static.git/hooks/post-receive # 在刚刚创建的私有仓库目录创建一个钩子文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入下面两行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f</span><br><span class="line"></span><br><span class="line">chmod +x /var/repo/hexo_static.git/hooks/post-receive # 将文件变为可执行文件</span><br></pre></td></tr></table></figure><h3 id="2-用root用户的方式（第二种方法）"><a href="#2-用root用户的方式（第二种方法）" class="headerlink" title="2.  用root用户的方式（第二种方法）"></a><font size=5>2.  用root用户的方式（第二种方法）</font></h3><h4 id="授权信任"><a href="#授权信任" class="headerlink" title="授权信任"></a>授权信任</h4><p>以下内容特殊点，需要在本地执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh/</span><br><span class="line">ssh-keygen # 生成属于自己的密钥(连续回车就可以了，如果不想连续回车，第一次输入的是文件名，第二次第三次输入的是密码)</span><br><span class="line">ssh-copy-id root@ip地址 # 然后将自己的密钥，推送到指定服务器,下面是推送指令，并且会自动推送到服务器对应目录</span><br><span class="line">ssh root@ip地址 # 推送成功之后，就可以通过ssh直接连接了,就不会再提示你输入密码了</span><br></pre></td></tr></table></figure><h4 id="配置私有仓库目录（-x2F-var-x2F-repo-x2F-）"><a href="#配置私有仓库目录（-x2F-var-x2F-repo-x2F-）" class="headerlink" title="配置私有仓库目录（&#x2F;var&#x2F;repo&#x2F;）"></a>配置私有仓库目录（&#x2F;var&#x2F;repo&#x2F;）</h4><p>服务器执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/repo/</span><br><span class="line">cd /var/repo/</span><br><span class="line">git init --bare hexo_static.git</span><br></pre></td></tr></table></figure><h4 id="配置nginx托管目录（-x2F-var-x2F-www-x2F-hexo）-1"><a href="#配置nginx托管目录（-x2F-var-x2F-www-x2F-hexo）-1" class="headerlink" title="配置nginx托管目录（&#x2F;var&#x2F;www&#x2F;hexo）"></a>配置nginx托管目录（&#x2F;var&#x2F;www&#x2F;hexo）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/www/hexo # 创建 /var/www/hexo 目录，用于 Nginx 托管！！！</span><br><span class="line">nginx -t # 查看nginx.conf配置文件路径</span><br><span class="line">vim /etc/nginx/nginx.cof # 用自己配置文件目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按照这个格式来改，下面的图有说明</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  xxx.xxx.xxx.xxx www.xxx.xxx xxx.cloud;</span><br><span class="line">        root         /var/www/hexo; # 这个就是你创建的Nginx托管目录</span><br><span class="line">        </span><br><span class="line">nginx -s reload # 重新加载nginx配置</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/11/25/ztiXUU.png" alt="ztiXUU.png"></p><h4 id="配置Git钩子-1"><a href="#配置Git钩子-1" class="headerlink" title="配置Git钩子"></a>配置Git钩子</h4><p>利用post-receive钩子，在接收到时，他会将静态HTML文件传送到刚刚创建的nginx托管目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo_static.git/hooks/post-receive # 在刚刚创建的私有仓库目录创建一个钩子文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入下面两行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f</span><br><span class="line"></span><br><span class="line">chmod +x /var/repo/hexo_static.git/hooks/post-receive # 将文件变为可执行文件</span><br></pre></td></tr></table></figure><h1 id="本地Hexo配置"><a href="#本地Hexo配置" class="headerlink" title="本地Hexo配置"></a>本地Hexo配置</h1><p>进入hexo博客的根目录</p><img src="https://s1.ax1x.com/2022/11/25/zte6JK.png" alt="zte6JK.png" style="zoom:50%;" /><h2 id="修改配置文件（-config-yml）"><a href="#修改配置文件（-config-yml）" class="headerlink" title="修改配置文件（_config.yml）"></a>修改配置文件（_config.yml）</h2><p>_config.yml为Hexo博客主配置文件</p><h4 id="URL地址"><a href="#URL地址" class="headerlink" title="URL地址"></a>URL地址</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="comment">#url: https://wanghan123-github.github.io/ (这个是以前github的地址)</span></span><br><span class="line">url: http://<span class="number">39.106</span><span class="number">.88</span><span class="number">.46</span> <span class="comment"># 后期备案完成，可将http://后面的改为www.cherain_wh.cloud</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  trailing_html: true <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><h4 id="部署地址"><a href="#部署地址" class="headerlink" title="部署地址"></a>部署地址</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">    <span class="comment"># sercer: root@ip地址:服务器私有仓库路径</span></span><br><span class="line">      server: root@xx.xxx.xx.xx:/var/repo/hexo_static.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>执行下面的hexo命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>打开网站</p><p><img src="https://s1.ax1x.com/2022/11/27/zUPDmt.png" alt="zUPDmt.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/post/4ac0a166.html"/>
      <url>/post/4ac0a166.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h1><p>ls -l 文件&#x2F;文件夹</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>finallshell用密钥对链接阿里云轻量应用服务器</title>
      <link href="/post/2d04f816.html"/>
      <url>/post/2d04f816.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>更新：目前作者已转Royal TSX，Findshell太占内存了，Royal TSX不错占用少页面也好看，密钥对链接服务器也非常简单，最后也是各有优点看自己了。</p><p>文章链接：<a href="https://juejin.cn/post/7177193482790895671">Royal TSX借鉴文章链接</a></p></blockquote><h1 id="本文按部就班执行下去就可以了"><a href="#本文按部就班执行下去就可以了" class="headerlink" title="本文按部就班执行下去就可以了"></a>本文按部就班执行下去就可以了</h1><p><img src="https://s1.ax1x.com/2022/11/24/zJ2TJI.png" alt="zJ2TJI.png"></p><p><img src="https://s1.ax1x.com/2022/11/24/zJ2jeg.png" alt="zJ2jeg.png"></p><p><img src="https://s1.ax1x.com/2022/11/24/zJ2xoj.png" alt="zJ2xoj.png"></p><h4 id="生成ssh（未生成的来生成，已有的大可不必）"><a href="#生成ssh（未生成的来生成，已有的大可不必）" class="headerlink" title="生成ssh（未生成的来生成，已有的大可不必）"></a>生成ssh（未生成的来生成，已有的大可不必）</h4><p>ssh-keygen -t rsa -C “<a href="mailto:&#x78;&#x78;&#x78;&#x78;&#x78;&#x40;&#x78;&#x78;&#x78;&#x78;&#120;&#46;&#99;&#111;&#109;">&#x78;&#x78;&#x78;&#x78;&#x78;&#x40;&#x78;&#x78;&#x78;&#x78;&#120;&#46;&#99;&#111;&#109;</a>”（连续三次回车。第一次是文件名，二三次是确认密码的，不输入默认密码为空）</p><p>生成目录在：～&#x2F;.ssh&#x2F;</p><p><img src="https://s1.ax1x.com/2022/11/24/zJR8mD.png" alt="zJR8mD.png"></p><p>放心这一步转换不影响原来的</p><p><img src="https://s1.ax1x.com/2022/11/24/zJRMSx.png" alt="zJRMSx.png"></p><p><img src="https://s1.ax1x.com/2022/11/25/zJfdL8.png" alt="zJfdL8.png"></p><p>进入–&gt; 轻量应用服务器控制台–&gt;点击你需要用的服务器–&gt; 运程连接 –&gt; 密钥管理 –&gt; 生成密钥 –&gt; 密钥名称（随便填）</p><p><img src="https://s1.ax1x.com/2022/11/25/zJf2Q0.png" alt="zJf2Q0.png"></p><p><img src="https://s1.ax1x.com/2022/11/25/zJfLy6.png" alt="zJfLy6.png"></p><p><img src="https://s1.ax1x.com/2022/11/25/zJf7WR.png" alt="zJf7WR.png"></p><p>点击应用–&gt;确定–&gt;OK啦</p>]]></content>
      
      
      <categories>
          
          <category> App </category>
          
      </categories>
      
      
        <tags>
            
            <tag> App-FindShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地数据库导入服务器数据库</title>
      <link href="/post/3eccfedf.html"/>
      <url>/post/3eccfedf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="从本地导出-SQL文件"><a href="#从本地导出-SQL文件" class="headerlink" title="从本地导出.SQL文件"></a>从本地导出.SQL文件</h1><p><img src="https://s1.ax1x.com/2022/11/24/zJJmid.png" alt="zJJmid.png"></p><h1 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h1><p>随便找一个目录把刚刚导出的.sql文件上传上去</p><p><img src="https://s1.ax1x.com/2022/11/24/zJJGdg.png" alt="zJJGdg.png"></p><h1 id="将文件导入服务器的mysql"><a href="#将文件导入服务器的mysql" class="headerlink" title="将文件导入服务器的mysql"></a>将文件导入服务器的mysql</h1><h2 id="1-进入mysql"><a href="#1-进入mysql" class="headerlink" title="1. 进入mysql"></a>1. 进入mysql</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>输入密码…</p><h2 id="2-输入命令"><a href="#2-输入命令" class="headerlink" title="2. 输入命令"></a>2. 输入命令</h2><p>（数据库名旁边的单引号可以省略）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database &#x27;django_test&#x27; default character set utf8 COLLATE utf8_general_ci</span><br></pre></td></tr></table></figure><p>然后 show databases; 可以看到数据库创建成功了。</p><h2 id="3-将-sql文件导入该数据库中"><a href="#3-将-sql文件导入该数据库中" class="headerlink" title="3. 将.sql文件导入该数据库中"></a>3. 将.sql文件导入该数据库中</h2><p>先进入刚刚创建的数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use django_test;</span><br></pre></td></tr></table></figure><p>导入文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .sql文件的路径</span><br></pre></td></tr></table></figure><p>例如：</p><p>​source &#x2F;root&#x2F;django_test.sql;</p><p>然后我们查看一下就有表了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/11/24/zJYrct.png" alt="zJYrct.png"></p><p>转自文章：<a href="https://blog.csdn.net/hongye_student/article/details/103054197">https://blog.csdn.net/hongye_student/article/details/103054197</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Field定制字段</title>
      <link href="/post/b8c06c37.html"/>
      <url>/post/b8c06c37.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Field函数提供关于字段和验证的额外信息，如设置必填项和可选，设置最大值和最小值，字符串长度等限制</p><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>这里列举了一些常用的参数：</p><ul><li>Field(default)：默认值，可为None，可用省略号（…）来表示字段必填</li><li>alias：字段的公开名称。</li><li>title：自定义标题，如果没有默认就是字段属性的值</li><li>description：定义字段描述内容</li><li>gt：对于数值值 (int，float，Decimal)，将向 JSON 模式添加一个 “大于” 验证和一个 exclusiveMinimum。</li><li>ge：对于数值值 ，将向 JSON 模式添加一个 “大于等于” 验证和一个 minimum。</li><li>lt：对于数值值 ，将向 JSON 模式添加一个”小于” 验证和一个 exclusiveMaximum 。</li><li>le：对于数值值 ，将向 JSON 模式添加一个 “小于等于” 验证和一个 maximum 。</li><li>min_length：对于字符串值，将向 JSON 模式添加相应的验证和 minLength。</li><li>max_length：对于字符串值，将向 JSON 模式添加相应的验证和 maxLength。</li><li>exclude：在转储（.dict和.json）实例时排除此字段</li><li>include：在转储（.dict和.json）实例时（仅）包含此字段</li><li>等。。。参考：<a href="https://cloud.tencent.com/developer/article/1949684">https://cloud.tencent.com/developer/article/1949684</a></li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel,Field,ValidationError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="comment"># 中文名</span></span><br><span class="line">    name: <span class="built_in">str</span> = Field(<span class="literal">None</span>,alias=<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="comment"># 英文名</span></span><br><span class="line">    English_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = Field(alias=<span class="string">&quot;English_name&quot;</span>,max_length=<span class="number">20</span>,description=<span class="string">&quot;英文名&quot;</span>)</span><br><span class="line">    <span class="comment"># 特长</span></span><br><span class="line">    Speciality: <span class="type">Optional</span>[<span class="built_in">str</span>] = Field(alias=<span class="string">&quot;Speciality&quot;</span>,max_length=<span class="number">255</span>,description=<span class="string">&quot;特长&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    student = Student(name=<span class="string">&quot;wanghan&quot;</span>,alias=<span class="string">&quot;xiaowang&quot;</span>,English_name=<span class="string">&quot;hwang&quot;</span>,Speciality=<span class="string">&quot;Football&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(student.json()) <span class="comment"># &#123;&quot;name&quot;: &quot;wanghan&quot;, &quot;English_name&quot;: &quot;hwang&quot;, &quot;Speciality&quot;: &quot;Football&quot;&#125;</span></span><br><span class="line"><span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.json())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于字段的解释：</p><p>name：默认值为None，非必填，别名name</p><p>English_name：用了Optional默认值为str或None，别名。。。字符串最大长度。。。字段描述“英文名”</p><p>Speciality：同上</p><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;wanghan&quot;</span>, <span class="string">&quot;English_name&quot;</span>: <span class="string">&quot;hwang&quot;</span>, <span class="string">&quot;Speciality&quot;</span>: <span class="string">&quot;Football&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>​由于想到了pydantic模块的constr，他也可以约束字段的长度，而Field也可以约束字段的长度，因此想验证一下谁更具有约束性，或者说他俩是否会产生冲突。验证结果为：</p><p>​这里我是用alias字段来验证的。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel,Field,constr,ValidationError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="comment"># 中文名</span></span><br><span class="line">    name: <span class="built_in">str</span> = Field(<span class="literal">None</span>,alias=<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 小名</span></span><br><span class="line">    <span class="comment"># alias: constr(max_length=20) = Field(max_length=20,alias=&quot;alias&quot;) # 会产生报错</span></span><br><span class="line">    alias: constr(max_length=<span class="number">20</span>) = Field(alias=<span class="string">&quot;alias&quot;</span>) <span class="comment"># 去掉Field的max_length属性就不会报错了</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 英文名</span></span><br><span class="line">    English_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = Field(alias=<span class="string">&quot;English_name&quot;</span>,max_length=<span class="number">20</span>,description=<span class="string">&quot;英文名&quot;</span>)</span><br><span class="line">    <span class="comment"># 特长</span></span><br><span class="line">    Speciality: <span class="type">Optional</span>[<span class="built_in">str</span>] = Field(alias=<span class="string">&quot;Speciality&quot;</span>,max_length=<span class="number">255</span>,description=<span class="string">&quot;特长&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    student = Student(name=<span class="string">&quot;wanghan&quot;</span>,alias=<span class="string">&quot;xiaowang&quot;</span>,English_name=<span class="string">&quot;hwang&quot;</span>,Speciality=<span class="string">&quot;Football&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(student.json())</span><br><span class="line"><span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.json())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;wanghan&quot;</span>, <span class="string">&quot;alias&quot;</span>: <span class="string">&quot;xiaowang&quot;</span>, <span class="string">&quot;English_name&quot;</span>: <span class="string">&quot;hwang&quot;</span>, <span class="string">&quot;Speciality&quot;</span>: <span class="string">&quot;Football&quot;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pydantic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于BaseModel的使用</title>
      <link href="/post/9d5730e5.html"/>
      <url>/post/9d5730e5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 pydantic 中定义对象的主要方法是通过继承BaseModel。</p><p>pydantic主要是一个解析库，而不是验证库。它主要是保证输出数据模型的类型和约束，而不是输入数据。但是你也可以用它来进行自定义验证。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pydantic</span><br></pre></td></tr></table></figure><h1 id="BaseModel的使用"><a href="#BaseModel的使用" class="headerlink" title="BaseModel的使用"></a>BaseModel的使用</h1><h2 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h2><p>创建一个模型就是Student类，自定义两个字段：</p><p>​  age：整形 ，必需的；</p><p>​  name：字符串，不是必需的，它有一个默认值；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># BaseModel基本模型的使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    name = <span class="string">&#x27;hwang&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = Student(age=<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(student)  <span class="comment"># age=1 name=&#x27;hwang&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(student.age)  <span class="comment"># 7</span></span><br><span class="line"><span class="built_in">print</span>(student.name)  <span class="comment"># hwang</span></span><br></pre></td></tr></table></figure><p>实例化模型Student类时，初始化期间会执行所有解析和验证模型。如果没有ValidationError引发，说明模型生成成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student = Student(age=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>此时，实例&#x3D;&#x3D;s&#x3D;&#x3D;tudent有age和name两个属性。模型的字段可以作为类对象&#x3D;&#x3D;s&#x3D;&#x3D;tudent的普通属性访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(student)  <span class="comment"># age=1 name=&#x27;hwang&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(student.age)  <span class="comment"># 7</span></span><br><span class="line"><span class="built_in">print</span>(student.name)  <span class="comment"># hwang</span></span><br></pre></td></tr></table></figure><hr><p>这里我们模拟一下，实例化一个错误类型的值看下它的报错信息：</p><p>通常我们以try来捕获异常，并使用ValidationError模块来打印更为详细又友好的报错信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    student = Student(age=<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.json())</span><br></pre></td></tr></table></figure><p>友好报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;loc&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;age&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;value is not a valid integer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;type_error.integer&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里我们可以看到报错字段在age字段上。</p><h2 id="递归模型"><a href="#递归模型" class="headerlink" title="递归模型"></a>递归模型</h2><p>可以使用模型本身作为其他模型中的类型，依此来定义更为复杂的分层数据结构</p><p>创建了两个普通模型：Student、Teacher</p><p>另外又创建了一个模型Grade，他的字段student是：模型1Student，teacher字段是：list类型，其中list内的元素为模型2Teacher。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    name = <span class="string">&#x27;hwang&#x27;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grade</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    student: Student</span><br><span class="line">    teacher: <span class="type">List</span>[Teacher]</span><br><span class="line">    math: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grade = Grade(student=&#123;<span class="string">&quot;age&quot;</span>: <span class="number">8</span>&#125;, teacher=[&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tzhang&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">24</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Twang&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;25&quot;</span>&#125;], math=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(grade.<span class="built_in">dict</span>())</span><br><span class="line"><span class="comment"># &#123;&#x27;student&#x27;: &#123;&#x27;age&#x27;: 8, &#x27;name&#x27;: &#x27;hwang&#x27;&#125;, &#x27;teacher&#x27;: [&#123;&#x27;name&#x27;: &#x27;Tzhang&#x27;, &#x27;age&#x27;: 24&#125;, &#123;&#x27;name&#x27;: &#x27;Twang&#x27;, &#x27;age&#x27;: 25&#125;], &#x27;math&#x27;: 100&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(grade.json())</span><br><span class="line"><span class="comment"># &#123;&quot;student&quot;: &#123;&quot;age&quot;: 8, &quot;name&quot;: &quot;hwang&quot;&#125;, &quot;teacher&quot;: [&#123;&quot;name&quot;: &quot;Tzhang&quot;, &quot;age&quot;: 24&#125;, &#123;&quot;name&quot;: &quot;Twang&quot;, &quot;age&quot;: 25&#125;], &quot;math&quot;: 100&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(grade.teacher[<span class="number">1</span>].name)</span><br><span class="line"><span class="comment"># Twang</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(grade.__fields_set__) </span><br><span class="line"><span class="comment"># &#123;&#x27;student&#x27;, &#x27;teacher&#x27;, &#x27;math&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ORM模型"><a href="#ORM模型" class="headerlink" title="ORM模型"></a>ORM模型</h2><p>必要条件：</p><ul><li><p>创建的模型必须使用内部类Config的orm_mode&#x3D;True，加入以下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">  orm_mode = <span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>必须使用特殊函数from_orm来进行实例化模型。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 = “模型名”.from_orm(“数据”)</span><br></pre></td></tr></table></figure></li></ul><p>这里示例为sqlalchemy：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel,ValidationError,constr</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column,Integer,String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentORM</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&quot;student&quot;</span></span><br><span class="line">    <span class="comment"># 整形 主键 不可为空</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer,primary_key=<span class="literal">True</span>,nullable=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 字符串类型 唯一</span></span><br><span class="line">    name = Column(String(<span class="number">60</span>),unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 整形 可以为空</span></span><br><span class="line">    age = Column(Integer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    name: constr(max_length=<span class="number">63</span>)</span><br><span class="line">    age: <span class="built_in">int</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">        orm_mode = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">studentorm = StudentORM(<span class="built_in">id</span>=<span class="number">1</span>, name=<span class="string">&quot;hwang&quot;</span>, age=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 这里就是上面说的实例化模型必须加的：from_orm</span></span><br><span class="line">student = StudentModel.from_orm(studentorm)</span><br><span class="line"><span class="built_in">print</span>(student.json()) <span class="comment"># &#123;&quot;id&quot;: 1, &quot;name&quot;: &quot;hwang&quot;, &quot;age&quot;: 20&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseModel字段类型（了解）</p><ul><li>conlist：<ul><li>item_type: Type[T]: 列表项的<code>类型</code></li><li>min_items: int &#x3D; None: 列表中的<code>最小</code>项目数</li><li>max_items: int &#x3D; None: 列表中的<code>最大</code>项目数</li></ul></li><li>conset：<ul><li>item_type: Type[T]: 列表项的<code>类型</code></li><li>min_items: int &#x3D; None: 集合中的<code>最小</code>项目数</li><li>max_items: int &#x3D; None: 集合中的<code>最大</code>项目数</li></ul></li><li>conint：<ul><li>strict: bool &#x3D; False: 控制类型强制</li><li>gt: int &#x3D; None: 强制整数<code>大于</code>设定值</li><li>ge: int &#x3D; None: 强制整数<code>大于或等于</code>设定值</li><li>lt: int &#x3D; None: 强制整数<code>小于</code>设定值</li><li>le: int &#x3D; None: 强制整数<code>小于或等于</code>设定值</li><li>multiple_of: int &#x3D; None: 强制整数为设定值的<code>倍数</code></li></ul></li><li>confloat：<ul><li>strict: bool &#x3D; False: 控制类型强制</li><li>gt: int &#x3D; None: 强制浮点数<code>大于</code>设定值</li><li>ge: int &#x3D; None: 强制浮点数<code>大于或等于</code>设定值</li><li>lt: int &#x3D; None: 强制浮点数<code>小于</code>设定值</li><li>le: int &#x3D; None: 强制浮点数<code>小于或等于</code>设定值</li><li>multiple_of: int &#x3D; None: 强制浮点数为设定值的<code>倍数</code></li></ul></li><li>constr：<ul><li>strip_whitespace: bool &#x3D; False: <code>删除前尾空格</code></li><li>to_lower: bool &#x3D; False: 将所有字符<code>转为小写</code></li><li>strict: bool &#x3D; False: 控制类型强制</li><li>min_length: int &#x3D; None: 字符串的<code>最小</code>长度</li><li>max_length: int &#x3D; None: 字符串的<code>最大</code>长度</li><li>regex: str &#x3D; None: <code>正则表达式</code>来验证字符串</li></ul></li></ul><h2 id="模型属性"><a href="#模型属性" class="headerlink" title="模型属性"></a>模型属性</h2><p>上面的例子只是展示了模型可以做什么的冰山一角。模型具有以下方法和属性：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>dict()</td><td>返回模型字段和值的字典;</td></tr><tr><td>json()</td><td>返回一个 JSON 字符串表示dict()</td></tr><tr><td>copy()</td><td>返回模型的副本（默认为浅拷贝）</td></tr><tr><td>parse_obj()</td><td>如果一个对象不是字典，可以使用该方法将其加载到具有错误处理的模型中</td></tr><tr><td>parse_raw()</td><td>用于加载多种格式字符串的实用程序。</td></tr><tr><td>parse_file()</td><td>与 <code>parse_raw()</code> 类似，但是作用于文件路径。</td></tr><tr><td>from_orm()</td><td>从ORM 对象创建模型</td></tr><tr><td>schema()</td><td>返回一个将模型表示为 JSON 模式的字典。</td></tr><tr><td>schema_json()</td><td>返回表示 <code>schema()</code> 的 JSON 字符串</td></tr><tr><td>construct()</td><td>用于创建模型而不执行验证的类方法；</td></tr><tr><td>__fields_set__</td><td>返回模型初始化时必填的字段</td></tr><tr><td>__config__</td><td>模型的配置类</td></tr></tbody></table><h2 id="模型属性的使用"><a href="#模型属性的使用" class="headerlink" title="模型属性的使用"></a>模型属性的使用</h2><p>下面的例子都将使用这个模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># BaseModel基本模型的使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    name = <span class="string">&#x27;hwang&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>.dict() 可以将user对象的属性，转成字典格式输出，dict(user) 也是等价的</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">student = Student(age=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .dict()</span></span><br><span class="line"><span class="built_in">print</span>(student.<span class="built_in">dict</span>()) <span class="comment"># &#123;&#x27;age&#x27;: 7, &#x27;name&#x27;: &#x27;hwang&#x27;&#125;</span></span><br><span class="line"><span class="comment"># dict()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(student)) <span class="comment"># &#123;&#x27;age&#x27;: 7, &#x27;name&#x27;: &#x27;hwang&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>.json()可以将user对象的属性，转成json格式输出</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student = Student(age=<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(student.json()) <span class="comment"># &#123;&quot;age&quot;: 7, &quot;name&quot;: &quot;hwang&quot;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>.copy()浅拷贝一个模型，这对不可变模型尤其有用</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">student = Student(age=<span class="number">7</span>)</span><br><span class="line">s = student.copy(include=&#123;<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(s.json()) <span class="comment"># &#123;&quot;age&quot;: 7, &quot;name&quot;: &quot;hwang&quot;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>parse_obj实例化模型时传入的是一个dict类型，传入其他类型会引发ValidationError</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student = Student.parse_obj(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;wanghan&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;22&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(student.json()) <span class="comment"># &#123;&quot;age&quot;: 22, &quot;name&quot;: &quot;wanghan&quot;&#125;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><ol start="5"><li>parse_saw会将一个str或bytes解析成json</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student = Student.parse_raw(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;wanghan&quot;,&quot;age&quot;:&quot;22&quot;&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(student) <span class="comment"># age=22 name=&#x27;wanghan&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>parse_file可以读取一个文件的内容，如果文件内有内容，可以无需写入，直接传入路径</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">path = Path(<span class="string">&quot;data.json&quot;</span>)</span><br><span class="line">path.write_text(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;wanghan&quot;,&quot;age&quot;:&quot;999&quot;&#125;&#x27;</span>)</span><br><span class="line">student = Student.parse_file(path)</span><br><span class="line"><span class="built_in">print</span>(student) <span class="comment"># age=999 name=&#x27;wanghan&#x27;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>from_orm：ORM对象进行实例化模型的必要条件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处示例借用上面的ORM模型</span></span><br></pre></td></tr></table></figure><ol start="8"><li>schema返回一个将模型表示为 JSON 模式的字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student =Student(age=<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(student.schema()) <span class="comment"># &#123;&#x27;title&#x27;: &#x27;Student&#x27;, &#x27;type&#x27;: &#x27;object&#x27;, &#x27;properties&#x27;: &#123;&#x27;age&#x27;: &#123;&#x27;title&#x27;: &#x27;Age&#x27;, &#x27;type&#x27;: &#x27;integer&#x27;&#125;, &#x27;name&#x27;: &#123;&#x27;title&#x27;: &#x27;Name&#x27;, &#x27;default&#x27;: &#x27;hwang&#x27;, &#x27;type&#x27;: &#x27;string&#x27;&#125;&#125;, &#x27;required&#x27;: [&#x27;age&#x27;]&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="9"><li>schema_json()返回表示 <code>schema()</code> 的 JSON 字符串，indent用来调整json样式的缩进。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student =Student(age=<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(student.schema_json(indent=<span class="number">2</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Student&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Age&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Name&quot;</span>,</span><br><span class="line">      <span class="string">&quot;default&quot;</span>: <span class="string">&quot;hwang&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;required&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;age&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>__fields_set__返回模型初始化时的必填字段</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student = Student(age=<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(student.__fields_set__) <span class="comment"># &#123;&#x27;age&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pydantic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typing类型注解</title>
      <link href="/post/7d5c24c7.html"/>
      <url>/post/7d5c24c7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​很多时候我们可能不清楚函数参数的类型或者返回值的类型，这样会导致我们在写完代码一段时间后回过头看代码，忘记了自己写的函数需要传递什么类型的参数。这样就还要去从头到尾的看一遍代码。极大的影响了我们的工作效率。</p><h1 id="为什么不用原生python类型？"><a href="#为什么不用原生python类型？" class="headerlink" title="为什么不用原生python类型？"></a>为什么不用原生python类型？</h1><p>typing模块比原生python提供了更多的类型注释方式和更丰富的类型选项，可以更好的指定变量、函数类型和返回值的类型信息，从而使代码更加清晰易懂。在使用过程中需要根据具体情况选择原生python类型或者typing模块中的类型。比如：容器类型：<code>List[int]</code>表示一个整数列表，<code>Dict[str, float]</code>表示一个键值对字典，其中键是字符串，值是浮点数。原生Python没有这种类型。可选类型：<code>typing</code>模块提供了<code>Optional[T]</code>类型，表示一个可选类型，即可以是类型<code>T</code>，也可以是<code>None</code>。这在函数参数和返回值类型注释中非常有用。原生Python类型没有这种可选类型。<code>typing</code>模块还提供了一些Python原生类型中没有的新类型，例如<code>Any</code>表示任意类型，<code>Union[T1, T2, ...]</code>表示多个类型中的任意一种类型。这些新类型可以更好地指定变量、函数参数和返回值的类型信息。</p><h1 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="built_in">int</span>,<span class="built_in">str</span>,<span class="type">List</span>,<span class="built_in">bool</span>,<span class="type">Any</span>,<span class="type">Callable</span>,TypeVar,<span class="type">Union</span>,<span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x: <span class="built_in">int</span> = <span class="number">3</span>, y: <span class="built_in">str</span> = <span class="string">&quot;str&quot;</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">str</span>]:</span><br><span class="line">     <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 整数类型的参数，默认值为：3</span></span><br><span class="line"><span class="string">    :param y: 字符串类型的参数，默认值为：&quot;str&quot;</span></span><br><span class="line"><span class="string">    :return: 返回的是列表类型；列表中的数据有int和str类型；</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    list1 = []</span><br><span class="line">    list1.append(x)</span><br><span class="line">    list1.append(y)</span><br><span class="line">    <span class="keyword">return</span> list1</span><br></pre></td></tr></table></figure><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ol><li>类型检查，防止运行时出现参数和返回值类型不符合。</li><li>作为开发文档附加说明，方便使用者调用时传入和返回参数类型。</li><li>该模块加入后并不会影响程序的运行，不会报正式的错误，只有提醒pycharm目前支持typing检查，参数类型错误会黄色提示</li></ol><h1 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h1><ul><li>int,long,float:         整型，长整形，浮点型;</li><li>bool,str:                  布尔类型，字符串类型；</li><li>List,Tuple, Dict, Set:      列表，元组，字典，集合;</li><li>Iterable,Iterator:           可迭代类型，迭代器类型；</li><li>Generator：                  生成器类型；</li></ul><p>除了以上常用的类型，还支持 <code>Any</code>，<code>Union</code>，<code>Tuple</code>，<code>Callable</code>，<code>TypeVar</code> 和 <code>Generic</code> 类型组成。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="https://s1.ax1x.com/2022/11/25/zYoQYD.png" alt="zYoQYD.png"></p><p>我们可以发现，func函数要求传入的第2个参数为<code>str</code>类型，而我们调用时传入的参数是<code>int</code>类型，此时Pycharm就会用黄色来警告你，我们将光标放到黄色的地方，会出现下面的提示 </p><p><img src="https://s1.ax1x.com/2022/11/25/zYoG6A.png" alt="zYoG6A.png"></p><p> 写着期望类型是<code>str</code>，而现在是<code>int</code>，但是<code>typing</code>的作用仅仅是提示，并不会影响代码执行，我们执行看看</p><p>执行结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>我们会发现并没有报错，因为<code>typing</code>仅仅是起到了提醒的作用</p><h1 id="typing模块的其他用法"><a href="#typing模块的其他用法" class="headerlink" title="typing模块的其他用法"></a>typing模块的其他用法</h1><ul><li>类型别名</li><li>Callable</li><li>TypeVar泛型</li><li>Any类型</li><li>Union类型 </li><li>Optional类型</li></ul><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>类型别名，就是给复杂的类型取个别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给List[float]类型取个别名为Vector</span></span><br><span class="line">Vector = <span class="type">List</span>[<span class="built_in">float</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scale</span>(<span class="params">scalar: <span class="built_in">float</span>, vector: Vector</span>) -&gt; Vector:</span><br><span class="line">    <span class="keyword">return</span> [scalar * num <span class="keyword">for</span> num <span class="keyword">in</span> vector]</span><br><span class="line"></span><br><span class="line">new_vector = scale(<span class="number">2.0</span>, [<span class="number">1.0</span>, -<span class="number">4.2</span>, <span class="number">5.4</span>])</span><br></pre></td></tr></table></figure><p>当然，类型别名我们完全可以不用，用以下写法也一样，看个人喜好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scale</span>(<span class="params">scalar: <span class="built_in">float</span>, vector: <span class="type">List</span>[<span class="built_in">float</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">float</span>]:</span><br><span class="line">    <span class="keyword">return</span> [scalar * num <span class="keyword">for</span> num <span class="keyword">in</span> vector]</span><br></pre></td></tr></table></figure><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><p>期望特定签名的回调函数的框架可以将类型标注为 <code>Callable[[Arg1Type, Arg2Type], ReturnType]</code>。</p><ul><li>[Arg1Type, Arg2Type]：代表参数类型</li><li>ReturnType：代表返回值类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_next_item</span>(<span class="params">name: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Callable 作为函数参数使用，其实只是做一个类型检查的作用，检查传入的参数值 get_next_item 是否为可调用对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feeder</span>(<span class="params">get_next_item: <span class="type">Callable</span>[[<span class="built_in">str</span>], <span class="literal">None</span>]</span>) -&gt; (<span class="built_in">str</span>):</span><br><span class="line">    <span class="keyword">return</span> get_next_item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v1 = feeder(get_next_item)</span><br><span class="line">v1(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="TypeVar泛型"><a href="#TypeVar泛型" class="headerlink" title="TypeVar泛型"></a>TypeVar泛型</h2><p>​自定义任意类型，也可以自定义指定类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义一个任意类型</span></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">user: T</span>) -&gt; T:</span><br><span class="line">    <span class="built_in">print</span>(user)</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">func(<span class="number">1</span>)</span><br><span class="line">func([<span class="number">1</span>])</span><br><span class="line">func((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">func(&#123;<span class="string">&quot;status&quot;</span>: <span class="number">200</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure><p>自定义指定类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定为int或者str</span></span><br><span class="line">a = TypeVar(<span class="string">&#x27;a&#x27;</span>, <span class="built_in">int</span>, <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">s1: a = <span class="number">1</span></span><br><span class="line">s2: a = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">s3: a = []  <span class="comment"># 这里定义了列表，pycharm会出现黄色警告</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1, s2, s3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="number">1</span> aaa []</span><br></pre></td></tr></table></figure><h2 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h2><p>​一种特殊的任意类型。静态类型检查器认为所有类型均与 <code>Any</code> 兼容，同样，<code>Any</code> 也与所有类型兼容。</p><p>也就是说，可对 <code>Any</code> 类型的值执行任何操作或方法调用，并赋值给任意变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">None</span>    <span class="comment"># type: <span class="type">Any</span></span></span><br><span class="line">a = []      <span class="comment"># OK</span></span><br><span class="line">a = <span class="number">2</span>       <span class="comment"># OK</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span>      <span class="comment"># type: <span class="built_in">str</span></span></span><br><span class="line">s = a       <span class="comment"># OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">item: <span class="type">Any</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="comment"># Typechecks; &#x27;item&#x27; could be any type,</span></span><br><span class="line">    <span class="comment"># and that type might have a &#x27;bar&#x27; method</span></span><br><span class="line">    item.bar()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>此外，未指定返回值与参数类型的函数，都隐式地默认使用 <code>Any</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">legacy_parser</span>(<span class="params">text</span>):</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种写法效果是一样的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">legacy_parser</span>(<span class="params">text: <span class="type">Any</span></span>) -&gt; <span class="type">Any</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><p>​两选一类型，语法格式：<code>Union[X, Y] </code>，相当于<code>X | Y</code></p><p>意思是类型是X或者Y 如果我们想定义<code>Union</code>类型，就要写成如下的<code>Union[X， Y]</code>。或者Union[int,None]：可以为None也可以为int。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定变量a的类型为int或者str</span></span><br><span class="line">a: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">a = []  <span class="comment"># 定义了一个列表，pycharm会有黄色警告提示</span></span><br></pre></td></tr></table></figure><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>​可选类型，作用几乎和默认值参数等价，不同的是这个参数除了给定的默认值外还可以传None。对于有些编辑器并不能识别语法：a: int &#x3D; None，这种的可能会报错，但是使用 a: Optional[int] &#x3D; None，是不会的。</p><h4 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h4><ul><li>Optional[int] 等价于Union[int,None]</li><li>意味着：既可以传指定的类型int，也可以传None。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def foo_func(arg: Optional[int] = None): （也可以使默认值为None）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo_func</span>(<span class="params">arg: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="number">5</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line">foo_func()</span><br><span class="line">foo_func(<span class="literal">None</span>)</span><br><span class="line">foo_func(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用默认值的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo_func</span>(<span class="params">arg: <span class="built_in">int</span> = <span class="number">5</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line">foo_func()</span><br><span class="line">foo_func(<span class="literal">None</span>) <span class="comment"># 这里的None，Pycharm会报黄，但不会报错</span></span><br><span class="line">foo_func(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-typing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib字体链接</title>
      <link href="/post/4d4561dd.html"/>
      <url>/post/4d4561dd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><a href="https://www.aliyundrive.com/s/nqN9BVK9kma">simhei.ttf</a></p><p><a href="https://www.aliyundrive.com/s/9QWzE5UHUVN">SourceHanSansSC-Bold.otf</a></p><p>simsun.ttc（暂不支持分享，放在自己的项目下面了）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-matplotlib字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wraps、update_wrapper</title>
      <link href="/post/93b0c933.html"/>
      <url>/post/93b0c933.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里我们先来看一个例子，再继续往下看你会发现嗷～原来是这么回事</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="keyword">return</span> func(*args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@wrap</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是例子&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(demo.__name__) <span class="comment"># inner</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先看一下这个结果，是不是很有意思demo的__name__属性竟然是inner。</p><p>继续往下看</p><h2 id="update-wrapper"><a href="#update-wrapper" class="headerlink" title="update_wrapper"></a>update_wrapper</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用 partial 包装的函数是没有__name__和__doc__属性的。</p><p>update_wrapper 作用：将被包装函数的__name__等属性，拷贝到新的函数中去。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> update_wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrap1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="keyword">return</span> func(*args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> update_wrapper(inner, func)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@wrap1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是例子1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(demo1.__name__) <span class="comment"># demo1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到这里的结果你明白update_wrapper的作用了吧</p><h2 id="wraps"><a href="#wraps" class="headerlink" title="wraps"></a>wraps</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>wraps 函数就是为了在装饰器拷贝被装饰器函数的__name__。</p><p>就是在update_wrapper上进行了一个包装。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrap2</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="keyword">return</span> func(*args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@wrap2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是例子2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(demo2.__name__) <span class="comment"># demo2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-functools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>issubclass判断是否是某的子类</title>
      <link href="/post/6e5734c0.html"/>
      <url>/post/6e5734c0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python 中的 issubclass 函数用于判断参数 class 是否是类型参数 classinfo 的子类。 issubclass 不仅可以用于内置类型的判断，也可以用于自定义类的判断。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(子类名<span class="keyword">class</span>,父类名<span class="keyword">class</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h4 id="自定义类的判断"><a href="#自定义类的判断" class="headerlink" title="自定义类的判断"></a>自定义类的判断</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我是父类&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Children</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我是子类&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请问我是Parent的子类吗？&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">issubclass</span>(Children,Parent))) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请问我是Parent的子类吗？<span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="内置类型的判断"><a href="#内置类型的判断" class="headerlink" title="内置类型的判断"></a>内置类型的判断</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list issubclass object =&quot;</span>, <span class="built_in">issubclass</span>(<span class="built_in">list</span>, <span class="built_in">object</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict issubclass object =&quot;</span>, <span class="built_in">issubclass</span>(<span class="built_in">dict</span>, <span class="built_in">object</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> <span class="built_in">issubclass</span> <span class="built_in">object</span> = <span class="literal">True</span></span><br><span class="line"><span class="built_in">dict</span> <span class="built_in">issubclass</span> <span class="built_in">object</span> = <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-issubclass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python断言</title>
      <link href="/post/1d667732.html"/>
      <url>/post/1d667732.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Python assert断言，可以看作是缩小版的if语句。判断表达式为真时，什么都不做，反之报错：AssertError异常</p><p>assert语句只在调试阶段有效，通过执行python命令时加入-O（大写的）参数来关闭assert语句。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>有利于我们对程序的排错，提高程序的健壮性。通常用于程序的初期测试和调试过程中的辅助工具。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>频繁的调用会极大的影响程序的性能，增加额外的开销。</p><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> expression, reason</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;expression：判断条件，放多个判断条件时，不能写reason。为真，不做任何操作；为假，抛出异常AssertError。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;reason：对判断条件的描述。&#x3D;&#x3D;</p><h1 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">100</span> &gt; <span class="number">10</span> , <span class="string">&quot;一百大于十&quot;</span> <span class="comment"># 条件为真，不做任何操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="number">100</span> &lt; <span class="number">10</span> , <span class="string">&quot;一百小于十&quot;</span> <span class="comment"># 条件为假，报AssertError异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="number">100</span> &lt; <span class="number">10</span> ,<span class="number">10</span> &gt; <span class="number">1</span> <span class="comment"># 条件为假，报AssertError异常</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/wanghan/Desktop/code/project_test/Learn/learn_assert/assert_test.py&quot;</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">100</span> &lt; <span class="number">10</span> ,<span class="number">10</span> &gt; <span class="number">1</span></span><br><span class="line">AssertionError: <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="应用（捕获assert异常）"><a href="#应用（捕获assert异常）" class="headerlink" title="应用（捕获assert异常）"></a>应用（捕获assert异常）</h1><p>通常情况下，assert和异常处理语句结合使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    a= <span class="built_in">int</span> (<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">assert</span> a&lt;<span class="number">15</span>,<span class="string">&quot;范围超出&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fun()</span><br><span class="line"><span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;输入有误&quot;</span>,e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="执行时关闭assert语句"><a href="#执行时关闭assert语句" class="headerlink" title="执行时关闭assert语句"></a>执行时关闭assert语句</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -O xxx.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-断言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>signature</title>
      <link href="/post/ae880141.html"/>
      <url>/post/ae880141.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>本文简单介绍了，signature获取：函数的签名、函数参数、标注类型、函数注解、参数默认值</p><h2 id="获取函数签名"><a href="#获取函数签名" class="headerlink" title="获取函数签名"></a>获取函数签名</h2><h4 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h4><p>导入小写的signature，获取函数签名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x:<span class="built_in">str</span></span>):</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">  </span><br><span class="line">sig = signature(func) <span class="comment"># (x: int)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第二种方法："><a href="#第二种方法：" class="headerlink" title="第二种方法："></a>第二种方法：</h4><p>通过函数的魔法属性__annotations__来获取函数的签名，但该方法有个缺点就是如果存在未被标注的参数，那这个魔法属性就无法获取这个参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x:<span class="built_in">str</span></span>):</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(func.__annotations__) <span class="comment"># &#123;&#x27;x&#x27;: &lt;class &#x27;str&#x27;&gt;&#125;</span></span><br></pre></td></tr></table></figure><p>缺点演示：</p><p>下面的参数y未进行标注，因此魔法属性__annotations__是获取不到该参数的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x:<span class="built_in">str</span>, y</span>):</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(func.__annotations__) <span class="comment"># &#123;&#x27;x&#x27;: &lt;class &#x27;str&#x27;&gt;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="获取函数的参数"><a href="#获取函数的参数" class="headerlink" title="获取函数的参数"></a>获取函数的参数</h2><p>signature.parameters：根据函数签名的parameters属性，获取函数参数，结果为有序的字典类型。</p><p>该字典包含了key参数名和value：inspect.Parameter对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x:<span class="built_in">str</span></span>):</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">  </span><br><span class="line">sig = signature(func) <span class="comment"># (x: int)</span></span><br><span class="line"><span class="built_in">print</span>(sig.parameters) <span class="comment"># OrderedDict([(&#x27;x&#x27;, &lt;Parameter &quot;x: str&quot;&gt;)])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sig.parameters包含的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name,param <span class="keyword">in</span> sig.parameters.items():</span><br><span class="line">  <span class="comment"># 参数名 inspect.Parameters对象</span></span><br><span class="line">  <span class="built_in">print</span>(name,param) <span class="comment"># x x: str</span></span><br></pre></td></tr></table></figure><h2 id="获取函数的标注类型"><a href="#获取函数的标注类型" class="headerlink" title="获取函数的标注类型"></a>获取函数的标注类型</h2><p>遍历signature.parameters得到的key（参数名），取出value（Parameter对象），通过访问value（Parameters对象）的kind属性获取标注类型。</p><p>比如：位置参数，可变参数，关键字参数，字典参数</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td><em>POSITIONAL_ONLY</em></td><td>Value must be supplied as a positional argument.Python has no explicit syntax for defining positional-only parameters, but many built-in and extension module functions (especially those that accept only one or two parameters) accept them.</td></tr><tr><td><em>POSITIONAL_OR_KEYWORD</em></td><td>Value may be supplied as either a keyword or positional argument (this is the standard binding behaviour for functions implemented in Python.)</td></tr><tr><td><em>VAR_POSITIONAL</em></td><td>A tuple of positional arguments that aren’t bound to any other parameter. This corresponds to a <code>*args</code> parameter in a Python function definition.</td></tr><tr><td><em>KEYWORD_ONLY</em></td><td>Value must be supplied as a keyword argument. Keyword only parameters are those which appear after a <code>*</code> or <code>*args</code> entry in a Python function definition.</td></tr><tr><td><em>VAR_KEYWORD</em></td><td>A dict of keyword arguments that aren’t bound to any other parameter. This corresponds to a <code>**kwargs</code> parameter in a Python function definition.</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x:<span class="built_in">str</span></span>):</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">  </span><br><span class="line">sig = signature(func) <span class="comment"># (x: int)</span></span><br><span class="line"><span class="built_in">print</span>(sig.parameters) <span class="comment"># OrderedDict([(&#x27;x&#x27;, &lt;Parameter &quot;x: str&quot;&gt;)])</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> sig.parameters:</span><br><span class="line">    param = sig.parameters[name]</span><br><span class="line">    <span class="built_in">print</span>(param.kind) <span class="comment"># POSITIONAL_OR_KEYWORD</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="获取函数注解"><a href="#获取函数注解" class="headerlink" title="获取函数注解"></a>获取函数注解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x:<span class="built_in">str</span></span>):</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">  </span><br><span class="line">sig = signature(func) <span class="comment"># (x: int)</span></span><br><span class="line"><span class="built_in">print</span>(sig.parameters) <span class="comment"># OrderedDict([(&#x27;x&#x27;, &lt;Parameter &quot;x: str&quot;&gt;)])</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> sig.parameters:</span><br><span class="line">    param = sig.parameters[name]</span><br><span class="line">    <span class="built_in">print</span>(param.annotation) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="获取函数的参数默认值"><a href="#获取函数的参数默认值" class="headerlink" title="获取函数的参数默认值"></a>获取函数的参数默认值</h2><p>默认：&lt;class ‘inspect._empty’&gt;空的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x:<span class="built_in">str</span></span>):</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">  </span><br><span class="line">sig = signature(func) <span class="comment"># (x: int)</span></span><br><span class="line"><span class="built_in">print</span>(sig.parameters) <span class="comment"># OrderedDict([(&#x27;x&#x27;, &lt;Parameter &quot;x: str&quot;&gt;)])</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> sig.parameters:</span><br><span class="line">    param = sig.parameters[name]</span><br><span class="line"><span class="built_in">print</span>(param.default) <span class="comment"># &lt;class &#x27;inspect._empty&#x27;&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参数匹配"><a href="#参数匹配" class="headerlink" title="参数匹配"></a>参数匹配</h2><p>使用signature的bind方法，如果参数符合，返回BoundArguments对象，否则抛出TypeError错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">greet : <span class="built_in">str</span>, flag=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, greet)</span><br><span class="line"></span><br><span class="line">sig = inspect.signature(hello)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sig.bind(<span class="string">&quot;hello&quot;</span>, <span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(sig.bind())</span><br></pre></td></tr></table></figure><p>out：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;BoundArguments (greet=<span class="string">&#x27;hello&#x27;</span>, flag=<span class="literal">True</span>)&gt;</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;e:\python draft\test.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(sig.bind())</span><br><span class="line">  File <span class="string">&quot;D:\Python\lib\inspect.py&quot;</span>, line <span class="number">3015</span>, <span class="keyword">in</span> bind</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>]._bind(args[<span class="number">1</span>:], kwargs)</span><br><span class="line">  File <span class="string">&quot;D:\Python\lib\inspect.py&quot;</span>, line <span class="number">2930</span>, <span class="keyword">in</span> _bind</span><br><span class="line">    <span class="keyword">raise</span> TypeError(msg) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line">TypeError: missing a required argument: <span class="string">&#x27;greet&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果不想检查所有参数，只想检查部分参数，可以使用bind_partial</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">greet : <span class="built_in">str</span>, flag=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, greet)</span><br><span class="line"></span><br><span class="line">sig = inspect.signature(hello)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sig.bind(<span class="string">&quot;hello&quot;</span>, <span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(sig.bind_partial())  <span class="comment"># 检查部分参数，不会抛出错误</span></span><br></pre></td></tr></table></figure><p>out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;BoundArguments (greet=<span class="string">&#x27;hello&#x27;</span>, flag=<span class="literal">True</span>)&gt;</span><br><span class="line">&lt;BoundArguments ()&gt;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>判断传入的参数类型是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> signature,Signature,Parameter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prints</span>(<span class="params">wrappers</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">wrappers</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        params = signature(wrappers).parameters</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">zip</span>(args,params.values()):</span><br><span class="line">            <span class="keyword">if</span> v.annotation != Parameter.empty <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(k,v.annotation):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; annotation is error&#x27;</span>.<span class="built_in">format</span>(k))</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> params[k].annotation != Parameter.empty <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(v,params[k].annotation):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; annotation is error&quot;</span>.<span class="built_in">format</span>(v))</span><br><span class="line">        <span class="keyword">return</span> wrappers</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@prints</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y:<span class="built_in">int</span> = <span class="number">7</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    add(<span class="number">4</span>,<span class="number">5</span>) <span class="comment"># 类型正确</span></span><br><span class="line">    add(<span class="number">4</span>,<span class="string">&quot;d&quot;</span>) <span class="comment"># 参数二类型错误，报错：d annotation is error</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-inspect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS模块--获取文件创建时间（Mac）</title>
      <link href="/post/1899fc6c.html"/>
      <url>/post/1899fc6c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modification_date</span>(<span class="params">filename</span>):</span><br><span class="line">    t = os.stat(filename).st_birthtime</span><br><span class="line">    <span class="comment"># 将整数结果转换为datetime对象datetime.datetime.fromtimestamp()</span></span><br><span class="line">    <span class="keyword">return</span> datetime.datetime.fromtimestamp(t)</span><br><span class="line"></span><br><span class="line">d = modification_date(<span class="string">&quot;/Users/wanghan/Desktop/code/blog/source/_posts/Redis/python操作redis.md&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><p>2022-11-08 11:38:22.762786</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位 (与或非)</title>
      <link href="/post/c9ba369b.html"/>
      <url>/post/c9ba369b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>首先在Python中二进制通常以”0b”和”-0b”开头的字符串来表示。</p><p>如下所示：</p><blockquote><p>bin（）函数用于十进制转二进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = -<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(a)) <span class="comment"># 0b1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(b)) <span class="comment"># 0b10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(c)) <span class="comment"># -0b10</span></span><br></pre></td></tr></table></figure><h1 id="位运算法则："><a href="#位运算法则：" class="headerlink" title="位运算法则："></a>位运算法则：</h1><p>下面的运算都是通过补码的方式进行计算的，所谓补码就是操作bit位</p><table><thead><tr><th>符号</th><th>描述</th><th>运算法则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两位都为1，那么结果为1</td></tr><tr><td>|</td><td>或</td><td>有一位为1，那么结果为1</td></tr><tr><td>~</td><td>非</td><td>～0 &#x3D; 1，～1 &#x3D; 0</td></tr><tr><td>^</td><td>异或</td><td>两位不相同，结果为1</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进制全部若干位，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算是右移），有的补0（逻辑右移）</td></tr></tbody></table><h2 id="与"><a href="#与" class="headerlink" title="与"></a>与</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p>通过上面的了解得知，a的二进制为：”0b1”，b的二进制为：”0b10”。</p><p>由“与”的位运算法则：两位都为1，那么结果为1的方式进行计算。</p><p>很明显，去掉开头的两位“0b”字符，只有“1”和“10”，从右往左数，它们之间第一位一个为0，一个为1，不相等，所以第一位的结果为0，第二位一个为1，一个没有第二位，所以第二位结果也为0。因此最终结果为：0b00 &#x3D; 0</p><p><img src="https://s1.ax1x.com/2022/11/15/zEYw4A.md.png" alt="zEYw4A.md.png"></p><h2 id="或"><a href="#或" class="headerlink" title="或"></a>或</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>先将a和b转为二进制，然后通过或的位运算法则：有一位为1，那么结果为1。</p><p>先去掉“0b”开头这两位，从右往左数，它们之间第一位一个为0，一个为1，根据法则，结果第一位的结果为1，第二位一个为1，一个没有第二位，所以第二位的结果也为1。因此最终结果为：0b11 &#x3D; 3</p><p><img src="https://s1.ax1x.com/2022/11/15/zEN9Wn.md.png" alt="zEN9Wn.md.png"></p><h2 id="非"><a href="#非" class="headerlink" title="非"></a>非</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(~a) <span class="comment"># -2</span></span><br><span class="line"><span class="built_in">print</span>(~b) <span class="comment"># -3</span></span><br></pre></td></tr></table></figure><p>这个没什么可讲的，换。。。</p><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a ^ b) <span class="comment"># #</span></span><br></pre></td></tr></table></figure><p>先将a和b转为二进制，然后通过或的位运算法则：两位不相同，结果为1。</p><p>先去掉“0b”开头这两位，从右往左数，它们之间第一位一个为0，一个为1，根据法则，结果第一位的结果为1，第二位一个为1，一个没有第二位，所以第二位的结果也为1。因此最终结果为：0b11 &#x3D; 3</p><p><img src="https://s1.ax1x.com/2022/11/15/zEhMpq.png" alt="zEhMpq.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与或非</title>
      <link href="/post/f022847b.html"/>
      <url>/post/f022847b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><table><thead><tr><th>运算符</th><th>表达式</th></tr></thead><tbody><tr><td>and（与）</td><td>(a and b)</td></tr><tr><td>or  （或）</td><td>(a or b)</td></tr><tr><td>not（非）</td><td>(not a)</td></tr></tbody></table><ul><li><p>and（与）：如果左边为False，则右边不执行，输出左边的值。反之亦然。</p></li><li><p>or  （或）：如果左边为True，则右边不执行，输出左边的值。反之亦然。</p></li><li><p>not（非）：如果not的值为True，则输出结果为False。反之亦然，返回True（嘻嘻）。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c1 = (a <span class="keyword">and</span> b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;与：&quot;</span>,c1) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">c1 = (a <span class="keyword">or</span> b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;或：&quot;</span>,c1) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">c1 = (<span class="keyword">not</span> b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;非：&quot;</span>,c1) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/post/ec7d7221.html"/>
      <url>/post/ec7d7221.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>注意：hexo搭建博客的前提是电脑内安装有node.js和npm</p><h4 id="步骤一："><a href="#步骤一：" class="headerlink" title="步骤一："></a>步骤一：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd进入命令行</span><br></pre></td></tr></table></figure><h4 id="步骤二："><a href="#步骤二：" class="headerlink" title="步骤二："></a>步骤二：</h4><ol><li>利用npm安装cnpm配置淘宝镜像<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li>测试(如果有出现版本号证明安装成功)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure></li></ol><h4 id="步骤三："><a href="#步骤三：" class="headerlink" title="步骤三："></a>步骤三：</h4><ol><li>利用cnpm安装hexo文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">验证：</span><br><span class="line">hexo-v</span><br></pre></td></tr></table></figure></li></ol><h4 id="步骤四："><a href="#步骤四：" class="headerlink" title="步骤四："></a>步骤四：</h4><ol><li>创建文件夹<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line">进入blog文件</span><br><span class="line">cd blog</span><br></pre></td></tr></table></figure></li></ol><h4 id="步骤五："><a href="#步骤五：" class="headerlink" title="步骤五："></a>步骤五：</h4><ol><li>利用hexo生成我们的博客<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init(初始化一个博客)</span><br></pre></td></tr></table></figure></li></ol><h4 id="步骤六："><a href="#步骤六：" class="headerlink" title="步骤六："></a>步骤六：</h4><p>启动hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ol><li>创建成功后它会默认端口<a href="http://localhost:4000/">http://localhost:4000</a></li><li>并自动生成一片Hello Word 文章</li><li>文章内有hexo的使用</li></ol><h1 id="二、Hexo的使用"><a href="#二、Hexo的使用" class="headerlink" title="二、Hexo的使用"></a>二、Hexo的使用</h1><h3 id="1-创建博客文章"><a href="#1-创建博客文章" class="headerlink" title="1. 创建博客文章"></a>1. 创建博客文章</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我的第一篇博客文章&quot;</span><br></pre></td></tr></table></figure><h3 id="2-生成"><a href="#2-生成" class="headerlink" title="2. 生成"></a>2. 生成</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate(简写：hexo g)</span><br></pre></td></tr></table></figure><h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server(简写：hexo s)</span><br></pre></td></tr></table></figure><h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy(简写：hexo d)</span><br></pre></td></tr></table></figure><h2 id="4-部署到GitHUb"><a href="#4-部署到GitHUb" class="headerlink" title="4.部署到GitHUb"></a>4.部署到GitHUb</h2><p>部署前要先注册GitHub哦，可以给你网站github.com,快去注册吧！</p><h4 id="步骤一：-1"><a href="#步骤一：-1" class="headerlink" title="步骤一："></a>步骤一：</h4><ol><li>先安装一个插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li></ol><h4 id="步骤二：-1"><a href="#步骤二：-1" class="headerlink" title="步骤二："></a>步骤二：</h4><ol><li>用pycharm打开blog文件，修改_config.yml配置文件最下面的#Deployment<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Wanghan123-github/wanghan123-github.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>注意：这个repo后面的网站是你新建仓库的地址</li></ol><h4 id="步骤三：-1"><a href="#步骤三：-1" class="headerlink" title="步骤三："></a>步骤三：</h4><ol><li>部署GitHub：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy(简写：hexo d)</span><br></pre></td></tr></table></figure>接下来输入你的GitHub用户名和密码就可以部署完毕</li></ol><h4 id="上述操作成功以后："><a href="#上述操作成功以后：" class="headerlink" title="上述操作成功以后："></a>上述操作成功以后：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">刷新你的GitHub页面就可以看到上传的文件了,再复制你网页路由上的最后一段,</span><br><span class="line">粘贴到新的浏览器页面打开就可以看到你线上的个人博客了</span><br><span class="line">例如：</span><br><span class="line">https://github.com/Wanghan123-github/wanghan123-github.github.io</span><br><span class="line">打开wanghan123-github.github.io就可以看到了</span><br></pre></td></tr></table></figure><h1 id="Hexo的主题更换"><a href="#Hexo的主题更换" class="headerlink" title="Hexo的主题更换"></a>Hexo的主题更换</h1><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><ol><li>进入themes文件下克隆下你想要的主题<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git</span><br></pre></td></tr></table></figure></li></ol><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><ol start="2"><li>修改config.toml配置文件里的theme<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></table></figure></li></ol><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步:"></a>第三步:</h3><ol start="3"><li>先生成后部署<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate(简写：hexo g)</span><br><span class="line">hexo deploy(简写：hexo d)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python操作redis</title>
      <link href="/post/979f557b.html"/>
      <url>/post/979f557b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>redis连接实例是线程安全（redis是单个线程的，所以他是线程安全的）。可以直接将redis连接实例设置为一个全局变量，直接使用。</p><p>如果需要另一个redis实例，就需要重新创建一个redis连接实例来获取一个新的连接。</p><p>redis版本：4.3.4</p><h2 id="连接redis："><a href="#连接redis：" class="headerlink" title="连接redis："></a>连接redis：</h2><h4 id="单个redis实例"><a href="#单个redis实例" class="headerlink" title="单个redis实例"></a>单个redis实例</h4><p>参数：decode_responses 设置写入的键值对中的value为str类型，不加这个参数则为字节类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">r = redis.Redis(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;wanghan&quot;</span>)</span><br><span class="line">r.get(<span class="string">&quot;name&quot;</span>) <span class="comment"># wanghan</span></span><br></pre></td></tr></table></figure><h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><blockquote><p>先建立一个连接池，然后作为单个redis实例的参数，这样就可以多个redis实例去共享同一个连接池（这样就可以避免每次建立和释放的开销）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;male&quot;</span>)</span><br><span class="line">r.get(<span class="string">&quot;gender&quot;</span>) <span class="comment"># male</span></span><br></pre></td></tr></table></figure><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h4 id="一、set-（存储值，默认不存在则创建，存在则修改）"><a href="#一、set-（存储值，默认不存在则创建，存在则修改）" class="headerlink" title="一、set （存储值，默认不存在则创建，存在则修改）"></a>一、set （存储值，默认不存在则创建，存在则修改）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(name, value, ex=<span class="literal">None</span>, px=<span class="literal">None</span>, nx=<span class="literal">False</span>, xx=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p>ex：过期时间（秒）</p></li><li><p>px：过期时间（毫秒）</p></li><li><p>nx：如果设置为True，则只有name（参数）不存在时，当前set操作才执行</p></li><li><p>xx：如果设置为True，则只有name（参数）存在时，当前set操作才执行</p></li></ul><ol><li><p>ex：过期时间（秒）这里过期时间是3秒，过期后值为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&quot;food&quot;</span>,<span class="string">&quot;beef&quot;</span>,px=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&quot;food&quot;</span>)) <span class="comment"># beef</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&quot;food&quot;</span>)) <span class="comment"># None</span></span><br></pre></td></tr></table></figure></li><li><p>px：过期时间（毫秒）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&quot;fruit&quot;</span>,<span class="string">&quot;Banana&quot;</span>,px=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&quot;fruit&quot;</span>)) <span class="comment"># Banana</span></span><br><span class="line">time.sleep(<span class="number">3</span>/<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&quot;fruit&quot;</span>)) <span class="comment"># Banana</span></span><br></pre></td></tr></table></figure></li><li><p>nx：如果设置为True，则只有name（参数）不存在时，当前set操作才会新建key:value</p><blockquote><p>键fruit 不存在，那么输出为True，不存在输出为None</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">result = r.<span class="built_in">set</span>(<span class="string">&quot;fruit&quot;</span>,<span class="string">&quot;apple&quot;</span>,nx=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># True</span></span><br><span class="line">result2 = r.<span class="built_in">set</span>(<span class="string">&quot;fruit&quot;</span>,<span class="string">&quot;orange&quot;</span>,nx=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(result2) <span class="comment"># None</span></span><br></pre></td></tr></table></figure></li><li><p>xx：如果设置为True，则只有name参数存在时，当前set操作才会修改value</p><blockquote><p>键fruit 存在，那么输出True，不存在输出None</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&quot;fruit&quot;</span>,<span class="string">&quot;test&quot;</span>)</span><br><span class="line">result = r.<span class="built_in">set</span>(<span class="string">&quot;fruit&quot;</span>,<span class="string">&quot;apple&quot;</span>,xx=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># True</span></span><br><span class="line">result = r.<span class="built_in">set</span>(<span class="string">&quot;food&quot;</span>,<span class="string">&quot;apple&quot;</span>,xx=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># None</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="二、setnx（存储值，只有name-不存在时，才添加）"><a href="#二、setnx（存储值，只有name-不存在时，才添加）" class="headerlink" title="二、setnx（存储值，只有name 不存在时，才添加）"></a>二、setnx（存储值，只有name 不存在时，才添加）</h4><ol><li><p>setnx(name,value)</p><blockquote><p>键weather 不存在，输出为True，存在输出为False</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">result = r.setnx(<span class="string">&quot;weather&quot;</span>,<span class="string">&quot;Sunny&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># True</span></span><br><span class="line">result = r.setnx(<span class="string">&quot;weather1&quot;</span>,<span class="string">&quot;overcast&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="三、setex（存储值，添加过期时间，秒级）"><a href="#三、setex（存储值，添加过期时间，秒级）" class="headerlink" title="三、setex（存储值，添加过期时间，秒级）"></a>三、setex（存储值，添加过期时间，秒级）</h4><ol><li><p>setex(name, time, value)</p><p>注意第二个参数是时间，第三个参数是值。默认以秒做单位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.setex(<span class="string">&quot;age&quot;</span>,<span class="number">3</span>,<span class="string">&quot;21&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&quot;age&quot;</span>)) <span class="comment"># 21</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&quot;age&quot;</span>)) <span class="comment"># None</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="四、psetex（存储值，添加过期时间，毫秒级）"><a href="#四、psetex（存储值，添加过期时间，毫秒级）" class="headerlink" title="四、psetex（存储值，添加过期时间，毫秒级）"></a>四、psetex（存储值，添加过期时间，毫秒级）</h4><ol><li><p>psetex(name, time_ms,value)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.psetex(<span class="string">&quot;gender&quot;</span>,<span class="number">5000</span>,<span class="string">&quot;male&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&quot;gender&quot;</span>)) <span class="comment"># male</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&quot;gender&quot;</span>)) <span class="comment"># None</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="五、mset（批量存储值）mget（批量获取值）"><a href="#五、mset（批量存储值）mget（批量获取值）" class="headerlink" title="五、mset（批量存储值）mget（批量获取值）"></a>五、mset（批量存储值）mget（批量获取值）</h4><ol><li><p>mset(*kwargs)mget(list)</p><ul><li><p>mset只需要传入一个dict即可批量存储值</p></li><li><p>mget只需要传入一个list的key即可批量查询值</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">data = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>&#125;</span><br><span class="line">r.mset(data)</span><br><span class="line">result = r.mget([<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;k2&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># [&#x27;v1&#x27;, &#x27;v2&#x27;]</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="六、getset（设置新值并获取原来的值）"><a href="#六、getset（设置新值并获取原来的值）" class="headerlink" title="六、getset（设置新值并获取原来的值）"></a>六、getset（设置新值并获取原来的值）</h4><ol><li><p>getset(name,value)</p><p>getset返回的值是原来的值，再次获取设置的key时才是新的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&quot;food&quot;</span>,<span class="string">&quot;milk&quot;</span>)</span><br><span class="line">result = r.getset(<span class="string">&quot;food&quot;</span>,<span class="string">&quot;bread&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># milk</span></span><br><span class="line"><span class="built_in">print</span>(r.get(<span class="string">&quot;food&quot;</span>)) <span class="comment"># bread</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="七、"><a href="#七、" class="headerlink" title="七、"></a>七、</h4>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础命令</title>
      <link href="/post/77167cb1.html"/>
      <url>/post/77167cb1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>Redis基础操作命令：</p><h1 id="启动redis服务："><a href="#启动redis服务：" class="headerlink" title="启动redis服务："></a>启动redis服务：</h1><p>方法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start redis</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server </span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/xv0gKA"><img src="https://s1.ax1x.com/2022/11/07/xv0gKA.png" alt="xv0gKA.png"></a></p><h1 id="查看redis服务进程："><a href="#查看redis服务进程：" class="headerlink" title="查看redis服务进程："></a>查看redis服务进程：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps axu | grep redis</span><br></pre></td></tr></table></figure><h1 id="连接redis服务"><a href="#连接redis服务" class="headerlink" title="连接redis服务:"></a>连接redis服务:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><h1 id="关闭redis服务："><a href="#关闭redis服务：" class="headerlink" title="关闭redis服务："></a>关闭redis服务：</h1><p>方法一：</p><blockquote><p>由于brew启动的redis 手动无法杀死进程，所以需要brew关闭redis。brew services list查看brew启动的服务列表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services stop redis</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 ***</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>partial</title>
      <link href="/post/aa07d0f4.html"/>
      <url>/post/aa07d0f4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="偏函数partial"><a href="#偏函数partial" class="headerlink" title="偏函数partial"></a>偏函数partial</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当函数的参数个数太多，需要简化时，使用 functools.partial 可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>只要不是关键字参数，都按照 参数func后参数的排序 依次向 func函数传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">partial_func = partial(func, *args, **kwargs)</span><br></pre></td></tr></table></figure><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calsum</span>(<span class="params">a, b, c, d</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b + c + d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 承载calsum函数，并传入第一个参数</span></span><br><span class="line">para = partial(calsum, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递第二个参数,就是把2传给para</span></span><br><span class="line">res = para(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出最后的结果</span></span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第二种（关键字参数）"><a href="#第二种（关键字参数）" class="headerlink" title="第二种（关键字参数）"></a>第二种（关键字参数）</h4><p>注意：如果使用partial向函数传递关键词参数之后，后续继续再继续传递的时候记得也要用关键字参数哦。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calsum</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> a, b, c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 承载calsum函数，并传入第一个参数</span></span><br><span class="line">para = partial(calsum, <span class="number">999</span>, c=<span class="string">&quot;我是一个字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递第二个参数,就是把2传给para</span></span><br><span class="line">res = para(b=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出最后的结果</span></span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># (999, 7, &#x27;我是一个字符串&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="与map函数的应用"><a href="#与map函数的应用" class="headerlink" title="与map函数的应用"></a>与map函数的应用</h1><p>由于map函数的每次最多传递一个可迭代的参数，但实际场景是传递多个参数但是这几个参数的结果也已知了，这时可以借助partial偏函数先向函数传递一个或多个参数，再由map传递一个可迭代参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line">data = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">nn,zm</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(nn,zm)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="string">&quot;我是数据nn&quot;</span></span><br><span class="line">    pfunc = partial(func,n)</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">20</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        <span class="comment"># for i in data:</span></span><br><span class="line">        <span class="comment">#     res = pool.submit(func,i,n)</span></span><br><span class="line">        <span class="comment"># 使用map函数替换上面的for循环</span></span><br><span class="line">        results = pool.<span class="built_in">map</span>(pfunc,data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是数据nn 我是数据nn我是数据nn e</span><br><span class="line"> d</span><br><span class="line">a</span><br><span class="line">我是数据nn c我是数据nn b</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-functools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scheduler实践</title>
      <link href="/post/1ef67ed5.html"/>
      <url>/post/1ef67ed5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"><span class="keyword">from</span> dispose.UPAR_CIMSS_CSA_HB_ZK <span class="keyword">import</span> do_main</span><br><span class="line"><span class="keyword">from</span> dispose.draw_tlogp <span class="keyword">import</span> tlogp_do_main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job</span>():</span><br><span class="line">    date_time = datetime.now()</span><br><span class="line">    <span class="comment"># print(date_time)</span></span><br><span class="line">    <span class="keyword">if</span> date_time.hour &gt; <span class="number">0</span> <span class="keyword">and</span> date_time.hour &lt; <span class="number">12</span>:</span><br><span class="line">        lastimestr = (date_time-timedelta(days=<span class="number">1</span>)).strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line">        lastimestr = lastimestr + <span class="string">&quot;200000&quot;</span></span><br><span class="line">        nowtime = date_time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>) + <span class="string">&quot;080000&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> date_time.hour &gt; <span class="number">12</span> <span class="keyword">and</span> date_time.hour &lt; <span class="number">24</span>:</span><br><span class="line">        lastimestr = date_time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line">        lastimestr = lastimestr + <span class="string">&quot;080000&quot;</span></span><br><span class="line">        nowtime = date_time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>) + <span class="string">&quot;200000&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lastimestr = datetime.strftime(date_time, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">        nowtime = datetime.strftime(date_time, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="comment"># print(lastimestr)</span></span><br><span class="line">    <span class="comment"># print(nowtime)</span></span><br><span class="line">    <span class="comment"># 云结构分析图</span></span><br><span class="line">    do_main(lastimestr,nowtime)</span><br><span class="line">    <span class="comment"># tlogp</span></span><br><span class="line">    tlogp_do_main(lastimestr,nowtime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建后台执行的 schedulers</span></span><br><span class="line">scheduler = BlockingScheduler(timezone=<span class="string">&quot;Asia/Shanghai&quot;</span>)</span><br><span class="line"><span class="comment"># 添加调度任务</span></span><br><span class="line"><span class="comment"># 调度方法为 my_job，触发器选择 cron(特定时间周期)，设定每天八点和晚上八点执行一次</span></span><br><span class="line"><span class="comment"># scheduler.add_job(job, &#x27;cron&#x27;, hour=10, minute=35)</span></span><br><span class="line"><span class="comment"># scheduler.add_job(job, &#x27;cron&#x27;, hour=10, minute=36)</span></span><br><span class="line"></span><br><span class="line">scheduler.add_job(job, <span class="string">&#x27;cron&#x27;</span>, hour=<span class="number">8</span>, minute=<span class="number">0</span>)</span><br><span class="line">scheduler.add_job(job, <span class="string">&#x27;cron&#x27;</span>, hour=<span class="number">20</span>, minute=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 启动调度任务</span></span><br><span class="line">scheduler.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-scheduler定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unittest示例</title>
      <link href="/post/31229bdb.html"/>
      <url>/post/31229bdb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="built_in">str</span>(pathlib.Path(__file__).resolve().parents[<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pandora.abstractdata.Product.Config <span class="keyword">import</span> AD_ProductFlow</span><br><span class="line"><span class="keyword">from</span> pandora.abstractdata.Product.Config.AD_ProductFlow <span class="keyword">import</span> (</span><br><span class="line">    ProductFlowORMModel, </span><br><span class="line">    ProductFlowNodeORMModel,</span><br><span class="line">    ProductFlowOperationLogORMModel,</span><br><span class="line">    ProductFlowRoleORMModel,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> pandora.base.base_query <span class="keyword">import</span> QueryColumnFieldModel, transform_to_model</span><br><span class="line"><span class="keyword">from</span> pandora.unit_test.config <span class="keyword">import</span> execute_sql, get_db_sessionmaker</span><br><span class="line"><span class="keyword">from</span> pandora.updatedata.Product.Config.AD_ProductFlow <span class="keyword">import</span> (</span><br><span class="line">    ProductFlowQueryModel,</span><br><span class="line">    ProductFlowInModel,</span><br><span class="line">    ProductFlowOutModel,</span><br><span class="line">    Insert_ProductFlow_ToDB,</span><br><span class="line">    Update_ProductFlow_ToDB,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tester</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_Get_ProductFlow_FromDB</span>(<span class="params">self</span>):</span><br><span class="line">        session = get_db_sessionmaker(<span class="string">&quot;Aries&quot;</span>)</span><br><span class="line">        _session_ins = session()</span><br><span class="line"></span><br><span class="line">        in_model = ProductFlowInModel(</span><br><span class="line">            ProductID=<span class="string">&quot;12&quot;</span>, Name=<span class="string">&quot;规则组名字&quot;</span>, Entity=<span class="string">&quot;ubiq&quot;</span>, Title=<span class="string">&quot;adproductFlowtest&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 插入</span></span><br><span class="line">        ad = AD_ProductFlow.AD_ProductFlow().get(</span><br><span class="line">            Insert_ProductFlow_ToDB(</span><br><span class="line">                _session_ins, in_model</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 无条件获取</span></span><br><span class="line">        ad = AD_ProductFlow.AD_ProductFlow().get(</span><br><span class="line">            AD_ProductFlow.Get_ProductFlow_FromDB(</span><br><span class="line">                _session_ins</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        df = ad.data(<span class="string">&quot;df&quot;</span>)</span><br><span class="line">        _session_ins.commit()</span><br><span class="line">        self.assertEqual(<span class="string">&quot;规则组名字&quot;</span>, df[df.ProductID == <span class="string">&quot;12&quot;</span>][<span class="string">&quot;Name&quot;</span>].iloc[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># qeury_dict 获取</span></span><br><span class="line">        query_dict = &#123;<span class="string">&quot;Name&quot;</span>: (<span class="string">&quot;is&quot;</span>, <span class="string">&quot;规则组名字&quot;</span>)&#125;</span><br><span class="line">        query_ad = AD_ProductFlow.AD_ProductFlow().get(</span><br><span class="line">            AD_ProductFlow.Get_ProductFlow_FromDB(</span><br><span class="line">                _session_ins, query_dict=query_dict</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        query_df = query_ad.data(<span class="string">&quot;df&quot;</span>)</span><br><span class="line">        _session_ins.commit()</span><br><span class="line">        self.assertEqual(<span class="string">&quot;规则组名字&quot;</span>, query_df[query_df.ProductID == <span class="string">&quot;12&quot;</span>][<span class="string">&quot;Name&quot;</span>].iloc[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 有条件获取</span></span><br><span class="line">        ad = AD_ProductFlow.AD_ProductFlow().get(</span><br><span class="line">            AD_ProductFlow.Get_ProductFlow_FromDB(</span><br><span class="line">                _session_ins,</span><br><span class="line">                ProductFlowQueryModel(</span><br><span class="line">                    <span class="built_in">id</span>=QueryColumnFieldModel(</span><br><span class="line">                        exp=<span class="string">&quot;is&quot;</span>, value=<span class="built_in">str</span>(df[df.ProductID == <span class="string">&quot;12&quot;</span>][<span class="string">&quot;id&quot;</span>].iloc[<span class="number">0</span>]), orm_col=ProductFlowORMModel.<span class="built_in">id</span></span><br><span class="line">                    )</span><br><span class="line">                ),</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        out_model = transform_to_model(ad, ProductFlowOutModel)[<span class="number">0</span>]</span><br><span class="line">        in_model = ProductFlowInModel(</span><br><span class="line">            <span class="built_in">id</span>=out_model.<span class="built_in">id</span>, ProductID=<span class="string">&quot;12&quot;</span>, Name=<span class="string">&quot;新规则组名字&quot;</span></span><br><span class="line">        )</span><br><span class="line">        _session_ins.commit()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新</span></span><br><span class="line">        ad = AD_ProductFlow.AD_ProductFlow().get(</span><br><span class="line">            Update_ProductFlow_ToDB(</span><br><span class="line">                _session_ins, in_model</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        df = ad.data(<span class="string">&quot;df&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.assertEqual(<span class="string">&quot;新规则组名字&quot;</span>, df[df.ProductID == <span class="string">&quot;12&quot;</span>][<span class="string">&quot;Name&quot;</span>].iloc[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 获取</span></span><br><span class="line">        ad = AD_ProductFlow.AD_ProductFlow().get(</span><br><span class="line">            AD_ProductFlow.Get_ProductFlow_FromDB(</span><br><span class="line">                _session_ins</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        df = ad.data(<span class="string">&quot;df&quot;</span>)</span><br><span class="line">        _session_ins.commit()</span><br><span class="line">        <span class="built_in">print</span>(df)</span><br><span class="line">        self.assertEqual(</span><br><span class="line">            <span class="string">&quot;新规则组名字&quot;</span>, df[df.ProductID == <span class="string">&quot;12&quot;</span>][<span class="string">&quot;Name&quot;</span>].iloc[<span class="number">0</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            delete from ProductFlow where ProductID=&#x27;12&#x27;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        execute_sql(session, sql)</span><br><span class="line">        _session_ins.commit()</span><br><span class="line">        _session_ins.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-unittest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✨和**运算符</title>
      <link href="/post/3fcc0bcf.html"/>
      <url>/post/3fcc0bcf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>python3中，* 和 ** 共有四类用法。</p><h1 id="1-算数运算"><a href="#1-算数运算" class="headerlink" title="1. 算数运算"></a>1. 算数运算</h1><p><font size=3>* 代表乘法</font><br><font size=3>** 代表乘方</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">2</span>*<span class="number">5</span>) <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**<span class="number">5</span>) <span class="comment"># 32</span></span><br></pre></td></tr></table></figure><h1 id="2-函数形参"><a href="#2-函数形参" class="headerlink" title="2. 函数形参"></a>2. 函数形参</h1><h2 id="2-1-args和-kwargs场景："><a href="#2-1-args和-kwargs场景：" class="headerlink" title="2.1 *args和**kwargs场景："></a>2.1 *args和**kwargs场景：</h2><p>可以将不定数量的参数传递给一个函数。不定的意思是：预先不知道使用着会传递多少个参数给你，所以这个场景下使用这两个关键字参数。其实并不是必须写成*args和*<em>kwargs。</em>才是必须写的，你可以写成*a和**k。</p><h3 id="（插入知识点）"><a href="#（插入知识点）" class="headerlink" title="（插入知识点）"></a>（插入知识点）</h3><h4 id="首先python函数传递参数的方式有四种："><a href="#首先python函数传递参数的方式有四种：" class="headerlink" title="首先python函数传递参数的方式有四种："></a>首先python函数传递参数的方式有四种：</h4><ul><li>位置参数（也就是必传参数）</li><li>默认参数</li><li>可变参数（*args，该类型参数不定长，可传可不传）</li><li>关键字参数（**kwargs，也是一种可变参数，可传可不传）</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">a, b, c=<span class="number">0</span>, *args, **kw</span>):  <span class="comment"># 位置参数a、b；默认参数c；可变参数args；关键字参数kw</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;args =&#x27;</span>, args, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>必传参数要在默认参数和可变参数前面，否则报错。</li><li>可变参数之前不能指定参数名，之后必须要指定参数名进行传递，否则按可变参数传递（也是按关键字参数）</li><li>*args必须放在所有位置参数的后面，</li><li>*args必须放在 **kwargs的前面，</li><li>**kwargs必须放在所有关键字参数的后面</li></ol><h4 id="关于函数调用参数的传递方式是值传递还是引用传递？"><a href="#关于函数调用参数的传递方式是值传递还是引用传递？" class="headerlink" title="关于函数调用参数的传递方式是值传递还是引用传递？"></a>关于函数调用参数的传递方式是值传递还是引用传递？</h4><p>可变类型有：列表，字典，集合，不可变类型有：字符串，数字，元组。</p><p>可变类型传递的的是内存中的地址，不可变类型是将原地址中的值复制过去，对新开辟的内存中的值进行操作。<br>因此：</p><ul><li>可变对象是引用传递，不可变参数是值传递。</li></ul><hr><h2 id="2-2-args-和-kwargs区别："><a href="#2-2-args-和-kwargs区别：" class="headerlink" title="2.2 *args 和 **kwargs区别："></a>2.2 *args 和 **kwargs区别：</h2><ul><li>*args表示多个无名参数，是一个tuple元组类型</li><li>**kwargs表示关键字参数，是一个dict字典类型</li></ul><h2 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h2><h4 id="1-如果同时使用-args和-kwargs时，必须-args参数列要在-kwargs之前"><a href="#1-如果同时使用-args和-kwargs时，必须-args参数列要在-kwargs之前" class="headerlink" title="1. 如果同时使用*args和**kwargs时，必须*args参数列要在**kwargs之前"></a>1. 如果同时使用*args和**kwargs时，必须*args参数列要在**kwargs之前</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args=&quot;</span>,args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;kwargs=&quot;</span>,kwargs)</span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,A=<span class="string">&quot;a&quot;</span>,B=<span class="string">&quot;b&quot;</span>,C=<span class="string">&quot;c&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://s1.ax1x.com/2022/07/06/jau33q.png" alt="jau33q.png"></p><h4 id="2-使用-args"><a href="#2-使用-args" class="headerlink" title="2. 使用*args"></a>2. 使用*args</h4><p>当位置参数与不定长参数一起使用时，先把参数分配给位置参数再将多余的参数以元组形式分配给args：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">name, *args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name=&quot;</span>,name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">fun(<span class="string">&quot;hwang&quot;</span>,<span class="string">&quot;xming&quot;</span>,<span class="string">&quot;xhong&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://s1.ax1x.com/2022/07/06/jaKasf.png" alt="jaKasf.png"></p><h4 id="3-使用-kwargs"><a href="#3-使用-kwargs" class="headerlink" title="3. 使用**kwargs"></a>3. 使用**kwargs</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">name, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name =&quot;</span>,name)</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="built_in">print</span>(key,value)</span><br><span class="line"></span><br><span class="line">fun(<span class="string">&quot;hwang&quot;</span>,gender=<span class="string">&quot;male&quot;</span>,age=<span class="string">&quot;16&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://s1.ax1x.com/2022/07/06/jaMHAg.png" alt="jaMHAg.png"></p><h4 id="4-函数实参"><a href="#4-函数实参" class="headerlink" title="4. 函数实参"></a>4. 函数实参</h4><p>如果函数的形参时定长参数，也可以使用*args和**kwargs调用函数，类似对元组和字典进行解引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">data1,data2,data3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data1: &quot;</span>,data1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data2: &quot;</span>,data2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data3: &quot;</span>,data3)</span><br><span class="line"></span><br><span class="line">args = (<span class="string">&quot;one&quot;</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">fun(*args)</span><br><span class="line"></span><br><span class="line">kwargs = &#123;<span class="string">&quot;data1&quot;</span>:<span class="string">&quot;hwang&quot;</span>,<span class="string">&quot;data2&quot;</span>:<span class="number">16</span>,<span class="string">&quot;data3&quot;</span>:<span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">fun(**kwargs)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/07/06/ja1ZTO.png" alt="ja1ZTO.png"></p><h4 id="5-序列解包"><a href="#5-序列解包" class="headerlink" title="5. 序列解包"></a>5. 序列解包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a,b,*c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/07/06/ja8oFO.png" alt="ja8oFO.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--时间序列--DateOffset</title>
      <link href="/post/be10cd45.html"/>
      <url>/post/be10cd45.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 Pandas 时间序列中，DateOffset 对象是一种非常有用的数据类型，它表示一段时间偏移量，可以用于对时间序列进行时间偏移操作。DateOffset 对象可以用来表示一些常见的时间间隔，如一天、一周、一个月、一个季度、一年等。同时，也可以通过指定一些参数来创建自定义的时间偏移量。</p><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>​DateOffset 对象可以用于对 Pandas 时间序列进行时间偏移操作，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 创建一个时间序列</span></span><br><span class="line">dates = pd.date_range(<span class="string">&#x27;2021-01-01&#x27;</span>, <span class="string">&#x27;2021-01-10&#x27;</span>)</span><br><span class="line"><span class="comment"># 对时间序列进行一天的时间偏移操作</span></span><br><span class="line">shifted_dates = dates + DateOffset(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DatetimeIndex([<span class="string">&#x27;2021-01-02&#x27;</span>, <span class="string">&#x27;2021-01-03&#x27;</span>, <span class="string">&#x27;2021-01-04&#x27;</span>, <span class="string">&#x27;2021-01-05&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2021-01-06&#x27;</span>, <span class="string">&#x27;2021-01-07&#x27;</span>, <span class="string">&#x27;2021-01-08&#x27;</span>, <span class="string">&#x27;2021-01-09&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2021-01-10&#x27;</span>, <span class="string">&#x27;2021-01-11&#x27;</span>],</span><br><span class="line">              dtype=<span class="string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>以上代码中，创建了一个从 2021-01-01 到 2021-01-10 的时间序列 dates，然后使用 DateOffset 对象对该时间序列进行了一天的时间偏移操作，得到了一个新的时间序列 shifted_dates，其中每个日期都往后移了一天。</p><h1 id="日期偏移量"><a href="#日期偏移量" class="headerlink" title="日期偏移量"></a>日期偏移量</h1><h2 id="通用日期偏移量（DateOffset）"><a href="#通用日期偏移量（DateOffset）" class="headerlink" title="通用日期偏移量（DateOffset）"></a>通用日期偏移量（DateOffset）</h2><p>注意：将DateOffset应用在夏令时时，他是按照日历时间进行偏移日期时间。不同于Timedelta偏移的绝对时间。（<a href="https://baike.baidu.com/item/%E5%A4%8F%E4%BB%A4%E6%97%B6#:~:text=%E5%A4%8F%E4%BB%A4%E6%97%B6.%20%E5%A4%8F%E4%BB%A4%E6%97%B6%EF%BC%8C%E8%A1%A8%E7%A4%BA%E4%B8%BA%E4%BA%86%E8%8A%82%E7%BA%A6%E8%83%BD%E6%BA%90%EF%BC%8C%20%E4%BA%BA%E4%B8%BA%20%E8%A7%84%E5%AE%9A%20%E6%97%B6%E9%97%B4%20%E7%9A%84%E6%84%8F%E6%80%9D%E3%80%82.,%E4%B9%9F%E5%8F%AB%E5%A4%8F%E6%97%B6%E5%88%B6%EF%BC%8C%E5%A4%8F%E6%97%B6%E4%BB%A4%EF%BC%88Daylight%20Saving%20Time%EF%BC%9ADST%EF%BC%89%EF%BC%8C%E5%8F%88%E7%A7%B0%22%20%E6%97%A5%E5%85%89%E8%8A%82%E7%BA%A6%E6%97%B6%E5%88%B6%20%22%E5%92%8C%22%E5%A4%8F%E4%BB%A4%E6%97%B6%E9%97%B4%22%EF%BC%8C%E5%9C%A8%E8%BF%99%E4%B8%80%E5%88%B6%E5%BA%A6%E5%AE%9E%E8%A1%8C%E6%9C%9F%E9%97%B4%E6%89%80%E9%87%87%E7%94%A8%E7%9A%84%E7%BB%9F%E4%B8%80%E6%97%B6%E9%97%B4%E7%A7%B0%E4%B8%BA%22%E5%A4%8F%E4%BB%A4%E6%97%B6%E9%97%B4%22%E3%80%82.%20%E4%B8%80%E8%88%AC%E5%9C%A8%E5%A4%A9%E4%BA%AE%E6%97%A9%E7%9A%84%E5%A4%8F%E5%AD%A3%E4%BA%BA%E4%B8%BA%E5%B0%86%E6%97%B6%E9%97%B4%E8%B0%83%E5%BF%AB%E4%B8%80%E5%B0%8F%E6%97%B6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E4%BA%BA%E6%97%A9%E8%B5%B7%E6%97%A9%E7%9D%A1%EF%BC%8C%E5%87%8F%E5%B0%91%E7%85%A7%E6%98%8E%E9%87%8F%EF%BC%8C%E4%BB%A5%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8%E5%85%89%E7%85%A7%E8%B5%84%E6%BA%90%EF%BC%8C%E4%BB%8E%E8%80%8C%E8%8A%82%E7%BA%A6%E7%85%A7%E6%98%8E%E7%94%A8%E7%94%B5%E3%80%82.%20%E5%90%84%E4%B8%AA%E9%87%87%E7%BA%B3%E5%A4%8F%E6%97%B6%E5%88%B6%E7%9A%84%E5%9B%BD%E5%AE%B6%E5%85%B7%E4%BD%93%E8%A7%84%E5%AE%9A%E4%B8%8D%E5%90%8C%E3%80%82.">夏令时</a>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 夏令时的一天</span></span><br><span class="line">ts = pd.Timestamp(<span class="string">&quot;2016-10-30 00:00:00&quot;</span>,tz=<span class="string">&#x27;Europe/Helsinki&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ts) <span class="comment"># 2016-10-30 00:00:00+03:00</span></span><br></pre></td></tr></table></figure><h3 id="Timedelta偏移日期"><a href="#Timedelta偏移日期" class="headerlink" title="Timedelta偏移日期"></a>Timedelta偏移日期</h3><p>Timedelta加一天，对应的是绝对的时间。此刻的夏令时是23小时一天</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ts1 = ts + pd.Timedelta(days=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(ts1) <span class="comment"># 2016-10-30 23:00:00+02:00</span></span><br></pre></td></tr></table></figure><h3 id="DateOffset偏移日期"><a href="#DateOffset偏移日期" class="headerlink" title="DateOffset偏移日期"></a>DateOffset偏移日期</h3><p>DateOffset加一天，对应的是日历时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ts2 = ts+pd.DateOffset(days=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(ts2) <span class="comment"># 2016-10-31 00:00:00+02:00</span></span><br></pre></td></tr></table></figure><h3 id="算数运算符（-）偏移日期"><a href="#算数运算符（-）偏移日期" class="headerlink" title="算数运算符（+）偏移日期"></a>算数运算符（+）偏移日期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ts = pd.Timestamp(<span class="string">&quot;2022-02-11&quot;</span>)</span><br><span class="line">two_business_days = <span class="number">2</span> * pd.offsets.Day()</span><br><span class="line">ts3 = ts + two_business_days</span><br><span class="line"><span class="built_in">print</span>(ts3) <span class="comment"># 2022-02-13 00:00:00</span></span><br></pre></td></tr></table></figure><h3 id="apply偏移日期"><a href="#apply偏移日期" class="headerlink" title="apply偏移日期"></a>apply偏移日期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ts4 = two_business_days.apply(ts)</span><br><span class="line"><span class="built_in">print</span>(ts4) <span class="comment"># 2022-02-13 00:00:00</span></span><br></pre></td></tr></table></figure><h2 id="其他日期偏移量"><a href="#其他日期偏移量" class="headerlink" title="其他日期偏移量"></a>其他日期偏移量</h2><p>除DateOffset通用的日期偏移量外，还有其他类型的日期偏移量。一般情况日期偏移量都有对应的频率字符串，作用一样，用法不一样</p><h3 id="日期偏移量用法："><a href="#日期偏移量用法：" class="headerlink" title="日期偏移量用法："></a>日期偏移量用法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">ts = pd.Timestamp(<span class="string">&quot;2022-02-11&quot;</span>)</span><br><span class="line">ts_end = ts + pd.offsets.<span class="string">&#x27;日期偏移量名&#x27;</span>()</span><br><span class="line"><span class="built_in">print</span>(ts_end)</span><br></pre></td></tr></table></figure><h3 id="频率字符串用法："><a href="#频率字符串用法：" class="headerlink" title="频率字符串用法："></a>频率字符串用法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">ts_end = pd.date_range(<span class="string">&quot;2022-04-21&quot;</span>,periods=<span class="number">10</span>, freq = <span class="string">&#x27;频率字符串&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ts_end)</span><br></pre></td></tr></table></figure><h3 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h3><table><thead><tr><th><strong>日期偏移量</strong></th><th><strong>频率字符串</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.DateOffset.html%23pandas.tseries.offsets.DateOffset">DateOffset</a></td><td>无</td><td>通用偏移类，默认为一个日历日</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BDay.html%23pandas.tseries.offsets.BDay">BDay</a> 或 <a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BusinessDay.html%23pandas.tseries.offsets.BusinessDay">BusinessDay</a></td><td>‘B’</td><td>工作日</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.CDay.html%23pandas.tseries.offsets.CDay">CDay</a> 或 <a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.CustomBusinessDay.html%23pandas.tseries.offsets.CustomBusinessDay">CustomBusinessDay</a></td><td>‘C’</td><td>自定义工作日</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.Week.html%23pandas.tseries.offsets.Week">Week</a></td><td>‘W’</td><td>一周，可选周内固定某日</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.WeekOfMonth.html%23pandas.tseries.offsets.WeekOfMonth">WeekOfMonth</a></td><td>‘WOM’</td><td>每月第几周的第几天</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.LastWeekOfMonth.html%23pandas.tseries.offsets.LastWeekOfMonth">LastWeekOfMonth</a></td><td>‘LWOM’</td><td>每月最后一周的第几天</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.MonthEnd.html%23pandas.tseries.offsets.MonthEnd">MonthEnd</a></td><td>‘M’</td><td>日历日月末</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.MonthBegin.html%23pandas.tseries.offsets.MonthBegin">MonthBegin</a></td><td>‘MS’</td><td>日历日月初</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BMonthEnd.html%23pandas.tseries.offsets.BMonthEnd">BMonthEnd</a> 或 <a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BusinessMonthEnd.html%23pandas.tseries.offsets.BusinessMonthEnd">BusinessMonthEnd</a></td><td>‘BM’</td><td>工作日月末</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BMonthBegin.html%23pandas.tseries.offsets.BMonthBegin">BMonthBegin</a> 或 <a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BusinessMonthBegin.html%23pandas.tseries.offsets.BusinessMonthBegin">BusinessMonthBegin</a></td><td>‘BMS’</td><td>工作日月初</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.CBMonthEnd.html%23pandas.tseries.offsets.CBMonthEnd">CBMonthEnd</a> 或 <a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.CustomBusinessMonthEnd.html%23pandas.tseries.offsets.CustomBusinessMonthEnd">CustomBusinessMonthEnd</a></td><td>‘CBM’</td><td>自定义工作日月末</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.CBMonthBegin.html%23pandas.tseries.offsets.CBMonthBegin">CBMonthBegin</a> 或 <a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.CustomBusinessMonthBegin.html%23pandas.tseries.offsets.CustomBusinessMonthBegin">CustomBusinessMonthBegin</a></td><td>‘CBMS’</td><td>自定义工作日月初</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.SemiMonthEnd.html%23pandas.tseries.offsets.SemiMonthEnd">SemiMonthEnd</a></td><td>‘SM’</td><td>某月第 15 天（或其它半数日期）与日历日月末</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.SemiMonthBegin.html%23pandas.tseries.offsets.SemiMonthBegin">SemiMonthBegin</a></td><td>‘SMS’</td><td>日历日月初与第 15 天（或其它半数日期）</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.QuarterEnd.html%23pandas.tseries.offsets.QuarterEnd">QuarterEnd</a></td><td>‘Q’</td><td>日历日季末</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.QuarterBegin.html%23pandas.tseries.offsets.QuarterBegin">QuarterBegin</a></td><td>‘QS’</td><td>日历日季初</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BQuarterEnd.html%23pandas.tseries.offsets.BQuarterEnd">BQuarterEnd</a></td><td>‘BQ</td><td>工作日季末</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BQuarterBegin.html%23pandas.tseries.offsets.BQuarterBegin">BQuarterBegin</a></td><td>‘BQS’</td><td>工作日季初</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.FY5253Quarter.html%23pandas.tseries.offsets.FY5253Quarter">FY5253Quarter</a></td><td>‘REQ’</td><td>零售季，又名 52-53 周</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.YearEnd.html%23pandas.tseries.offsets.YearEnd">YearEnd</a></td><td>‘A’</td><td>日历日年末</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.YearBegin.html%23pandas.tseries.offsets.YearBegin">YearBegin</a></td><td>‘AS’ 或 ‘BYS’</td><td>日历日年初</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BYearEnd.html%23pandas.tseries.offsets.BYearEnd">BYearEnd</a></td><td>‘BA’</td><td>工作日年末</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BYearBegin.html%23pandas.tseries.offsets.BYearBegin">BYearBegin</a></td><td>‘BAS’</td><td>工作日年初</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.FY5253.html%23pandas.tseries.offsets.FY5253">FY5253</a></td><td>‘RE’</td><td>零售年（又名 52-53 周）</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.Easter.html%23pandas.tseries.offsets.Easter">Easter</a></td><td>无</td><td>复活节假日</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.BusinessHour.html%23pandas.tseries.offsets.BusinessHour">BusinessHour</a></td><td>‘BH’</td><td>工作小时</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.CustomBusinessHour.html%23pandas.tseries.offsets.CustomBusinessHour">CustomBusinessHour</a></td><td>‘CBH’</td><td>自定义工作小时</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.Day.html%23pandas.tseries.offsets.Day">Day</a></td><td>‘D’</td><td>一天</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.Hour.html%23pandas.tseries.offsets.Hour">Hour</a></td><td>‘H’</td><td>一小时</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.Minute.html%23pandas.tseries.offsets.Minute">Minute</a></td><td>‘T’ 或 ‘min’</td><td>一分钟</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.Second.html%23pandas.tseries.offsets.Second">Second</a></td><td>‘S’</td><td>一秒</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.Milli.html%23pandas.tseries.offsets.Milli">Milli</a></td><td>‘L’ 或 ‘ms’</td><td>一毫秒</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.Micro.html%23pandas.tseries.offsets.Micro">Micro</a></td><td>‘U’ 或 ‘us’</td><td>一微秒</td></tr><tr><td><a href="https://links.jianshu.com/go?to=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.Nano.html%23pandas.tseries.offsets.Nano">Nano</a></td><td>‘N’</td><td>一纳秒</td></tr></tbody></table><h2 id="日期偏移量的”参数”偏移"><a href="#日期偏移量的”参数”偏移" class="headerlink" title="日期偏移量的”参数”偏移"></a>日期偏移量的”参数”偏移</h2><p>一般日期偏移量都有一个默认值，但是我们也可以使用对应的参数控制其每次偏移的单位。例如以下内容：</p><h3 id="周（Week）"><a href="#周（Week）" class="headerlink" title="周（Week）"></a>周（Week）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ts = pd.Timestamp(<span class="number">2022</span>,<span class="number">4</span>,<span class="number">21</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="comment"># 星期四</span></span><br><span class="line"></span><br><span class="line">ts_week = ts + pd.offsets.Week()</span><br><span class="line"><span class="built_in">print</span>(ts_week) <span class="comment"># 2022-04-28 11:00:00</span></span><br><span class="line"></span><br><span class="line">ts_weekday = ts + pd.offsets.Week(weekday=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(ts_weekday) <span class="comment"># 2022-04-26 11:00:00</span></span><br></pre></td></tr></table></figure><p>以上代码，创建了一个时间戳对象ts ，表示 “2022-04-21 11:00:00”，然后，利用 Week 类创建了一个表示一周时间偏移量的对象 ts_week，将 d 加上这个时间偏移量，得到了 ts_week。它表示 ts 往后一周的时间，即 “2022-04-28 11:00:00”。接着，代码中又创建了一个表示一周时间偏移量的对象 ts_weekday，但此时指定了Week()的偏移参数<code>weekday=1</code>（指定星期几）。由于weekday参数值范围在0&lt;&#x3D;weekday&lt;&#x3D;6，分别对应星期一到星期日。所以当weekday&#x3D;1时，偏移量计算在下一个周的星期二。</p><h3 id="日历日年末（YearEnd）"><a href="#日历日年末（YearEnd）" class="headerlink" title="日历日年末（YearEnd）"></a>日历日年末（YearEnd）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ts = pd.Timestamp(<span class="number">2022</span>,<span class="number">4</span>,<span class="number">21</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">ts_yearend = ts + pd.offsets.YearEnd()</span><br><span class="line"><span class="built_in">print</span>(ts_yearend) <span class="comment"># 2022-12-31 11:00:00</span></span><br><span class="line"></span><br><span class="line">ts_yearmonthend = ts + pd.offsets.YearEnd(month=<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(ts_yearmonthend) <span class="comment"># 2022-06-30 11:00:00</span></span><br></pre></td></tr></table></figure><h3 id="自定义工作日（CDay-x2F-CustomBusinessDay）"><a href="#自定义工作日（CDay-x2F-CustomBusinessDay）" class="headerlink" title="自定义工作日（CDay &#x2F; CustomBusinessDay）"></a>自定义工作日（CDay &#x2F; CustomBusinessDay）</h3><h4 id="自定义节假日和工作日日历"><a href="#自定义节假日和工作日日历" class="headerlink" title="自定义节假日和工作日日历"></a>自定义节假日和工作日日历</h4><p>以下代码创建了一个自定义工作日偏移量 customize_work_calendar，表示在自定义的工作日历下，工作日为星期日到星期四，休息日为星期五和星期六，并设定了假期时间为 [‘2021-03-02’, datetime.datetime(2022, 3, 2), np.datetime64(‘2023-03-02’)]。接着，定义了一个 datetime 对象 dt，表示 2023 年 3 月 1 日，即星期三。然后，将 dt 加上两个 customize_work_calendar，得到了一个新的 datetime 对象 dt_offset，表示 dt 往后推迟两个工作日的日期。由于 dt 是星期三，加上两个工作日后应该落在星期五，因为星期五、星期六是休息日，周末和假期不计入工作日的计算。但是，假期时间中包括 2023 年 3 月 2 日，因此 2023 年 3 月 2 日也被认为是一个假期，不计入工作日的计算。因此，输出的 dt_offset 是 2023-03-06 00:00:00，代表加上 2 个工作日后的日期是星期一的日期。</p><blockquote><p>注意：变量列表<code>holidays</code>的格式，需要三个不同数据类型的同一日期。可以叠加其他日期，定义太多会很麻烦。</p><p><code>CustomBusinessDay()</code>参数：</p><ul><li><p><code>weekmask</code>：自定义工作日，可单独使用</p></li><li><p><code>holidays</code>：自定义假日，可单独使用</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">weekmask_customize = <span class="string">&#x27;Sun Mon Tue Wed Thu&#x27;</span> <span class="comment"># 设定工作日：星期日-&gt;星期四</span></span><br><span class="line">holidays = [<span class="string">&#x27;2021-03-02&#x27;</span>,datetime.datetime(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">2</span>),np.datetime64(<span class="string">&#x27;2023-03-02&#x27;</span>)] <span class="comment"># 设定假期时间 为3月2日</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">customize_work_calendar = pd.offsets.CustomBusinessDay(holidays=holidays, weekmask=weekmask_customize)</span><br><span class="line">dt = datetime.datetime(<span class="number">2023</span>, <span class="number">3</span>, <span class="number">1</span>) <span class="comment"># 星期三</span></span><br><span class="line"></span><br><span class="line">dt_offset = dt + <span class="number">2</span> * customize_work_calendar <span class="comment"># 2号为假期，3号星期五为休息日，4号星期六休息日，5号星期日工作日（算一天），6号星期一（+1）</span></span><br><span class="line"><span class="built_in">print</span>(dt_offset) <span class="comment"># 2023-03-06 00:00:00 是星期一</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="拓展（日期的映射）"><a href="#拓展（日期的映射）" class="headerlink" title="拓展（日期的映射）"></a>拓展（日期的映射）</h5><p>利用map函数，将weekday（1，代表星期二）的int数据映射为星期的缩写</p><blockquote><p>基于上面代码举例，在dt “2023-03-01”的基础上往后要生成5天的数量，偏移量按照自定义工作日历customize_work_calendar进行。然后将定义的日期custom_date作为索引，custom_date.weekday作为数据data，最后利用map函数生成最后的结果。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">custom_date = pd.date_range(dt, periods=<span class="number">5</span>, freq=customize_work_calendar)</span><br><span class="line">data = pd.Series(custom_date.weekday,custom_date)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">result = pd.Series(custom_date.weekday,custom_date).<span class="built_in">map</span>(pd.Series(<span class="string">&#x27;Mon Tue Wed Thu Fri Sat Sun&#x27;</span>.split()))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span>-03-01    <span class="number">2</span></span><br><span class="line"><span class="number">2023</span>-03-05    <span class="number">6</span></span><br><span class="line"><span class="number">2023</span>-03-06    <span class="number">0</span></span><br><span class="line"><span class="number">2023</span>-03-07    <span class="number">1</span></span><br><span class="line"><span class="number">2023</span>-03-08    <span class="number">2</span></span><br><span class="line">Freq: C, dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="number">2023</span>-03-01    Wed</span><br><span class="line"><span class="number">2023</span>-03-05    Sun</span><br><span class="line"><span class="number">2023</span>-03-06    Mon</span><br><span class="line"><span class="number">2023</span>-03-07    Tue</span><br><span class="line"><span class="number">2023</span>-03-08    Wed</span><br><span class="line">Freq: C, dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure><h4 id="自定义节假日日历"><a href="#自定义节假日日历" class="headerlink" title="自定义节假日日历"></a>自定义节假日日历</h4><p>根据<a href="https://github.com/pandas-dev/pandas/blob/master/pandas/tseries/holiday.py">源码</a>或<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-holiday">文档</a>我们可以发现假日的定义主要体现在holiday()函数。</p><p>在下面这个例子中，我将我的生日1月11设置为节假日。同理中国的节假日也可以通过这样的方法进行设定使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas.tseries.holiday <span class="keyword">import</span> AbstractHolidayCalendar,Holiday</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myBirthdayCalendar</span>(<span class="title class_ inherited__">AbstractHolidayCalendar</span>):</span><br><span class="line">    rules = [</span><br><span class="line">        Holiday(<span class="string">&#x27;Mr.Wang&quot;s Birthday&#x27;</span>,month=<span class="number">1</span>,day=<span class="number">11</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">birthday_holiday = pd.offsets.CustomBusinessDay(calendar=myBirthdayCalendar())</span><br><span class="line"></span><br><span class="line">Jan_date = pd.date_range(<span class="string">&quot;2023-1-1&quot;</span>,<span class="string">&quot;2023-1-31&quot;</span>,freq=birthday_holiday)</span><br><span class="line"><span class="built_in">print</span>(Jan_date)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DatetimeIndex([<span class="string">&#x27;2023-01-02&#x27;</span>, <span class="string">&#x27;2023-01-03&#x27;</span>, <span class="string">&#x27;2023-01-04&#x27;</span>, <span class="string">&#x27;2023-01-05&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2023-01-06&#x27;</span>, <span class="string">&#x27;2023-01-09&#x27;</span>, <span class="string">&#x27;2023-01-10&#x27;</span>, <span class="string">&#x27;2023-01-12&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2023-01-13&#x27;</span>, <span class="string">&#x27;2023-01-16&#x27;</span>, <span class="string">&#x27;2023-01-17&#x27;</span>, <span class="string">&#x27;2023-01-18&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2023-01-19&#x27;</span>, <span class="string">&#x27;2023-01-20&#x27;</span>, <span class="string">&#x27;2023-01-23&#x27;</span>, <span class="string">&#x27;2023-01-24&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2023-01-25&#x27;</span>, <span class="string">&#x27;2023-01-26&#x27;</span>, <span class="string">&#x27;2023-01-27&#x27;</span>, <span class="string">&#x27;2023-01-30&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;2023-01-31&#x27;</span>],</span><br><span class="line">              dtype=<span class="string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="美国联邦节假日"><a href="#美国联邦节假日" class="headerlink" title="美国联邦节假日"></a>美国联邦节假日</h5><blockquote><p>USFederalHolidayCalendar函数：美国联邦假日日历（没有内置其他国家的）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas.tseries.holiday <span class="keyword">import</span> USFederalHolidayCalendar</span><br><span class="line"></span><br><span class="line">american_holidays = pd.offsets.CustomBusinessDay(calendar=USFederalHolidayCalendar())</span><br><span class="line">dt = datetime.datetime(<span class="number">2023</span>,<span class="number">1</span>,<span class="number">21</span>) <span class="comment"># 中国春节放假的第一天，在美国是周六</span></span><br><span class="line">df_offset = dt + american_holidays</span><br><span class="line"><span class="built_in">print</span>(df_offset) <span class="comment"># 2023-01-23 00:00:00</span></span><br></pre></td></tr></table></figure><h3 id="自定义工作日时间（CustomBusinessHour）"><a href="#自定义工作日时间（CustomBusinessHour）" class="headerlink" title="自定义工作日时间（CustomBusinessHour）"></a>自定义工作日时间（CustomBusinessHour）</h3><p><code>CustomBusinessHour</code> 是 <code>BusinessHour</code> 和 <code>CustomBusinessDay</code> 的混合体，可以指定工作时长n，可以指定每周的周几为工作日weekmask、任意节假日calendar，以工作的开始时间start或结束时间end。</p><p>在这个示例中，给定的时间戳是 2023 年 3 月 1 日上午 8:30:00。根据自定义的工作日时间段，每周的周一到周四是工作日，每个工作日从上午 9 点到下午 6 点，每个工作日长度为 2 小时。因此，如果将该工作日时间段加到给定的时间戳上，得到的新时间戳应该是 3 月 1 日上午 11:00:00。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ts = pd.Timestamp(<span class="string">&#x27;2023-03-01 08:30:00&#x27;</span>) <span class="comment"># 星期三</span></span><br><span class="line"></span><br><span class="line">cbh = pd.offsets.CustomBusinessHour(n=<span class="number">2</span>, weekmask=<span class="string">&#x27;Mon Tue Wed Thu&#x27;</span>,</span><br><span class="line">                                            start=<span class="string">&#x27;09:00&#x27;</span>,end=<span class="string">&#x27;18:00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cbh) <span class="comment"># &lt;2 * CustomBusinessHours: CBH=09:00-18:00&gt;</span></span><br><span class="line"></span><br><span class="line">new_timestamp = ts + cbh</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_timestamp) <span class="comment"># 2023-03-01 11:00:00</span></span><br></pre></td></tr></table></figure><h2 id="日期偏移量的”前后”偏移"><a href="#日期偏移量的”前后”偏移" class="headerlink" title="日期偏移量的”前后”偏移"></a>日期偏移量的”前后”偏移</h2><p><code>rollforward()</code> 与 <code>rollback()</code>可以把某一日期按偏移量向前或向后操作至有效偏移日期上。例如：”工作日“偏移量<code>BDay</code>或<code>Business</code>偏移的日期永远在工作日上，而这两个方法负责将非工作日日期（指不符合偏移日期的）推向一个工作日日期（指有效的符合偏移量的有效日期）。如果被偏移的日期是一个工作日（有效的符合偏移量的日期），那么<code>rollforward()</code> 与 <code>rollback()</code>都不会操作改日期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">ts = pd.Timestamp(<span class="string">&quot;2022-4-23 00:00:00&quot;</span>) <span class="comment"># 此日期是星期六</span></span><br><span class="line">Weekday_Offset = pd.offsets.BDay()</span><br></pre></td></tr></table></figure><h3 id="rollforward向前偏移"><a href="#rollforward向前偏移" class="headerlink" title="rollforward向前偏移"></a>rollforward向前偏移</h3><p>以下代码中，当前的日期对于偏移量<code>Weekday_Offset</code>来说，星期六并不是一个有效的偏移日期，所以日期 “2022-4-23 00:00:00“ 星期六被 <strong>加</strong> 到了下周一的时间 “2022-04-25 00:00:00”，此时就是一个有效的工作日日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Forward_Offset = Weekday_Offset.rollforward(ts)</span><br><span class="line"><span class="built_in">print</span>(Forward_Offset)<span class="comment"># 2022-04-25 00:00:00</span></span><br></pre></td></tr></table></figure><h3 id="rollback向后偏移"><a href="#rollback向后偏移" class="headerlink" title="rollback向后偏移"></a>rollback向后偏移</h3><p>以下代码中，由日期 “2022-4-23 00:00:00”  <strong>减</strong> 到了“2022-04-22 00:00:00”星期五</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Backward_Offset = Weekday_Offset.rollback(ts)</span><br><span class="line"><span class="built_in">print</span>(Backward_Offset) <span class="comment"># 2022-04-22 00:00:00</span></span><br></pre></td></tr></table></figure><h2 id="重置日期的时间"><a href="#重置日期的时间" class="headerlink" title="重置日期的时间"></a>重置日期的时间</h2><h3 id="normalize方法"><a href="#normalize方法" class="headerlink" title="normalize方法"></a>normalize方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ts = pd.Timestamp(<span class="string">&quot;2022-4-23 11:12:13&quot;</span>)</span><br><span class="line">reset_ts = ts.normalize()</span><br><span class="line"><span class="built_in">print</span>(reset_ts) <span class="comment"># 2022-04-23 00:00:00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="normalize参数"><a href="#normalize参数" class="headerlink" title="normalize参数"></a>normalize参数</h3><p>可以在日期偏移量上加入<code>normalize</code>参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ts = pd.Timestamp(<span class="string">&quot;2022-4-23 11:12:13&quot;</span>)</span><br><span class="line">reset_ts = ts + pd.DateOffset(days=<span class="number">1</span>,normalize=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(reset_ts) <span class="comment"># 2022-04-24 00:00:00</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="其他类型偏移"><a href="#其他类型偏移" class="headerlink" title="其他类型偏移"></a>其他类型偏移</h1><h2 id="Series-偏移"><a href="#Series-偏移" class="headerlink" title="Series 偏移"></a>Series 偏移</h2><p>以下代码中，创建了一个pandas时间序列s，其中包含了三个日期。接着，利用<code>Pandas</code>中<code>offset</code>模块中的<code>DateOffset</code>，创建了一个表示两个月时间偏移量的对象 s_offset，并将其加上了 s，得到了一个新的时间序列 s_offset，其中每个日期都往后推迟了两个月。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(pd.DatetimeIndex([<span class="string">&#x27;2021-01-01&#x27;</span>, <span class="string">&#x27;2021-01-02&#x27;</span>, <span class="string">&#x27;2021-01-03&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s_offset = s + pd.DateOffset(months=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(s_offset)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">2021</span>-01-01</span><br><span class="line"><span class="number">1</span>   <span class="number">2021</span>-01-02</span><br><span class="line"><span class="number">2</span>   <span class="number">2021</span>-01-03</span><br><span class="line">dtype: datetime64[ns]</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>   <span class="number">2021</span>-03-01</span><br><span class="line"><span class="number">1</span>   <span class="number">2021</span>-03-02</span><br><span class="line"><span class="number">2</span>   <span class="number">2021</span>-03-03</span><br><span class="line">dtype: datetime64[ns]</span><br></pre></td></tr></table></figure><h2 id="DatetimeIndex-偏移"><a href="#DatetimeIndex-偏移" class="headerlink" title="DatetimeIndex 偏移"></a>DatetimeIndex 偏移</h2><p>一下代码中，创建了一个<code>DatetimeIndex</code>的时间戳序列，通过DateOffset方法的<code>months=2</code>，将时间偏移量定为两个月，因此相加的时候，会讲时间序列rng中的日期往后推迟了两个月。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rng = pd.date_range(<span class="string">&#x27;2021-01-01&#x27;</span>, <span class="string">&#x27;2021-01-03&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rng) <span class="comment"># DatetimeIndex([&#x27;2021-01-01&#x27;, &#x27;2021-01-02&#x27;, &#x27;2021-01-03&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"></span><br><span class="line">rng_offset = rng + pd.DateOffset(months=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(rng_offset) <span class="comment"># DatetimeIndex([&#x27;2021-03-01&#x27;, &#x27;2021-03-02&#x27;, &#x27;2021-03-03&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=None)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Timedelta-偏移"><a href="#Timedelta-偏移" class="headerlink" title="Timedelta 偏移"></a>Timedelta 偏移</h2><p>如果直接映射Timedelta，则该偏移与Timedelta的使用方法完全一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(pd.DatetimeIndex([<span class="string">&#x27;2021-03-01&#x27;</span>, <span class="string">&#x27;2021-03-02&#x27;</span>, <span class="string">&#x27;2021-03-03&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">result = s - pd.Series(pd.date_range(<span class="string">&#x27;2021-01-01&#x27;</span>, <span class="string">&#x27;2021-01-03&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>   <span class="number">59</span> days</span><br><span class="line"><span class="number">1</span>   <span class="number">59</span> days</span><br><span class="line"><span class="number">2</span>   <span class="number">59</span> days</span><br><span class="line">dtype: timedelta64[ns]</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>在 <code>Pandas</code> 中，大部分的偏移量都支持矢量操作，即可以对多个时间戳同时进行时间偏移操作。但是，也有一些偏移量不支持矢量操作，即使可以执行运算，速度也非常慢，并可能显示 <code>PerformanceWaring</code>（性能警告），这些偏移量包括：</p><p><code>BusinessHour</code>、<code>CustomBusinessHour</code>、<code>BusinessDay</code>、<code>CustomBusinessDay</code>、<code>BMonthEnd</code>、<code>CBMonthEnd</code>、<code>BMonthBegin</code>、<code>BQuarterEnd</code>、<code>BQuarterBegin</code>、<code>CBMonthBegin</code>、<code>BYearEnd</code>、<code>CYearEnd</code>、<code>BYearBegin</code>、<code>CYearBegin</code> </p><p>以上偏移量都是与业务日历和月历有关的偏移量，它们的特点是时间间隔不是固定的，而是根据具体的日历来计算。因此，对于这些偏移量的时间偏移操作，需要针对每个时间戳进行单独计算，无法进行批量计算。例如（正常情况下）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rng = pd.date_range(<span class="string">&#x27;2021-01-01&#x27;</span>, <span class="string">&#x27;2021-01-03&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(rng) <span class="comment"># DatetimeIndex([&#x27;2021-01-01&#x27;, &#x27;2021-01-02&#x27;, &#x27;2021-01-03&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"></span><br><span class="line">result = rng + pd.offsets.BQuarterEnd()</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># DatetimeIndex([&#x27;2021-03-31&#x27;, &#x27;2021-03-31&#x27;, &#x27;2021-03-31&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=None)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>format格式化函数</title>
      <link href="/post/f882dd5d.html"/>
      <url>/post/f882dd5d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="格式化字符串的函数-str-format"><a href="#格式化字符串的函数-str-format" class="headerlink" title="格式化字符串的函数 str.format()"></a>格式化字符串的函数 str.format()</h2><p>它增强了字符串格式化的功能。</p><p>基本语法是通过 {} 和 : 来代替以前的 % 。</p><p>format 函数可以接受不限个参数，位置可以不按顺序。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>“{} {}”.format(“hello”, “world”)    # 不设置指定位置，按默认顺序<br>‘hello world’</p></blockquote><blockquote><p>“{0} {1}”.format(“hello”, “world”)  # 设置指定位置<br>‘hello world’</p></blockquote><blockquote><p>“{1} {0} {1}”.format(“hello”, “world”)  # 设置指定位置<br>‘world hello world’</p></blockquote><h4 id="也可以设置参数："><a href="#也可以设置参数：" class="headerlink" title="也可以设置参数："></a>也可以设置参数：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line">print(&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;.format(name=&quot;菜鸟教程&quot;, url=&quot;www.runoob.com&quot;))</span><br><span class="line"> </span><br><span class="line"># 通过字典设置参数</span><br><span class="line">site = &#123;&quot;name&quot;: &quot;菜鸟教程&quot;, &quot;url&quot;: &quot;www.runoob.com&quot;&#125;</span><br><span class="line">print(&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;.format(**site))</span><br><span class="line"> </span><br><span class="line"># 通过列表索引设置参数</span><br><span class="line">my_list = [&#x27;菜鸟教程&#x27;, &#x27;www.runoob.com&#x27;]</span><br><span class="line">print(&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;.format(my_list))  # &quot;0&quot; 是必须的</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">网站名：菜鸟教程, 地址 www.runoob.com</span><br><span class="line">网站名：菜鸟教程, 地址 www.runoob.com</span><br><span class="line">网站名：菜鸟教程, 地址 www.runoob.com</span><br></pre></td></tr></table></figure><h4 id="也可以向-str-format-传入对象："><a href="#也可以向-str-format-传入对象：" class="headerlink" title="也可以向 str.format() 传入对象："></a>也可以向 str.format() 传入对象：</h4><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line">class AssignValue(object):</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value = value</span><br><span class="line">my_value = AssignValue(6)</span><br><span class="line">print(&#x27;value 为: &#123;0.value&#125;&#x27;.format(my_value))  # &quot;0&quot; 是可选的</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value 为: 6</span><br></pre></td></tr></table></figure><h4 id="数字格式化-教程链接"><a href="#数字格式化-教程链接" class="headerlink" title="数字格式化 教程链接"></a>数字格式化 <a href="https://www.runoob.com/python/att-string-format.html">教程链接</a></h4><p>下表展示了 str.format() 格式化数字的多种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;&#123;:.2f&#125;&quot;.format(3.1415926))</span><br><span class="line">3.14</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-format </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>round（）函数</title>
      <link href="/post/2de648f3.html"/>
      <url>/post/2de648f3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>在 Python 中，round() 是一个内置函数，用于将一个数字四舍五入到指定的小数位数。它的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span>(number[, ndigits])</span><br></pre></td></tr></table></figure><p>其中，number 表示要四舍五入的数字，ndigits 表示要保留的小数位数，默认值为 0，表示对整数进行四舍五入。 如果 ndigits 大于等于 0，则进行标准的四舍五入操作，保留 ndigits 位小数。如果 ndigits 小于 0，则将 number 四舍五入到最接近的 10 的负 ndigits 次方的整数倍。 举个例子，假设有一个数字 num &#x3D; 3.14159，可以使用 round() 函数将它四舍五入保留两位小数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">3.14159</span></span><br><span class="line">rounded_num = <span class="built_in">round</span>(num, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(rounded_num) <span class="comment"># 3.14</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，将 num 四舍五入保留两位小数，得到结果为 3.14。 需要注意的是，round() 函数的表现会受到 IEEE 754 浮点数标准的影响，因此在使用时需要注意精度问题。如果需要进行精确的数字计算，建议使用 decimal 模块。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-round </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>split、rsplit、join（）方法</title>
      <link href="/post/85015f72.html"/>
      <url>/post/85015f72.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h2><p>Python split()通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串</p><p>str.split(str&#x3D;”“, num&#x3D;string.count(str)).</p><p>参数 ：<br>str – 分隔符，默认为空格。<br>num – 分割次数。</p><p>返回值 ：<br>返回分割后的字符串列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;Line1-abcdef \nLine2-abc \nLine4-abcd&quot;</span><br><span class="line">print (str.split( ))</span><br><span class="line">print (str.split(&#x27; &#x27;, 1 ))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;Line1-abcdef&#x27;, &#x27;Line2-abc&#x27;, &#x27;Line4-abcd&#x27;]</span><br><span class="line">[&#x27;Line1-abcdef&#x27;, &#x27;\nLine2-abc \nLine4-abcd&#x27;]</span><br></pre></td></tr></table></figure><h2 id="rsplit-方法"><a href="#rsplit-方法" class="headerlink" title="rsplit()方法"></a>rsplit()方法</h2><p>Python 字符分割时，可以指定分割哪一部分。</p><blockquote><p>rsplit(“&#x2F;“,1) 中的1，表示从后面分割1个出来，如果是2，那么就是分割两部分出来</p></blockquote><p>比如：只分割最后一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&quot;Matplotlib--dates.Dateformatter(处理日期格式的x轴).md&quot;</span>.rsplit(<span class="string">&quot;.&quot;</span>,<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(filename) <span class="comment"># Matplotlib--dates.Dateformatter(处理日期格式的x轴)</span></span><br></pre></td></tr></table></figure><p>比如：分割文件路径，只想把最后的文件名去除，保留文件夹的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="string">&quot;/home/username/data/text.txt&quot;</span></span><br><span class="line">filepath = file.rsplit(<span class="string">&quot;/&quot;</span>,<span class="number">1</span>) <span class="comment"># [&quot;/home/username/data&quot;,&quot;text.txt &quot;]</span></span><br></pre></td></tr></table></figure><h2 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h2><p>Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</p><p>语法：<br>str.join(sequence)</p><p>参数：<br>sequence – 要连接的元素序列。</p><p>返回值：<br>返回通过指定字符连接序列中元素后生成的新字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;li = [&#x27;my&#x27;,&#x27;name&#x27;,&#x27;is&#x27;,&#x27;bob&#x27;] </span><br><span class="line">&gt;&gt;&gt;&#x27; &#x27;.join(li)  #以‘ ’连接</span><br><span class="line">&#x27;my name is bob&#x27; </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&#x27;_&#x27;.join(li)  #以‘_’连接</span><br><span class="line">&#x27;my_name_is_bob&#x27; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-split、rsplit、join </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zip（）函数</title>
      <link href="/post/6027276b.html"/>
      <url>/post/6027276b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h4 id="示例（压缩操作）"><a href="#示例（压缩操作）" class="headerlink" title="示例（压缩操作）"></a>示例（压缩操作）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">b = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">result = <span class="built_in">list</span>(<span class="built_in">zip</span>(a, b))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://s1.ax1x.com/2022/07/06/jatW9O.png" alt="jatW9O.png"></p><p>很明显，对于我们的两个list，a和b，list(zip(a, b))生成了一个列表。在这个列表中，每个元素是一个tuple；</p><p>事实上，在 Python 3 中，为了节省空间，zip()返回的是一个tuple的迭代器，这也是我们为什么要调用list()将它强制转换成list的原因。不过，Python 2中，它直接返回的就是一个列表了。</p><p>如果我们传入zip()中的几个参数不等长，会有什么结果呢？zip()很灵活，如果几个参数不等长，那么它会取最短的那个参数的长度，然后再进行处理。至于那些超出最短长度的成员，就只好被舍弃掉了</p><p>对于zip(args)这个函数，Python还提供了一种逆操作。例如，我们有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="built_in">zip</span>(a, b)</span><br></pre></td></tr></table></figure><p>那么，只要调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">origin = <span class="built_in">zip</span>(*result) <span class="comment"># #前面加*号，事实上*号也是一个特殊的运算符，叫解包运算符</span></span><br></pre></td></tr></table></figure><p>就可以得到原来的a和b了。利用这个特性，可以用一种特殊的方法处理一些问题，我们待会说。</p><h4 id="示例（解压操作）："><a href="#示例（解压操作）：" class="headerlink" title="示例（解压操作）："></a>示例（解压操作）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">b = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">result = <span class="built_in">zip</span>(a,b)</span><br><span class="line">origin = <span class="built_in">zip</span>(*result)</span><br><span class="line"><span class="comment"># 打印zip(*)的结果</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> origin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(i))</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="https://s1.ax1x.com/2022/07/06/jahpqI.png" alt="jahpqI.png"></p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h4 id="同时遍历多个字典"><a href="#同时遍历多个字典" class="headerlink" title="同时遍历多个字典"></a>同时遍历多个字典</h4><p>在 Python 3.6+ 中，字典成为了一种有顺序的集合。利用这个特性和zip，我们可以同时遍历多个字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dict_one = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Doe&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Python Consultant&#x27;</span>&#125;</span><br><span class="line">dict_two = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Doe&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Community Manager&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(<span class="built_in">zip</span>(dict_one.items(),dict_two.items())))</span><br><span class="line"><span class="keyword">for</span> (k1, v1), (k2, v2) <span class="keyword">in</span> <span class="built_in">zip</span>(dict_one.items(), dict_two.items()):</span><br><span class="line">    <span class="built_in">print</span>(k1, <span class="string">&#x27;-&gt;&#x27;</span>, v1)</span><br><span class="line">    <span class="built_in">print</span>(k2, <span class="string">&#x27;-&gt;&#x27;</span>, v2)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://s1.ax1x.com/2022/07/06/jaBdaj.png" alt="jaBdaj.png"></p><h4 id="对列表进行排序"><a href="#对列表进行排序" class="headerlink" title="对列表进行排序"></a>对列表进行排序</h4><p>考虑一个场景：你正在处理一些学生的成绩，有这样两个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Amy&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line">scores = [<span class="number">98</span>, <span class="number">100</span>, <span class="number">85</span>]  <span class="comment"># 分数和名字是一一对应的</span></span><br></pre></td></tr></table></figure><p>如果你想对它们进行排序，又不想破坏对应关系的话，就可以这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">list</span>(<span class="built_in">zip</span>(names, scores))</span><br><span class="line">data.sort()</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">&#x27;Amy&#x27;</span>, <span class="number">100</span>), (<span class="string">&#x27;Jack&#x27;</span>, <span class="number">85</span>), (<span class="string">&#x27;John&#x27;</span>, <span class="number">98</span>)]</span><br></pre></td></tr></table></figure><p>如果要先对分数进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data2 = <span class="built_in">list</span>(<span class="built_in">zip</span>(scores, names))</span><br><span class="line">data2.sort()</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">85</span>, <span class="string">&#x27;Jack&#x27;</span>), (<span class="number">98</span>, <span class="string">&#x27;John&#x27;</span>), (<span class="number">100</span>, <span class="string">&#x27;Amy&#x27;</span>)]</span><br></pre></td></tr></table></figure><h4 id="转化为字典"><a href="#转化为字典" class="headerlink" title="转化为字典"></a>转化为字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Amy&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]</span><br><span class="line">scores = [<span class="number">98</span>, <span class="number">100</span>, <span class="number">85</span>]  <span class="comment"># 分数和名字是一一对应的</span></span><br><span class="line">result = <span class="built_in">dict</span>(<span class="built_in">zip</span>(names,scores))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://s1.ax1x.com/2022/07/06/jaDB0e.png" alt="jaDB0e.png"></p><h4 id="同时遍历多个列表"><a href="#同时遍历多个列表" class="headerlink" title="同时遍历多个列表"></a>同时遍历多个列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total_sales = [<span class="number">52000.00</span>, <span class="number">51000.00</span>, <span class="number">48000.00</span>]</span><br><span class="line">prod_cost = [<span class="number">46800.00</span>, <span class="number">45900.00</span>, <span class="number">43200.00</span>]</span><br><span class="line"><span class="keyword">for</span> sales, costs <span class="keyword">in</span> <span class="built_in">zip</span>(total_sales, prod_cost):</span><br><span class="line">profit = sales - costs</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Total profit: <span class="subst">&#123;profit&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><img src="https://s1.ax1x.com/2022/07/06/jaDZYn.png" alt="jaDZYn.png"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>利用zip()解压的特性，我们可以使用它秒杀某些字符串处理的题目。例如，力扣的最长公共前缀：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">编写一个函数来查找字符串数组中的最长公共前缀。</span><br><span class="line"></span><br><span class="line">如果不存在公共前缀，返回空字符串 “”。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [“flower”,“flow”,“flight”]</span><br><span class="line">输出: “fl”</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [“dog”,“racecar”,“car”]</span><br><span class="line">输出: “”</span><br><span class="line">解释: 输入不存在公共前缀。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">所有输入只包含小写字母 a-z 。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/longest-common-prefix</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>解答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">data</span>):</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> <span class="built_in">zip</span>(*data):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(temp)) == <span class="number">1</span>:</span><br><span class="line">            result += temp[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">result = func(data)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># fl</span></span><br></pre></td></tr></table></figure><p>思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><ol><li>这里用到了上面zip的解压操作，我们把data看作是压缩后的结果，也就是:<br>(‘f’,’l’,’o’,’w’,’e’,’r’),(‘f’,’l’,’o’,’w’),(‘f’,’l’,’i’,’g’,’h’,’t’)</li></ol></blockquote><blockquote><ol start="2"><li>然后利用zip的解压操作将data解压，又因为她的长度按照长度最短的iterable，所以解压最后的结果是一个有序的为：<br>(‘f’, ‘f’, ‘f’)<br>(‘l’, ‘l’, ‘l’)<br>(‘o’, ‘o’, ‘i’)<br>(‘w’, ‘w’, ‘g’)</li><li>拿到解压结果以后通过遍历判断每一个元组里去重完之后的长度是否为1，为1说明元组内的元素一致，将其添加到str。根据题意只要一致的前缀，所以循环到不一致时直接推出循环，</li><li>返回结果</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-zip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql--添加</title>
      <link href="/post/cae027e1.html"/>
      <url>/post/cae027e1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table_name (字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3</span>) <span class="keyword">values</span> (value1,value2,value3);</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h4 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;wanghan...&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>:<span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">URL = <span class="string">&#x27;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;database&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(**config)</span><br><span class="line">engine = create_engine(URL)</span><br><span class="line"></span><br><span class="line">session = sessionmaker(bind=engine)()</span><br></pre></td></tr></table></figure><h4 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> <span class="string">&#x27;insert into User (name,age) values (&quot;hwang&quot;,999)&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="提交并链接数据库"><a href="#提交并链接数据库" class="headerlink" title="提交并链接数据库"></a>提交并链接数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.execute(sql)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>insert into或insert ignore into或replace into</title>
      <link href="/post/d82cd617.html"/>
      <url>/post/d82cd617.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><table><thead><tr><th>指令</th><th>已存在（判断条件为unique）</th><th>不存在</th><th>举例</th></tr></thead><tbody><tr><td>insert</td><td>报错</td><td>插入</td><td>insert into User (name,age) values(‘hwang1’,10);</td></tr><tr><td>insert ignore</td><td>忽略</td><td>插入</td><td>insert ignore into User (name,age) values(‘hwang1’,10);</td></tr><tr><td>replace</td><td>替换</td><td>插入</td><td>replace into User (name,age) values(‘hwang1’,10);</td></tr></tbody></table><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> names(</span><br><span class="line">    id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">10</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">HOSTNAME = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">PORT = <span class="string">&quot;3306&quot;</span></span><br><span class="line">DATABASE = <span class="string">&quot;test&quot;</span></span><br><span class="line">USERNAME = <span class="string">&quot;root&quot;</span></span><br><span class="line">PASSWORD = <span class="string">&quot;wanghan...&quot;</span></span><br><span class="line">DB_URI = <span class="string">&#x27;mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(USERNAME, PASSWORD, HOSTNAME, PORT, DATABASE)</span><br><span class="line"></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"></span><br><span class="line">session = sessionmaker(bind=engine)</span><br><span class="line">Session = session()</span><br></pre></td></tr></table></figure><h4 id="数据库已存在数据："><a href="#数据库已存在数据：" class="headerlink" title="数据库已存在数据："></a>数据库已存在数据：</h4><p><font color="red">其中name为unique唯一索引，id 为Primarykey</font></p><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>hwang1</td><td>10</td></tr><tr><td>2</td><td>hwang2</td><td>11</td></tr><tr><td>3</td><td>hwang3</td><td>12</td></tr></tbody></table><h1 id="insert-into："><a href="#insert-into：" class="headerlink" title="insert into："></a>insert into：</h1><p>当上述数据存在时执行以下sql，id会自增，但是插入不成功，会报错；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;insert into User (name,age) values (&#x27;hwang1&#x27;,10),(&#x27;hwang2&#x27;,11),(&#x27;hwang3&#x27;,12)&quot;</span><br><span class="line"><span class="keyword">cursor</span> <span class="operator">=</span> Session.execute(<span class="keyword">sql</span>)</span><br><span class="line">print(cursor.lastrowid)</span><br><span class="line">Session.commit()</span><br></pre></td></tr></table></figure><h1 id="insert-ignore-into"><a href="#insert-ignore-into" class="headerlink" title="insert ignore into"></a>insert ignore into</h1><p>当上述数据存在时，且多加一个ignore时，忽略插入的记录，id会自增，不会报错，返回一个0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;insert ignore into User (name,age) values (&#x27;hwang1&#x27;,10),(&#x27;hwang2&#x27;,11),(&#x27;hwang3&#x27;,12)&quot;</span><br><span class="line"><span class="keyword">cursor</span> <span class="operator">=</span> Session.execute(<span class="keyword">sql</span>)</span><br><span class="line">print(cursor.lastrowid)</span><br><span class="line">Session.commit()</span><br></pre></td></tr></table></figure><h1 id="replace-into"><a href="#replace-into" class="headerlink" title="replace into"></a>replace into</h1><p>当上述数据存在时，则会先删除已存在的数据，再添加新的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> &quot;replace into User (name,age) values (&#x27;hwang1&#x27;,10),(&#x27;hwang2&#x27;,11),(&#x27;hwang3&#x27;,12)&quot;</span><br><span class="line"><span class="keyword">cursor</span> <span class="operator">=</span> Session.execute(<span class="keyword">sql</span>)</span><br><span class="line">print(cursor.lastrowid)</span><br><span class="line">Session.commit()</span><br></pre></td></tr></table></figure><h4 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-插入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlalchemy的基础使用</title>
      <link href="/post/3320181a.html"/>
      <url>/post/3320181a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="1、连接数据库"><a href="#1、连接数据库" class="headerlink" title="1、连接数据库"></a>1、连接数据库</h3><blockquote><p>加入以下代码即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine,Column,Integer,String</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置链接数据库信息</span></span><br><span class="line">db_config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;wanghan...&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 数据库链接地址</span></span><br><span class="line">db_url = <span class="string">&#x27;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;database&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(**db_config)</span><br><span class="line"><span class="comment"># 连接数据库地址：格式</span></span><br><span class="line"><span class="comment"># dialect+driver://username:password@host:port/database</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库引擎</span></span><br><span class="line">engine = create_engine(db_url)</span><br></pre></td></tr></table></figure><blockquote><p>初次调用create_engine()并不会真正连接数据库，只有在真正执行一条命令的时候才会尝试建立连接，目的是节省资源。可在后面加参数，echo&#x3D;True：用来设置SQLAlchemy日志，设置为True时，可以看见所有数据库的操作记录。</p></blockquote><h3 id="2、将模型表映射到数据库"><a href="#2、将模型表映射到数据库" class="headerlink" title="2、将模型表映射到数据库"></a>2、将模型表映射到数据库</h3><blockquote><p>连接数据库之后，加入以下代码即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用declarative_base创建一个Base基类作为ORM类</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Persion</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&quot;User&quot;</span></span><br><span class="line">    <span class="comment"># 设置id：主键，自增长</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># Sting要指定长度 unique唯一索引约束</span></span><br><span class="line">    name = Column(String(<span class="number">50</span>),unique=<span class="literal">True</span>)</span><br><span class="line">    age = Column(Integer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line">Base.metadata.create_all()</span><br></pre></td></tr></table></figure><blockquote><p>1.用declarative_base()创建一个Base基类作为ORM类。<br>2.使用Base作为基类时，要指定__tablename__类属性。<br>3.所有需要映射到表中的属性都应该为Column类型。<br>4.如果使用了Base.metadata.create_all()将模型映射到了数据库表中，后续即使改变了字段，也不会重新映射，需要先执行Base.metadata.drop_all()删除掉ORM模型。</p></blockquote><h3 id="2、增删改查"><a href="#2、增删改查" class="headerlink" title="2、增删改查"></a>2、增删改查</h3><blockquote><p>连接数据库之后，加入以下代码即可</p></blockquote><p>在sqlalchemy中，增删改查都是通过**会话(seesion)**进行的，所以我们必须要先创建会话，核心代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">engine = create_engine(db_url)</span><br><span class="line"><span class="comment"># 创建一个会话</span></span><br><span class="line">session = sessionmaker(engine)()</span><br></pre></td></tr></table></figure><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ol><li>添加一条数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p1 = Persion(name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">18</span>)</span><br><span class="line">session.add(p1)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>按上述步骤讲解：<br>1.先创建一个对象，也就是创建一条数据。<br>2.将对象添加到session会话对象中。<br>3.将session中的对象做commit操作（提交），注意：增删改必须提交才能生效！</p></blockquote><ol start="2"><li>添加多条数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p2 = Persion(name=<span class="string">&#x27;李四&#x27;</span>, age=<span class="number">19</span>)</span><br><span class="line">p3 = Persion(name=<span class="string">&#x27;王五&#x27;</span>, age=<span class="number">20</span>)</span><br><span class="line">session.add_all([p1,p2])</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure></li></ol><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><ol><li>删除已提交的数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.delete(p1)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure></li><li>删除从数据库查出来的数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person = session.query(Persion).first()</span><br><span class="line">session.delete(person)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure></li></ol><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 因为p2已经在会话中了，可以直接更改后再次提交</span><br><span class="line">p2.name = &#x27;食铁兽&#x27;</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><blockquote><p>和删除类似，直接对对象进行操作后，提交即可</p></blockquote><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query_person = session.query(Persion)</span><br></pre></td></tr></table></figure><blockquote><p>先用query指定查找的类，也就是查找的其对应数据表，获得该表中所有的数据，并生成一个查找对象<br>接下来我们就可以通过一些条件，来进行查找</p></blockquote><ul><li><p>all：返回查找对象的所有的数据，组成一个列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_person = query_person.all()</span><br><span class="line">for person in all_person:</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure></li><li><p>first：返回查找对象的第一条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person = query_person.first()</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure></li><li><p>get：找到表中主键与参数相同的数据，返回一条数据或None</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person = query_person.get(2)</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure></li><li><p>filter_by：通过参数中的值，来查找符合参数中的值的数据，返回一个查找对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_person = query_person.filter_by(name=&#x27;食铁兽&#x27;).all()</span><br><span class="line">for person in all_person:</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure></li><li><p>filter：通过参数中的布尔表达式，来查找使布尔表达式为True的数据，返回一个查找对象，注意：参数必须是类.属性名，功能比filter_by更强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person = query_person.filter(Person.name == &#x27;王五&#x27;).first()</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-SQLALchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>super MRO解析顺序</title>
      <link href="/post/ca2302d6.html"/>
      <url>/post/ca2302d6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>当使用继承来调用某个方法时，其方法（属性）可能定义在当前类，也可能来自于基类，所以在方法调用时就需要对当前类和基类进行搜索以确定方法所在的位置。而搜索的顺序就是所谓的「方法解析顺序」（Method Resoulution Order，或MRO）。对于单继承来说，可以直接调用父类方法，但是在多继承中就会涉及到重复继承的问题，这样也需要涉及到MRO。</p><p>先看一个「菱形继承」的例子：<br>（也可以称为钻石继承）</p><p><img src="https://s1.ax1x.com/2022/10/28/x4MLVA.png" alt="x4MLVA.png"></p><p>图例介绍：类D继承类B和类C，类B和类C都继承类A，类C和类A都有方法show，那么D.method()到底是调用A.method()还是C.method()？如果按照[D,B,A,C]的搜索顺序将会调用A.method()，按照[D,B,C,A]的搜索顺序将会调用C.method()。由此可见，MRO是把类继承关系线性化的一个过程，而线性化方式决定了程序运行过程中具体会调用哪一个方法。下面来研究一下Python各个版本的MRO，到底是如何进行的？</p><p>Python至少有三种不同的MRO：</p><ul><li>Python2.2以前的唯一可用的经典类（classic class）</li><li>Python2.2引入的新式类（new-style class）</li><li>Python2.3及其以后的Py2版本都采用了新式类的C3算法，当然还存在经典类。而Python3只支持唯一的新式类的C3算法（统称Python2.3以后）。</li></ul><h1 id="经典类的MRO（Python2-2以前）"><a href="#经典类的MRO（Python2-2以前）" class="headerlink" title="经典类的MRO（Python2.2以前）"></a>经典类的MRO（Python2.2以前）</h1><p>经典类采用了一种很简单的MRO方法，从<strong>左至右的深度遍历</strong>。以上所述的「菱形继承」为例，其查找顺序为[D,B,A,C,A]，如果只保留重复类的第一个则结果为[D,B,A,C]，在经典了类中D.method()调用的是A.method()。但是如果有这样一个问题？C.method()在A.method()基础上增加了新的功能，那么使用D.method()无法调用到C.method()。我们可以用inspect.getmro来获取类的MRO：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;This is a method of A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;This is a method of C&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">x = D()</span><br><span class="line">x.method()</span><br><span class="line"><span class="comment"># A.method()</span></span><br><span class="line"><span class="built_in">print</span> inspect.getmro(D) </span><br><span class="line"><span class="comment"># (&lt;class __main__.D at 0x105f0a6d0&gt;, &lt;class __main__.B at 0x105f0a600&gt;, &lt;class __main__.A at 0x105f0a668&gt;, &lt;class __main__.C at 0x105f0a738&gt;)</span></span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>由此可以看出，这种深度优先遍历对于上述「菱形继承」其结果不尽人意，虽然C.show()是A.show()的具体化版本，但是我们的x.show()没有调用它，而是调用了A.show()。这显然不是我们希望的结果：&#x3D;&#x3D;它不能解决菱形继承&#x3D;&#x3D;。</p><h1 id="新式类（Python2-2中的）"><a href="#新式类（Python2-2中的）" class="headerlink" title="新式类（Python2.2中的）"></a>新式类（Python2.2中的）</h1><h4 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h4><p>为解决经典类MRO所存在的问题，Python2.2针对这一问题提出了一种新的MRO计算方式：在定义类时就计算出该类的MRO并将其作为其属性，因此新式类可以通过__mro__属性获取类的MRO。</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>对于新式类而言，所有类都需要继承object，需要在创建类时继承object，同时可以使用__mro__查看MRO。<br>Python 2.2 的新式类 MRO 计算方式和经典类 MRO 的计算方式非常相似：它仍然采用从左至右的深度优先遍历，但是如果遍历中出现重复的类，只保留最后一个。可以总结为他是<strong>从左向右的广度遍历</strong>。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>重新考虑上面「菱形继承」的例子，由于新式类继承自 object 因此类图稍有改变「新式类菱形继承」：</p><p><img src="https://s1.ax1x.com/2022/10/28/x41D8P.png" alt="x41D8P.png"></p><p>按照从左到右的深度遍历，其顺序为 [D, B, A, object, C, A, object]，重复类只保留最后一个，因此变为 [D, B, C, A, object]。这里我们可以把结果看为从左到右的广度遍历，就一下可以得出结果为：[D, B, C, A, object]。</p><p>代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;A.method()&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>): </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;C.method()&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(D.__mro__)</span><br><span class="line"><span class="comment"># (&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;type &#x27;object&#x27;&gt;)</span></span><br><span class="line">x = D()</span><br><span class="line"><span class="built_in">print</span>(x.method())</span><br><span class="line"><span class="comment"># C.method()</span></span><br></pre></td></tr></table></figure><p>很显然输出的结果为C.method()与我们的预期结果一致，表示 Python2.2中的MRO&#x3D;&#x3D;已经能够解决「菱形继承」问题&#x3D;&#x3D;，但是对于稍微复杂点的正常的继承关系，它是不能够解决的：</p><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p><img src="https://s1.ax1x.com/2022/10/28/x41dUA.png" alt="x41dUA.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>(C, D):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><font color=red>Python2.2中的MRO无法解决的问题：</font><br>根据新式类中的广度遍历原则，[E,C,D,A,B,object]，A是C的唯一基类，但却在C之后先查询D，根据单调性，应该先从唯一基类进行查找，应该为<font color=green>[E,C,A,D,B,object]</font>（注意这个结果在后面的C3算法会得到证实），得到的结果与预期不符，为了解决这一问题诞生了MRO C3算法。<br>注意：在Python 2.2及其以后的版本仍然存在经典类，在定义基类时，如果继承object才是新式类，否则是经典类，经典类还是按照上面的搜索顺序。</p><h1 id="新式类C3-MRO（Python2-3以后）"><a href="#新式类C3-MRO（Python2-3以后）" class="headerlink" title="新式类C3 MRO（Python2.3以后）"></a>新式类C3 MRO（Python2.3以后）</h1><h4 id="诞生-1"><a href="#诞生-1" class="headerlink" title="诞生"></a>诞生</h4><p>为解决 Python 2.2 中 MRO 所存在的问题，Python 2.3以后采用了 C3 方法来确定方法解析顺序。而且新增了一个异常：禁止创建具有二义性的继承关系（最后会介绍到）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">C</span>(A, B): <span class="keyword">pass</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;ipython-input-8-01bae83dc806&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">C</span>(A, B): <span class="keyword">pass</span></span><br><span class="line">TypeError: Error when calling the metaclass bases</span><br><span class="line">    Cannot create a consistent method resolution</span><br><span class="line">order (MRO) <span class="keyword">for</span> bases X, Y</span><br></pre></td></tr></table></figure><h4 id="C3算法："><a href="#C3算法：" class="headerlink" title="C3算法："></a>C3算法：</h4><p>假设类C继承了n个类，那它的线性化MRO就是：L(C) &#x3D;  [C1, C2,…,CN]。其中我们把&#x3D;&#x3D;C1成为L(C)的头&#x3D;&#x3D;，其余元素 &#x3D;&#x3D;[C2,…,CN] 称为尾&#x3D;&#x3D;。</p><p>这里我们将上述假设套入另一个举例：如果一个类 C 继承自基类 B1、B2、……、BN，那么我们可以根据以下两步计算出 L[C]：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="built_in">object</span>] = [<span class="built_in">object</span>]</span><br><span class="line">L[C(B1…BN)] = [C] + merge(L[B1]…L[BN], [B1]…[BN])</span><br></pre></td></tr></table></figure><p>这里的关键在于 merge，其输入是一组列表，按照如下方式输出一个列表：</p><p><strong><font color=red>重点: </font></strong></p><ol><li>检查第一个列表的头元素（如 L[B1] 的头），记作 H。</li><li>若 H 未出现在其它列表的尾部，则将其输出，并将其从所有列表中删除，然后回到步骤1；否则，取出下一个列表的头部记作 H，继续该步骤。</li><li>重复上述步骤，直至列表为空或者不能再找出可以输出的元素。如果是前一种情况，则算法结束；如果是后一种情况，说明无法构建继承关系，Python 会抛出异常。</li></ol><p>该算法很好的考虑了基类出现的顺序。这里我们用C3算法先来<font color=red>解决</font>刚才<font color=red>Python2.2中的MRO无法解决的问题</font>：</p><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p><img src="https://s1.ax1x.com/2022/10/28/x41dUA.png" alt="x41dUA.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>(C, D):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>C3算法对于上图正常继承的搜索顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">L[A] = [A,<span class="built_in">object</span>]</span><br><span class="line">L[B] = [B,<span class="built_in">object</span>]</span><br><span class="line"></span><br><span class="line">l[C] = [C] + merge(L[A],[A])</span><br><span class="line">L[C] = [C] + merge([A,<span class="built_in">object</span>],[A])</span><br><span class="line">L[C] = [C,A] + merge([<span class="built_in">object</span>])</span><br><span class="line">L[C] = [C,A,<span class="built_in">object</span>]</span><br><span class="line"></span><br><span class="line">L[D] = [D] + merge([L[B],[B])</span><br><span class="line">L[D] = [D] + merge([B,<span class="built_in">object</span>],[B])</span><br><span class="line">L[D] = [D,B,<span class="built_in">object</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">L[E] = [E] + merge([L[C],L[D],[C],[D])</span><br><span class="line">L[E] = [E] + merge([C,A,<span class="built_in">object</span>],[D,B,<span class="built_in">object</span>],[C],[D])</span><br><span class="line">L[E] = [E,C] + merge([A,<span class="built_in">object</span>],[D,B,<span class="built_in">object</span>],[D])</span><br><span class="line">L[E] = [E,C,A] + merge([<span class="built_in">object</span>],[D,B,<span class="built_in">object</span>],[D])</span><br><span class="line">L[E] = [E,C,A,D] + merge([<span class="built_in">object</span>],[B,<span class="built_in">object</span>])</span><br><span class="line">L[E] = [E,C,A,D,B] + merge([<span class="built_in">object</span>],[<span class="built_in">object</span>])</span><br><span class="line">L[E] = [E,C,A,D,B,<span class="built_in">object</span>])</span><br></pre></td></tr></table></figure><p>通过C3算法得到的结果为<font color=green>[E,C,A,D,B,object]</font>，与我们预期的结果一致。也没有违反单调性。</p><h4 id="解决2"><a href="#解决2" class="headerlink" title="解决2"></a>解决2</h4><p>这个还是python2.2 MRO解决的菱形继承，我们在用C3 MRO来验证一遍<br><img src="https://s1.ax1x.com/2022/10/28/x41D8P.png" alt="x41D8P.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L[A] = [A,<span class="built_in">object</span>]</span><br><span class="line">L[B] = [B] + merge([LA],[A])</span><br><span class="line">L[B] = [B] + merge([A,<span class="built_in">object</span>],[A])</span><br><span class="line">L[B] = [B,A] + merge([<span class="built_in">object</span>])</span><br><span class="line">L[B] = [B,A,<span class="built_in">object</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同理得出：</span></span><br><span class="line">L[C] = [C,A,<span class="built_in">object</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L[D] = [D] + merge([LB],[LC],[B],[C])</span><br><span class="line">L[D] = [D] + merge([B,A,<span class="built_in">object</span>],[C,A,<span class="built_in">object</span>],[B],[C])</span><br><span class="line">L[D] = [D,B] + merge([A,<span class="built_in">object</span>],[C,A,<span class="built_in">object</span>],[C])</span><br><span class="line">L[D] = [D,B,C] + merge([A,<span class="built_in">object</span>],[A,<span class="built_in">object</span>])</span><br><span class="line">L[D] = [D,B,C,A] + merge([<span class="built_in">object</span>],[<span class="built_in">object</span>])</span><br><span class="line">L[D] = [D,B,C,A,<span class="built_in">object</span>]</span><br></pre></td></tr></table></figure><p>从上述结果可以看到，C3计算后的MRO结果[D,B,C,A,object]与python2.2中的MRO计算结果一致。说明C3将上述MRO主要的无法结果的问题都解决了。</p><h1 id="MRO无法解决的二义性继承关系"><a href="#MRO无法解决的二义性继承关系" class="headerlink" title="MRO无法解决的二义性继承关系"></a>MRO无法解决的二义性继承关系</h1><p>举例：</p><p><img src="https://s1.ax1x.com/2022/10/28/x4M8gS.png" alt="x4M8gS.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>(<span class="title class_ inherited__">object</span>): </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Y</span>(<span class="title class_ inherited__">object</span>): </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(X, Y): </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(Y, X): </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A, B): </span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="Python2-2-MRO进行分析"><a href="#Python2-2-MRO进行分析" class="headerlink" title="Python2.2 MRO进行分析"></a>Python2.2 MRO进行分析</h3><p>首先进行从左到右的深度遍历，结果为 [C, A, X, object, Y, object, B, Y, object, X, object]；然后，只保留重复元素的最后一个，结果为 [C, A, B, Y, X, object]。Python 2.2 在实现该方法的时候进行了调整，使其更尊重基类中类出现的顺序，其实际结果为 [C, A, B, X, Y, object]。</p><p>这样的结果是否合理呢？首先我们看下各个类中的方法解析顺序：对于 A 来说，其搜索顺序为[A, X, Y, object]；对于 B，其搜索顺序为 [B, Y, X, object]；对于 C，其搜索顺序为[C, A, B, X, Y, object]。我们会发现，B 和 C 中 X、Y 的搜索顺序是相反的！也就是说，当按照C的搜索顺序时，从B往后就变为了[B,X,Y,object]，与B本身[B, Y, X, object]是相反的。这也就意味着当C继承到B时，造成了B本身的行为发生了改变，&#x3D;&#x3D;这很容易导致不易察觉的错误&#x3D;&#x3D;。此外，即使把 C 搜索顺序中 X 和 Y 互换仍然不能解决问题，这时候它又会和 A 中的搜索顺序相矛盾。</p><p>事实上，不但上述特殊情况会出现问题，在其它情况下也可能出问题。其原因在于，根据单调性，应该先从唯一基类进行查找。很明显上面的继承中无论修改X还是Y的顺序，都会违反「单调性原则」。</p><p>&#x3D;&#x3D;也就是说，子类不能改变基类的方法搜索顺序。在 Python 2.2 的 MRO 算法中并不能保证这种单调性，它不会阻止程序员写出上述具有二义性的继承关系，因此很可能成为错误的根源。&#x3D;&#x3D;</p><p>除了单调性之外，经典类和Python 2.2的新式类的 MRO 也可能违反继承的「 局部优先级 」，具体例子可以参见官方文档。采用一种更好的 MRO 方式势在必行。</p><h3 id="C3-MRO进行分析"><a href="#C3-MRO进行分析" class="headerlink" title="C3 MRO进行分析"></a>C3 MRO进行分析</h3><p>为方便分析，我们上面的图拿下来：</p><p><img src="https://s1.ax1x.com/2022/10/28/x4M8gS.png" alt="x4M8gS.png"></p><pre><code>L[object] = [object]L[X] = [X, object]L[Y] = [Y, object]</code></pre><p>A 的线性化计算如下：</p><pre><code>L[A] = [A] + merge(L[X], L[Y], [X], [Y])     = [A] + merge([X, object], [Y, object], [X], [Y])     = [A, X] + merge([object], [Y, object], [Y])     = [A, X, Y] + merge([object], [object])     = [A, X, Y, object]</code></pre><p>注意第3步！！！merge([object], [Y, object], [Y]) 中首先输出的是 Y 而不是 object。这是因为 object 虽然是第一个列表的头，但是它出现在了第二个列表的尾部。所以我们会跳过第一个列表，去检查第二个列表的头部，也就是 Y。Y 没有出现在其它列表的尾部，所以将其输出。</p><p>同理，B 的线性化结果为：</p><pre><code>L[B] = [B, Y, X, object]</code></pre><p>最后，我们看看 C 的线性化结果：</p><pre><code>L[C] = [C] + merge(L[A], L[B], [A], [B])     = [C] + merge([A, X, Y, object], [B, Y, X, object], [A], [B])     = [C, A] + merge([X, Y, object], [B, Y, X, object], [B])     = [C, A, B] + merge([X, Y, object], [Y, X, object])</code></pre><p>到了最后一步我们没有办法继续计算下去 了：X 虽然是第一个列表的头，但是它出现在了第二个列表的尾部；Y 虽然是第二个列表的头，但是它出现在了第一个列表的尾部。因此，我们无法构建一个没有二义性的继承关系，&#x3D;&#x3D;只能手工去解决&#x3D;&#x3D;（比如改变 B 基类中 X、Y 的顺序）。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-super </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytest基础</title>
      <link href="/post/80762ff4.html"/>
      <url>/post/80762ff4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>pytest是unittest的升级版<br>可以结合allure生成定制版的测试报告<br>支持很多强大的第三方插件：aliure-pytest、pytest-xdist、pytest-ordering…</p><h1 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h1><p><font size=4 color=red>1.  模块名必须以test_开头或者_test结尾</font><br><font size=4 color=red>2.  测试类必须以Test开头，并且不能有init方法</font><br><font size=4 color=red>3.  测试方法必须以test开头</font></p><p><img src="https://s1.ax1x.com/2022/10/26/xW3P6e.png" alt="xW3P6e.png"></p><h1 id="运行pytest"><a href="#运行pytest" class="headerlink" title="运行pytest"></a>运行pytest</h1><p>一般在命令行直接：pytest，运行。</p><p>Pycharm右键运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="comment"># 默认运行的是当前目录及子目录的所有文件夹的测试用例</span></span><br><span class="line">pytest.main()</span><br></pre></td></tr></table></figure><h2 id="带参数运行"><a href="#带参数运行" class="headerlink" title="带参数运行"></a>带参数运行</h2><p>-s： 显示程序中的 print&#x2F;logging 输出<br>-v: 丰富信息模式, 输出更详细的用例执行信息<br>-k： 运行包含某个字符串的测试用例。如：pytest -k add XX.py 表示运行 XX.py 中包含 add 的测试用例。<br>-q: 简单输出模式, 不输出环境信息<br>-x: 出现一条测试用例失败就退出测试。在调试阶段非常有用，当测试用例失败时，应该先调试通过，而不是继续执行测试用例。</p><p>不同参数运行方式变化：</p><table><thead><tr><th>main()</th><th>命令行</th></tr></thead><tbody><tr><td>pytest.main([“-s”])</td><td>pytest -s</td></tr><tr><td>pytest.main([“-s”, “-x”])</td><td>pytest -s -x</td></tr></tbody></table><h2 id="运行用例方法"><a href="#运行用例方法" class="headerlink" title="运行用例方法"></a>运行用例方法</h2><p>main方法和命令行运行都是基于当前所在目录填写：目录参数的。</p><table><thead><tr><th></th><th>main（）方法运行</th><th>命令行运行</th></tr></thead><tbody><tr><td><font color=blue>执行某个目录下的用例</font></td><td>pytest.main([“Learn&#x2F;learn_selenium&#x2F;selenium_pytest_encapsulation&#x2F;test_case”])</td><td>pytest Learn&#x2F;learn_selenium&#x2F;selenium_pytest_encapsulation&#x2F;test_case&#x2F;</td></tr><tr><td><font color=blue>执行具体到哪个文件的用例</font></td><td>pytest.main([“Learn&#x2F;learn_selenium&#x2F;selenium_pytest_encapsulation&#x2F;test_case&#x2F;test_blogger_page.py”])</td><td>pytest Learn&#x2F;learn_selenium&#x2F;selenium_pytest_encapsulation&#x2F;test_case&#x2F;test_login_page.py</td></tr><tr><td><font color=blue>执行具体到哪个文件的哪个用例（::后面是测试用例类名）</font></td><td>pytest.main([“Learn&#x2F;learn_selenium&#x2F;selenium_pytest_encapsulation&#x2F;test_case&#x2F;test_login_page.py::Test_Auto_Article”])</td><td>pytest Learn&#x2F;learn_selenium&#x2F;selenium_pytest_encapsulation&#x2F;test_case&#x2F;test_login_page.py::Test_Auto_Article</td></tr></tbody></table><p>main（）方法运行如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="comment"># 执行某个目录下的用例</span></span><br><span class="line">pytest.main([<span class="string">&quot;Learn/learn_selenium/selenium_pytest_encapsulation/test_case&quot;</span>])</span><br><span class="line"><span class="comment"># 执行具体到哪个文件的用例</span></span><br><span class="line">pytest.main([<span class="string">&quot;Learn/learn_selenium/selenium_pytest_encapsulation/test_case/test_blogger_page.py&quot;</span>])</span><br><span class="line"><span class="comment"># 执行具体到哪个文件的哪个用例（::后面是测试用例类名）</span></span><br><span class="line">pytest.main([<span class="string">&quot;Learn/learn_selenium/selenium_pytest_encapsulation/test_case/test_login_page.py::Test_Auto_Article&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令行运行如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行某个目录下的用例</span></span><br><span class="line">pytest Learn/learn_selenium/selenium_pytest_encapsulation/test_case/</span><br><span class="line"><span class="comment"># 执行具体到哪个文件的用例</span></span><br><span class="line">pytest Learn/learn_selenium/selenium_pytest_encapsulation/test_case/test_login_page.py</span><br><span class="line"><span class="comment"># 执行具体到哪个文件的哪个用例（::后面是测试用例类名）</span></span><br><span class="line">pytest Learn/learn_selenium/selenium_pytest_encapsulation/test_case/test_login_page.py::Test_Auto_Article</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pytest单元测试框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytest POM模型</title>
      <link href="/post/e8e5215.html"/>
      <url>/post/e8e5215.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>POM：Page Object Model（页面对象模型）<br>POM是为了解决前端UI变化频繁，从而造成维护自动化测试脚本的成本越来越大。</p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol><li><p>每一个页面对应一个页面类，页面元素写到这个页面类中。</p></li><li><p>页面类主要包括页面元素的定位，和这些元素相关的业务操作代码封装的方法。</p></li><li><p>代码复用，减少代码量。</p></li><li><p>支持多个人同时编写，每个人一个页面，不相互影响他人。</p></li></ol><h1 id="POM目录结构"><a href="#POM目录结构" class="headerlink" title="POM目录结构"></a>POM目录结构</h1><p>1、base 目录（selenium公共方法的封装。单击、输入等）</p><p>2、data 目录（存放测试数据yaml、xlsx文件）</p><p>3、config 目录（存放读取yaml文件的py文件）</p><p>4、page_object 目录 （脚本目录）</p><p>5、test_case 目录 （测试用例）</p><p>6、report 目录（测试报告生成目录）</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>1、base目录</p><p>一般是存放测试代码中都需要用到的公共方法</p><p><img src="https://s1.ax1x.com/2022/10/26/xWHUw8.png" alt="xWHUw8.png"></p><p>2、data目录与config目录</p><p>data目录存放测试的数据或者配置文件</p><p>config目录存放的是读取配置文件的py</p><p><img src="https://s1.ax1x.com/2022/10/26/xWHrSs.png" alt="xWHrSs.png"></p><p>3、page_object目录（也是本项目中的actionobject目录）</p><p>page目录内实现对各页面的封装，每个待测试的页面可以实现一个page，例如登录，可命名为login_page.py，达到见名知意的效果，也方便个人在其他文件中对该文件的导入复用以及后期维护，每个page文件中，实现对该页面中待操作的元素以及各元素要实现的动作的封装。</p><p><img src="https://s1.ax1x.com/2022/10/26/xWHbm6.png" alt="xWHbm6.png"></p><p>具体代码</p><p>login_page.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_pytest_encapsulation.base.base_page <span class="keyword">import</span> BasePage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginPage</span>(<span class="title class_ inherited__">BasePage</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    动作层，通过调用基础层来实现具体的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    username_loc = (By.ID, <span class="string">&quot;id_username&quot;</span>)</span><br><span class="line">    password_loc = (By.ID, <span class="string">&quot;id_password&quot;</span>)</span><br><span class="line">    login_loc = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>)</span><br><span class="line">    <span class="comment"># 断言的数据定位</span></span><br><span class="line">    assertions_loc = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;user-tools&#x27;]/a[3]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆的动作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login_ecshop</span>(<span class="params">self,username,password</span>):</span><br><span class="line">        self.send_keys(self.username_loc, username)</span><br><span class="line">        self.send_keys(self.password_loc, password)</span><br><span class="line">        self.click(self.login_loc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取登陆之后页面有无注销两字，配合断言使用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assertions_get_login_value</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.locator_element(self.assertions_loc).text</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>blogger_page.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># as loginpage可以避免以后修改LoginPage类名的修改造成大量继承此类的导入名都需要修改</span></span><br><span class="line"><span class="keyword">from</span> learn_selenium.selenium_pytest_encapsulation.actionobject.login_page <span class="keyword">import</span> LoginPage <span class="keyword">as</span> loginpage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BloggerPage</span>(<span class="title class_ inherited__">loginpage</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    动作层，通过调用基础层来实现具体的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加博主关键字</span></span><br><span class="line">    blogger_loc = (By.LINK_TEXT, <span class="string">&quot;Blogger&quot;</span>)</span><br><span class="line">    addlink_blogger_loc = (By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>)</span><br><span class="line">    name_loc = (By.ID, <span class="string">&quot;id_name&quot;</span>)</span><br><span class="line">    sel_loc = (By.ID, <span class="string">&quot;id_level&quot;</span>)</span><br><span class="line">    blogger_pic_loc = (By.ID, <span class="string">&quot;id_picture&quot;</span>)</span><br><span class="line">    blogger_submit_pic_loc = (By.CLASS_NAME, <span class="string">&quot;default&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加博主数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_blogger</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        <span class="comment"># 登陆</span></span><br><span class="line">        self.login_ecshop(username, password)</span><br><span class="line">        self.click(self.blogger_loc)</span><br><span class="line">        self.click(self.addlink_blogger_loc)</span><br><span class="line">        self.send_keys(self.name_loc, <span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        self.choice_select_element(self.sel_loc, <span class="string">&quot;L&quot;</span>)</span><br><span class="line">        self.send_keys(self.blogger_pic_loc, <span class="string">&quot;/Users/wanghan/Desktop/图片/表情包/109951167799422820.jpg&quot;</span>)</span><br><span class="line">        self.click(self.blogger_submit_pic_loc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>article_page.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># as loginpage可以避免以后修改LoginPage类名的修改造成大量继承此类的导入名都需要修改</span></span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_pytest_encapsulation.actionobject.login_page <span class="keyword">import</span> LoginPage <span class="keyword">as</span> loginpage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArticlePage</span>(<span class="title class_ inherited__">loginpage</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    动作层，通过调用基础层来实现具体的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章关键字</span></span><br><span class="line">    article_info_loc = (By.LINK_TEXT, <span class="string">&quot;Article&quot;</span>)</span><br><span class="line">    addlink_article_loc = (By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>)</span><br><span class="line">    title_loc = (By.ID, <span class="string">&quot;id_title&quot;</span>)</span><br><span class="line">    content_loc = (By.ID, <span class="string">&quot;id_content&quot;</span>)</span><br><span class="line">    submit_add = (By.CLASS_NAME, <span class="string">&quot;default&quot;</span>)</span><br><span class="line">    <span class="comment"># 删除文章数据</span></span><br><span class="line">    article_list_tr = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr&quot;</span>)</span><br><span class="line">    article_list_tr_a = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr[1]/th/a&quot;</span>)</span><br><span class="line">    delete_article_link = (By.CLASS_NAME, <span class="string">&quot;deletelink&quot;</span>)</span><br><span class="line">    delete_article_link_submit = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;content&#x27;]/form/div/input[2]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_article</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        <span class="comment"># 登陆</span></span><br><span class="line">        self.login_ecshop(username, password)</span><br><span class="line">        self.click(self.article_info_loc)</span><br><span class="line">        self.click(self.addlink_article_loc)</span><br><span class="line">        self.send_keys(self.title_loc, <span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        self.send_keys(self.content_loc, <span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        self.click(self.submit_add)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除文章</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_article</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        self.login_ecshop(username, password)</span><br><span class="line">        self.click(self.article_info_loc)</span><br><span class="line">        tr_list = self.locator_elements(self.article_list_tr)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tr_list) &gt; <span class="number">0</span>:</span><br><span class="line">            self.click(self.article_list_tr_a)</span><br><span class="line">            self.click(self.delete_article_link)</span><br><span class="line">            self.click(self.delete_article_link_submit)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;暂时没有可删除的数据&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、test_case目录</p><p>cases 目录用来存放实际的测试用例，每个文件以test开头命名，对page中的文件进行测试步骤的实现。可以放多个page中的测试步骤。</p><p><img src="https://s1.ax1x.com/2022/10/26/xWHzpd.png" alt="xWHzpd.png"></p><p>具体代码：</p><p>test_login_page.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="built_in">str</span>(Path(__file__).parent.parent.parent.parent.parent))</span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_pytest_encapsulation.actionobject.login_page <span class="keyword">import</span> LoginPage</span><br><span class="line"><span class="keyword">from</span> learn_selenium.selenium_pytest_encapsulation.config.read_excel <span class="keyword">import</span> read_config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_Auto_Login</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试用例层，执行对应的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆后台管理</span></span><br><span class="line">    <span class="comment"># pytest是通过parametrize传递参数的，如何要传递多个参数并拆分，可以在第一个字符串参数写入多个，即可自动拆分</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;username,password&quot;</span>, read_config(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_admin</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        lp = LoginPage()</span><br><span class="line">        lp.login_ecshop(username, password)</span><br><span class="line">        <span class="comment"># 断言</span></span><br><span class="line">        <span class="keyword">assert</span> lp.assertions_get_login_value() == <span class="string">&quot;注销&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>test_blogger_page.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="built_in">str</span>(Path(__file__).parent.parent.parent.parent.parent))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_pytest_encapsulation.actionobject.blogger_page <span class="keyword">import</span> BloggerPage</span><br><span class="line"><span class="keyword">from</span> learn_selenium.selenium_pytest_encapsulation.config.read_excel <span class="keyword">import</span> read_config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_Auto_Blogger</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试用例层，执行对应的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加博主</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;username,password&quot;</span>, read_config(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_blogger</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        lp = BloggerPage()</span><br><span class="line">        lp.add_blogger(username, password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-vs&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>test_article_page.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="built_in">str</span>(Path(__file__).parent.parent.parent.parent.parent))</span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_pytest_encapsulation.actionobject.article_page <span class="keyword">import</span> ArticlePage</span><br><span class="line"><span class="keyword">from</span> learn_selenium.selenium_pytest_encapsulation.config.read_excel <span class="keyword">import</span> read_config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_Auto_Article</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试用例层，执行对应的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章数据</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;username,password&quot;</span>, read_config(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_article</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        lp = ArticlePage()</span><br><span class="line">        lp.add_article(username, password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除文章</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;username,password&quot;</span>, read_config(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_delete_article</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        lp = ArticlePage()</span><br><span class="line">        lp.delete_article(username, password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-vs&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、最后创建一个run.py运行文件，用来运行测试用例，生成测试报告。</p><p><img src="https://s1.ax1x.com/2022/10/26/xWbp6I.png" alt="xWbp6I.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pytest单元测试框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytest allure生成测试报告</title>
      <link href="/post/37cb89c9.html"/>
      <url>/post/37cb89c9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="自动生成测试报告"><a href="#自动生成测试报告" class="headerlink" title="自动生成测试报告"></a>自动生成测试报告</h1><h2 id="allure"><a href="#allure" class="headerlink" title="allure"></a>allure</h2><p><strong>是一款可以生成测试报告的工具，配合pytest使用</strong></p><h4 id="1-需要配置Java环境"><a href="#1-需要配置Java环境" class="headerlink" title="1. 需要配置Java环境"></a>1. 需要配置Java环境</h4><p>下载地址：<a href="https://www.oracle.com/java/technologies/downloads/#java8-mac">https://www.oracle.com/java/technologies/downloads/#java8-mac</a></p><p><strong>傻瓜式安装即可</strong></p><p>测试安装是否成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java --version</span><br></pre></td></tr></table></figure><h4 id="2-需要本地下载allure"><a href="#2-需要本地下载allure" class="headerlink" title="2. 需要本地下载allure"></a>2. 需要本地下载allure</h4><p>下载地址：<a href="https://github.com/allure-framework/allure2">https://github.com/allure-framework/allure2</a></p><p><strong>Mac安装：</strong></p><pre><code>终端：    brew install allure</code></pre><p><strong>Windows安装：</strong></p><pre><code>1.选择 zip 包下载并解压到一个目录2.配置 bin 文件夹到系统环境变量3.测试是否安装成功，在终端执行</code></pre><p>测试安装是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure --version</span><br></pre></td></tr></table></figure><h4 id="3-pip安装allure包"><a href="#3-pip安装allure包" class="headerlink" title="3.pip安装allure包"></a>3.pip安装allure包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install allure-pytest </span><br></pre></td></tr></table></figure><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><h4 id="main（）方法运行："><a href="#main（）方法运行：" class="headerlink" title="main（）方法运行："></a>main（）方法运行：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest.main([<span class="string">&#x27;-vs&#x27;</span>,<span class="string">&#x27;--alluredir=测试报告的目录&#x27;</span>])</span><br></pre></td></tr></table></figure><p>命令示例：pytest.main([‘-vs’,’–alluredir&#x3D;reports’])</p><ul><li>--alluredir：allture报告内容生成的路径，生成结果默认与执行测试用例的文件同级</li></ul><h4 id="allure-命令解析并查看报告"><a href="#allure-命令解析并查看报告" class="headerlink" title="allure 命令解析并查看报告"></a>allure 命令解析并查看报告</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure serve 测试报告目录</span><br></pre></td></tr></table></figure><p>命令示例：allure serve reports</p><p><img src="https://s1.ax1x.com/2022/10/26/xW3Yt0.png" alt="xW3Yt0.png"></p><h4 id="命令行方法运行："><a href="#命令行方法运行：" class="headerlink" title="命令行方法运行："></a>命令行方法运行：</h4><p>前提是先进入测试项目的目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest 测试用例所在目录 --alluredir=测试报告目录</span><br></pre></td></tr></table></figure><p>命令示例：pytest .&#x2F; –alluredir&#x3D;reports</p><p><img src="https://s1.ax1x.com/2022/10/26/xW8C40.png" alt="xW8C40.png"></p><h4 id="allure-命令解析并查看报告-1"><a href="#allure-命令解析并查看报告-1" class="headerlink" title="allure 命令解析并查看报告"></a>allure 命令解析并查看报告</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure serve 测试报告目录</span><br></pre></td></tr></table></figure><p>命令示例：allure serve reports</p><p><img src="https://s1.ax1x.com/2022/10/26/xW8iCV.png" alt="xW8iCV.png"></p><p>报告显示：<br><img src="https://s1.ax1x.com/2022/10/26/xW8AvF.png" alt="xW8AvF.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pytest单元测试框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium pytest自动化测试</title>
      <link href="/post/76636030.html"/>
      <url>/post/76636030.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>前言：本文是借助Django的后台管理来辅助自动化测试所需的项目条件，在登陆后对文章数据和博主数据进行增删查操作。</p><ul><li><strong>&#x3D;&#x3D;整篇代码是根据《&#x3D;&#x3D;</strong>&#x3D;&#x3D;selenium unittest自动化测试原型（封装）&#x3D;&#x3D;<strong>&#x3D;&#x3D;》篇代码改编的。&#x3D;&#x3D;</strong></li></ul><p>&amp;#x9;学习本文内容之前，可以先回顾下前面写的selenium篇和pytest篇</p><h2 id="一、测试前准备"><a href="#一、测试前准备" class="headerlink" title="一、测试前准备"></a>一、测试前准备</h2><p>Django项目简介具体代码在：<a href="https://github.com/Wanghan123-github/Django_test">https://github.com/Wanghan123-github/Django_test</a></p><h2 id="二、线性脚本"><a href="#二、线性脚本" class="headerlink" title="二、线性脚本"></a>二、线性脚本</h2><p><strong>这里先插入一段比较通俗易懂的selenium 和 unittest 结合实现的自动化测试原型代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># Google驱动</span></span><br><span class="line">driver_path = <span class="string">r&quot;/Users/wanghan/Downloads/chromedriver&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;http://127.0.0.1:8000/admin/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Auto_Article</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆后台管理</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_admin</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文章数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_article</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 进入文章数据详情页</span></span><br><span class="line">        driver.find_element(By.LINK_TEXT, <span class="string">&quot;Articles&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_article</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 进入文章数据详情页</span></span><br><span class="line">        driver.find_element(By.LINK_TEXT, <span class="string">&quot;Article&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 点击添加文章数据</span></span><br><span class="line">        driver.find_element(By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>).click()</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_title&quot;</span>).send_keys(<span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_content&quot;</span>).send_keys(<span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        <span class="comment"># 确认添加</span></span><br><span class="line">        driver.find_element(By.CLASS_NAME, <span class="string">&quot;default&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加博主数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_blogger</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 进入博主数据详情页</span></span><br><span class="line">        driver.find_element(By.LINK_TEXT, <span class="string">&quot;Blogger&quot;</span>).click()</span><br><span class="line">        driver.find_element(By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>).click()</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_name&quot;</span>).send_keys(<span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        <span class="comment"># 选择博主的等级（多选框操作）</span></span><br><span class="line">        <span class="comment"># 其中多选有三种：1. 通过文本选中 2. 通过value属性选中 3. 通过下标选中</span></span><br><span class="line">        sel = Select(driver.find_element(By.ID, <span class="string">&quot;id_level&quot;</span>))</span><br><span class="line">        sel.select_by_value(<span class="string">&quot;L&quot;</span>)</span><br><span class="line">        <span class="comment"># 上传图片</span></span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_picture&quot;</span>).send_keys(<span class="string">&quot;/Users/wanghan/Desktop/图片/表情包/109951167799422820.jpg&quot;</span>)</span><br><span class="line">        driver.find_element(By.CLASS_NAME, <span class="string">&quot;default&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除文章</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_delete_article</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 进入文章数据详情页</span></span><br><span class="line">        driver.find_element(By.LINK_TEXT, <span class="string">&quot;Article&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 对展示的多条数据进行单一删除的操作</span></span><br><span class="line"><span class="comment"># 获取数据列表</span></span><br><span class="line">        tr_list = driver.find_elements(By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(tr_list)</span><br><span class="line">        <span class="comment"># 如果数据列表的长度大于0说明有数据，我们默认删除最上面的那个</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tr_list) &gt; <span class="number">0</span>:</span><br><span class="line">            driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr[1]/th/a&quot;</span>).click()</span><br><span class="line">            <span class="comment"># 点击删除按钮</span></span><br><span class="line">            driver.find_element(By.CLASS_NAME, <span class="string">&quot;deletelink&quot;</span>).click()</span><br><span class="line">            <span class="comment"># 确认删除</span></span><br><span class="line">            driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;content&#x27;]/form/div/input[2]&quot;</span>).click()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;暂时没有可删除的数据&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面都是一些简单的输入文本和一些点击事件的操作，以及额外增加了一些多选框和多条数据展示选择其一进行操作。但是很容易看出这样的代码里重复的内容很多，如果在更为复杂的需求上，它的代码量也会大大的增加。</p><h2 id="三、POM设计模式（封装）"><a href="#三、POM设计模式（封装）" class="headerlink" title="三、POM设计模式（封装）"></a>三、POM设计模式（封装）</h2><p>&amp;#x9;线性脚本有很多重复使用的代码，封装就是为了重复使用代码，为了方便维护</p><p>&amp;#x9;其中设计模式主要分为三种：</p><ol><li>&amp;#x20;  基础层：主要存放selenium原生的方法</li><li>&amp;#x20;  动作层：主要用于存放定位页面元素和页面动作。多人开发时可以每个页面一个py文件，每个文件一个测试类。<br>（多人详见：《pytest单元测试框架–Pytest POM模型》篇）</li><li>&amp;#x20;  测试用例层：主要用于执行动作层和存放测试数据&amp;#x20;</li><li>&amp;#x20;  配置层：主要用于存放测试数据文件。yaml等</li><li>&amp;#x20;  读取配置层：主要用于存放读取yaml文件的py文件 &amp;#x20;</li><li>&amp;#x20;  测试报告层：主要用于存放测试报告</li></ol><p><img src="https://s1.ax1x.com/2022/10/26/xWwgZ8.png" alt="xWwgZ8.png"></p><h3 id="基础层代码："><a href="#基础层代码：" class="headerlink" title="基础层代码："></a>基础层代码：</h3><p>基础层存放的都是selenium原生的操作方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePage</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    基础层，用来放selenium原生的方法</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        s = Service(executable_path=<span class="string">r&quot;/Users/wanghan/Downloads/chromedriver&quot;</span>)</span><br><span class="line">        self.driver = webdriver.Chrome(service=s)</span><br><span class="line">        self.driver.get(<span class="string">&quot;http://127.0.0.1:8000/admin/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位元素</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">locator_element</span>(<span class="params">self, loc</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        loc：元祖类型</span></span><br><span class="line"><span class="string">        *: 解包</span></span><br><span class="line"><span class="string">        由于find_element（）只接收两个参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element(*loc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位输入值操作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_keys</span>(<span class="params">self, loc, value</span>):</span><br><span class="line">        self.locator_element(loc).send_keys(value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位点击操作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click</span>(<span class="params">self, loc</span>):</span><br><span class="line">        self.locator_element(loc).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位多选元素</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">choice_select_element</span>(<span class="params">self, loc, value</span>):</span><br><span class="line">        sel = Select(self.locator_element(loc))</span><br><span class="line">        sel.select_by_value(value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位元素列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">locator_elements</span>(<span class="params">self, loc</span>):</span><br><span class="line">        <span class="keyword">return</span> self.driver.find_elements(*loc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动作层代码："><a href="#动作层代码：" class="headerlink" title="动作层代码："></a>动作层代码：</h3><p>动作层是通过调用基础层selenium原生的方法来实现页面操作时的动作，存放的都是页面的元素和页面的动作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_pytest_encapsulation.base.base_page <span class="keyword">import</span> BasePage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActionPage</span>(<span class="title class_ inherited__">BasePage</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line">        <span class="built_in">super</span>(ActionPage, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    动作层，通过调用基础层来实现具体的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    username_loc = (By.ID, <span class="string">&quot;id_username&quot;</span>)</span><br><span class="line">    password_loc = (By.ID, <span class="string">&quot;id_password&quot;</span>)</span><br><span class="line">    login_loc = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>)</span><br><span class="line">    <span class="comment"># 断言</span></span><br><span class="line">    assertions_loc = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;user-tools&#x27;]/a[3]&quot;</span>)</span><br><span class="line">    <span class="comment"># 添加文章关键字</span></span><br><span class="line">    article_info_loc = (By.LINK_TEXT, <span class="string">&quot;Article&quot;</span>)</span><br><span class="line">    addlink_article_loc = (By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>)</span><br><span class="line">    title_loc = (By.ID, <span class="string">&quot;id_title&quot;</span>)</span><br><span class="line">    content_loc = (By.ID, <span class="string">&quot;id_content&quot;</span>)</span><br><span class="line">    submit_add = (By.CLASS_NAME, <span class="string">&quot;default&quot;</span>)</span><br><span class="line">    <span class="comment"># 添加博主关键字</span></span><br><span class="line">    blogger_loc = (By.LINK_TEXT, <span class="string">&quot;Blogger&quot;</span>)</span><br><span class="line">    addlink_blogger_loc = (By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>)</span><br><span class="line">    name_loc = (By.ID, <span class="string">&quot;id_name&quot;</span>)</span><br><span class="line">    sel_loc = (By.ID, <span class="string">&quot;id_level&quot;</span>)</span><br><span class="line">    blogger_pic_loc = (By.ID, <span class="string">&quot;id_picture&quot;</span>)</span><br><span class="line">    blogger_submit_pic_loc = (By.CLASS_NAME, <span class="string">&quot;default&quot;</span>)</span><br><span class="line">    <span class="comment"># 删除文章数据</span></span><br><span class="line">    article_list_tr = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr&quot;</span>)</span><br><span class="line">    article_list_tr_a = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr[1]/th/a&quot;</span>)</span><br><span class="line">    delete_article_link = (By.CLASS_NAME, <span class="string">&quot;deletelink&quot;</span>)</span><br><span class="line">    delete_article_link_submit = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;content&#x27;]/form/div/input[2]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆的动作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login_ecshop</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_keys(self.username_loc, self.username)</span><br><span class="line">        self.send_keys(self.password_loc, self.password)</span><br><span class="line">        self.click(self.login_loc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取登陆之后页面有无注销两字，配合断言使用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assertions_get_login_value</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.locator_element(self.assertions_loc).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_article</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 登陆</span></span><br><span class="line">        self.login_ecshop()</span><br><span class="line">        self.click(self.article_info_loc)</span><br><span class="line">        self.click(self.addlink_article_loc)</span><br><span class="line">        self.send_keys(self.title_loc, <span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        self.send_keys(self.content_loc, <span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        self.click(self.submit_add)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加博主数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_blogger</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 登陆</span></span><br><span class="line">        self.login_ecshop()</span><br><span class="line">        self.click(self.blogger_loc)</span><br><span class="line">        self.click(self.addlink_blogger_loc)</span><br><span class="line">        self.send_keys(self.name_loc, <span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        self.choice_select_element(self.sel_loc, <span class="string">&quot;L&quot;</span>)</span><br><span class="line">        self.send_keys(self.blogger_pic_loc, <span class="string">&quot;/Users/wanghan/Desktop/图片/表情包/109951167799422820.jpg&quot;</span>)</span><br><span class="line">        self.click(self.blogger_submit_pic_loc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除文章</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_article</span>(<span class="params">self</span>):</span><br><span class="line">        self.login_ecshop()</span><br><span class="line">        self.click(self.article_info_loc)</span><br><span class="line">        tr_list = self.locator_elements(self.article_list_tr)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tr_list) &gt; <span class="number">0</span>:</span><br><span class="line">            self.click(self.article_list_tr_a)</span><br><span class="line">            self.click(self.delete_article_link)</span><br><span class="line">            self.click(self.delete_article_link_submit)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;暂时没有可删除的数据&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读取配置层"><a href="#读取配置层" class="headerlink" title="读取配置层"></a>读取配置层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_config</span>():</span><br><span class="line">    config_path = Path(__file__).parent.parent.joinpath(<span class="string">&quot;data/Django_Admin_Message.xlsx&quot;</span>)</span><br><span class="line">    df = pd.read_excel(config_path)</span><br><span class="line">    data = df[[<span class="string">&quot;用户名&quot;</span>,<span class="string">&quot;密码&quot;</span>]].values.tolist()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    read_config()</span><br></pre></td></tr></table></figure><h3 id="pytest测试用例简介"><a href="#pytest测试用例简介" class="headerlink" title="pytest测试用例简介"></a>pytest测试用例简介</h3><p>（本简介仅相对于此次unittest代码改pytest而言）</p><ol><li>模块名必须以test_开头或者_test结尾，测试类必须以Test开头，并且不能有init方法，测试方法必须以test开头</li><li>pytest不像unittest需要继承它的TestCase类，</li><li>也不需要在类添加装饰器@ddt声明传递参数，不需要在测试方法上加入unittest的装饰器@data()和@unpack来传参数和拆分的，pytest的参数传递也是通过pytest.mark.parametrize传递和拆分的。</li><li>断言也是python自带的assert进行断言，不需要unittest的self.assertEqual()断言，<br>所以在unittest的代码基础上是很好修改到pytest的。</li></ol><h3 id="测试用例层代码："><a href="#测试用例层代码：" class="headerlink" title="测试用例层代码："></a>测试用例层代码：</h3><p><strong>测试用例层则是对封装好的动作进行调用</strong></p><p><font color="green">测试用例–登陆</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加“/Learn”目录环境</span></span><br><span class="line">sys.path.append(<span class="built_in">str</span>(Path(__file__).parent.parent.parent.parent.parent))</span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_pytest_encapsulation.actionobject.action_page <span class="keyword">import</span> ActionPage</span><br><span class="line"><span class="keyword">from</span> learn_selenium.selenium_pytest_encapsulation.config.read_excel <span class="keyword">import</span> read_config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_Auto_Article</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试用例层，执行对应的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆后台管理</span></span><br><span class="line">    <span class="comment"># pytest是通过parametrize传递参数的，如何要传递多个参数并拆分，可以在第一个字符串参数写入多个，即可自动拆分</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;username,password&quot;</span>, read_config(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_admin</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        lp = ActionPage(username, password)</span><br><span class="line">        lp.login_ecshop()</span><br><span class="line">        <span class="comment"># 断言</span></span><br><span class="line">        <span class="keyword">assert</span> lp.assertions_get_login_value() == <span class="string">&quot;注销&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="green">测试用例–文章</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="built_in">str</span>(Path(__file__).parent.parent.parent.parent.parent))</span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_pytest_encapsulation.actionobject.action_page <span class="keyword">import</span> ActionPage</span><br><span class="line"><span class="keyword">from</span> learn_selenium.selenium_pytest_encapsulation.config.read_excel <span class="keyword">import</span> read_config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_Auto_Article</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试用例层，执行对应的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章数据</span></span><br><span class="line">    <span class="comment"># pytest是通过parametrize传递参数的，如何要传递多个参数并拆分，可以在第一个字符串参数写入多个，即可自动拆分</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;username,password&quot;</span>, read_config(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_article</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        lp = ActionPage(username, password)</span><br><span class="line">        lp.add_article()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除文章</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;username,password&quot;</span>, read_config(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_delete_article</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        lp = ActionPage(username, password)</span><br><span class="line">        lp.delete_article()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="green">测试用例–博主</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="built_in">str</span>(Path(__file__).parent.parent.parent.parent.parent))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_pytest_encapsulation.actionobject.action_page <span class="keyword">import</span> ActionPage</span><br><span class="line"><span class="keyword">from</span> learn_selenium.selenium_pytest_encapsulation.config.read_excel <span class="keyword">import</span> read_config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_Auto_Article</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试用例层，执行对应的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加博主</span></span><br><span class="line">    <span class="comment"># pytest是通过parametrize传递参数的，如何要传递多个参数并拆分，可以在第一个字符串参数写入多个，即可自动拆分</span></span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;username,password&quot;</span>, read_config(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_blogger</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        lp = ActionPage(username, password)</span><br><span class="line">        lp.add_blogger()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="执行测试用例"><a href="#执行测试用例" class="headerlink" title="执行测试用例"></a>执行测试用例</h3><p>run.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 具体参数可以看pytest篇</span></span><br><span class="line">    pytest.main([<span class="string">&#x27;-vs&#x27;</span>,<span class="string">&#x27;--alluredir=reports-dir&#x27;</span>])</span><br></pre></td></tr></table></figure><h1 id="自动生成测试报告"><a href="#自动生成测试报告" class="headerlink" title="自动生成测试报告"></a>自动生成测试报告</h1><h2 id="allure工具"><a href="#allure工具" class="headerlink" title="allure工具"></a>allure工具</h2><p><strong>是一款可以生成测试报告的工具，配合pytest使用</strong></p><h4 id="1-需要配置Java环境"><a href="#1-需要配置Java环境" class="headerlink" title="1. 需要配置Java环境"></a>1. 需要配置Java环境</h4><p>下载地址：<a href="https://www.oracle.com/java/technologies/downloads/#java8-mac">https://www.oracle.com/java/technologies/downloads/#java8-mac</a></p><p><strong>傻瓜式安装即可</strong></p><p>测试安装是否成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java --version</span><br></pre></td></tr></table></figure><h4 id="2-需要本地下载allure"><a href="#2-需要本地下载allure" class="headerlink" title="2. 需要本地下载allure"></a>2. 需要本地下载allure</h4><p>下载地址：<a href="https://github.com/allure-framework/allure2">https://github.com/allure-framework/allure2</a></p><p><strong>Mac安装：</strong></p><pre><code>终端：    brew install allure</code></pre><p><strong>Windows安装：</strong></p><pre><code>1.选择 zip 包下载并解压到一个目录2.配置 bin 文件夹到系统环境变量3.测试是否安装成功，在终端执行</code></pre><p>测试安装是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure --version</span><br></pre></td></tr></table></figure><h4 id="3-pip安装allure包"><a href="#3-pip安装allure包" class="headerlink" title="3.pip安装allure包"></a>3.pip安装allure包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install allure-pytest </span><br></pre></td></tr></table></figure><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><h4 id="第一种：main（）方法运行"><a href="#第一种：main（）方法运行" class="headerlink" title="第一种：main（）方法运行"></a>第一种：main（）方法运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest.main([<span class="string">&#x27;-vs&#x27;</span>,<span class="string">&#x27;--alluredir=测试报告的目录&#x27;</span>])</span><br></pre></td></tr></table></figure><p>命令示例：pytest.main([‘-vs’,’–alluredir&#x3D;reports’])</p><ul><li>--alluredir：allture报告内容生成的路径，生成结果默认与执行测试用例的文件同级</li></ul><h4 id="allure-命令解析并查看报告"><a href="#allure-命令解析并查看报告" class="headerlink" title="allure 命令解析并查看报告"></a>allure 命令解析并查看报告</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure serve 测试报告目录</span><br></pre></td></tr></table></figure><p>命令示例：allure serve reports</p><p><img src="https://s1.ax1x.com/2022/10/26/xW3Yt0.png" alt="xW3Yt0.png"></p><h4 id="第二种：命令行方法运行"><a href="#第二种：命令行方法运行" class="headerlink" title="第二种：命令行方法运行"></a>第二种：命令行方法运行</h4><p>前提是先进入测试项目的目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest 测试用例所在目录 --alluredir=测试报告目录</span><br></pre></td></tr></table></figure><p>命令示例：pytest .&#x2F; –alluredir&#x3D;reports</p><p><img src="https://s1.ax1x.com/2022/10/26/xW8C40.png" alt="xW8C40.png"></p><h4 id="allure-命令解析并查看报告-1"><a href="#allure-命令解析并查看报告-1" class="headerlink" title="allure 命令解析并查看报告"></a>allure 命令解析并查看报告</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure serve 测试报告目录</span><br></pre></td></tr></table></figure><p>命令示例：allure serve reports</p><p><img src="https://s1.ax1x.com/2022/10/26/xW8iCV.png" alt="xW8iCV.png"></p><p>报告显示：<br><img src="https://s1.ax1x.com/2022/10/26/xW8AvF.png" alt="xW8AvF.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借助HTMLTestRunner自动生成测试报告</title>
      <link href="/post/f8f3a5ed.html"/>
      <url>/post/f8f3a5ed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="amp-x20-准备"><a href="#amp-x20-准备" class="headerlink" title="&amp;#x20;准备"></a>&amp;#x20;准备</h2><h4 id="导入HTMLTestRunner模块"><a href="#导入HTMLTestRunner模块" class="headerlink" title="导入HTMLTestRunner模块"></a>导入HTMLTestRunner模块</h4><p>不能通过pip安装的方式导入，需要网上复制HTMLTestRunner.py的内容，然后粘贴到一个新的HTMLTestRunner.py文件中放在执行测试报告的同一级目录，或者，将其放至python安装目录下的Lib下即可直接使用；</p><p>但网上“<a href="http://tungwaiyip.info/software/HTMLTestRunner.html">http://tungwaiyip.info/software/HTMLTestRunner.html</a>”不兼容python3，故可在网上直接搜索支持python3的版本，或是直接做以下修改：</p><pre><code>第94行，将import StringIO修改成import io第539行，将self.outputBuffer = StringIO.StringIO()修改成self.outputBuffer= io.StringIO()第631行，将print &gt;&gt; sys.stderr, ‘\nTime Elapsed: %s‘ %(self.stopTime-self.startTime)修改成print(sys.stderr, ‘\nTimeElapsed: %s‘ % (self.stopTime-self.startTime))第642行，将if not rmap.has_key(cls):修改成if not cls in rmap:第766行，将uo = o.decode(‘latin-1‘)修改成uo = e第775行，将ue = e.decode(‘latin-1‘)修改成ue = e</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>import HTMLTestRunner：导入HTMLTestRunner</li><li>HTMLTestRunner.HTMLTestRunner(stream&#x3D;sys.stdout, verbosity&#x3D;1, title&#x3D;None, description&#x3D;None)<br>stream：输出报告的地址；<br>verbosity：报告内容的详细程度，2表示很详细；<br>title：报告的标题；<br>description：报告的详细描述；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动生成测试报告</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 测试用例保存的目录</span></span><br><span class="line">    case_dirs = <span class="string">r&quot;/Users/wanghan/Desktop/code/project_test/Learn/learn_selenium/selenium_unittest_encapsulation/test_case&quot;</span></span><br><span class="line">    <span class="comment"># 加载测试用例</span></span><br><span class="line">    discover = unittest.defaultTestLoader.discover(case_dirs, <span class="string">&quot;*_page.py&quot;</span>)</span><br><span class="line">    <span class="comment"># 运行测试用例同时保存测试报告</span></span><br><span class="line">    test_report_path = <span class="string">&quot;/Users/wanghan/Desktop/code/project_test/Learn/learn_selenium/selenium_unittest_encapsulation/report.html&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(test_report_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> report_file:</span><br><span class="line">        runner = HTMLTestRunner.HTMLTestRunner(stream=report_file, title=<span class="string">&quot;自动化测试报告&quot;</span>, description=<span class="string">&quot;文章和博主功能性测试&quot;</span>)</span><br><span class="line">        runner.run(discover)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/10/24/x2O0nx.png" alt="x2O0nx.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-unittest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataFrame--tolist函数（df变list）</title>
      <link href="/post/32a011f7.html"/>
      <url>/post/32a011f7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="把dataframe转换为list"><a href="#把dataframe转换为list" class="headerlink" title="把dataframe转换为list"></a>把dataframe转换为list</h2><p><font size="4" color="blue">输入多维dataframe： </font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;姓名&#x27;</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;张三&quot;</span>], <span class="string">&#x27;年龄&#x27;</span>:[<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">78</span>]&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">姓名  年龄</span><br><span class="line">0  张三  21</span><br><span class="line">1  李四  22</span><br><span class="line">2  王五  23</span><br><span class="line">3  赵六  24</span><br><span class="line">4  张三  78</span><br></pre></td></tr></table></figure><p><font size="4" color="green">把第一列的元素转换成list：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">df[<span class="string">&#x27;姓名&#x27;</span>].values.tolist() <span class="comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;赵六&#x27;, &#x27;张三&#x27;]</span></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">df[<span class="string">&#x27;年龄&#x27;</span>].tolist() <span class="comment"># [21, 22, 23, 24, 78]</span></span><br></pre></td></tr></table></figure><p><font size="4" color="green">把第一、二列的元素转换成list：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取多列数据</span></span><br><span class="line">df[[<span class="string">&#x27;姓名&#x27;</span>,<span class="string">&#x27;年龄&#x27;</span>]].values.tolist() <span class="comment"># [[&#x27;张三&#x27;, 21], [&#x27;李四&#x27;, 22], [&#x27;王五&#x27;, 23], [&#x27;赵六&#x27;, 24], [&#x27;张三&#x27;, 78]]</span></span><br></pre></td></tr></table></figure><p><font size="4" color="green">把第一列中不重复的元素转换成list：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;姓名&#x27;</span>].drop_duplicates().values.tolist() <span class="comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;赵六&#x27;]</span></span><br></pre></td></tr></table></figure><p><font size="4" color="blue">输入一维dataframe：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   0</span><br><span class="line">0  3</span><br><span class="line">1  5</span><br><span class="line">2  6</span><br><span class="line">3  6</span><br><span class="line">4  7</span><br><span class="line">5  8</span><br><span class="line">6  7</span><br><span class="line">7  8</span><br><span class="line">8  9</span><br></pre></td></tr></table></figure><p><font size="4" color="green">转换成list[list]：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values.tolist() <span class="comment"># [[3], [5], [6], [6], [7], [8], [7], [8], [9]]</span></span><br></pre></td></tr></table></figure><p><font size="4" color="green">把series转换为list</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series.tolist()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>super</title>
      <link href="/post/d6c1da0e.html"/>
      <url>/post/d6c1da0e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="什么是super？"><a href="#什么是super？" class="headerlink" title="什么是super？"></a>什么是super？</h1><p>super()函数是用于调用父类的一个方法。</p><p>super()用来解决多重继承问题的，在单继承的时候调用此方法没有任何问题，但是如果用到多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承 也是菱形继承）等种种问题。</p><h1 id="super-的衍生"><a href="#super-的衍生" class="headerlink" title="super()的衍生"></a>super()的衍生</h1><p>这里我们先来看看没用super()前调用类方法中出现的弊端</p><p>先举例一个普通的类调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">self, message</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo().bar(<span class="string">&quot;Hello, Python.&quot;</span>)</span><br><span class="line">Hello, Python.</span><br></pre></td></tr></table></figure><p>当存在继承关系的时候，有时候需要在子类调用父类的方法，此时最简单的方法就是把对象调用转换成类调用，需要注意的是这是self参数需要显示传递，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FooParent</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">self, message</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FooChild</span>(<span class="title class_ inherited__">FooParent</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">self, message</span>):</span><br><span class="line">    FooParent.bar(self, message)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>FooChild().bar(<span class="string">&quot;Hello, Python.&quot;</span>)</span><br><span class="line">Hello, Python.</span><br></pre></td></tr></table></figure><p><font color=red>这样做有一些缺点：比如说如果修改了父类的名称，那么在子类中会涉及多处修改。另外，Python是允许多继承语言的，如上所示的方法，在多继承时就需要重复多次，显得非常繁琐。</font></p><p>&#x3D;&#x3D;为了解决这些问题，Python引入了super（）机制&#x3D;&#x3D;。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FooParent</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">self, message</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FooChild</span>(<span class="title class_ inherited__">FooParent</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">self, message</span>):</span><br><span class="line">    <span class="built_in">super</span>(FooChild, self).bar(message)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = FooChild()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.bar(<span class="string">&quot;Hello，Python.&quot;</span>)</span><br><span class="line">Hello, Python.</span><br></pre></td></tr></table></figure><p>表面上看super(FooChild,self).bar(message)方法和FooChild().bar(“Hello, Python.”)调用父类的方法不同，但是结果一致。实际上看这两种方法的内部处理机制大大不同，当涉及到多继承情况时，就会表现出来。例如：</p><p>代码一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter A&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave A&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter B&quot;</span>)</span><br><span class="line">    A.__init__(self)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave B&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter C&quot;</span>)</span><br><span class="line">    A.__init__(self)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave C&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter D&quot;</span>)</span><br><span class="line">    A.__init__(self)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave D&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>(B, C, D):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter E&quot;</span>)</span><br><span class="line">    B.__init__(self)</span><br><span class="line">    C.__init__(self)</span><br><span class="line">    D.__init__(self)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave E&quot;</span>)</span><br><span class="line">E()</span><br></pre></td></tr></table></figure><p>结果：<br>Enter E<br>Enter B<br>Enter A<br>Leave A<br>Leave B<br>Enter C<br>Enter A<br>Leave A<br>Leave C<br>Enter D<br>Enter A<br>Leave A<br>Leave D<br>Leave E</p><p><strong>执行顺序很好理解，唯一需要注意的是公共父类A被执行了多次。</strong></p><p>代码二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter A&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave A&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter B&quot;</span>)</span><br><span class="line">    <span class="built_in">super</span>(B, self).__init__()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave B&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter C&quot;</span>)</span><br><span class="line">    <span class="built_in">super</span>(C, self).__init__()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave C&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter D&quot;</span>)</span><br><span class="line">    <span class="built_in">super</span>(D, self).__init__()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave D&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>(B, C, D):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter E&quot;</span>)</span><br><span class="line">    <span class="built_in">super</span>(E, self).__init__()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Leave E&quot;</span>)</span><br><span class="line">E()</span><br></pre></td></tr></table></figure><p>结果：<br>Enter E<br>Enter B<br>Enter C<br>Enter D<br>Enter A<br>Leave A<br>Leave D<br>Leave C<br>Leave B<br>Leave E</p><p><strong>在super机制里可以保证公共父类仅被执行一次，至于执行的顺序，是按照MRO（Method Resolution Order）方法解析顺序 进行的。转<a href="https://www.cherain-wh.cloud/post/ca2302d6.html">《super MRO解析顺序》</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-super </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试需要的条件</title>
      <link href="/post/e26dd5a8.html"/>
      <url>/post/e26dd5a8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="需要掌握的内容："><a href="#需要掌握的内容：" class="headerlink" title="需要掌握的内容："></a>需要掌握的内容：</h2><p>编程语言:python java&amp;#x20;</p><p>设计槽式:POM 关字驱动横式</p><p>用例管理:unittest pytest</p><p>数据驱动:ddt pytestmark.parameters()</p><p>二次封装:excel封装,ini&#x2F;yaml配置文件封装,数据库封装&amp;#x20;</p><p>日志监控:logger日志收重&amp;#x20;</p><p>异常处理:try except</p><p>jenkins: 持换集成 无人值守</p><p>Docker:镜像容器技术&amp;#x20;</p><p>分布式运行:Gdid</p><p>前端：html和javascript</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium unittest自动化测试原型（封装）</title>
      <link href="/post/6ef7a0fe.html"/>
      <url>/post/6ef7a0fe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>前言：本文是借助Django的后台管理来辅助自动化测试原型所需的项目条件，在登陆后对文章数据和博主数据进行增删查操作。</p><p>&amp;#x9;学习本文内容之前，可以先回顾下前面写的selenium篇和unittest篇</p><h2 id="一、测试前准备"><a href="#一、测试前准备" class="headerlink" title="一、测试前准备"></a>一、测试前准备</h2><p>Django项目简介具体代码在：<a href="https://github.com/Wanghan123-github/Django_test">https://github.com/Wanghan123-github/Django_test</a></p><h2 id="二、线性脚本"><a href="#二、线性脚本" class="headerlink" title="二、线性脚本"></a>二、线性脚本</h2><p><strong>这里先插入一段比较通俗易懂的selenium 和 unittest 结合实现的自动化测试原型代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># Google驱动</span></span><br><span class="line">driver_path = <span class="string">r&quot;/Users/wanghan/Downloads/chromedriver&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;http://127.0.0.1:8000/admin/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Auto_Article</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆后台管理</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_admin</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文章数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_article</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 进入文章数据详情页</span></span><br><span class="line">        driver.find_element(By.LINK_TEXT, <span class="string">&quot;Articles&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_article</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 进入文章数据详情页</span></span><br><span class="line">        driver.find_element(By.LINK_TEXT, <span class="string">&quot;Article&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 点击添加文章数据</span></span><br><span class="line">        driver.find_element(By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>).click()</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_title&quot;</span>).send_keys(<span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_content&quot;</span>).send_keys(<span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        <span class="comment"># 确认添加</span></span><br><span class="line">        driver.find_element(By.CLASS_NAME, <span class="string">&quot;default&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加博主数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_blogger</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 进入博主数据详情页</span></span><br><span class="line">        driver.find_element(By.LINK_TEXT, <span class="string">&quot;Blogger&quot;</span>).click()</span><br><span class="line">        driver.find_element(By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>).click()</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_name&quot;</span>).send_keys(<span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        <span class="comment"># 选择博主的等级（多选框操作）</span></span><br><span class="line">        <span class="comment"># 其中多选有三种：1. 通过文本选中 2. 通过value属性选中 3. 通过下标选中</span></span><br><span class="line">        sel = Select(driver.find_element(By.ID, <span class="string">&quot;id_level&quot;</span>))</span><br><span class="line">        sel.select_by_value(<span class="string">&quot;L&quot;</span>)</span><br><span class="line">        <span class="comment"># 上传图片</span></span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_picture&quot;</span>).send_keys(<span class="string">&quot;/Users/wanghan/Desktop/图片/表情包/109951167799422820.jpg&quot;</span>)</span><br><span class="line">        driver.find_element(By.CLASS_NAME, <span class="string">&quot;default&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除文章</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_delete_article</span>(<span class="params">self</span>):</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_username&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        driver.find_element(By.ID, <span class="string">&quot;id_password&quot;</span>).send_keys(<span class="string">&quot;wanghan...&quot;</span>)</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 进入文章数据详情页</span></span><br><span class="line">        driver.find_element(By.LINK_TEXT, <span class="string">&quot;Article&quot;</span>).click()</span><br><span class="line">        <span class="comment"># 对展示的多条数据进行单一删除的操作</span></span><br><span class="line"><span class="comment"># 获取数据列表</span></span><br><span class="line">        tr_list = driver.find_elements(By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(tr_list)</span><br><span class="line">        <span class="comment"># 如果数据列表的长度大于0说明有数据，我们默认删除最上面的那个</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tr_list) &gt; <span class="number">0</span>:</span><br><span class="line">            driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr[1]/th/a&quot;</span>).click()</span><br><span class="line">            <span class="comment"># 点击删除按钮</span></span><br><span class="line">            driver.find_element(By.CLASS_NAME, <span class="string">&quot;deletelink&quot;</span>).click()</span><br><span class="line">            <span class="comment"># 确认删除</span></span><br><span class="line">            driver.find_element(By.XPATH, <span class="string">&quot;//*[@id=&#x27;content&#x27;]/form/div/input[2]&quot;</span>).click()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;暂时没有可删除的数据&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面都是一些简单的输入文本和一些点击事件的操作，以及额外增加了一些多选框和多条数据展示选择其一进行操作</p><h2 id="三、POM设计模式（封装）"><a href="#三、POM设计模式（封装）" class="headerlink" title="三、POM设计模式（封装）"></a>三、POM设计模式（封装）</h2><p>&amp;#x9;线性脚本有很多重复使用的代码，封装就是为了重复使用代码，为了方便维护</p><p>&amp;#x9;其中设计模式主要分为三种：</p><ol><li>&amp;#x20;  基础层：主要存放selenium原生的方法</li><li>&amp;#x20;  动作层：主要用于存放定位页面元素和页面动作</li><li>&amp;#x20;  测试用例层：主要用于执行动作层和存放测试数据&amp;#x20;</li></ol><p><img src="https://s1.ax1x.com/2022/10/19/xsb02T.png" alt="xsb02T.png"></p><h3 id="基础层代码："><a href="#基础层代码：" class="headerlink" title="基础层代码："></a>基础层代码：</h3><p>基础层存放的都是selenium原生的操作方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePage</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    基础层，用来放selenium原生的方法</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        s = Service(executable_path=<span class="string">r&quot;/Users/wanghan/Downloads/chromedriver&quot;</span>)</span><br><span class="line">        self.driver = webdriver.Chrome(service=s)</span><br><span class="line">        self.driver.get(<span class="string">&quot;http://127.0.0.1:8000/admin/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位元素</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">locator_element</span>(<span class="params">self,loc</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        loc：元祖类型</span></span><br><span class="line"><span class="string">        *: 解包</span></span><br><span class="line"><span class="string">        由于find_element（）只接收两个参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element(*loc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位输入值操作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_keys</span>(<span class="params">self,loc,value</span>):</span><br><span class="line">        self.locator_element(loc).send_keys(value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位点击操作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click</span>(<span class="params">self,loc</span>):</span><br><span class="line">        self.locator_element(loc).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位多选元素</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">choice_select_element</span>(<span class="params">self,loc,value</span>):</span><br><span class="line">        sel = Select(self.locator_element(loc))</span><br><span class="line">        sel.select_by_value(value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位元素列表</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">locator_elements</span>(<span class="params">self,loc</span>):</span><br><span class="line">        <span class="keyword">return</span> self.driver.find_elements(*loc)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动作层代码："><a href="#动作层代码：" class="headerlink" title="动作层代码："></a>动作层代码：</h3><p>动作层是通过调用基础层selenium原生的方法来实现页面操作时的动作，存放的都是页面的元素和页面的动作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_encapsulation.base.base_page <span class="keyword">import</span> BasePage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActionPage</span>(<span class="title class_ inherited__">BasePage</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    动作层，通过调用基础层来实现具体的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 以下是所有的页面元素</span></span><br><span class="line">    username = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    password = <span class="string">&quot;wanghan...&quot;</span></span><br><span class="line">    username_loc = (By.ID, <span class="string">&quot;id_username&quot;</span>)</span><br><span class="line">    password_loc = (By.ID, <span class="string">&quot;id_password&quot;</span>)</span><br><span class="line">    login_loc = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;login-form&#x27;]/div[3]/input&quot;</span>)</span><br><span class="line">    <span class="comment"># 断言</span></span><br><span class="line">    assertions_loc = (By.XPATH,<span class="string">&quot;//*[@id=&#x27;user-tools&#x27;]/a[3]&quot;</span>)</span><br><span class="line">    <span class="comment"># 添加文章关键字</span></span><br><span class="line">    article_info_loc = (By.LINK_TEXT, <span class="string">&quot;Article&quot;</span>)</span><br><span class="line">    addlink_article_loc = (By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>)</span><br><span class="line">    title_loc = (By.ID, <span class="string">&quot;id_title&quot;</span>)</span><br><span class="line">    content_loc = (By.ID, <span class="string">&quot;id_content&quot;</span>)</span><br><span class="line">    submit_add = (By.CLASS_NAME, <span class="string">&quot;default&quot;</span>)</span><br><span class="line">    <span class="comment"># 添加博主关键字</span></span><br><span class="line">    blogger_loc = (By.LINK_TEXT, <span class="string">&quot;Blogger&quot;</span>)</span><br><span class="line">    addlink_blogger_loc = (By.CLASS_NAME, <span class="string">&quot;addlink&quot;</span>)</span><br><span class="line">    name_loc = (By.ID, <span class="string">&quot;id_name&quot;</span>)</span><br><span class="line">    sel_loc = (By.ID, <span class="string">&quot;id_level&quot;</span>)</span><br><span class="line">    blogger_pic_loc = (By.ID, <span class="string">&quot;id_picture&quot;</span>)</span><br><span class="line">    blogger_submit_pic_loc = (By.CLASS_NAME, <span class="string">&quot;default&quot;</span>)</span><br><span class="line">    <span class="comment"># 删除文章数据</span></span><br><span class="line">    article_list_tr = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr&quot;</span>)</span><br><span class="line">    article_list_tr_a = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;result_list&#x27;]/tbody/tr[1]/th/a&quot;</span>)</span><br><span class="line">    delete_article_link = (By.CLASS_NAME, <span class="string">&quot;deletelink&quot;</span>)</span><br><span class="line">    delete_article_link_submit = (By.XPATH, <span class="string">&quot;//*[@id=&#x27;content&#x27;]/form/div/input[2]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆的动作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login_ecshop</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_keys(self.username_loc, self.username)</span><br><span class="line">        self.send_keys(self.password_loc, self.password)</span><br><span class="line">        self.click(self.login_loc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取登陆之后页面有无注销两字，配合断言使用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assertions_get_login_value</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.locator_element(self.assertions_loc).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_article</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 登陆</span></span><br><span class="line">        self.login_ecshop()</span><br><span class="line">        self.click(self.article_info_loc)</span><br><span class="line">        self.click(self.addlink_article_loc)</span><br><span class="line">        self.send_keys(self.title_loc, <span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        self.send_keys(self.content_loc, <span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        self.click(self.submit_add)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加博主数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_blogger</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 登陆</span></span><br><span class="line">        self.login_ecshop()</span><br><span class="line">        self.click(self.blogger_loc)</span><br><span class="line">        self.click(self.addlink_blogger_loc)</span><br><span class="line">        self.send_keys(self.name_loc, <span class="string">&quot;脚本添加&quot;</span>)</span><br><span class="line">        self.choice_select_element(self.sel_loc, <span class="string">&quot;L&quot;</span>)</span><br><span class="line">        self.send_keys(self.blogger_pic_loc, <span class="string">&quot;/Users/wanghan/Desktop/图片/表情包/109951167799422820.jpg&quot;</span>)</span><br><span class="line">        self.click(self.blogger_submit_pic_loc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除文章</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_article</span>(<span class="params">self</span>):</span><br><span class="line">        self.login_ecshop()</span><br><span class="line">        self.click(self.article_info_loc)</span><br><span class="line">        tr_list = self.locator_elements(self.article_list_tr)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(tr_list) &gt; <span class="number">0</span>:</span><br><span class="line">            self.click(self.article_list_tr_a)</span><br><span class="line">            self.click(self.delete_article_link)</span><br><span class="line">            self.click(self.delete_article_link_submit)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;暂时没有可删除的数据&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试用例层代码："><a href="#测试用例层代码：" class="headerlink" title="测试用例层代码："></a>测试用例层代码：</h3><p><strong>测试用例层则是对封装好的动作进行调用</strong></p><p><font color="green">测试用例–登陆</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_encapsulation.actionobject.action_page <span class="keyword">import</span> ActionPage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Auto_Article</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试用例层，执行对应的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 剔除执行中报出的警告⚠️</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        warnings.simplefilter(<span class="string">&#x27;ignore&#x27;</span>, ResourceWarning)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆后台管理</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_admin</span>(<span class="params">self</span>):</span><br><span class="line">        lp = ActionPage()</span><br><span class="line">        lp.login_ecshop()</span><br><span class="line">        <span class="comment"># 断言</span></span><br><span class="line">        self.assertTrue(lp.assertions_get_login_value(), <span class="string">&quot;注销&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="green">测试用例–文章</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_encapsulation.actionobject.action_page <span class="keyword">import</span> ActionPage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Auto_Article</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试用例层，执行对应的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 剔除执行中报出的警告⚠️</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        warnings.simplefilter(<span class="string">&#x27;ignore&#x27;</span>, ResourceWarning)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_article</span>(<span class="params">self</span>):</span><br><span class="line">        lp = ActionPage()</span><br><span class="line">        lp.add_article()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除文章</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_delete_article</span>(<span class="params">self</span>):</span><br><span class="line">        lp = ActionPage()</span><br><span class="line">        lp.delete_article()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="green">测试用例–博主</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Learn.learn_selenium.selenium_encapsulation.actionobject.action_page <span class="keyword">import</span> ActionPage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Auto_Article</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试用例层，执行对应的动作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 剔除执行中报出的警告⚠️</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        warnings.simplefilter(<span class="string">&#x27;ignore&#x27;</span>, ResourceWarning)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加博主</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_blogger</span>(<span class="params">self</span>):</span><br><span class="line">        lp = ActionPage()</span><br><span class="line">        lp.add_blogger()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="amp-x20-准备生成测试报告"><a href="#amp-x20-准备生成测试报告" class="headerlink" title="&amp;#x20;准备生成测试报告"></a>&amp;#x20;准备生成测试报告</h2><ol><li><p>导入HTMLTestRunner模块<br>不能通过pip安装的方式导入，需要网上复制HTMLTestRunner.py的内容，然后粘贴到一个新的HTMLTestRunner.py文件中放在执行测试报告的同一级目录，或者，将其放至python安装目录下的Lib下即可直接使用；</p><p>但网上“<a href="http://tungwaiyip.info/software/HTMLTestRunner.html">http://tungwaiyip.info/software/HTMLTestRunner.html</a>”不兼容python3，故可在网上直接搜索支持python3的版本，或是直接做以下修改：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第94行，将import StringIO修改成import io</span><br><span class="line">第539行，将self.outputBuffer = StringIO.StringIO()修改成self.outputBuffer= io.StringIO()</span><br><span class="line">第631行，将print &gt;&gt; sys.stderr, ‘\nTime Elapsed: %s‘ %(self.stopTime-self.startTime)修改成print(sys.stderr, ‘\nTimeElapsed: %s‘ % (self.stopTime-self.startTime))</span><br><span class="line">第642行，将if not rmap.has_key(cls):修改成if not cls in rmap:</span><br><span class="line">第766行，将uo = o.decode(‘latin-1‘)修改成uo = e</span><br><span class="line">第775行，将ue = e.decode(‘latin-1‘)修改成ue = e</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>import HTMLTestRunner：导入HTMLTestRunner</li><li>HTMLTestRunner.HTMLTestRunner(stream&#x3D;sys.stdout, verbosity&#x3D;1, title&#x3D;None, description&#x3D;None)<br>stream：输出报告的地址；<br>verbosity：报告内容的详细程度，2表示很详细；<br>title：报告的标题；<br>description：报告的详细描述；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动生成测试报告</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 测试用例保存的目录</span></span><br><span class="line">    case_dirs = <span class="string">r&quot;/Users/wanghan/Desktop/code/project_test/Learn/learn_selenium/selenium_unittest_encapsulation/test_case&quot;</span></span><br><span class="line">    <span class="comment"># 加载测试用例</span></span><br><span class="line">    discover = unittest.defaultTestLoader.discover(case_dirs, <span class="string">&quot;*_page.py&quot;</span>)</span><br><span class="line">    <span class="comment"># 运行测试用例同时保存测试报告</span></span><br><span class="line">    test_report_path = <span class="string">&quot;/Users/wanghan/Desktop/code/project_test/Learn/learn_selenium/selenium_unittest_encapsulation/report.html&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(test_report_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> report_file:</span><br><span class="line">        runner = HTMLTestRunner.HTMLTestRunner(stream=report_file, title=<span class="string">&quot;自动化测试报告&quot;</span>, description=<span class="string">&quot;文章和博主功能性测试&quot;</span>)</span><br><span class="line">        runner.run(discover)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/10/24/x2O0nx.png" alt="x2O0nx.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载Google驱动文件</title>
      <link href="/post/fb993920.html"/>
      <url>/post/fb993920.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="一、通过设置确认Google浏览器的版本号"><a href="#一、通过设置确认Google浏览器的版本号" class="headerlink" title="一、通过设置确认Google浏览器的版本号"></a>一、通过设置确认Google浏览器的版本号</h3><p><img src="https://s1.ax1x.com/2022/10/17/xBzaJ1.png" alt="xBzaJ1.png"></p><h3 id="二、下载驱动文件：https-registry-npmmirror-com-binary-html-path-chromedriver"><a href="#二、下载驱动文件：https-registry-npmmirror-com-binary-html-path-chromedriver" class="headerlink" title="二、下载驱动文件：https://registry.npmmirror.com/binary.html?path=chromedriver/"></a>二、下载驱动文件：<a href="https://registry.npmmirror.com/binary.html?path=chromedriver/">https://registry.npmmirror.com/binary.html?path=chromedriver/</a></h3><p><img src="https://s1.ax1x.com/2022/10/17/xBzBQK.png" alt="xBzBQK.png"></p><h3 id="三、下载完成并解压缩后，复制其中的msedgedriver的绝对路径就可以-amp-x20"><a href="#三、下载完成并解压缩后，复制其中的msedgedriver的绝对路径就可以-amp-x20" class="headerlink" title="三、下载完成并解压缩后，复制其中的msedgedriver的绝对路径就可以&amp;#x20;"></a>三、下载完成并解压缩后，复制其中的msedgedriver的绝对路径就可以&amp;#x20;</h3><p>最终文件地址：&#x2F;Users&#x2F;wanghan&#x2F;Downloads&#x2F;chromedriver<img src="https://s1.ax1x.com/2022/10/17/xDSVl6.png" alt="xDSVl6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium基础</title>
      <link href="/post/f89470a9.html"/>
      <url>/post/f89470a9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="需求解析："><a href="#需求解析：" class="headerlink" title="需求解析："></a>需求解析：</h2><p>进入百度首页，使用不同的匹配方式输入内容进行搜索，并借助百度首页的超链接“新闻”、“百度首页”来回跳转</p><h2 id="一、导入模块"><a href="#一、导入模块" class="headerlink" title="一、导入模块"></a>一、导入模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br></pre></td></tr></table></figure><h2 id="二、驱动类型（选择其一）"><a href="#二、驱动类型（选择其一）" class="headerlink" title="二、驱动类型（选择其一）"></a>二、驱动类型（选择其一）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Edge驱动</span></span><br><span class="line">driver_path = <span class="string">r&quot;/Users/wanghan/Downloads/edgedriver_mac64_m1/msedgedriver&quot;</span></span><br><span class="line">driver = webdriver.Edge(executable_path=driver_path)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google驱动</span></span><br><span class="line">driver_path = <span class="string">r&quot;/Users/wanghan/Downloads/chromedriver&quot;</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br></pre></td></tr></table></figure><h2 id="三、访问url"><a href="#三、访问url" class="headerlink" title="三、访问url"></a>三、访问url</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="四、匹配"><a href="#四、匹配" class="headerlink" title="四、匹配"></a>四、匹配</h2><ol><li><p><strong>ID匹配</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索框搜索俄乌冲突</span></span><br><span class="line">driver.find_element(By.ID,<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;俄乌冲突&quot;</span>)</span><br><span class="line"><span class="comment"># 点击搜索</span></span><br><span class="line">driver.find_element(By.ID,<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line"><span class="comment"># 清空搜索框内容</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&quot;kw&quot;</span>).clear()</span><br></pre></td></tr></table></figure></li><li><p><strong>XPATH匹配</strong></p><p>绝对路径：&#x2F;开头是绝对路径</p><p>相对路径：&#x2F;&#x2F;开头是相对路径</p><p>2.1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绝对路径</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;/html/body/div[1]/div[1]/div[5]/div/div/form/span[1]/input&quot;</span>).send_keys(<span class="string">&quot;最新高科技产品&quot;</span>)</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;/html/body/div[1]/div[1]/div[5]/div/div/form/span[2]/input&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.back()</span><br></pre></td></tr></table></figure><p>2.2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相对路径 + 索引定位</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//form/span[1]/input&quot;</span>).send_keys(<span class="string">&quot;最新高科技产品1&quot;</span>)</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//form/span[1]/input&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.back()</span><br></pre></td></tr></table></figure><p>2.3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相对路径 + 通配符* + 属性定位</span></span><br><span class="line"><span class="comment"># 搜索新的内容</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>).send_keys(<span class="string">&quot;最新高科技产品&quot;</span>)</span><br><span class="line"><span class="comment"># 点击搜索</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[@id=&#x27;su&#x27;]&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 浏览器页面后退至首页</span></span><br><span class="line">driver.back()</span><br><span class="line">driver.back()</span><br></pre></td></tr></table></figure><p>2.4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相对路径 + 部分属性值定位</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">starts-with: 以...开头</span></span><br><span class="line"><span class="string">substring：以...结尾</span></span><br><span class="line"><span class="string">contains：包含...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 搜索内容</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[starts-with(@autocomplete,&#x27;of&#x27;)]&quot;</span>).send_keys(<span class="string">&quot;最新高科技产品&quot;</span>)</span><br><span class="line"><span class="comment"># 清空搜索内容</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[starts-with(@autocomplete,&#x27;of&#x27;)]&quot;</span>).clear()</span><br><span class="line"></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[substring(@autocomplete,2)=&#x27;ff&#x27;]&quot;</span>).send_keys(<span class="string">&quot;最新高科技产品&quot;</span>)</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[substring(@autocomplete,2)=&#x27;ff&#x27;]&quot;</span>).clear()</span><br><span class="line"></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[contains(@autocomplete,&#x27;of&#x27;)]&quot;</span>).send_keys(<span class="string">&quot;最新高科技产品&quot;</span>)</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[contains(@autocomplete,&#x27;of&#x27;)]&quot;</span>).clear()</span><br><span class="line"><span class="comment"># 页面刷新</span></span><br><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure><p>2.5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相对路径 + 文本定位</span></span><br><span class="line"><span class="comment"># 获取属性</span></span><br><span class="line">value = driver.find_element(By.XPATH,<span class="string">&quot;//span[text()=&#x27;按图片搜索&#x27;]&quot;</span>).get_attribute(<span class="string">&quot;class&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure></li><li><p><strong>超链接匹配</strong></p><p>3.1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问超链接页面（LINK_TEXT：精确匹配）</span></span><br><span class="line">driver.find_element(By.LINK_TEXT,<span class="string">&quot;新闻&quot;</span>).click()</span><br><span class="line"><span class="comment"># ---------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当打开新的标签页时，需要将当前页面的句柄定位到新打开的页面句柄，才能操作新的当前页面</span></span><br><span class="line"><span class="comment"># 获取全部页面句柄</span></span><br><span class="line">all_handles = driver.window_handles</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全部页面: &quot;</span>,all_handles)</span><br><span class="line"><span class="comment"># 将当前句柄定位到新打开的页面</span></span><br><span class="line">driver.switch_to.window(all_handles[-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># # 也可以定位到新打开的页面后进行关闭</span></span><br><span class="line"><span class="comment"># driver.close()</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>3.2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回百度的首页重新测试匹配</span></span><br><span class="line">driver.find_element(By.LINK_TEXT,<span class="string">&quot;百度首页&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问超链接页面（PARTIAL_LINK_TEXT：模糊匹配）</span></span><br><span class="line">driver.find_element(By.PARTIAL_LINK_TEXT,<span class="string">&quot;闻&quot;</span>).click()</span><br><span class="line"><span class="comment"># --------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取全部页面句柄</span></span><br><span class="line">all_handles = driver.window_handles</span><br><span class="line"><span class="comment"># 将当前句柄定位到新打开的页面</span></span><br><span class="line">driver.switch_to.window(all_handles[-<span class="number">1</span>])</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">driver.find_element(By.PARTIAL_LINK_TEXT,<span class="string">&quot;百度首页&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>CLASS_NAME匹配</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.CLASS_NAME,<span class="string">&quot;s_ipt&quot;</span>).send_keys(<span class="string">&quot;日本核废水&quot;</span>)</span><br><span class="line">driver.find_element(By.ID, <span class="string">&#x27;su&#x27;</span>).click()</span><br></pre></td></tr></table></figure></li></ol><h2 id="五、关闭浏览器"><a href="#五、关闭浏览器" class="headerlink" title="五、关闭浏览器"></a>五、关闭浏览器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载Edge驱动文件</title>
      <link href="/post/d7019c97.html"/>
      <url>/post/d7019c97.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-查找Edge浏览器当前版本"><a href="#1-查找Edge浏览器当前版本" class="headerlink" title="1. 查找Edge浏览器当前版本"></a>1. 查找Edge浏览器当前版本</h2><blockquote><p>一定注意：下载的Edge浏览器驱动需要和当前的浏览器版本匹配。</p></blockquote><h3 id="通过命令edge-x2F-x2F-settings-x2F-help打开设置页面，找到Edge当前版本-版本-106-0-1370-37-正式版本-arm64-。"><a href="#通过命令edge-x2F-x2F-settings-x2F-help打开设置页面，找到Edge当前版本-版本-106-0-1370-37-正式版本-arm64-。" class="headerlink" title="通过命令edge:&#x2F;&#x2F;settings&#x2F;help打开设置页面，找到Edge当前版本(版本 106.0.1370.37 (正式版本) (arm64)) 。"></a><strong>通过命令edge:&#x2F;&#x2F;settings&#x2F;help打开设置页面，找到Edge当前版本(版本 106.0.1370.37 (正式版本) (arm64)) 。</strong></h3><p><img src="https://s1.ax1x.com/2022/10/10/xYzKDx.png" alt="xYzKDx.png"></p><h2 id="2-下载Edge浏览器驱动程序"><a href="#2-下载Edge浏览器驱动程序" class="headerlink" title="2.下载Edge浏览器驱动程序"></a>2.下载Edge浏览器驱动程序</h2><p><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></p><h3 id="打开Edge浏览器selenium驱动程序下载页面：找到与浏览器当前版本号对应的驱动程序进行下载："><a href="#打开Edge浏览器selenium驱动程序下载页面：找到与浏览器当前版本号对应的驱动程序进行下载：" class="headerlink" title="打开Edge浏览器selenium驱动程序下载页面：找到与浏览器当前版本号对应的驱动程序进行下载："></a>打开Edge浏览器selenium驱动程序下载页面：找到与浏览器当前版本号对应的驱动程序进行下载：</h3><p><img src="https://s1.ax1x.com/2022/10/10/xYzJ8H.png" alt="xYzJ8H.png"></p><h2 id="3-下载完成并解压缩后，复制其中的msedgedriver的绝对路径就可以"><a href="#3-下载完成并解压缩后，复制其中的msedgedriver的绝对路径就可以" class="headerlink" title="3.下载完成并解压缩后，复制其中的msedgedriver的绝对路径就可以"></a>3.下载完成并解压缩后，复制其中的msedgedriver的绝对路径就可以</h2><p>本例子中的最终路径为：&#x2F;Users&#x2F;wanghan&#x2F;Downloads&#x2F;edgedriver_mac64_m1&#x2F;msedgedriver</p><p><img src="https://s1.ax1x.com/2022/10/10/xYzTG4.png" alt="xYzTG4.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim</title>
      <link href="/post/104c461b.html"/>
      <url>/post/104c461b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="复制一行"><a href="#复制一行" class="headerlink" title="复制一行"></a>复制一行</h4><p>yy</p><h4 id="到行首"><a href="#到行首" class="headerlink" title="到行首"></a>到行首</h4><p>0</p><h4 id="到文件尾部"><a href="#到文件尾部" class="headerlink" title="到文件尾部"></a>到文件尾部</h4><p>shift + g</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>dd</p><h4 id="删除到行首"><a href="#删除到行首" class="headerlink" title="删除到行首"></a>删除到行首</h4><p>d^</p><h4 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h4><p>p</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>在普通模式下：“&#x2F;”开始查找<br>n：查找下一个<br>N：查找上一个</p><h4 id="全部删除"><a href="#全部删除" class="headerlink" title="全部删除"></a>全部删除</h4><p>按esc键后，先按gg（到达顶部），然后dG</p><h4 id="全部复制："><a href="#全部复制：" class="headerlink" title="全部复制："></a>全部复制：</h4><p>按esc键后，先按gg，然后ggyG</p><h4 id="全选高亮显示："><a href="#全选高亮显示：" class="headerlink" title="全选高亮显示："></a>全选高亮显示：</h4><p>按esc键后，先按gg，然后ggvG或者ggVG</p>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm</title>
      <link href="/post/d58b1f37.html"/>
      <url>/post/d58b1f37.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h4 id="格式化代码："><a href="#格式化代码：" class="headerlink" title="格式化代码："></a>格式化代码：</h4><p>option + command + l</p><h4 id="折叠所有代码块"><a href="#折叠所有代码块" class="headerlink" title="折叠所有代码块"></a>折叠所有代码块</h4><p>command + shift + “-”</p><h4 id="折叠单个代码块"><a href="#折叠单个代码块" class="headerlink" title="折叠单个代码块"></a>折叠单个代码块</h4><p>command + “”</p>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AES加密、解密</title>
      <link href="/post/c539ce12.html"/>
      <url>/post/c539ce12.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>  AES是目前比较流行的一种对称加密算法。对称加密算法也就是加密和解密用相同的密钥。其中AES只是一个基本的算法，实现AES有几种模式，主要有ECB、CBC、CFB、和OFB、CTR这几种。本章主要讲的是ECB和CSC模式。</p><h2 id="1-ECB模式"><a href="#1-ECB模式" class="headerlink" title="1. ECB模式"></a>1. ECB模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BLOCK_SIZE = <span class="number">16</span> <span class="comment"># Bytes</span></span><br><span class="line"><span class="comment"># 填充函数</span></span><br><span class="line">pad  = <span class="keyword">lambda</span> s:s + (BLOCK_SIZE -<span class="built_in">len</span>(s) % BLOCK_SIZE) * \</span><br><span class="line">                <span class="built_in">chr</span>(BLOCK_SIZE - <span class="built_in">len</span>(s) % BLOCK_SIZE)</span><br><span class="line"><span class="comment"># 逆填充函数</span></span><br><span class="line">unpad = <span class="keyword">lambda</span> s:s [:-<span class="built_in">ord</span>(s[<span class="built_in">len</span>(s) - <span class="number">1</span>:])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ECB模式 加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">key,data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    AES加密</span></span><br><span class="line"><span class="string">    :param key:密钥</span></span><br><span class="line"><span class="string">    :param data:被加密的字符串（明文）</span></span><br><span class="line"><span class="string">    :return :密文</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 将密钥str转为bytes类型</span></span><br><span class="line">    key = key.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 利用填充函数将被加密的字符串填充到16位</span></span><br><span class="line">    data = pad(data)</span><br><span class="line">    <span class="comment"># 使用AES的ECB加密模式对密钥加密成一个新的密钥</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="comment"># 使用新生成的密钥对数据进行加密，加密后得到的是bytes类型的数据，使用base64进行编码，返回字符串</span></span><br><span class="line">    result = cipher.encrypt(data.encode())</span><br><span class="line">    encodestrs = base64.b64encode(result)</span><br><span class="line">    enctext = encodestrs.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(enctext)</span><br><span class="line">    <span class="keyword">return</span> enctext</span><br><span class="line"></span><br><span class="line"><span class="comment"># ECB模式 解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">key,data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param key:密钥</span></span><br><span class="line"><span class="string">    :param data:加密后的数据</span></span><br><span class="line"><span class="string">    :return :明文</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    key = key.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    data = base64.b64decode(data)</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去补位</span></span><br><span class="line">    text_decrypted = unpad(cipher.decrypt(data))</span><br><span class="line">    text_decrypted = text_decrypted.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(text_decrypted)</span><br><span class="line">    <span class="keyword">return</span> text_decrypted</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="string">&#x27;adadqerfaa123456&#x27;</span></span><br><span class="line">    data = <span class="string">&quot;amdin&quot;</span></span><br><span class="line"></span><br><span class="line">    ecdata = aes_encrypt(key,data)</span><br><span class="line"></span><br><span class="line">    aes_decrypt(key,ecdata)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mIkUwZee5+wAoITm3/X/Bg==</span><br><span class="line">amdin</span><br></pre></td></tr></table></figure><p>ECB 是最简单的块密码加密模式，加密前根据加密块大小（如 AES 为128位）分成若干块，之后将每块使用相同的密钥单独加密，解密同理。相对其他模式没有偏移量的设置，简单点，安全性差点。</p><p>AES 加密有 AES-128、AES-192、AES-256 三种，分别对应三种密钥长度 128bits（16字节）、192bits（24字节）、256bits（32字节）。当然，密钥越长，安全性越高，加解密花费时间也越长。默认的是AES-128，其安全性完全够用。</p><p>pad 和 unpad 分别是填充函数和逆填充函数。因为 AES 加密对加密文本有长度要求，必须是密钥字节数的倍数。这里的 key 的长度是 16 个字节。</p><p>关于填充算法，简单解释就是缺几位就补几：填充字符串由一个字节序列组成，每个字节填充该填充字节序列的长度。Python 代码中 ECB 模式进行 AES 加密默认就是 pkcs7padding 填充。</p><p>相比 ECB 模式，CBC 模式主要是多了偏移量这一要素，偏移量的取值，至少 16 位，或者为 16 的倍数。</p><h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BLOCK_SIZE = <span class="number">16</span> <span class="comment"># Bytes</span></span><br><span class="line"><span class="comment"># 填充函数</span></span><br><span class="line">pad  = <span class="keyword">lambda</span> s:s + (BLOCK_SIZE -<span class="built_in">len</span>(s) % BLOCK_SIZE) * \</span><br><span class="line">                <span class="built_in">chr</span>(BLOCK_SIZE - <span class="built_in">len</span>(s) % BLOCK_SIZE)</span><br><span class="line"><span class="comment"># 逆填充函数</span></span><br><span class="line">unpad = <span class="keyword">lambda</span> s:s [:-<span class="built_in">ord</span>(s[<span class="built_in">len</span>(s) - <span class="number">1</span>:])]</span><br><span class="line"><span class="comment"># 偏移量</span></span><br><span class="line">vi = <span class="string">&#x27;0102030405060708&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_Encrty</span>(<span class="params">key,data</span>):</span><br><span class="line">    <span class="comment"># 利用填充函数将被加密的字符串填充到16位</span></span><br><span class="line">    data = pad(data)</span><br><span class="line">    <span class="comment"># 字符串补位</span></span><br><span class="line">    cipher = AES.new(key.encode(<span class="string">&quot;utf8&quot;</span>),AES.MODE_CBC,vi.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    encrypterbytes = cipher.encrypt(data.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    <span class="comment"># 加密后得到的是bytes类型的数据，使用Base64进行编码，然后返回字符串</span></span><br><span class="line">    encodestrs = base64.b64encode(encrypterbytes)</span><br><span class="line">    enctext = encodestrs.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> enctext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_Decrypt</span>(<span class="params">key,data</span>):</span><br><span class="line">    data = data.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    encodebytes = base64.decodebytes(data)</span><br><span class="line">    <span class="comment"># 将加密数据转换为bytes类型数据</span></span><br><span class="line">    cipher= AES.new(key.encode(<span class="string">&#x27;utf8&#x27;</span>),AES.MODE_CBC,vi.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    text_decrypted = cipher.decrypt(encodebytes)</span><br><span class="line">    <span class="comment"># 去补位</span></span><br><span class="line">    text_decrypted = unpad(text_decrypted)</span><br><span class="line">    text_decrypted = text_decrypted.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(text_decrypted)</span><br><span class="line">    <span class="keyword">return</span> text_decrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="string">&#x27;adadqerfaa123456&#x27;</span></span><br><span class="line">    data = <span class="string">&quot;amdin&quot;</span></span><br><span class="line"></span><br><span class="line">    enctext = AES_Encrty(key,data)</span><br><span class="line">    <span class="built_in">print</span>(enctext)</span><br><span class="line">    AES_Decrypt(key,enctext)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/post/f1601c3e.html"/>
      <url>/post/f1601c3e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​        单利模式是一种常见的软件模式，该模式的主要目的是确保某一个类只有一个实例存在。通过单例模式创建的类在当前进程中只有一个实例对象。这里举两个例子，方便你更好的理解。</p><p>​比如：用于数据库连接，单例模式可以使用host、user、password等信息，一次认证并连接，然后多次调用这一条链接就可以了，简化了以前的多次调用多次认证。</p><p>​比如：用于日志模块，可以使用单例模式写好一个日志类模块后，并实例化一个logger，然后整个项目就调用这一个logger。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="1-导入模块实现"><a href="#1-导入模块实现" class="headerlink" title="1. 导入模块实现"></a>1. 导入模块实现</h2><p>​        python的模块导入就是一个天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。</p><p>test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br></pre></td></tr></table></figure><p>直接在其他文件中导入test.py文件中的对象，这个对象即是单例模式的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> a</span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> a <span class="keyword">as</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h2 id="2-new-方法实现"><a href="#2-new-方法实现" class="headerlink" title="2. __new__方法实现"></a>2. __new__方法实现</h2><p>​        当我们实例化一个对象时，是先执行了类的__new__方法（当没写这个方法时，默认调用object.__new__）实例化对象。最后再执行类的__init__方法，对这个对象进行初始化。</p><p><strong>注意：</strong></p><p>​1. 重写__new__方法时，一定要return super().__new__(cls)方法，否则python解释器得不到引用的分配空间，就不会调用对象的初始化。__new__是一个静态方法，在调用时需要主动传递cls函数。</p><p>​2. 使用__new__方法时，在&#x3D;&#x3D;多线程&#x3D;&#x3D;中可能会出现线程安全问题，当有多个线程同时去实例化对象时，就很可能同时判断他之前有没有实例化过，造成多次去实例化这个对象。所以需要使用互斥锁来解决这个问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="comment"># 设置一个类属性来判断这个类是否实例化过对象</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 如果没有实例化过就new一个新的，如果实例化过就直接返回原来的</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance == <span class="literal">None</span>:</span><br><span class="line">            cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">a = A()</span><br><span class="line">b = A()</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># &lt;__main__.A object at 0x7fab081fab90&gt;</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># &lt;__main__.A object at 0x7fab081fab90&gt;</span></span><br></pre></td></tr></table></figure><p>当然你有其他类去继承类A（）时，那么这个子类也是一个单例模式。</p><h2 id="3-使用函数装饰器实现"><a href="#3-使用函数装饰器实现" class="headerlink" title="3. 使用函数装饰器实现"></a>3. 使用函数装饰器实现</h2><p>函数装饰器实现：只要任意一个类使用该装饰器装饰，那么就会变成一个单例模式的类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_decorator</span>(<span class="params">cls</span>):</span><br><span class="line">    cls.instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 判断类是否有instance.属性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.instance:</span><br><span class="line">            <span class="comment"># 通过类创建象,并保存为instance,属性</span></span><br><span class="line">            cls.instance = cls(*args, **kwargs)</span><br><span class="line">        <span class="comment"># 返回灯象</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@a_decorator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = A()</span><br><span class="line">a2 = A()</span><br><span class="line"><span class="built_in">print</span>(a1) <span class="comment"># &lt;__main__.A object at 0x7f86581faf50&gt;</span></span><br><span class="line"><span class="built_in">print</span>(a2) <span class="comment"># &lt;__main__.A object at 0x7f86581faf50&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-使用类装饰器实现"><a href="#4-使用类装饰器实现" class="headerlink" title="4. 使用类装饰器实现"></a>4. 使用类装饰器实现</h2><p>类装饰器实现：只要任意一个类使用该装饰器装饰，那么就会变成一个单例模式的类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a_decorator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cls</span>):</span><br><span class="line">        self.cls = cls</span><br><span class="line">        self.cls.instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.cls.instance:</span><br><span class="line">            self.cls.instance = self.cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.cls.instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@a_decorator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1 = B()</span><br><span class="line">b2 = B()</span><br><span class="line"><span class="built_in">print</span>(b1) <span class="comment"># &lt;__main__.B object at 0x7fed70042850&gt;</span></span><br><span class="line"><span class="built_in">print</span>(b2) <span class="comment"># &lt;__main__.B object at 0x7fed70042850&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-使用metaclass元类实现（已省略）"><a href="#5-使用metaclass元类实现（已省略）" class="headerlink" title="5. 使用metaclass元类实现（已省略）"></a>5. 使用metaclass元类实现（已省略）</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu挂起唤醒后断网</title>
      <link href="/post/d1d6e9f7.html"/>
      <url>/post/d1d6e9f7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="一、ubuntu挂起唤醒后断网："><a href="#一、ubuntu挂起唤醒后断网：" class="headerlink" title="一、ubuntu挂起唤醒后断网："></a>一、ubuntu挂起唤醒后断网：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo service network-manager stop</span><br><span class="line">sudo rm /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line"></span><br><span class="line">sudo service network-manager start</span><br><span class="line"></span><br><span class="line">#把第四行的false改成true（managed=false改为：managed=true）注:也有可能在第五行</span><br><span class="line">sudo vim /etc/NetworkManager/NetworkManager.conf</span><br><span class="line"></span><br><span class="line">sudo service network-manager restert</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda表达式</title>
      <link href="/post/330a6169.html"/>
      <url>/post/330a6169.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-基础用法："><a href="#1-基础用法：" class="headerlink" title="1. 基础用法："></a>1. 基础用法：</h2><p>语法：lambda 参数：表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line"><span class="built_in">print</span>(data(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="2-列表推导式-lambda表达式"><a href="#2-列表推导式-lambda表达式" class="headerlink" title="2. 列表推导式 + lambda表达式"></a>2. 列表推导式 + lambda表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="keyword">lambda</span> :x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>]())  <span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 因为使用的是列表推导式，所以先取列表的第一个元素，列表里面的元素都是表达式。</span></span><br><span class="line"><span class="comment"># 因为lambda表达式不会形成对函数体内变量的记忆，只记录最后一个状态，所以列表里面的结果全都是最后一个值。</span></span><br><span class="line"><span class="comment"># 后面的()代表调用lambda表达式</span></span><br></pre></td></tr></table></figure><h4 id="2-2-解决lambda表达式只记录最后一个状态的问题"><a href="#2-2-解决lambda表达式只记录最后一个状态的问题" class="headerlink" title="2.2 解决lambda表达式只记录最后一个状态的问题"></a>2.2 解决lambda表达式只记录最后一个状态的问题</h4><p>注：只需要在lambda表达式传递参数的部分，将表达式部分的变量作为参数传入即可。即：x&#x3D;x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="keyword">lambda</span> x=x:x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>]())  <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><h2 id="3-省略参数用法"><a href="#3-省略参数用法" class="headerlink" title="3. 省略参数用法"></a>3. 省略参数用法</h2><p>语法：lambda :表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda表达式冒号前面的参数可以省略，适用于不需要传递参数的表达式</span></span><br><span class="line">data = <span class="keyword">lambda</span> :<span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(data()) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h2 id="4-综合2、3使用"><a href="#4-综合2、3使用" class="headerlink" title="4. 综合2、3使用"></a>4. 综合2、3使用</h2><p>第一种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="keyword">lambda</span> x:x+i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>](<span class="number">1</span>)) <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>](<span class="number">2</span>)) <span class="comment"># 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用()调用lambda表达式，并给参数x传递数值2</span></span><br><span class="line"><span class="built_in">print</span>([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> data]) <span class="comment"># [11, 11, 11, 11, 11, 11, 11, 11, 11, 11]</span></span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里为了使最终的结果达到预期，添加了j=j</span></span><br><span class="line">data = [<span class="keyword">lambda</span> x,j=j:x+j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>](<span class="number">1</span>)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>](<span class="number">2</span>)) <span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 利用()调用lambda表达式并给参数x传递数值2</span></span><br><span class="line"><span class="built_in">print</span>([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> data]) <span class="comment"># [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br></pre></td></tr></table></figure><h2 id="5-缩减if-else"><a href="#5-缩减if-else" class="headerlink" title="5. 缩减if else"></a>5. 缩减if else</h2><p>语法：lambda 参数：结果1 if 判断条件 else 结果2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="keyword">lambda</span> x:<span class="string">&quot;yes&quot;</span> <span class="keyword">if</span> x&gt;<span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="built_in">print</span>(data(<span class="number">2</span>)) <span class="comment"># yes</span></span><br></pre></td></tr></table></figure><h2 id="6-高阶函数"><a href="#6-高阶函数" class="headerlink" title="6. 高阶函数"></a>6. 高阶函数</h2><h4 id="map-函数"><a href="#map-函数" class="headerlink" title="map() 函数"></a>map() 函数</h4><p>迭代所有元素到lambda表达式</p><ul><li>Python 2.x 版本返回的是列表</li><li>Python 3.x 版本返回的是迭代器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">map</span>(<span class="keyword">lambda</span> x:x+<span class="number">1</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(data)) <span class="comment"># [2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h4 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce()函数"></a>reduce()函数</h4><p>先对数据中的第 1、2 个元素进行操作，将得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">data = reduce(<span class="keyword">lambda</span> x,y:x+y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment"># 15</span></span><br></pre></td></tr></table></figure><h4 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h4><p>对数据进行过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x%<span class="number">2</span>==<span class="number">0</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(data)) <span class="comment"># [0, 2, 4]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-匿名函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么会有 GIL？如何释放 GIL 实现并行？</title>
      <link href="/post/5589be31.html"/>
      <url>/post/5589be31.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>首先我们应该知道GIL是一个施加在解释器之上的互斥锁，用于防止本机多个线程同时执行字节码。那么对于线程的并行来说，全局解释器锁（GIL）是一个绕不开的话题。</p><p>换句话说 ，GIL 确保解释器在程序执行期间，同一时刻只会使用操作系统的一个线程。不管你的 CPU 是多少核，以及你开了多少个线程，但是同一时刻只会使用操作系统的一个线程、去调度一个 CPU。而且 GIL 不仅影响 Python 代码，也会影响 Python&#x2F;C API。</p><p>GIL 并不是 Python 语言的特性，它是 CPython 开发人员为了方便内存管理才加上去的。只不过解释器我们大部分用的都是 CPython，所以很多人认为 GIL 是 Python 语言本身的一个特性，但其实不是的。</p><p>Python 是一门语言，而 CPython 是对使用 Python 语言编写的源代码进行解释执行的一个解释器。而解释器不止 CPython 一种，还有 JPython，JPython 就没有GIL。因此 Python 语言本身是和 GIL 无关的，只不过我们平时在说 Python 的 GIL 的时候，指的都是 CPython 里面的 GIL，这一点要注意。</p><h4 id="一、首先我们来分析一下GIL为什么存在？（重点）"><a href="#一、首先我们来分析一下GIL为什么存在？（重点）" class="headerlink" title="一、首先我们来分析一下GIL为什么存在？（重点）"></a><font color="blue">一、首先我们来分析一下GIL为什么存在？</font>（重点）</h4><p>当删除一个变量的时候，他会执行对应的指令，其中第一步就是先将对象的引用计数减1；第二步判断引用计数是否为0，为0则进行销毁。</p><p>那么问题来了。。。<br>假设有两个线程A和B，内部都引用了某个变量 obj，此时 obj 指向的对象的引用计数为 2，然后让两个线程都执行 删除这个变量。</p><ol><li><p><font color="#A9248C"> 其中A线程先执行，A线程在执行完之后，会将对象的引用计数减一，但不幸的是，这个时候调度机制将 A 挂起了，唤醒了 B。而 B 也执行 del obj，但它比较幸运，将两步一块执行完了。</p></li><li><p>而由于之前 A 已经将引用计数减 1，所以 B 再减 1 之后会发现对象的引用计数为 0，从而执行了对象的销毁动作（tp_dealloc），内存被释放。</p></li><li><p>然后 A 又被唤醒了，此时开始执行第二个步骤，但由于 obj-&gt;ob_refcnt 已经被减少到 0，所以条件满足，那么 A 依旧会对 obj 指向的对象进行释放。但问题是这个对象所占的内存已经被释放了，所以 obj 此时就成了悬空指针。如果再对 obj 指向的对象进行释放，最终会引发什么结果，只有天知道，这也是臭名昭著的二次释放。</font></p></li></ol><p><font color="blue">所以 CPython 引入了 GIL，GIL 是解释器层面上的一把超级大锁，它是字节码级别的互斥锁。作用就是：在同时一刻，只让一个线程执行字节码，并且保证每一条字节码在执行的时候都不会被打断。</font></p><p>因此由于 GIL 的存在，会使得线程只有把当前的某条字节码指令执行完毕之后才有可能发生调度。所以无论是 A 还是 B，线程调度时，要么发生在 删除指令执行之前，要么发生在 删除指令执行完毕之后，但是不存在指令执行到一半的时候发生调度。</p><p>所以 GIL 才被称之为是字节码级别的互斥锁，它保护每条字节码指令只有在执行完毕之后才会发生线程调度。</p><p>回到上面那个 del obj 例子当中，由于引入了 GIL，所以就不存在我们之前说的：在 A 将引用计数减一之后，挂起 A、唤醒 B这一过程。因为A已经开始了删除变量 这条指令的执行，而在没执行完之前是不会发生线程调度的，所以此时不会出现悬空指针的问题。</p><p>而如果没有 GIL，那么即使是简单的引用计数，在计算上都有可能出问题。事实上，GIL 最初的目的就是为了解决引用计数的安全性问题。</p><p>因此 GIL 对于 Python 对象的内存管理来说是不可或缺的；但是还有一点需要注意，GIL 和 Python 语言本身没有什么关系，它只是官方在实现 CPython 时，为了方便管理内存所引入的一个实现。但是对于其它种类的 Python 解释器则不一定需要 GIL，比如 JPython。</p><h4 id="二、GIL-有没有可能被移除（了解）"><a href="#二、GIL-有没有可能被移除（了解）" class="headerlink" title="二、GIL 有没有可能被移除（了解）"></a><font color="blue">二、GIL 有没有可能被移除</font>（了解）</h4><p>因为对于现在的多核 CPU 来说，GIL 无疑是进行了限制。此时站在上帝视角的我们知道，因为 GIL 的存在使得同一时刻只有一个核被使用，所以对于纯计算的代码来说，理论上多线程和单线程是没有区别的。但由于多线程涉及上下文的切换，会额外有一些开销，反而还慢一些。</p><p>但是当去掉 GIL 的时候，发现多线程的效率相比之前确实提升了，但是单线程的效率只有原来的一半，这显然是不能接受的。因为把 GIL 去掉了，就意味着需要更细粒度的锁来解决共享数据的安全问题，这就会导致大量的加锁、解锁。而加锁、解锁对于操作系统来说是一个比较重量级的操作，所以 GIL 的移除是极其困难的。另外还有一个关键，就是当 GIL 被移除之后，会使得扩展模块的编写难度大大增加。因为 GIL 保护的不仅仅是 Python 解释器，还有 Python&#x2F;C API。像很多现有的 C 扩展，在很大程度上都依赖 GIL 提供的解决方案，<font color="blue">如果要移除 GIL，就需要重新解决这些库的线程安全性问题。</font>因此在 2022 年的今天，生态如此成熟的 Python，几乎是不可能摆脱 GIL 了。</p><h4 id="三、有了-GIL，在编写多线程代码的时候是不是就意味着不需要加锁了呢？（重点）"><a href="#三、有了-GIL，在编写多线程代码的时候是不是就意味着不需要加锁了呢？（重点）" class="headerlink" title="三、有了 GIL，在编写多线程代码的时候是不是就意味着不需要加锁了呢？（重点）"></a><font color="blue">三、有了 GIL，在编写多线程代码的时候是不是就意味着不需要加锁了呢？</font>（重点）</h4><p>答案显然不是的，因为 GIL 保护的是每条字节码不会被打断，而很多代码都是一行对应多条字节码，所以每行代码是可以被打断的。比如：a &#x3D; a + 1 这样一条语句，它对应4条字节码：LOAD_NAME, LOAD_CONST, BINARY_ADD, STORE_NAME。</p><p>假设此时 a &#x3D; 8，两个线程同时执行 a &#x3D; a + 1，线程 A 执行的时候已经将 a 和 1 压入运行时栈，栈里面的 a 指向的是 8。但还没有执行 BINARY_ADD 的时候，发生线程切换，轮到线程 B 执行，此时 B 得到的 a 显然还是指向 8，因为线程 A 还没有对变量 a 做加法操作。然后 B 比较幸运，它一次性将这 4 条字节码全部执行完了，所以 a 应该指向 9。</p><p>然后线程调度再切换回 A，此时会执行 BINARY_ADD，不过注意：栈里面的 a 目前指向的还是 8，所以加完之后还是 9。</p><p>因此本来 a 应该指向10，但是却指向 9，就是因为在执行的时候发生了线程调度。所以我们在编写多线程代码的时候还是需要加锁的，GIL 只是保证每条字节码执行的时候不会被打断，但是一行代码往往对应多条字节码，所以我们会通过 threading.Lock() 再加上一把锁。这样即便发生了线程调度，但由于我们在 Python 的层面上又加了一把锁，别的线程依旧无法执行，这样就保证了数据的安全。</p><h4 id="四、GIL-啥时候会被释放呢？（了解）"><a href="#四、GIL-啥时候会被释放呢？（了解）" class="headerlink" title="四、GIL 啥时候会被释放呢？（了解）"></a><font color="blue">四、GIL 啥时候会被释放呢？</font>（了解）</h4><ul><li><p>1）当遇见 io 阻塞的时候会释放，因为 io 阻塞是不耗费 CPU 的，所以此时虚拟机会把该线程的锁释放；</p></li><li><p>2）即便是耗费 CPU 的运算，也不会一直执行，会在执行一小段时间之后释放锁，为了保证其他线程都有机会执行，就类似于 CPU 时间片轮转的方式；</p></li></ul><h4 id="五、我们能不能手动释放-GIL-呢？（了解）"><a href="#五、我们能不能手动释放-GIL-呢？（了解）" class="headerlink" title="五、我们能不能手动释放 GIL 呢？（了解）"></a><font color="blue">五、我们能不能手动释放 GIL 呢？</font>（了解）</h4><p>在 Python 里面不可以，但在 Cython 里面是可以的。因为 GIL 是为了解决 Python 的内存管理而引入的，但如果是那些不需要和 Python 代码一起工作的纯 C 代码，那么是可以在没有 GIL 的情况下运行的。</p><p>因为 GIL 是字节码级别的互斥锁，显然这是在解释器解释执行字节码的时候所施加的。而且不仅是 GIL，还有 Python 的动态性，都是在解释字节码的时候由解释器所赐予的。而  Cython 代码经过编译之后直接指向了 C 一级的结构，所以它相当于绕过了解释执行这一步，因此也就是失去了相应动态特性（换来的是速度的提升）。那么同理，既然能绕过解释执行这一步，那么就意味着也能绕过 GIL 的限制，因为 GIL 也是在解释执行字节码的时候施加的。</p><p>因此当我们在 Cython 中创建了不绑定任何 Python 对象的 C 级结构时，也就是在处理 Cython 的 C-Only 部分时，可以将全局解释器锁给释放掉。换句话说，我们可以使用 Cython 绕过 GIL，实现基于线程的并行。</p><p>注意：GIL 是为了保护 Python 对象的内存管理而设置的，如果我们尝试释放 GIL，那么一定一定一定不能和 Python 对象发生任何的交互，必须是纯 C 的数据结构。</p><p>而为了能够释放 GIL，Cython 提供了两种机制：nogil 函数属性和 with nogil 上下文管理器。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-GIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程池</title>
      <link href="/post/72d78fc4.html"/>
      <url>/post/72d78fc4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;1111111111111111111<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;22222222222222222<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建进程池</span></span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">2</span>)</span><br><span class="line">    pool.apply_async(fun1,(<span class="string">&#x27;Python&#x27;</span>,))</span><br><span class="line">    pool.apply_async(fun2,(<span class="string">&#x27;JAVA&#x27;</span>,))</span><br><span class="line">    pool.apply_async(fun2,(<span class="string">&#x27;JAVA&#x27;</span>,))</span><br><span class="line">    <span class="comment"># pool.apply_async(fun2,args=&#x27;JAVA&#x27;,)</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1111111111111111111Python</span><br><span class="line">22222222222222222JAVA</span><br><span class="line">22222222222222222JAVA</span><br><span class="line">1111111111111111111Python</span><br><span class="line">22222222222222222JAVA</span><br><span class="line">22222222222222222JAVA</span><br><span class="line">1111111111111111111Python</span><br><span class="line">22222222222222222JAVA</span><br><span class="line">。。。一直循环</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-多进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多进程</title>
      <link href="/post/41cfdaed.html"/>
      <url>/post/41cfdaed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><strong><font size=5>区别</font></strong></p><ul><li>多线程：一个人吃饭、看电影、玩手机</li><li>多进程：一个人要搬很多砖，多来几个人帮他搬，就可以让他少搬点</li></ul><p>进程是资源的基本最小单位。线程是cpu调度的基本最小单位。<br>进程是系统独立调度核分配系统资源（CPU、内存）的基本单位，进程之间是相互独立的，每启动一个新的进程相当于把数据进行了一次克隆，子进程里的数据修改无法影响到主进程中的数据，不同子进程之间的数据也不能共享，这是多进程在使用中与多线程最明显的区别。</p><p><strong><font size=5>为何在Python里用多进程这么麻烦？</font></strong></p><p>因为Python的线程是操作系统线程，因此要有Python全局解释器锁。一个python解释器进程内有一条主线程，以及多条用户程序的执行线程。即使在多核CPU平台上，由于GIL的存在，所以禁止多线程的并行执行。</p><h1 id="导入模块："><a href="#导入模块：" class="headerlink" title="导入模块："></a>导入模块：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pipe</span><br><span class="line"><span class="keyword">import</span> queue</span><br></pre></td></tr></table></figure><h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><h3 id="实现方法一："><a href="#实现方法一：" class="headerlink" title="实现方法一："></a>实现方法一：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;测试<span class="subst">&#123;name&#125;</span>多进程&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    process_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t1 = Process(target=func,args=(<span class="string">&#x27;Python&#x27;</span>,))</span><br><span class="line">        process_list.append(t1)</span><br><span class="line">        t1.start()</span><br><span class="line">    <span class="keyword">for</span> t1 <span class="keyword">in</span> process_list:</span><br><span class="line">        t1.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结束测试&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">测试Python多进程</span><br><span class="line">测试Python多进程</span><br><span class="line">测试Python多进程</span><br><span class="line">测试Python多进程</span><br><span class="line">测试Python多进程</span><br><span class="line">结束测试</span><br></pre></td></tr></table></figure><h3 id="实现方法二（类继承）："><a href="#实现方法二（类继承）：" class="headerlink" title="实现方法二（类继承）："></a>实现方法二（类继承）：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyProcess</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyProcess,self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;测试<span class="subst">&#123;self.name&#125;</span>多进程&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    process_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t1 = MyProcess(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">        t1.start()</span><br><span class="line">        process_list.append(t1)</span><br><span class="line">    <span class="keyword">for</span> t1 <span class="keyword">in</span> process_list:</span><br><span class="line">        t1.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结束测试&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">测试Python多进程</span><br><span class="line">测试Python多进程</span><br><span class="line">测试Python多进程</span><br><span class="line">测试Python多进程</span><br><span class="line">测试Python多进程</span><br><span class="line">结束测试</span><br></pre></td></tr></table></figure><h1 id="多进程通信"><a href="#多进程通信" class="headerlink" title="多进程通信"></a>多进程通信</h1><p>简介：进程是系统独立调度核分配系统资源（CPU、内存）的基本单位，进程之间是相互独立的，每启动一个新的进程相当于把数据进行了一次克隆，子进程里的数据修改无法影响到主进程中的数据，不同子进程之间的数据也不能共享，这是多进程在使用中与多线程最明显的区别。当然python也提供了多种方法实现了多进程中间的通信和数据共享（可以修改一份数据）</p><h3 id="管道通信（默认双向通信）："><a href="#管道通信（默认双向通信）：" class="headerlink" title="管道通信（默认双向通信）："></a>管道通信（默认双向通信）：</h3><p>简介：顾名思义，管道Pipe 有两端，因而 <font color=red>main_conn, child_conn &#x3D; Pipe()</font> ，管道的两端可以放在主进程或子进程内，我在实验中没发现主管道口main_conn 和子管道口child_conn 的区别。两端可以同时放进去东西，放进去的对象都经过了深拷贝：用 <font color=red>conn.send()</font>在一端放入，用 <font color=red>conn.recv()</font> 另一端取出，管道的两端可以同时给多个进程。conn是 connect的缩写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">conn,p_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(p_id)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># 从管道一端放入</span></span><br><span class="line">    conn.send(<span class="string">f&#x27;<span class="subst">&#123;p_id&#125;</span>_send1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(p_id, <span class="string">&#x27;send1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    conn.send(<span class="string">f&#x27;<span class="subst">&#123;p_id&#125;</span>_send2&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(p_id, <span class="string">&#x27;send2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># 从管道另一端取出</span></span><br><span class="line">    rec = conn.recv()</span><br><span class="line">    <span class="built_in">print</span>(p_id, <span class="string">&#x27;recv&#x27;</span>,rec)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    rec = conn.recv()</span><br><span class="line">    <span class="built_in">print</span>(p_id, <span class="string">&#x27;recv&#x27;</span>,rec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">conn,p_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(p_id)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    conn.send(p_id)</span><br><span class="line">    <span class="built_in">print</span>(p_id,<span class="string">&quot;send&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    rec = conn.recv()</span><br><span class="line">    <span class="built_in">print</span>(p_id,<span class="string">&#x27;recv&#x27;</span>,rec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_pipe</span>():</span><br><span class="line">    conn1,conn2 = Pipe()</span><br><span class="line">    process_list = []</span><br><span class="line">    t1 = Process(target=func1,args=(conn1,<span class="string">&#x27;T1&#x27;</span>))</span><br><span class="line">    process_list.append(t1)</span><br><span class="line">    t2 = Process(target=func2,args=(conn2,<span class="string">&#x27;T2&#x27;</span>))</span><br><span class="line">    process_list.append(t2)</span><br><span class="line">    t3 = Process(target=func2,args=(conn2,<span class="string">&#x27;T3&#x27;</span>))</span><br><span class="line">    process_list.append(t3)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> process_list:</span><br><span class="line">        t.start()</span><br><span class="line">    conn1.send(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> process_list:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run_pipe()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">T1</span><br><span class="line">T2</span><br><span class="line">T3</span><br><span class="line">T1 send1</span><br><span class="line">T2 send</span><br><span class="line">T3 send</span><br><span class="line">T1 send2</span><br><span class="line">T2 recv <span class="number">1</span></span><br><span class="line">T3 recv T1_send1</span><br><span class="line">T1 recv T2</span><br><span class="line">T1 recv T3</span><br></pre></td></tr></table></figure><h3 id="管道通信（单向通信）"><a href="#管道通信（单向通信）" class="headerlink" title="管道通信（单向通信）"></a>管道通信（单向通信）</h3><p>简介：Pipe还有 <font color=red>duplex</font>参数 和 <font color=red>poll() </font>方法 需要了解。默认情况下 duplex&#x3D;True，若不开启双向管道，需要指定duplex&#x3D;False，那么传数据的方向只能 conn1 ← conn2 。conn2.poll()&#x3D;&#x3D;True 意味着可以马上使用 conn2.recv() 拿到传过来的数据。conn2.poll(n) 会让它等待n秒钟再进行查询。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管道的双向通信</span></span><br><span class="line">conn1,conn2 = Pipe()</span><br><span class="line">conn1.send(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(conn1.poll())</span><br><span class="line"><span class="built_in">print</span>(conn2.poll())</span><br><span class="line"><span class="built_in">print</span>(conn2.recv(),conn2.poll(<span class="number">2</span>))</span><br><span class="line">conn2.send(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(conn1.poll())</span><br><span class="line"><span class="built_in">print</span>(conn2.poll())</span><br><span class="line"><span class="built_in">print</span>(conn1.recv(),conn1.poll(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不开通，只能从conn2(只能写入) --&gt; conn1(只能读取)</span></span><br><span class="line">conn3,conn4 = Pipe(duplex=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># conn3.send(&quot;Hello&quot;) # 无法写入数据</span></span><br><span class="line"><span class="comment"># print(conn3.poll())</span></span><br><span class="line"><span class="comment"># print(conn4.poll())</span></span><br><span class="line"><span class="comment"># print(conn4.recv(),conn4.poll(2))</span></span><br><span class="line">conn4.send(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(conn3.poll())</span><br><span class="line"><span class="comment"># print(conn4.poll()) # 无法读取数据</span></span><br><span class="line"><span class="built_in">print</span>(conn3.recv(),conn3.poll(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">Hello <span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">你好 <span class="literal">False</span></span><br><span class="line">****************************************************************************************************</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">你好 <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="队列通信"><a href="#队列通信" class="headerlink" title="队列通信"></a>队列通信</h3><p>简介：队列Queue 的功能与前面的管道Pipe非常相似：无论主进程或子进程，都能访问到队列，放进去的对象都经过了深拷贝。不同的是：管道Pipe只有两个断开，而队列Queue 有基本的队列属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">q</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;q.get()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_queue</span>():</span><br><span class="line">    q.put(<span class="string">&#x27;消息 1&#x27;</span>)</span><br><span class="line">    q.put(<span class="string">&#x27;消息 2&#x27;</span>)</span><br><span class="line">    q.put(<span class="string">&#x27;消息 3&#x27;</span>)</span><br><span class="line">    q.put(<span class="string">&#x27;消息 4&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(q.empty())</span><br><span class="line">    <span class="built_in">print</span>(q.qsize())</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br><span class="line">    <span class="built_in">print</span>(q.qsize())</span><br><span class="line"></span><br><span class="line">    process = [Process(target=func,args=(q,)),</span><br><span class="line">               Process(target=func,args=(q,)),]</span><br><span class="line">    [p.start() <span class="keyword">for</span> p <span class="keyword">in</span> process]</span><br><span class="line">    [p.join() <span class="keyword">for</span> p <span class="keyword">in</span> process]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = queue.Queue(maxsize=<span class="number">4</span>)</span><br><span class="line">    run_queue()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">4</span><br><span class="line">消息 1</span><br><span class="line">消息 2</span><br><span class="line">2</span><br><span class="line">消息 3</span><br><span class="line">消息 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-多进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/post/2f57a694.html"/>
      <url>/post/2f57a694.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="匹配符"><a href="#匹配符" class="headerlink" title="匹配符"></a>匹配符</h1><p>这里我们先来认识一下匹配符</p><table><thead><tr><th>字符</th><th>功能</th><th>位置</th></tr></thead><tbody><tr><td>.</td><td>匹配任意1个字符（除了\n）</td><td></td></tr><tr><td>[ ]</td><td>匹配[ ]中列举的字符</td><td></td></tr><tr><td>\d</td><td>匹配数字，即0-9</td><td>可以写在字符集[…]中</td></tr><tr><td>\D</td><td>匹配⾮数字，即不是数字</td><td>可以写在字符集[…]中</td></tr><tr><td>\s</td><td>匹配空⽩，即空格，tab键</td><td>可以写在字符集[…]中</td></tr><tr><td>\S</td><td>匹配⾮空⽩字符</td><td>可以写在字符集[…]中</td></tr><tr><td>\w</td><td>匹配单词字符，即a-z、A-Z、0-9、_</td><td>可以写在字符集[…]中</td></tr><tr><td>\W</td><td>匹配⾮单词字符</td><td>可以写在字符集[…]中</td></tr><tr><td>[…]</td><td>匹配…以内的所有字符，即[abc]、[a-c]</td><td></td></tr><tr><td>[^…]</td><td>匹配…以内的相反的字符。[^abc]：匹配除abc以外的字符</td><td></td></tr><tr><td>*</td><td>匹配前⼀个字符出现0次或者⽆限次，即可有可⽆用在字符或(…)之后abc*abccc</td><td>用在字符或(…)之后</td></tr><tr><td>+</td><td>匹配前⼀个字符出现1次或者⽆限次，即⾄少有1次用在字符或(…)之后abc+abccc</td><td>用在字符或(…)之后</td></tr><tr><td>?</td><td>匹配前⼀个字符出现1次或者0次，即要么有1次，要么没有用在字符或(…)之后abc?ab,abc</td><td>用在字符或(…)之后</td></tr><tr><td>{m}</td><td>匹配前⼀个字符出现m次用在字符或(…)之后ab{2}cabbc</td><td>用在字符或(…)之后</td></tr><tr><td>{m,n}</td><td>匹配前⼀个字符出现从m到n次，若省略m，则匹配0到n次，若省略n，则匹配m到无限次用在字符或(…)之后ab{1,2}cabc,abbc</td><td>用在字符或(…)之后</td></tr><tr><td>^</td><td>匹配字符串开头</td><td></td></tr><tr><td>$</td><td>匹配字符串结尾</td><td></td></tr><tr><td>|</td><td>匹配左右任意⼀个表达式</td><td></td></tr><tr><td>(ab)</td><td>将括号中字符作为⼀个分组</td><td></td></tr><tr><td>\num</td><td>引⽤分组num匹配到的字符串</td><td></td></tr><tr><td>(?P<name>)</td><td>分组起别名，匹配到的子串组在外部是通过定义的 name 来获取的</td><td></td></tr><tr><td>(?P&#x3D;name)</td><td>引⽤别名为name分组匹配到的字符串</td><td></td></tr></tbody></table><h1 id="re-match函数"><a href="#re-match函数" class="headerlink" title="re.match函数"></a>re.match函数</h1><p>语法：re.match(正则表达式, 字符串)</p><p>从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match就直接返回None</p><h1 id="re-compile-函数"><a href="#re-compile-函数" class="headerlink" title="re.compile 函数"></a>re.compile 函数</h1><p>语法：prog &#x3D; re.compile(pattern)<br>      result &#x3D; prog.match(string)</p><p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p><h1 id="re-search函数"><a href="#re-search函数" class="headerlink" title="re.search函数"></a>re.search函数</h1><p>语法：ret &#x3D; re.search(正则表达式, 字符串)</p><p>re.search 扫描整个字符串并返回第一个成功的匹配，如果没有匹配，就返回一个 None。</p><p>re.match与re.search的区别：re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配</p><h1 id="re-findall函数"><a href="#re-findall函数" class="headerlink" title="re.findall函数"></a>re.findall函数</h1><p>语法： re.findall(正则表达式，字符串)</p><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。注意： match 和 search 是匹配一次 findall 匹配所有。</p><h1 id="re-finditer函数"><a href="#re-finditer函数" class="headerlink" title="re.finditer函数"></a>re.finditer函数</h1><p>语法：re.finditer(正则表达式，字符串)</p><p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p><h1 id="re-sub函数"><a href="#re-sub函数" class="headerlink" title="re.sub函数"></a>re.sub函数</h1><p>语法：re.sub(正则表达式, 替换内容, 字符串)</p><p>sub是substitute的所写，表示替换，将匹配到的数据进⾏替换。</p><h1 id="re-subn函数"><a href="#re-subn函数" class="headerlink" title="re.subn函数"></a>re.subn函数</h1><p>语法：pattern &#x3D; re.compile(正则表达式)<br>re.subn(pattern, r’\2（正则表达式中其中一组） \1’, 字符串)</p><p>行为与sub()相同，但是返回一个元组 (字符串, 替换次数)。</p><h1 id="re-split函数"><a href="#re-split函数" class="headerlink" title="re.split函数"></a>re.split函数</h1><p>语法：re.split(正则表达式,字符串)</p><p>根据匹配进⾏切割字符串，并返回⼀个列表。</p><h1 id="贪婪和⾮贪婪"><a href="#贪婪和⾮贪婪" class="headerlink" title="贪婪和⾮贪婪"></a>贪婪和⾮贪婪</h1><p>正则表达式”ab<em>”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab</em>?”，将找到”a”。</p><p>在”*”,”?”,”+”,”{m,n}”后⾯加上？，使贪婪变成⾮贪婪。</p><h1 id="r的作⽤"><a href="#r的作⽤" class="headerlink" title="r的作⽤"></a>r的作⽤</h1><p>与大多数编程语言相同，正则表达式里使用”\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\”：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，Python中字符串前⾯加上 r 表示原⽣字符串。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;itcast.cn&quot;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;itcast&quot;</span>,data)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># &lt;re.Match object; span=(0, 6), match=&#x27;itcast&#x27;&gt;</span></span><br><span class="line">result = result.group()</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># itcast</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># . 代表任意字符</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;M&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># M</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;t.o&quot;</span>,<span class="string">&quot;too&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># too</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配一个字符串中是否有同样的字符开头</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;h&quot;</span>,<span class="string">&quot;hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># h</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;H&quot;</span>,<span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># H</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [] 匹配一个字符串开头是否有[]中包含的字符</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[hH]ello Python&quot;</span>,<span class="string">&quot;Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># Hello Python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0-9的多种写法</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[0123456789]Hello Python&quot;</span>,<span class="string">&quot;7Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 7Hello Python</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[0-9]Hello Python&quot;</span>,<span class="string">&quot;8Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 8Hello Python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0-3和5-9</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[0-35-9]Hello Python&quot;</span>,<span class="string">&quot;9Hello Python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 9Hello Python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \d 匹配数字</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;嫦娥\d号&quot;</span>,<span class="string">&quot;嫦娥2号&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 嫦娥2号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配一个字符串第一个字母大写，其他为小些且可有可无</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;M&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># M</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;MnnM&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># Mnn</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;Anconda&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># Anconda</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配变量名是否有效</span></span><br><span class="line">names = [<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;2_name&quot;</span>,<span class="string">&quot;__name__&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    result = re.<span class="keyword">match</span>(<span class="string">&quot;[a-zA-Z_]+\w*&quot;</span>,name)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;变量名 %s 符合要求&quot;</span>%result.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;变量名 %s 非法&quot;</span>%name)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">变量名 name1 符合要求</span></span><br><span class="line"><span class="string">变量名 _name 符合要求</span></span><br><span class="line"><span class="string">变量名 2_name 非法</span></span><br><span class="line"><span class="string">变量名 __name__ 符合要求</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配出0-99个数字</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[1-9]?[0-9]&quot;</span>,<span class="string">&quot;7&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 7</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[1-9]?\d&quot;</span>,<span class="string">&quot;77&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 77</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0-9开头 数字结尾的字符串</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[0-9]\d$&quot;</span>,<span class="string">&quot;09&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 09</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配6个单词字母</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;\w&#123;6&#125;&quot;</span>,<span class="string">&quot;1sqd12_qwe&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 1sqd12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配163.com邮箱</span></span><br><span class="line">email_list = [<span class="string">&quot;xiaoWang@163.com&quot;</span>, <span class="string">&quot;xiaoWang@163.comheihei&quot;</span>, <span class="string">&quot;.com.xiaowang@qq.com&quot;</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xiaoWang@163.com 是符合规定的邮箱格式，匹配后的结果是：xiaoWang@163.com</span></span><br><span class="line"><span class="string">xiaoWang@163.comheihei 不符合要求</span></span><br><span class="line"><span class="string">.com.xiaowang@qq.com 不符合要求</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> email <span class="keyword">in</span> email_list:</span><br><span class="line">    ret = re.<span class="keyword">match</span>(<span class="string">&quot;\w&#123;4,20&#125;@163.com$&quot;</span>,email)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 是符合规定的邮箱格式，匹配后的结果是：%s&quot;</span>%(email,ret.group()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 不符合要求&quot;</span>%email)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配左右任意一个表达式</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[1-9]?\d$|100&quot;</span>,<span class="string">&quot;78&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 78</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;[2-9]?\d$|100&quot;</span>,<span class="string">&quot;100&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将()括号中字符作为一个分组</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;\w&#123;4,20&#125;@163.com$&quot;</span>,<span class="string">&quot;test@163.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># test@163.com</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;\w&#123;4,20&#125;@(163|126|qq).com&quot;</span>,<span class="string">&quot;test@126.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># test@126.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不是以4、7结尾的手机号码</span></span><br><span class="line">tels = [<span class="string">&quot;13100001234&quot;</span>, <span class="string">&quot;18912344321&quot;</span>, <span class="string">&quot;10086&quot;</span>, <span class="string">&quot;18800007777&quot;</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">13100001234 不是想要的手机号</span></span><br><span class="line"><span class="string">18912344321</span></span><br><span class="line"><span class="string">10086 不是想要的手机号</span></span><br><span class="line"><span class="string">18800007777 不是想要的手机号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> tel <span class="keyword">in</span> tels:</span><br><span class="line">    result = re.<span class="keyword">match</span>(<span class="string">&quot;1\d&#123;9&#125;[0-35-68-9]&quot;</span>,tel)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 不是想要的手机号&quot;</span> % tel)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取区号和电话号码</span></span><br><span class="line"><span class="comment"># [^...] 除了...以外的所有字符串</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&quot;([^-]*)-(\d+)&quot;</span>,<span class="string">&quot;010-12345678&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 010-12345678</span></span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">1</span>)) <span class="comment"># 010</span></span><br><span class="line"><span class="built_in">print</span>(result.group(<span class="number">2</span>)) <span class="comment"># 12345678</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">r&quot;&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;&quot;</span>,<span class="string">&quot;&lt;html&gt;hh&lt;/html&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># &lt;html&gt;hh&lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配出 &lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">r&quot;&lt;(\w+)&gt;&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1&gt;&quot;</span>,<span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># &lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">r&quot;&lt;(?P&lt;name1&gt;\w*)&gt;&lt;(?P&lt;name2&gt;\w*)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;&quot;</span>,<span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># &lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parttern = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+&quot;</span>)</span><br><span class="line">m = parttern.<span class="keyword">match</span>(<span class="string">&quot;one12twothree34four&quot;</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment"># 字符串 查找起始位（按字符串下标计算）  查找结束位</span></span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">0</span>)) <span class="comment"># 匹配到的数值 # 12</span></span><br><span class="line"><span class="built_in">print</span>(m.start()) <span class="comment"># 查找起始位 # 3</span></span><br><span class="line"><span class="built_in">print</span>(m.end()) <span class="comment"># 查找结束位 # 5</span></span><br><span class="line"><span class="built_in">print</span>(m.span()) <span class="comment"># 起始 末尾下标的集合 # (3, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># search 扫描整个字符串并返回一个匹配成功的，如果没有匹配成功，则返回None</span></span><br><span class="line">result = re.search(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;阅读次数为：9999&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result.group()) <span class="comment"># 9999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># findall 扫描整个字符串，没匹配到一个符合的都将会添加一次到一个列表，再扫描完之后返回，如果没有匹配成功的返回空列表</span></span><br><span class="line">result = re.findall(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;python = 3.7.11&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># [&#x27;3&#x27;, &#x27;7&#x27;, &#x27;11&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># finditer 和findall相似，不过finditer扫描完成后返回的是一个迭代器</span></span><br><span class="line">result = re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;123aeg34tsdf23&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">34</span></span><br><span class="line"><span class="string">23</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub是substitute的缩写，表示替换，将匹配到的数据进行替换</span></span><br><span class="line">result = re.sub(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;998&quot;</span>,<span class="string">&quot;python=997&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># python=998</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sub 第二种用法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">temp</span>):</span><br><span class="line">    strNum = temp.group()</span><br><span class="line">    num = <span class="built_in">int</span>(strNum) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line">result = re.sub(<span class="string">r&quot;\d+&quot;</span>,add,<span class="string">&quot;python=999&quot;</span>) <span class="comment"># sub 会将匹配到的数据传入add函数，执行后返回</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># python=1000</span></span><br><span class="line">result = re.sub(<span class="string">r&quot;\d+&quot;</span>,add,<span class="string">&quot;python=99&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># python=100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># subn 与sub相似，不过返回的是一个元祖（字符串，替换次数）</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;(\w+) (\w+)&quot;</span>)</span><br><span class="line">s = <span class="string">&quot;I say, hello world!&quot;</span></span><br><span class="line">result = re.subn(pattern,<span class="string">r&#x27;\2 \1&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># (&#x27;say I, world hello!&#x27;, 2)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> m.group(<span class="number">1</span>).title() + <span class="string">&quot; &quot;</span> + m.group(<span class="number">2</span>).title()</span><br><span class="line">res = re.subn(pattern,func,s)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># (&#x27;I Say, Hello World!&#x27;, 2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># split：根据匹配进行切割字符串，并返回一个列表</span></span><br><span class="line">result = re.split(<span class="string">r&quot;:| &quot;</span>,<span class="string">&quot;info:xiaoZhang 33 shandong&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># [&#x27;info&#x27;, &#x27;xiaoZhang&#x27;, &#x27;33&#x27;, &#x27;shandong&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 贪婪非贪婪</span></span><br><span class="line">s=<span class="string">&quot;This is a number 234-235-22-423&quot;</span></span><br><span class="line">r = re.<span class="keyword">match</span>(<span class="string">&quot;.+(\d+-\d+-\d+-\d+)&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(r.group(<span class="number">1</span>)) <span class="comment"># 4-235-22-423</span></span><br><span class="line">r = re.<span class="keyword">match</span>(<span class="string">&quot;.+?(\d+-\d+-\d+-\d+)&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(r.group()) <span class="comment"># This is a number 234-235-22-423</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制转换</title>
      <link href="/post/7dc91154.html"/>
      <url>/post/7dc91154.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>进制就是进位制。进行加法运算时逢X进一，进行减法运算时借一当X，这就是X进制，这种进制也就包含X个数字，基数为X。例如：十进制有0～9共是10个数字，基数为10，在加减法运算中，逢十进一，借一当十。</p><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>二进制是计算技术中广泛采用的一种数制。二进制数据使用0和1两个数码来表示的数。它的基数位2，进行加法运算时是“逢二进一”，进行减法运算时是“借一当二”。当前计算机系统使用的基本上是二进制系统，数据在计算机中主要是以补码的形式存储的。计算机中的二进制则是一个非常微小的开关，用“开”来表示1，“关”来表示0。</p><table><thead><tr><th>定义</th><th>组成</th><th>规则</th><th>表现形式</th></tr></thead><tbody><tr><td>计算机中数据的一种表示方法</td><td>0，1</td><td>逢二进一、借一当二</td><td>0001</td></tr></tbody></table><h1 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h1><p>十进制是我们生活中，使用最频繁的一种进制，我们从幼儿园就开始学十进制。</p><table><thead><tr><th>定义</th><th>组成</th><th>规则</th><th>表现形式</th></tr></thead><tbody><tr><td>计算机中数据的一种表示方法</td><td>0-9</td><td>逢十进一、借一当十</td><td>1（不能以0开头）</td></tr></tbody></table><p>转十六进制：十进制的整数部分“除以16取余”，十进制数的小数部分“乘16取整”，进行转换</p><h1 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h1><p>十六进制是由0-9，A-F共16个数字组成，字母不区分大小写。用A来表示10，B表示11，C表示12，D表示13，E表示14，F表示15，因此有 0~F 。基数为16，加法运算时逢十六进一，减法运算时借一当十六。</p><table><thead><tr><th>定义</th><th>组成</th><th>规则</th><th>表现形式</th></tr></thead><tbody><tr><td>计算机中数据的一种表示方法</td><td>0-9，A-F</td><td>逢十六进一，借一当十六</td><td>0（开头以0x开始）</td></tr></tbody></table><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><p>下面为python进制转换的其中一种方法：</p><table><thead><tr><th align="center">⬇</th><th align="center">2进制</th><th align="center">8进制</th><th align="center">10进制</th><th align="center">16进制</th></tr></thead><tbody><tr><td align="center">2进制</td><td align="center">——</td><td align="center">bin(int(x,8))</td><td align="center">bin(x)</td><td align="center">bin(int(x,16))</td></tr><tr><td align="center">8进制</td><td align="center">oct(int(x,2))</td><td align="center">——</td><td align="center">oct(x)</td><td align="center">oct(int(x,16))</td></tr><tr><td align="center">10进制</td><td align="center">int(x,2)</td><td align="center">int(x,8)</td><td align="center">——</td><td align="center">int(x,16)</td></tr><tr><td align="center">16进制</td><td align="center">hex(int(x,2))</td><td align="center">hex(int(x,8))</td><td align="center">hex(x)</td><td align="center">——</td></tr></tbody></table><p><img src="https://s1.ax1x.com/2022/07/27/vpKLdI.png" alt="vpKLdI.png"></p><p><font size=3><strong>原理：</strong></font>先将读入的字符串转为十进制，再由十进制进行相关的转换。</p><p><font size=3><strong>注意：</strong></font>bin()、oct()、hex()的返回值均为字符串，且分别带有0b（2进制）、0o（8进制）、0x（16进制）前缀。&#x3D;&#x3D;故后面在读取的时候需要舍去前缀&#x3D;&#x3D;。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h3 id="二进制转换："><a href="#二进制转换：" class="headerlink" title="二进制转换："></a>二进制转换：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;1011100&quot;</span></span><br><span class="line"><span class="comment"># 二进制转八进制</span></span><br><span class="line">b = <span class="built_in">oct</span>(<span class="built_in">int</span>(a,<span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="comment"># [2:]从第二位数开始读起</span></span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 134</span></span><br><span class="line"><span class="comment"># 二进制转十进制</span></span><br><span class="line">b = <span class="built_in">int</span>(a,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 92</span></span><br><span class="line"><span class="comment"># 二进制转十六进制</span></span><br><span class="line">b = <span class="built_in">hex</span>(<span class="built_in">int</span>(a,<span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 5c</span></span><br></pre></td></tr></table></figure><h3 id="十进制转换："><a href="#十进制转换：" class="headerlink" title="十进制转换："></a>十进制转换：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;92&quot;</span></span><br><span class="line"><span class="comment"># 十进制转二进制</span></span><br><span class="line">b = <span class="built_in">bin</span>(<span class="built_in">int</span>(a,<span class="number">10</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="comment"># 加上[2:]从第二位数开始读起</span></span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 1011100</span></span><br><span class="line"><span class="comment"># 十进制转八进制</span></span><br><span class="line">b = <span class="built_in">oct</span>(<span class="built_in">int</span>(a,<span class="number">10</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 134</span></span><br><span class="line"><span class="comment"># 十进制转十六进制</span></span><br><span class="line">b = <span class="built_in">hex</span>(<span class="built_in">int</span>(a,<span class="number">10</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 5c</span></span><br></pre></td></tr></table></figure><h3 id="十六进制转换："><a href="#十六进制转换：" class="headerlink" title="十六进制转换："></a>十六进制转换：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;FF&quot;</span></span><br><span class="line"><span class="comment"># 十六进制转二进制</span></span><br><span class="line">b = <span class="built_in">bin</span>(<span class="built_in">int</span>(a,<span class="number">16</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="comment"># 因为上文提过bin函数带有两位数的前缀，故加上[2:]舍去前缀</span></span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 11111111</span></span><br><span class="line"><span class="comment"># 十六进制转八进制</span></span><br><span class="line">b = <span class="built_in">oct</span>(<span class="built_in">int</span>(a,<span class="number">16</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 377</span></span><br><span class="line"><span class="comment"># 十六进制转十进制</span></span><br><span class="line">b = <span class="built_in">int</span>(a,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment"># 255</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习--将十六进制转为十进制后统计数据</title>
      <link href="/post/4a12baf8.html"/>
      <url>/post/4a12baf8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="需求：需求文档链接🔗"><a href="#需求：需求文档链接🔗" class="headerlink" title="需求：需求文档链接🔗"></a>需求：<a href="https://www.aliyundrive.com/s/zD8LLHzRNrz">需求文档链接🔗</a></h3><p><font size=4>大概就是将十进制文件内的信息，根据头部拆分成多条数据，每条数据的 某几位字节 分别代表不同的数据信息，需要我们把这一部分数据信息转为十进制，进行统计</font></p><h3 id="数据："><a href="#数据：" class="headerlink" title="数据："></a>数据：</h3><p>使用的需求文档的数据</p><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">file_path</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(file_path)</span><br><span class="line">    num_dict = &#123;&#125;</span><br><span class="line">    displacement_dict = &#123;&#125;</span><br><span class="line">    c_date_dict = &#123;&#125;</span><br><span class="line">    speed_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        head = f.read(<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="string">&quot;FF FF FE&quot;</span>:</span><br><span class="line">            <span class="comment"># 提取数据包的长度</span></span><br><span class="line">            length = <span class="built_in">int</span>(f.read(<span class="number">4</span>),<span class="number">16</span>)</span><br><span class="line">            f.read(<span class="number">9</span>)</span><br><span class="line">            g_data = f.read((length-<span class="number">4</span>)*<span class="number">3</span>)</span><br><span class="line">            <span class="comment"># 将g_data数据包内的所有数据分开</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(g_data)//<span class="number">21</span>):</span><br><span class="line">                data = g_data[<span class="number">21</span>*j:<span class="number">21</span>*(j+<span class="number">1</span>)]</span><br><span class="line">                <span class="comment"># 航机号</span></span><br><span class="line">                <span class="built_in">id</span> = <span class="built_in">int</span>(data[:<span class="number">3</span>],<span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">id</span> <span class="keyword">not</span> <span class="keyword">in</span> num_dict.keys():</span><br><span class="line">                    num_dict[<span class="built_in">id</span>] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    num_dict[<span class="built_in">id</span>] += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 位移值</span></span><br><span class="line">                sub_displacement = data[<span class="number">6</span>:<span class="number">8</span>] + data[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">                displacement = <span class="built_in">int</span>(sub_displacement, <span class="number">16</span>)</span><br><span class="line">                <span class="comment"># 统计每个航机号位移类型及次数</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">id</span> <span class="keyword">not</span> <span class="keyword">in</span> displacement_dict.keys():</span><br><span class="line">                    displacement_dict[<span class="built_in">id</span>] = &#123;&#125;</span><br><span class="line">                    <span class="keyword">if</span> displacement <span class="keyword">not</span> <span class="keyword">in</span> displacement_dict[<span class="built_in">id</span>].keys():</span><br><span class="line">                        displacement_dict[<span class="built_in">id</span>][displacement] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> displacement <span class="keyword">not</span> <span class="keyword">in</span> displacement_dict[<span class="built_in">id</span>].keys():</span><br><span class="line">                        displacement_dict[<span class="built_in">id</span>][displacement] = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        displacement_dict[<span class="built_in">id</span>][displacement] += <span class="number">1</span></span><br><span class="line">                <span class="comment"># print(displacement)</span></span><br><span class="line">                <span class="comment"># 时间</span></span><br><span class="line">                sub_date = data[<span class="number">12</span>:<span class="number">14</span>] + data[<span class="number">9</span>:<span class="number">11</span>]</span><br><span class="line">                c_date = <span class="built_in">int</span>(sub_date,<span class="number">16</span>)</span><br><span class="line">                <span class="comment"># print(c_date)</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">id</span> <span class="keyword">not</span> <span class="keyword">in</span> c_date_dict.keys():</span><br><span class="line">                    c_date_dict[<span class="built_in">id</span>] = &#123;&#125;</span><br><span class="line">                    <span class="keyword">if</span> c_date <span class="keyword">not</span> <span class="keyword">in</span> c_date_dict[<span class="built_in">id</span>].keys():</span><br><span class="line">                        c_date_dict[<span class="built_in">id</span>][c_date] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> c_date <span class="keyword">not</span> <span class="keyword">in</span> c_date_dict[<span class="built_in">id</span>].keys():</span><br><span class="line">                        c_date_dict[<span class="built_in">id</span>][c_date] = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        c_date_dict[<span class="built_in">id</span>][c_date] += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 速度</span></span><br><span class="line">                sub_speed = data[<span class="number">18</span>:<span class="number">20</span>]+data[<span class="number">15</span>:<span class="number">17</span>]</span><br><span class="line">                speed = <span class="built_in">int</span>(sub_speed,<span class="number">16</span>)</span><br><span class="line">                <span class="comment"># print(speed)</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">id</span> <span class="keyword">not</span> <span class="keyword">in</span> speed_dict.keys():</span><br><span class="line">                    speed_dict[<span class="built_in">id</span>] = &#123;&#125;</span><br><span class="line">                    <span class="keyword">if</span> speed <span class="keyword">not</span> <span class="keyword">in</span> speed_dict[<span class="built_in">id</span>].keys():</span><br><span class="line">                        speed_dict[<span class="built_in">id</span>][speed] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> speed <span class="keyword">not</span> <span class="keyword">in</span> speed_dict[<span class="built_in">id</span>].keys():</span><br><span class="line">                        speed_dict[<span class="built_in">id</span>][speed] = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        speed_dict[<span class="built_in">id</span>][speed] += <span class="number">1</span></span><br><span class="line">            <span class="comment"># CRC 最后一个字节</span></span><br><span class="line">            CRC = f.read(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            length = <span class="built_in">int</span>(f.read(<span class="number">4</span>), <span class="number">16</span>)</span><br><span class="line">            f.read(<span class="number">9</span>)</span><br><span class="line">            f.read((length - <span class="number">4</span>) * <span class="number">3</span>)</span><br><span class="line">            f.read(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 关闭文件</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将统计数据替换为次数</span></span><br><span class="line">    displacement_msg = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> dis <span class="keyword">in</span> displacement_dict.items():</span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> dis[<span class="number">1</span>].items():</span><br><span class="line">            <span class="keyword">if</span> dis[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> displacement_msg.keys():</span><br><span class="line">                displacement_msg[dis[<span class="number">0</span>]] = <span class="built_in">str</span>(<span class="string">&quot;%s %d次&quot;</span>)%(d[<span class="number">0</span>],d[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                displacement_msg[dis[<span class="number">0</span>]] += <span class="string">&quot;,&quot;</span> + <span class="built_in">str</span>(<span class="string">&quot;%s %d次&quot;</span>)%(d[<span class="number">0</span>],d[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># print(displacement_msg)</span></span><br><span class="line"></span><br><span class="line">    c_date_msg = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> c_date <span class="keyword">in</span> c_date_dict.items():</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> c_date[<span class="number">1</span>].items():</span><br><span class="line">            <span class="keyword">if</span> c_date[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> c_date_msg.keys():</span><br><span class="line">                c_date_msg[c_date[<span class="number">0</span>]] = <span class="built_in">str</span>(<span class="string">&quot;%s %d次&quot;</span>)%(c[<span class="number">0</span>],c[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c_date_msg[c_date[<span class="number">0</span>]] += <span class="string">&quot;,&quot;</span> + <span class="built_in">str</span>(<span class="string">&quot;%s %d次&quot;</span>)%(c[<span class="number">0</span>],c[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># print(c_date_msg)</span></span><br><span class="line"></span><br><span class="line">    speed_msg = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> speed <span class="keyword">in</span> speed_dict.items():</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> speed[<span class="number">1</span>].items():</span><br><span class="line">            <span class="keyword">if</span> speed[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> speed_msg.keys():</span><br><span class="line">                speed_msg[speed[<span class="number">0</span>]] = <span class="built_in">str</span>(<span class="string">&quot;%s %d次&quot;</span>)%(s[<span class="number">0</span>],s[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                speed_msg[speed[<span class="number">0</span>]] += <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(<span class="string">&quot;%s %d次&quot;</span>)%(s[<span class="number">0</span>],s[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    df = pd.DataFrame()</span><br><span class="line">    df[<span class="string">&quot;次数&quot;</span>] = pd.Series(<span class="built_in">list</span>(num_dict.values()),index=<span class="built_in">list</span>(num_dict.keys()))</span><br><span class="line">    df[<span class="string">&quot;位移&quot;</span>] = pd.Series(<span class="built_in">list</span>(displacement_msg.values()),index=<span class="built_in">list</span>(displacement_msg.keys()))</span><br><span class="line">    df[<span class="string">&quot;时间&quot;</span>] = pd.Series(<span class="built_in">list</span>(c_date_msg.values()),index=<span class="built_in">list</span>(c_date_msg.keys()))</span><br><span class="line">    df[<span class="string">&quot;速度&quot;</span>] = pd.Series(<span class="built_in">list</span>(speed_msg.values()),index=<span class="built_in">list</span>(speed_msg.keys()))</span><br><span class="line">    <span class="comment"># 根据index进行升序排序</span></span><br><span class="line">    df = df.sort_index()</span><br><span class="line">    <span class="comment"># 重置index，并将原来的index作为columns中的一列</span></span><br><span class="line">    df = df.reset_index()</span><br><span class="line">    <span class="comment"># 给新新添加到columns的那一列重命名</span></span><br><span class="line">    df = df.rename(columns=&#123;<span class="string">&quot;index&quot;</span>:<span class="string">&quot;舵机号&quot;</span>&#125;)</span><br><span class="line">    <span class="comment"># 设置index的起始值为1</span></span><br><span class="line">    df.index = df.index+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(df)</span><br><span class="line">    <span class="comment"># 写入xlsx文件</span></span><br><span class="line">    df.to_excel(<span class="string">&#x27;/Users/wanghan/Desktop/code/project_test/parse/excel1.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    file_path = <span class="string">&quot;/Users/wanghan/Desktop/code/project_test/parse/2022-7-22 记录2.txt&quot;</span></span><br><span class="line">    main(file_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><p><img src="https://s1.ax1x.com/2022/07/27/vSzJRf.png" alt="vSzJRf.png"></p><h3 id="生成文件链接：excel1-xlsx"><a href="#生成文件链接：excel1-xlsx" class="headerlink" title="生成文件链接：excel1.xlsx"></a>生成文件链接：<a href="https://www.aliyundrive.com/s/NGPqC2u72ih">excel1.xlsx</a></h3><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p><font size=3>最后生成的最后一位舵机号：20 可能与文档内解析的：14 不一样，经测试，文档解析的有偏差，以代码解析为主</font></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas-练习-将十六进制转为十进制后统计数据（附件） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm操作Dockerfile</title>
      <link href="/post/73ca702c.html"/>
      <url>/post/73ca702c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><img src="https://s1.ax1x.com/2022/07/25/jxA0u8.png" alt="jxA0u8.png"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Harbor私有仓库</title>
      <link href="/post/a3e0b8d2.html"/>
      <url>/post/a3e0b8d2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>注意：搭建前要有docker环境的</p></blockquote><h1 id="下载Harbor"><a href="#下载Harbor" class="headerlink" title="下载Harbor"></a>下载Harbor</h1><p>去github下载Harbor包到本地：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><p><img src="https://s1.ax1x.com/2022/07/22/jOMgED.png" alt="jOMgED.png"></p><h1 id="安装docker-compose服务"><a href="#安装docker-compose服务" class="headerlink" title="安装docker-compose服务"></a>安装docker-compose服务</h1><blockquote><p>安装Harbor是需要依赖docker-compose的</p></blockquote><p>最新版本可在官网查看：<a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><p>github下载（方式一）：</p><p>curl -L “<a href="https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$">https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$</a>(uname -s)-$(uname -m)” -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p></li><li><p>高速下载通道（方式二）：</p><p>curl -L <a href="https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-%60uname">https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname</a> -s<code>-</code>uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</p></li></ul><h3 id="下载完之后赋值可执行权限："><a href="#下载完之后赋值可执行权限：" class="headerlink" title="下载完之后赋值可执行权限："></a>下载完之后赋值可执行权限：</h3><pre><code>sudo chmod +x /usr/local/bin/docker-compose</code></pre><h3 id="查看版本："><a href="#查看版本：" class="headerlink" title="查看版本："></a>查看版本：</h3><pre><code>docker-compose -version</code></pre><h1 id="解压Harbor包"><a href="#解压Harbor包" class="headerlink" title="解压Harbor包"></a>解压Harbor包</h1><blockquote><p>下载完成后，将包上传到你要部署Harbor的服务器，上传路径自定义，然后解压</p></blockquote><pre><code>tar xvf harbor-offline-installer-v2.5.3.tgz -C /home/ &amp;&amp; cd /home/harbor</code></pre><h1 id="修改harbor-yml配置文件"><a href="#修改harbor-yml配置文件" class="headerlink" title="修改harbor.yml配置文件"></a>修改harbor.yml配置文件</h1><h3 id="先把harbor-yml-tmpl-复制成harbor-yml"><a href="#先把harbor-yml-tmpl-复制成harbor-yml" class="headerlink" title="先把harbor.yml.tmpl 复制成harbor.yml"></a>先把harbor.yml.tmpl 复制成harbor.yml</h3><pre><code>cp harbor.yml.tmpl harbor.yml</code></pre><h3 id="修改配置文件："><a href="#修改配置文件：" class="headerlink" title="修改配置文件："></a>修改配置文件：</h3><pre><code>vim harbor.yml</code></pre><h4 id="1-其中的hostname需要改为本机的IP地址-1-117-142-4"><a href="#1-其中的hostname需要改为本机的IP地址-1-117-142-4" class="headerlink" title="1. 其中的hostname需要改为本机的IP地址 1.117.142.4"></a>1. 其中的hostname需要改为本机的IP地址 1.117.142.4</h4><blockquote><p>harbor使用的端口是80，若使用自定义的端口，除了要改docker-compose.yml文件中的配置外，这里的hostname也要加上自定义的端口，否则在docker login、push时会报错。改的话为：hostname: ip:端口</p></blockquote><p>文章使用80默认端口：</p><pre><code>hostname: 1.117.142.4</code></pre><h4 id="2-选择http访问还是https访问（只能二选一，不用的则全部注释掉）"><a href="#2-选择http访问还是https访问（只能二选一，不用的则全部注释掉）" class="headerlink" title="2. 选择http访问还是https访问（只能二选一，不用的则全部注释掉）"></a>2. 选择http访问还是https访问（只能二选一，不用的则全部注释掉）</h4><ul><li><p>http配置（当前文档选择的http）：<br>hostname: 1.117.142.4</p><pre><code>http:  port: 80  data_volume: /home/harbor/data</code></pre></li><li><p>https配置（比http多配置一个ssl钥匙）：<br>hostname: harbor.hwang.com # （自定义域名）</p><pre><code>https:  # https port for harbor, default is 443  port: 443  # The path of cert and key files for nginx  certificate: /home/harbor/certs/harbor.crt  private_key: /home/harbor/certs/harbor.key  data_volume: /home/harbor/data</code></pre></li></ul><h4 id="3-创建配置文件对应目录"><a href="#3-创建配置文件对应目录" class="headerlink" title="3. 创建配置文件对应目录"></a>3. 创建配置文件对应目录</h4><p>如果选择的：</p><ul><li><p>http：</p><p>mkdir &#x2F;home&#x2F;harbor&#x2F;data</p></li><li><p>https：</p><p>mkdir -p &#x2F;home&#x2F;harbor&#x2F;certs &#x2F;home&#x2F;harbor&#x2F;data</p><h4 id="OpenSSL生成自签证书（注意：最后要改成自己的域名）"><a href="#OpenSSL生成自签证书（注意：最后要改成自己的域名）" class="headerlink" title="OpenSSL生成自签证书（注意：最后要改成自己的域名）"></a>OpenSSL生成自签证书（注意：最后要改成自己的域名）</h4><p>openssl req -newkey rsa:4096 -nodes -sha256 -keyout &#x2F;home&#x2F;harbor&#x2F;certs&#x2F;harbor.key -x509 -out &#x2F;home&#x2F;harbor&#x2F;certs&#x2F;harbor.crt -subj &#x2F;C&#x3D;CN&#x2F;ST&#x3D;BJ&#x2F;L&#x3D;BJ&#x2F;O&#x3D;DEVOPS&#x2F;CN&#x3D;harbor.hwang.com -days 3650</p></li></ul><h1 id="安装Harbor服务"><a href="#安装Harbor服务" class="headerlink" title="安装Harbor服务"></a>安装Harbor服务</h1><pre><code>./install.sh</code></pre><p>上述，出现✔ —-Harbor has been installed and started successfully.—-就表示安装Harbor成功了。</p><h1 id="验证启动情况"><a href="#验证启动情况" class="headerlink" title="验证启动情况"></a>验证启动情况</h1><pre><code>docker-compose ps</code></pre><p><img src="https://s1.ax1x.com/2022/07/22/jO8Bmq.png" alt="jO8Bmq.png"></p><h1 id="登录Harbor-WebUI"><a href="#登录Harbor-WebUI" class="headerlink" title="登录Harbor WebUI"></a>登录Harbor WebUI</h1><table><thead><tr><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td>admin</td><td>Harbor12345</td></tr></tbody></table><h3 id="http访问：http-1-117-142-4"><a href="#http访问：http-1-117-142-4" class="headerlink" title="http访问：http://1.117.142.4"></a>http访问：<a href="http://1.117.142.4/">http://1.117.142.4</a></h3><p><img src="https://s1.ax1x.com/2022/07/22/jO82p4.png" alt="jO82p4.png"></p><h3 id="https访问：https-harbor-hwang-com"><a href="#https访问：https-harbor-hwang-com" class="headerlink" title="https访问：https://harbor.hwang.com"></a>https访问：<a href="https://harbor.hwang.com/">https://harbor.hwang.com</a></h3><pre><code>vim /etc/hosts</code></pre><p>添加内容：</p><pre><code>1.117.142.4 https://harbor.hwang.com</code></pre><p>访问页面</p><pre><code>https://harbor.wangzy.com</code></pre><p>如果出现如下无法访问的情况：盲敲：thisisunsafe<br><img src="https://s1.ax1x.com/2022/07/22/jOGDvd.jpg" alt="jOGDvd.jpg"></p><h1 id="创建Harbor仓库的项目"><a href="#创建Harbor仓库的项目" class="headerlink" title="创建Harbor仓库的项目"></a>创建Harbor仓库的项目</h1><p><font size="4">项目》新建项目》输入：test，选择：是否公开</font><br><img src="https://s1.ax1x.com/2022/07/22/jOt9N6.png" alt="jOt9N6.png"></p><h1 id="docker-登录Harbor"><a href="#docker-登录Harbor" class="headerlink" title="docker 登录Harbor"></a>docker 登录Harbor</h1><p>如果是http：</p><pre><code>docker login -u admin -p Harbor12345 http://1.117.142.4</code></pre><p>如果是https：</p><pre><code>docker login -u admin -p Harbor12345 https://harbor.hwang.com</code></pre><p><img src="https://s1.ax1x.com/2022/10/31/xozW3n.png" alt="xozW3n.png"></p><h1 id="解决访问过程中的问题（无，则跳过）："><a href="#解决访问过程中的问题（无，则跳过）：" class="headerlink" title="解决访问过程中的问题（无，则跳过）："></a>解决访问过程中的问题（无，则跳过）：</h1><h4 id="问题1：出现拒绝访问的问题："><a href="#问题1：出现拒绝访问的问题：" class="headerlink" title="问题1：出现拒绝访问的问题："></a>问题1：出现拒绝访问的问题：</h4><pre><code>[root@nb1 harbor]# docker login -u admin -p Harbor12345 http://192.168.1.127WARNING! Using --password via the CLI is insecure. Use --password-stdin.Error response from daemon: Get &quot;https://192.168.1.127/v2/&quot;: dial tcp 192.168.1.127:443: connect: connection refused</code></pre><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><ul><li><p>办法一</p><p>vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service</p></li></ul><p>修改内容：</p><pre><code>ExecStart=/usr/bin/dockerd -H fd:// --insecure-registry 1.117.142.4 --containerd=/run/containerd/containerd.sock</code></pre><p>将需要登陆的服务器都加上：–insecure-registry “ip”</p><ul><li><p>办法二</p><p>vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</p></li></ul><p>添加内容：</p><ol><li><p>如果是http：</p><p>“insecure-registries”: [“<a href="http://1.117.142.4&quot;]">http://1.117.142.4&quot;]</a></p></li><li><p>如果是https：</p><p>“insecure-registries”: [“<a href="https://harbor.hwang.com&quot;]">https://harbor.hwang.com&quot;]</a></p></li></ol><p><img src="https://s1.ax1x.com/2022/07/22/jOtoKH.png" alt="jOtoKH.png"></p><ol><li>如果是mac的docker-desktop：<br><img src="https://s1.ax1x.com/2022/07/22/jOJHQH.png" alt="jOJHQH.png"></li></ol><p>最后都需要重新加载配置文件并重启docker：</p><pre><code>systemctl daemon-reload systemctl restart docker</code></pre><h4 id="问题2：如果发现harbor没有启动"><a href="#问题2：如果发现harbor没有启动" class="headerlink" title="问题2：如果发现harbor没有启动"></a>问题2：如果发现harbor没有启动</h4><p>如果harbor没启动需要，进入harbor目录下：&#x2F;home&#x2F;harbor&#x2F;（看个人安装路径决定），执行如下</p><pre><code>docker-compose up -d</code></pre><h1 id="上传本地镜像到Harbor仓库"><a href="#上传本地镜像到Harbor仓库" class="headerlink" title="上传本地镜像到Harbor仓库"></a>上传本地镜像到Harbor仓库</h1><p>【以下命令执行，都需要先登录harbor：docker login -u admin -p Harbor12345 <a href="http://1.117.142.4】具体ip根据情况定/">http://1.117.142.4】具体ip根据情况定</a></p><h3 id="将本地镜像打上私有仓库"><a href="#将本地镜像打上私有仓库" class="headerlink" title="将本地镜像打上私有仓库"></a>将本地镜像打上私有仓库</h3><p>格式：docker tag 本地镜像名:版本 Harbor服务器访问ip+端口&#x2F;Harbor仓库项目名&#x2F;仓库镜像名:版本</p><pre><code>docker tag nginx:1.7.9 1.117.142.4/test/nginx:test</code></pre><p><img src="https://s1.ax1x.com/2022/07/22/jOtNEq.png" alt="jOtNEq.png"></p><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><pre><code>docker push 1.117.142.4/test/nginx:test</code></pre><p><img src="https://s1.ax1x.com/2022/07/22/jOtGuj.png" alt="jOtGuj.png"></p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre><code>docker pull 1.117.142.4/test/nginx:test</code></pre><p><img src="https://s1.ax1x.com/2022/07/22/jOta5V.png" alt="jOta5V.png"></p><h1 id="卸载Harbor"><a href="#卸载Harbor" class="headerlink" title="卸载Harbor"></a>卸载Harbor</h1><h3 id="1-删除harbor相关的目录及文件："><a href="#1-删除harbor相关的目录及文件：" class="headerlink" title="1. 删除harbor相关的目录及文件："></a>1. 删除harbor相关的目录及文件：</h3><pre><code>rm -rf `find / -name harbor`</code></pre><h3 id="2-批量停止并删除docker中有关harbor的镜像及容器"><a href="#2-批量停止并删除docker中有关harbor的镜像及容器" class="headerlink" title="2. 批量停止并删除docker中有关harbor的镜像及容器"></a>2. 批量停止并删除docker中有关harbor的镜像及容器</h3><pre><code>docker stop `sudo docker ps | grep &#39;harbor&#39; | awk &#39;&#123;print $1&#125;&#39;`docker rm $(docker ps -a | awk &#39;/harbor/ &#123;print $1&#125;&#39;)docker rmi $(sudo docker images | grep harbor | awk &#39;&#123;print $1&quot;:&quot;$2&#125;&#39;)</code></pre><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h3><pre><code>cd /home/harbor/./install.sh</code></pre>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kuboard搭建、部署文档</title>
      <link href="/post/ae1e3ae3.html"/>
      <url>/post/ae1e3ae3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="官方："><a href="#官方：" class="headerlink" title="官方："></a>官方：</h1><h4 id="搭建文档：https-kuboard-cn-install-v3-install-in-k8s-html-E6-96-B9-E6-B3-95-E4-B8-80-E4-BD-BF-E7-94-A8-hostpath-E6-8F-90-E4-BE-9B-E6-8C-81-E4-B9-85-E5-8C-96"><a href="#搭建文档：https-kuboard-cn-install-v3-install-in-k8s-html-E6-96-B9-E6-B3-95-E4-B8-80-E4-BD-BF-E7-94-A8-hostpath-E6-8F-90-E4-BE-9B-E6-8C-81-E4-B9-85-E5-8C-96" class="headerlink" title="搭建文档：https://kuboard.cn/install/v3/install-in-k8s.html#%E6%96%B9%E6%B3%95%E4%B8%80-%E4%BD%BF%E7%94%A8-hostpath-%E6%8F%90%E4%BE%9B%E6%8C%81%E4%B9%85%E5%8C%96"></a>搭建文档：<a href="https://kuboard.cn/install/v3/install-in-k8s.html#%E6%96%B9%E6%B3%95%E4%B8%80-%E4%BD%BF%E7%94%A8-hostpath-%E6%8F%90%E4%BE%9B%E6%8C%81%E4%B9%85%E5%8C%96">https://kuboard.cn/install/v3/install-in-k8s.html#%E6%96%B9%E6%B3%95%E4%B8%80-%E4%BD%BF%E7%94%A8-hostpath-%E6%8F%90%E4%BE%9B%E6%8C%81%E4%B9%85%E5%8C%96</a></h4><h4 id="部署文档：https-kuboard-cn-learning-k8s-basics-deploy-app-html-E5-AE-9E-E6-88-98-E9-83-A8-E7-BD-B2-nginx-deployment"><a href="#部署文档：https-kuboard-cn-learning-k8s-basics-deploy-app-html-E5-AE-9E-E6-88-98-E9-83-A8-E7-BD-B2-nginx-deployment" class="headerlink" title="部署文档：https://kuboard.cn/learning/k8s-basics/deploy-app.html#%E5%AE%9E%E6%88%98-%E9%83%A8%E7%BD%B2-nginx-deployment"></a>部署文档：<a href="https://kuboard.cn/learning/k8s-basics/deploy-app.html#%E5%AE%9E%E6%88%98-%E9%83%A8%E7%BD%B2-nginx-deployment">https://kuboard.cn/learning/k8s-basics/deploy-app.html#%E5%AE%9E%E6%88%98-%E9%83%A8%E7%BD%B2-nginx-deployment</a></h4>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s搭建Dashboard</title>
      <link href="/post/c6d5d403.html"/>
      <url>/post/c6d5d403.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>借鉴文档：<a href="https://cloud.tencent.com/developer/article/1919416">https://cloud.tencent.com/developer/article/1919416</a></p><blockquote><p>搭建Dashboard，首先要先确认kubernetes的版本，在官网找到对应的dashboard版本：<a href="https://github.com/kubernetes/dashboard/releases?page=1%E3%80%82">https://github.com/kubernetes/dashboard/releases?page=1。</a></p></blockquote><h1 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h1><p>因为我的集群是1.18.20。所以我选择的是dashboard2.0.3的版本。</p><pre><code>wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml</code></pre><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>修改service部分，默认service的type是ClusterIP类型，这里改成NodePort类型，是集群外部能否访问</p><pre><code>kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  type: NodePort  ports:    - port: 443      targetPort: 8443      nodePort: 30012  selector:    k8s-app: kubernetes-dashboard</code></pre><h1 id="执行yaml文件"><a href="#执行yaml文件" class="headerlink" title="执行yaml文件"></a>执行yaml文件</h1><pre><code>kubectl apply -f recommended.yaml </code></pre><h1 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h1><pre><code>kubectl get all -n kubernetes-dashboard</code></pre><p><img src="https://s1.ax1x.com/2022/07/19/j7YbVO.png" alt="j7YbVO.png"></p><p>可以看到pod 服务已经是running状态</p><p>访问集群IP:30647端口可以访问web管理界面</p><p>访问网站时，可能出现不让访问的问题，提示你的连接不是私密连接</p><ul><li>首先将浏览器停留在当前页面（点击鼠标）</li><li>在键盘直接敲击“thisisunsafe”（盲敲），页面即可刷新直接进入当前页面。</li></ul><h1 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员"></a>创建超级管理员</h1><h3 id="创建serviceaccount"><a href="#创建serviceaccount" class="headerlink" title="创建serviceaccount"></a>创建serviceaccount</h3><pre><code>kubectl create serviceaccount dashboard-admin -n kube-system</code></pre><h3 id="把serviceaccount绑定在clusteradmin，授权serviceaccount用户具有整个集群的访问管理权限"><a href="#把serviceaccount绑定在clusteradmin，授权serviceaccount用户具有整个集群的访问管理权限" class="headerlink" title="把serviceaccount绑定在clusteradmin，授权serviceaccount用户具有整个集群的访问管理权限"></a>把serviceaccount绑定在clusteradmin，授权serviceaccount用户具有整个集群的访问管理权限</h3><pre><code>kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</code></pre><h3 id="获取serviceaccount的secret信息，可得到token（令牌）的信息"><a href="#获取serviceaccount的secret信息，可得到token（令牌）的信息" class="headerlink" title="获取serviceaccount的secret信息，可得到token（令牌）的信息"></a>获取serviceaccount的secret信息，可得到token（令牌）的信息</h3><pre><code>kubectl get secret -n kube-system|grep dash</code></pre><p>输出内容：</p><pre><code>dashboard-admin-token-n748c                      kubernetes.io/service-account-token   3      28h</code></pre><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><pre><code>kubectl describe secret dashboard-admin-token-n748c -n kube-system</code></pre><p>输出内容：</p><pre><code>Name:         dashboard-admin-token-n748cNamespace:    kube-systemLabels:       &lt;none&gt;Annotations:  kubernetes.io/service-account.name: dashboard-admin              kubernetes.io/service-account.uid: 0a33113c-f24f-43b8-9a01-3f3a9e6e0c5aType:  kubernetes.io/service-account-tokenData====ca.crt:     1025 bytesnamespace:  11 bytestoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IlZPNnZjX0M1akYxR2I4YkpyRTc3UWhsbWVSWFJSa2k1ZUozTmVHMXJKRVEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tbjc0OGMiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMGEzMzExM2MtZjI0Zi00M2I4LTlhMDEtM2YzYTllNmUwYzVhIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.v4PnP1Fc67aC80_a6St5EIjUbkzDNGNBw7DpQ-ERqlwnbGkRzeDB4QWLPk34Jo5hzB2flIBJ2Oqpb6M58eRASSWWjhYj-kAax9YRAahzikbd69fgA65xsrflMN1ZI6FVy2OYj8n6SbVR6s-jEDLQCvMP5iZN1cuCihW9hrjV8EraQSQQJPkW5XGy0Rjq4QwzbL3mDO-aKiCN3gdduyxXO21icyOZG18swpWZkYw_3U9PQf2h1wpg7DSXll-x6fNMgTwkcXrLFYt3BZLkCrS69PgYalFB6vc_EVrPvONWcR8XshIOgPoPh1HjW1i1JPUs4SGbtD6RZ_27Rsk44lWIbw</code></pre><p>把下面的token输入到页面就可以登陆进来了：<br><img src="https://s1.ax1x.com/2022/07/19/j7txkF.png" alt="j7txkF.png"></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异地云服务器搭建k8s集群报错总结</title>
      <link href="/post/b92e954c.html"/>
      <url>/post/b92e954c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><font color=red>1. kubectl命令出现错误“The connection to the server localhost:8080 was refused”</font><br>解决方案：缺少文件。将主节点（master）中的“&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf”文件拷贝到从节点相同目录下<br>参考文档：<a href="https://blog.csdn.net/lisongyue123/article/details/109643218">https://blog.csdn.net/lisongyue123/article/details/109643218</a></p><p><font color=red>2. Port 10250 is in use</font><br>解决方案：端口被占用。执行以下kubeadm reset 重置配置<br>参考文档：<a href="https://blog.csdn.net/weixin_42214548/article/details/109151572">https://blog.csdn.net/weixin_42214548/article/details/109151572</a></p><p><font color=red>3. this Docker version is not on the list of validated versions: 20.10.17. Latest validated version: 19</font><br>解决方案：降低Docker版本为19.xx或18.xx<br>参考文档：<a href="https://blog.csdn.net/amber_1/article/details/125169854">https://blog.csdn.net/amber_1/article/details/125169854</a></p><p><font color=red>4. Unable to connect to the server: x509: certificate signed by unknown authority</font><br>解决方案：执行 kubeadm reset命令后，先rm -rf $HOME&#x2F;.kube<br>参考文档：<a href="https://blog.csdn.net/woay2008/article/details/93250137">https://blog.csdn.net/woay2008/article/details/93250137</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异地云服务器（公网）搭建k8s集群</title>
      <link href="/post/33cd9bc8.html"/>
      <url>/post/33cd9bc8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>本文适用于自己没有足够的局域网服务器，想利用多个异地云服务器搭建k8s！！！</p></blockquote><hr><h1 id="机器配置"><a href="#机器配置" class="headerlink" title="机器配置"></a>机器配置</h1><ul><li>主节点centos8.5（阿里云ECS）<br>机器名：master<br>公网ip：47.100.238.0</li><li>从节点centos8.2（腾讯云EVM）<br>机器名：node1<br>公网ip：1.117.142.4</li><li>从节点centos8.5（阿里云ECS）<br>机器名：node2<br>公网ip：47.95.8.94</li></ul><h1 id="设置hostname"><a href="#设置hostname" class="headerlink" title="设置hostname"></a>设置hostname</h1><ul><li>master节点设置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br></pre></td></tr></table></figure><ul><li>node1节点设置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname node1</span><br></pre></td></tr></table></figure><ul><li><p>node1节点设置：</p><p>hostnamectl set-hostname node2</p></li></ul><h1 id="修改-x2F-etc-x2F-hosts文件"><a href="#修改-x2F-etc-x2F-hosts文件" class="headerlink" title="修改&#x2F;etc&#x2F;hosts文件"></a>修改&#x2F;etc&#x2F;hosts文件</h1><h3 id="所有节点都需要！！！"><a href="#所有节点都需要！！！" class="headerlink" title="所有节点都需要！！！"></a><strong>所有节点都需要！！！</strong></h3><p><strong>将127.0.0.1 和hostname绑定</strong></p><p><img src="https://s1.ax1x.com/2022/07/18/jo31Og.png" alt="jo31Og.png"></p><h1 id="配置节点间ssh互信"><a href="#配置节点间ssh互信" class="headerlink" title="配置节点间ssh互信"></a>配置节点间ssh互信</h1><h3 id="所有节点都需要！！！-1"><a href="#所有节点都需要！！！-1" class="headerlink" title="所有节点都需要！！！"></a><strong>所有节点都需要！！！</strong></h3><p><strong>配置ssh互信，那么节点之间就能无密访问，方便日后执行自动化部署</strong></p><pre><code>ssh-keygen     # 一路回车即可</code></pre><p><strong>拷贝master公钥到其他节点（默认的文件名为.ssh&#x2F;id_rsa.pub）</strong></p><pre><code>ssh-copy-id -i .ssh/id_rsa.pub  用户名字@1.117.142.4（节点node1的ip）</code></pre><blockquote><p>执行之后会让你输入服务器的密码，同时也需要把node2的ip执行一次！！！这里我执行完之后，又在node1服务器上把命令里的ip替换成master和node2的ip各执行了一次，node2上是master和node1的ip！！！</p></blockquote><h1 id="系统参数配置"><a href="#系统参数配置" class="headerlink" title="系统参数配置"></a>系统参数配置</h1><h3 id="所有节点都需要！！！-2"><a href="#所有节点都需要！！！-2" class="headerlink" title="所有节点都需要！！！"></a><strong>所有节点都需要！！！</strong></h3><h3 id="1-关闭Selinux"><a href="#1-关闭Selinux" class="headerlink" title="1. 关闭Selinux"></a>1. 关闭Selinux</h3><pre><code>sed -i &#39;s/SELINUX=.*/SELINUX=disabled/g&#39; /etc/selinux/config</code></pre><h3 id="2-永久关闭swap区"><a href="#2-永久关闭swap区" class="headerlink" title="2. 永久关闭swap区"></a>2. 永久关闭swap区</h3><pre><code>swapoff -ased -ri &#39;s/.*swap.*/#&amp;/&#39; /etc/fstabecho &quot;vm.swappiness = 0&quot;&gt;&gt; /etc/sysctl.conf  </code></pre><h3 id="3-修改内核参数"><a href="#3-修改内核参数" class="headerlink" title="3. 修改内核参数"></a>3. 修改内核参数</h3><pre><code>cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.confnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1vm.swappiness=0EOF</code></pre><h3 id="4-更新内核参数"><a href="#4-更新内核参数" class="headerlink" title="4. 更新内核参数"></a>4. 更新内核参数</h3><blockquote><p>-p 从指定的文件加载系统参数，如不指定即从&#x2F;etc&#x2F;sysctl.conf中加载</p></blockquote><pre><code>sysctl -p /etc/sysctl.d/k8s.conf</code></pre><h3 id="5-完整-x2F-etc-x2F-sysctl-conf-配置"><a href="#5-完整-x2F-etc-x2F-sysctl-conf-配置" class="headerlink" title="5. 完整&#x2F;etc&#x2F;sysctl.conf  配置"></a>5. 完整&#x2F;etc&#x2F;sysctl.conf  配置</h3><blockquote><p>当然这里阿里云和腾讯云的这个文件内容可能会有点区别，但是没关系</p></blockquote><pre><code>vm.swappiness = 0kernel.sysrq = 1net.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1net.ipv4.neigh.default.gc_stale_time = 120# see details in https://help.aliyun.com/knowledge_detail/39428.htmlnet.ipv4.conf.all.rp_filter = 0net.ipv4.conf.default.rp_filter = 0net.ipv4.conf.default.arp_announce = 2net.ipv4.conf.lo.arp_announce = 2net.ipv4.conf.all.arp_announce = 2# see details in https://help.aliyun.com/knowledge_detail/41334.htmlnet.ipv4.tcp_max_tw_buckets = 5000net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 1024net.ipv4.tcp_synack_retries = 2</code></pre><h3 id="6-生效-x2F-etc-x2F-sysctl-conf文件设置"><a href="#6-生效-x2F-etc-x2F-sysctl-conf文件设置" class="headerlink" title="6. 生效&#x2F;etc&#x2F;sysctl.conf文件设置"></a>6. 生效&#x2F;etc&#x2F;sysctl.conf文件设置</h3><pre><code>sysctl -p</code></pre><h1 id="建立虚拟网卡"><a href="#建立虚拟网卡" class="headerlink" title="建立虚拟网卡"></a>建立虚拟网卡</h1><h3 id="所有节点都需要！！！-3"><a href="#所有节点都需要！！！-3" class="headerlink" title="所有节点都需要！！！"></a><strong>所有节点都需要！！！</strong></h3><h3 id="1-设置虚拟网卡"><a href="#1-设置虚拟网卡" class="headerlink" title="1. 设置虚拟网卡"></a>1. 设置虚拟网卡</h3><blockquote><p>将当前所在服务器的公网ip当做虚拟网卡来对待，以便后续的k8s集群的pod ip采用公网ip来加入集群</p></blockquote><p><font color="red">注意：这里的命令需要替换你的公网IP进去！！！</font></p><pre><code>cat &gt; /etc/sysconfig/network-scripts/ifcfg-eth0:1 &lt;&lt;EOFBOOTPROTO=staticDEVICE=eth0:1IPADDR=你的公网IPPREFIX=32TYPE=EthernetUSERCTL=noONBOOT=yesEOF</code></pre><h3 id="2-如果是centos8，需要重启"><a href="#2-如果是centos8，需要重启" class="headerlink" title="2. 如果是centos8，需要重启"></a>2. 如果是centos8，需要重启</h3><p><font color="red">注意：第二步的命令一定要一次性执行，不要拆开！！！</font></p><pre><code>nmcli c reload                   #重新载入一下配置文件，不然不能立即生效nmcli n off &amp;&amp; nmcli n on        #重启所有网络</code></pre><h3 id="3-查看新建的IP是否进去"><a href="#3-查看新建的IP是否进去" class="headerlink" title="3. 查看新建的IP是否进去"></a>3. 查看新建的IP是否进去</h3><pre><code>ifconfig</code></pre><p>成功示例：<br><img src="https://s1.ax1x.com/2022/07/18/joN4jP.png" alt="joN4jP.png"></p><h1 id="主机端口设置"><a href="#主机端口设置" class="headerlink" title="主机端口设置"></a>主机端口设置</h1><h3 id="所有节点都需要！！！-4"><a href="#所有节点都需要！！！-4" class="headerlink" title="所有节点都需要！！！"></a><strong>所有节点都需要！！！</strong></h3><h3 id="1-开放服务器端口"><a href="#1-开放服务器端口" class="headerlink" title="1. 开放服务器端口"></a>1. 开放服务器端口</h3><blockquote><p>阿里云ECS和腾讯云EVM所有入网方向端口都需要自己手动开启。</p></blockquote><p>&#x3D;&#x3D;master&#x3D;&#x3D;需要开放的端口有：</p><table><thead><tr><th>协议</th><th>方向</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>TCP</td><td>入站</td><td>6443</td><td>Kubernetes API server</td></tr><tr><td>TCP</td><td>入站</td><td>2379-2380</td><td>etcd server client API</td></tr><tr><td>TCP</td><td>入站</td><td>10250</td><td>Kubelet API</td></tr><tr><td>TCP</td><td>入站</td><td>10251</td><td>kube-scheduler</td></tr><tr><td>TCP</td><td>入站</td><td>10252</td><td>kube-controller-manager</td></tr><tr><td>UDP</td><td>入站</td><td>8472</td><td>k8s fannel vxlan</td></tr></tbody></table><p>&#x3D;&#x3D;node1、node2&#x3D;&#x3D;需要开放的端口有：</p><table><thead><tr><th>协议</th><th>方向</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>TCP</td><td>入站</td><td>10250</td><td>Kubernetes API server</td></tr><tr><td>TCP</td><td>入站</td><td>30000-32767</td><td>k8s NodePort ServicesI</td></tr></tbody></table><p>去阿里云和腾讯云把上面这几个端口按对应节点开放出来就可以了，操作类似：<a href="https://developer.aliyun.com/article/793961">阿里云服务器开放端口教程</a><br><img src="https://s1.ax1x.com/2022/07/19/jTArfH.png" alt="jTArfH.png"></p><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h3 id="所有节点都需要！！！-5"><a href="#所有节点都需要！！！-5" class="headerlink" title="所有节点都需要！！！"></a><strong>所有节点都需要！！！</strong></h3><p><font color="red">注意：在安装docker和kubernetes前一定要确定好各自的版本</font></p><h3 id="1-首先查询是否存在docker服务"><a href="#1-首先查询是否存在docker服务" class="headerlink" title="1. 首先查询是否存在docker服务"></a>1. 首先查询是否存在docker服务</h3><pre><code>docker version</code></pre><h3 id="2-卸载docker服务（可选）"><a href="#2-卸载docker服务（可选）" class="headerlink" title="2. 卸载docker服务（可选）"></a>2. 卸载docker服务（可选）</h3><p><font color="red">如果你当前存在的docker版本符合你的需求，可以忽略以下卸载和安装步骤</font></p><pre><code>systemctl stop dockeryum remove docker-ce docker-ce-cli containerd.iorm -rf /var/lib/dockerrm -rf /var/lib/containerd</code></pre><h3 id="1-查看当前可用版本"><a href="#1-查看当前可用版本" class="headerlink" title="1. 查看当前可用版本"></a>1. 查看当前可用版本</h3><pre><code>yum list docker-ce --showduplicates | sort -r</code></pre><p><img src="https://s1.ax1x.com/2022/07/19/jTnT9U.png" alt="jTnT9U.png"></p><h3 id="2-安装指定版本的docker（二选一）"><a href="#2-安装指定版本的docker（二选一）" class="headerlink" title="2. 安装指定版本的docker（二选一）"></a>2. 安装指定版本的docker（二选一）</h3><p>将红框部分的版本号替换到下面的命令中即可—-<strong>这里我安装的是19.03的版本</strong></p><pre><code>yum install docker-ce-3:19.03.13 docker-ce-cli-1:19.03.13 containerd.io </code></pre><h3 id="2-安装最新版本的docker（二选一）"><a href="#2-安装最新版本的docker（二选一）" class="headerlink" title="2. 安装最新版本的docker（二选一）"></a>2. 安装最新版本的docker（二选一）</h3><pre><code>curl -fsSL https://get.docker.com/ | sh</code></pre><h3 id="3-启动docker"><a href="#3-启动docker" class="headerlink" title="3. 启动docker"></a>3. 启动docker</h3><pre><code>systemctl start docker</code></pre><h3 id="4-将docker加入开启自启服务中"><a href="#4-将docker加入开启自启服务中" class="headerlink" title="4. 将docker加入开启自启服务中"></a>4. 将docker加入开启自启服务中</h3><pre><code>systemctl enable docker</code></pre><h3 id="5-docker安装完成后"><a href="#5-docker安装完成后" class="headerlink" title="5. docker安装完成后"></a>5. docker安装完成后</h3><p>执行下面命令：</p><pre><code># 设置守护程序cat &gt; /etc/docker/daemon.json &lt;&lt;EOF&#123;   &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],   &quot;log-driver&quot;: &quot;json-file&quot;,   &quot;log-opts&quot;: &#123;      &quot;max-size&quot;: &quot;100m&quot;    &#125;,    &quot;storage-driver&quot;: &quot;overlay2&quot;,    &quot;storage-opts&quot;: [      &quot;overlay2.override_kernel_check=true&quot;    ] ,    &quot;registry-mirrors&quot;: [&quot;https://xxxxxx.mirror.aliyuncs.com&quot;]&#125;EOF</code></pre><p>登录进入阿里云镜像服务中心，获取镜像地址：”registry-mirrors”:<br><a href="https://cr.console.aliyun.com/cn-beijing/instances/mirrors">阿里云镜像服务中心地址</a><br><img src="https://s1.ax1x.com/2022/07/19/jTuhKH.png" alt="jTuhKH.png"></p><pre><code>mkdir -p /etc/systemd/system/docker.service.d</code></pre><h3 id="6-重启Docker服务"><a href="#6-重启Docker服务" class="headerlink" title="6. 重启Docker服务"></a>6. 重启Docker服务</h3><pre><code>systemctl daemon-reloadsystemctl enable dockersystemctl restart docker</code></pre><h1 id="安装kubernetes"><a href="#安装kubernetes" class="headerlink" title="安装kubernetes"></a>安装kubernetes</h1><h3 id="1-配置源："><a href="#1-配置源：" class="headerlink" title="1. 配置源："></a>1. 配置源：</h3><pre><code>echo &#39;#k8s[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0&#39;&gt;/etc/yum.repos.d/kubernetes.repo</code></pre><h3 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h3><p>这里我安装的是1.18.20版本：</p><pre><code>yum -y install kubelet-1.18.20 kubeadm-1.18.20 kubectl-1.18.20</code></pre><h3 id="3-查看安装后的k8s版本"><a href="#3-查看安装后的k8s版本" class="headerlink" title="3. 查看安装后的k8s版本"></a>3. 查看安装后的k8s版本</h3><pre><code>kubeadm config images list</code></pre><p><img src="https://s1.ax1x.com/2022/07/19/jT5SgI.png" alt="jT5SgI.png"></p><h3 id="4-重启kubelet"><a href="#4-重启kubelet" class="headerlink" title="4. 重启kubelet"></a>4. 重启kubelet</h3><pre><code>     systemctl daemon-reload     systemctl enable kubelet</code></pre><h3 id="5-批量拉取k8s镜像"><a href="#5-批量拉取k8s镜像" class="headerlink" title="5. 批量拉取k8s镜像"></a>5. 批量拉取k8s镜像</h3><h4 id="编写脚本文件"><a href="#编写脚本文件" class="headerlink" title="编写脚本文件"></a>编写脚本文件</h4><pre><code>vim docker.sh</code></pre><h4 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h4><p>这里只需要修改<font color="red">四个</font>版本号，其他的不用动</p><pre><code>set -o errexitset -o nounsetset -o pipefail##这里定义版本，按照上面得到的列表自己改一下版本号KUBE_VERSION=v1.18.20KUBE_PAUSE_VERSION=3.2ETCD_VERSION=3.4.3-0DNS_VERSION=1.6.7##这是原始仓库名，最后需要改名成这个GCR_URL=k8s.gcr.io##这里就是写你要使用的仓库DOCKERHUB_URL=registry.aliyuncs.com/google_containers##这里是镜像列表，新版本要把coredns改成coredns/corednsimages=(kube-proxy:$&#123;KUBE_VERSION&#125;kube-scheduler:$&#123;KUBE_VERSION&#125;kube-controller-manager:$&#123;KUBE_VERSION&#125;kube-apiserver:$&#123;KUBE_VERSION&#125;pause:$&#123;KUBE_PAUSE_VERSION&#125;etcd:$&#123;ETCD_VERSION&#125;coredns:$&#123;DNS_VERSION&#125;)##这里是拉取和改名的循环语句for imageName in $&#123;images[@]&#125; ; do  docker pull $DOCKERHUB_URL/$imageName  docker tag $DOCKERHUB_URL/$imageName $GCR_URL/$imageName  docker rmi $DOCKERHUB_URL/$imageNamedone</code></pre><h4 id="执行脚本："><a href="#执行脚本：" class="headerlink" title="执行脚本："></a>执行脚本：</h4><pre><code>chmod u+x docker.sh（先赋予执行权限）./docker.sh        （执行）</code></pre><h4 id="所有组件pull成功后。查看"><a href="#所有组件pull成功后。查看" class="headerlink" title="所有组件pull成功后。查看"></a>所有组件pull成功后。查看</h4><pre><code>docker images</code></pre><p><img src="https://s1.ax1x.com/2022/07/19/jTIuJH.png" alt="jTIuJH.png"></p><h1 id="初始化主节点"><a href="#初始化主节点" class="headerlink" title="初始化主节点"></a>初始化主节点</h1><h3 id="只操作master！！！"><a href="#只操作master！！！" class="headerlink" title="只操作master！！！"></a><strong>只操作master！！！</strong></h3><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h3><p>把下面内容中需要替换的，改为自己master节点的信息，然后整个复制执行</p><pre><code>cat &gt; kubeadm-config.yml &lt;&lt;EOFapiVersion: kubeadm.k8s.io/v1beta2bootstrapTokens:  - groups:      - system:bootstrappers:kubeadm:default-node-token    token: abcdef.0123456789abcdef    ttl: 24h0m0s    usages:      - signing      - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: xx.xxx.xxx.xx   #master公网ip   bindPort: 6443nodeRegistration:  criSocket: /var/run/dockershim.sock  name: master  #自己的hostname  taints:    - effect: NoSchedule      key: node-role.kubernetes.io/master---apiServer:  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta2certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrollerManager: &#123;&#125;dns:  type: CoreDNSetcd:  local:    dataDir: /var/lib/etcdimageRepository: registry.aliyuncs.com/google_containerskind: ClusterConfigurationkubernetesVersion: v1.20.0apiServer:  certSANs:      - master    #请替换为master的hostname  - master节点的内网IP地址   #请替换为master内网ip  - xx.xxx.xxx.xx  #请替换为master公网ip地址  - 10.1.0.1   #不要替换，此IP是serviceSubnet配置的ip地址网段的第一个地址，API的集群地址，部分服务会用到networking:  dnsDomain: cluster.local  podSubnet: 10.244.0.0/16 #pod的网段地址配置  serviceSubnet: 10.1.0.0/16 #service的网段地址配置scheduler: &#123;&#125;EOF</code></pre><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2. 初始化"></a>2. 初始化</h3><h4 id="开始初始化"><a href="#开始初始化" class="headerlink" title="开始初始化"></a>开始初始化</h4><p>如果是1核心或者1G内存的请在末尾添加参数（–ignore-preflight-errors&#x3D;all），否则会初始化失败</p><pre><code>kubeadm init --config=kubeadm-config.yml</code></pre><h4 id="同时注意，此步骤成功后，会打印，两个重要信息"><a href="#同时注意，此步骤成功后，会打印，两个重要信息" class="headerlink" title="同时注意，此步骤成功后，会打印，两个重要信息"></a>同时注意，此步骤成功后，会打印，两个重要信息</h4><p>&#x3D;&#x3D;信息1&#x3D;&#x3D;：上面初始化成功后，将会生成kubeconfig文件，用于请求api服务器，如果想不使用root用户进行后续的k8s集群管理的话，请执行下面操作<font color="red">（这一步我没执行，嘻嘻）</font></p><pre><code>mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre><p>&#x3D;&#x3D;信息2&#x3D;&#x3D;：此信息用于后面工作节点加入主节点使用,这里的信息需要<font color="red">保存起来</font>，以便接下来的node节点能加入集群，此处的token是只能24小时有效期<font color="red">（下面这内容是初始化生成的，现在不需要执行，只要保存起来）</font>。</p><pre><code>kubeadm join 47.100.238.0:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:a255ee4b0eefa44a6b23580bbbfbcd7234903d6d33c4efb5d85d7c8f57311f18</code></pre><h4 id="如果初始化失败"><a href="#如果初始化失败" class="headerlink" title="如果初始化失败"></a>如果初始化失败</h4><p>可以执行完下面命令，之后进行重新初始化</p><pre><code>kubeadm reset -frm -rf /etc/cni /etc/kubernetes /var/lib/dockershim /var/lib/etcd /var/lib/kubelet /var/run/kubernetes ~/.kube/* </code></pre><p>当然，也可能删除不干净，这个时候，就需要你根据报错手动删除一些文件（大部分情况下不会的）,然后重新初始化成功。</p><p>如果集群开启ipvs的话，也需要将ipvs重置，以确保不受之前的错误配置影响</p><pre><code>ipvsadm -C</code></pre><h1 id="部署master节点"><a href="#部署master节点" class="headerlink" title="部署master节点"></a>部署master节点</h1><h3 id="只操作master节点！！！"><a href="#只操作master节点！！！" class="headerlink" title="只操作master节点！！！"></a><strong>只操作master节点！！！</strong></h3><h3 id="1-查看token列表（可选）"><a href="#1-查看token列表（可选）" class="headerlink" title="1. 查看token列表（可选）"></a>1. 查看token列表（可选）</h3><pre><code>kubeadm token list</code></pre><p>输出结果：</p><pre><code>TOKEN                     TTL         EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPSabcdef.0123456789abcdef   23h         xxxxx  authentication,signing   The default bootstrap token generated by &#39;kubeadm init&#39;.   system:bootstrappers:kubeadm:default-node-token</code></pre><h3 id="2-重新生成token（可选）"><a href="#2-重新生成token（可选）" class="headerlink" title="2. 重新生成token（可选）"></a>2. 重新生成token（可选）</h3><p><font color="red">（此步骤我没用，所以我的token值不变）</font></p><pre><code>kubeadm token create</code></pre><h3 id="3-获取ca证书sha256编码hash值（可选）"><a href="#3-获取ca证书sha256编码hash值（可选）" class="headerlink" title="3. 获取ca证书sha256编码hash值（可选）"></a>3. 获取ca证书sha256编码hash值（可选）</h3><pre><code>openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &#39;s/^.* //&#39;</code></pre><p>输出结果：<br><code>a255ee4b0eefa44a6b23580bbbfbcd7234903d6d33c4efb5d85d7c8f57311f18</code></p><h3 id="4-master节点加入集群"><a href="#4-master节点加入集群" class="headerlink" title="4. master节点加入集群"></a>4. master节点加入集群</h3><p><strong>1. 如果你没有重新生成token，可以直接执行上面初始化主节点最后生成的“kubeadm join”信息。</strong></p><p><strong>2. 如果你重新在master节点上生成了token，那么也在master节点上重新查看token和证书信息，然后把对应的值替换下来。</strong></p><pre><code>kubeadm join --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:a255ee4b0eefa44a6b23580bbbfbcd7234903d6d33c4efb5d85d7c8f57311f18 47.100.238.0:6443</code></pre><p>如果执行完，报错目录不为空，或者文件已存在，或者端口占用这些情况，可以执行下面的命令（视情况而定）</p><pre><code>kubeadm join --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:a255ee4b0eefa44a6b23580bbbfbcd7234903d6d33c4efb5d85d7c8f57311f18 47.100.238.0:6443 --ignore-preflight-errors=all</code></pre><p><strong>至此，master节点部署完毕，现在来查看下pod运行情况</strong><br><img src="https://s1.ax1x.com/2022/07/19/j79yxP.png" alt="j79yxP.png"> <font color="red">注意：由于此时k8s的cni组件还没部署，此时的dns日志里面应该会报错，等待cni组件中，所以 coredns 暂时还无法正常启动。</font>放到下面解决了。</p><h1 id="kube-proxy代理方案由iptables改为ipvs"><a href="#kube-proxy代理方案由iptables改为ipvs" class="headerlink" title="kube-proxy代理方案由iptables改为ipvs"></a>kube-proxy代理方案由iptables改为ipvs</h1><blockquote><p>部署node1、node2节点前的准备工作</p></blockquote><h3 id="第一步操作所有节点，其他的只操作master节点！！！"><a href="#第一步操作所有节点，其他的只操作master节点！！！" class="headerlink" title="第一步操作所有节点，其他的只操作master节点！！！"></a><strong>第一步操作所有节点，其他的只操作master节点！！！</strong></h3><p>这里的kube-proxy组件默认是使用iptables方案进行启动的，我们来将它改成由ipvs方式启动</p><h3 id="1-加载内核模快"><a href="#1-加载内核模快" class="headerlink" title="1.加载内核模快"></a>1.加载内核模快</h3><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><pre><code>cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOFnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1EOF</code></pre><h4 id="加载系统参数"><a href="#加载系统参数" class="headerlink" title="加载系统参数"></a>加载系统参数</h4><p>-p：从指定的文件加载系统参数，如不指定即从&#x2F;etc&#x2F;sysctl.conf中加载</p><pre><code>sysctl -p</code></pre><h4 id="显示已载入系统的模块"><a href="#显示已载入系统的模块" class="headerlink" title="显示已载入系统的模块"></a>显示已载入系统的模块</h4><pre><code>lsmod|grep ip_vs</code></pre><h4 id="载入指定的模块"><a href="#载入指定的模块" class="headerlink" title="载入指定的模块"></a>载入指定的模块</h4><pre><code>modprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrack</code></pre><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><pre><code>yum install ipvsadm ipset -y</code></pre><h3 id="2-修改kube-proxy配置"><a href="#2-修改kube-proxy配置" class="headerlink" title="2.修改kube-proxy配置"></a>2.修改kube-proxy配置</h3><pre><code>kubectl edit configmap kube-proxy -n kube-system</code></pre><h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><pre><code>   minSyncPeriod: 0s      scheduler: &quot;&quot;      syncPeriod: 30s    kind: KubeProxyConfiguration    metricsBindAddress: 127.0.0.1:10249    mode: &quot;ipvs&quot;                          # 修改此处    nodePortAddresses: null</code></pre><h3 id="3-查看所有kube-proxy的pod"><a href="#3-查看所有kube-proxy的pod" class="headerlink" title="3. 查看所有kube-proxy的pod"></a>3. 查看所有kube-proxy的pod</h3><pre><code>kubectl get pod -n kube-system</code></pre><h3 id="4-删除所有kube-proxy的pod"><a href="#4-删除所有kube-proxy的pod" class="headerlink" title="4.删除所有kube-proxy的pod"></a>4.删除所有kube-proxy的pod</h3><pre><code>kubectl delete pod xxx -n kube-system</code></pre><h3 id="5-校验"><a href="#5-校验" class="headerlink" title="5.校验"></a>5.校验</h3><p>日志出现Using ipvs Proxier即可</p><pre><code>kubectl logs kube-proxy-xxx -n kube-system </code></pre><h1 id="给集群部署flannel-网络组件"><a href="#给集群部署flannel-网络组件" class="headerlink" title="给集群部署flannel 网络组件"></a>给集群部署flannel 网络组件</h1><blockquote><p>部署node1、node2节点前的准备工作</p></blockquote><h3 id="所有节点都需要！！！-6"><a href="#所有节点都需要！！！-6" class="headerlink" title="所有节点都需要！！！"></a><strong>所有节点都需要！！！</strong></h3><h3 id="1-下载flannel文件"><a href="#1-下载flannel文件" class="headerlink" title="1. 下载flannel文件"></a>1. 下载flannel文件</h3><p>文件地址：<a href="https://github.com/coreos/flannel/blob/master/Documentation/kube-flannel.yml">https://github.com/coreos/flannel/blob/master/Documentation/kube-flannel.yml</a><br>copy下来，放文件里</p><h3 id="2-修改flannel文件"><a href="#2-修改flannel文件" class="headerlink" title="2. 修改flannel文件"></a>2. 修改flannel文件</h3><h4 id="共修改两个地方，一个是args下，添加"><a href="#共修改两个地方，一个是args下，添加" class="headerlink" title="共修改两个地方，一个是args下，添加"></a>共修改两个地方，一个是args下，添加</h4><pre><code>args:- --public-ip=$(PUBLIC_IP) # 添加此参数，申明公网IP- --iface=eth0 # 添加此参数，绑定网卡</code></pre><h4 id="然后是env下"><a href="#然后是env下" class="headerlink" title="然后是env下"></a>然后是env下</h4><pre><code>env:- name: PUBLIC_IP #添加环境变量valueFrom:fieldRef:fieldPath: status.podIP</code></pre><h4 id="完整文件内容"><a href="#完整文件内容" class="headerlink" title="完整文件内容"></a>完整文件内容</h4><pre><code>---kind: NamespaceapiVersion: v1metadata:  name: kube-flannel  labels:    pod-security.kubernetes.io/enforce: privileged---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata:  name: flannelrules:- apiGroups:  - &quot;&quot;  resources:  - pods  verbs:  - get- apiGroups:  - &quot;&quot;  resources:  - nodes  verbs:  - list  - watch- apiGroups:  - &quot;&quot;  resources:  - nodes/status  verbs:  - patch---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata:  name: flannelroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: flannelsubjects:- kind: ServiceAccount  name: flannel  namespace: kube-flannel---apiVersion: v1kind: ServiceAccountmetadata:  name: flannel  namespace: kube-flannel---kind: ConfigMapapiVersion: v1metadata:  name: kube-flannel-cfg  namespace: kube-flannel  labels:    tier: node    app: flanneldata:  cni-conf.json: |    &#123;      &quot;name&quot;: &quot;cbr0&quot;,      &quot;cniVersion&quot;: &quot;0.3.1&quot;,      &quot;plugins&quot;: [        &#123;          &quot;type&quot;: &quot;flannel&quot;,          &quot;delegate&quot;: &#123;            &quot;hairpinMode&quot;: true,            &quot;isDefaultGateway&quot;: true          &#125;        &#125;,        &#123;          &quot;type&quot;: &quot;portmap&quot;,          &quot;capabilities&quot;: &#123;            &quot;portMappings&quot;: true          &#125;        &#125;      ]    &#125;  net-conf.json: |    &#123;      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,      &quot;Backend&quot;: &#123;        &quot;Type&quot;: &quot;vxlan&quot;      &#125;    &#125;---apiVersion: apps/v1kind: DaemonSetmetadata:  name: kube-flannel-ds  namespace: kube-flannel  labels:    tier: node    app: flannelspec:  selector:    matchLabels:      app: flannel  template:    metadata:      labels:        tier: node        app: flannel    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:            - matchExpressions:              - key: kubernetes.io/os                operator: In                values:                - linux      hostNetwork: true      priorityClassName: system-node-critical      tolerations:      - operator: Exists        effect: NoSchedule      serviceAccountName: flannel      initContainers:      - name: install-cni-plugin       #image: flannelcni/flannel-cni-plugin:v1.1.0 for ppc64le and mips64le (dockerhub limitations may apply)        image: rancher/mirrored-flannelcni-flannel-cni-plugin:v1.1.0        command:        - cp        args:        - -f        - /flannel        - /opt/cni/bin/flannel        volumeMounts:        - name: cni-plugin          mountPath: /opt/cni/bin      - name: install-cni       #image: flannelcni/flannel:v0.18.1 for ppc64le and mips64le (dockerhub limitations may apply)        image: rancher/mirrored-flannelcni-flannel:v0.18.1        command:        - cp        args:        - -f        - /etc/kube-flannel/cni-conf.json        - /etc/cni/net.d/10-flannel.conflist        volumeMounts:        - name: cni          mountPath: /etc/cni/net.d        - name: flannel-cfg          mountPath: /etc/kube-flannel/      containers:      - name: kube-flannel       #image: flannelcni/flannel:v0.18.1 for ppc64le and mips64le (dockerhub limitations may apply)        image: rancher/mirrored-flannelcni-flannel:v0.18.1        command:        - /opt/bin/flanneld        args:        - --ip-masq        - --kube-subnet-mgr        - --public-ip=$(PUBLIC_IP) # 添加此参数，申明公网IP        - --iface=eth0 # 添加此参数，绑定网卡        resources:          requests:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;          limits:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;        securityContext:          privileged: false          capabilities:            add: [&quot;NET_ADMIN&quot;, &quot;NET_RAW&quot;]        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: POD_NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        - name: EVENT_QUEUE_DEPTH          value: &quot;5000&quot;        - name: PUBLIC_IP #添加环境变量          valueFrom:            fieldRef:              fieldPath: status.podIP        volumeMounts:        - name: run          mountPath: /run/flannel        - name: flannel-cfg          mountPath: /etc/kube-flannel/        - name: xtables-lock          mountPath: /run/xtables.lock      volumes:      - name: run        hostPath:          path: /run/flannel      - name: cni-plugin        hostPath:          path: /opt/cni/bin      - name: cni        hostPath:          path: /etc/cni/net.d      - name: flannel-cfg        configMap:          name: kube-flannel-cfg      - name: xtables-lock        hostPath:          path: /run/xtables.lock          type: FileOrCreate</code></pre><h3 id="3-执行flannel文件："><a href="#3-执行flannel文件：" class="headerlink" title="3. 执行flannel文件："></a>3. 执行flannel文件：</h3><pre><code>  kubectl apply -f kube-flannel.yml</code></pre><h3 id="4-执行完后可以在查看k8s集群的pod节点："><a href="#4-执行完后可以在查看k8s集群的pod节点：" class="headerlink" title="4. 执行完后可以在查看k8s集群的pod节点："></a>4. 执行完后可以在查看k8s集群的pod节点：</h3><pre><code>  kubectl get pod -n kube-system -o wide</code></pre><p>可以发现此时coredns都启动成功。</p><pre><code>kubectl get pod -n kube-flannel -o wide</code></pre><p>可以发现此时flannel也启动成功。</p><h1 id="检查集群状态"><a href="#检查集群状态" class="headerlink" title="检查集群状态"></a>检查集群状态</h1><pre><code>  kubectl get cs</code></pre><p>会发现此时其实 scheduler 和controller manager 健康检查是失败的，状态都是：<font color="red">Unhealthy</font></p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><h4 id="1-去掉配置文件里“-–port-x3D-0-”这个设置"><a href="#1-去掉配置文件里“-–port-x3D-0-”这个设置" class="headerlink" title="1. 去掉配置文件里“ –port&#x3D;0 ”这个设置"></a>1. 去掉配置文件里“ –port&#x3D;0 ”这个设置</h4><p><strong>配置文件路径：</strong></p><pre><code>/etc/kubernetes/manifests/kube-scheduler.yaml/etc/kubernetes/manifests/kube-controller-manager.yaml</code></pre><h4 id="2-重启-sudo-systemctl-restart-kubelet"><a href="#2-重启-sudo-systemctl-restart-kubelet" class="headerlink" title="2. 重启 sudo systemctl restart kubelet"></a>2. 重启 sudo systemctl restart kubelet</h4><h4 id="3-重新查看-kubectl-get-cs-应该就解决问题了。"><a href="#3-重新查看-kubectl-get-cs-应该就解决问题了。" class="headerlink" title="3. 重新查看 kubectl get cs 应该就解决问题了。"></a>3. 重新查看 kubectl get cs 应该就解决问题了。</h4><h1 id="配置k8s集群-命令补全"><a href="#配置k8s集群-命令补全" class="headerlink" title="配置k8s集群 命令补全"></a>配置k8s集群 命令补全</h1><h3 id="只操作master节点！！！-1"><a href="#只操作master节点！！！-1" class="headerlink" title="只操作master节点！！！"></a><strong>只操作master节点！！！</strong></h3><pre><code>yum install -y bash-completionsource &lt;(kubectl completion bash)echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrcsource ~/.bashrc</code></pre><h1 id="部署node节点"><a href="#部署node节点" class="headerlink" title="部署node节点"></a>部署node节点</h1><p>执行join命令前需要做调整。</p><h3 id="1-修改kubelet启动参数（重点，所有node节点都要操作）"><a href="#1-修改kubelet启动参数（重点，所有node节点都要操作）" class="headerlink" title="1. 修改kubelet启动参数（重点，所有node节点都要操作）"></a>1. 修改kubelet启动参数（重点，所有node节点都要操作）</h3><h4 id="在末尾添加参数-–node-ip-x3D-node节点的公网IP"><a href="#在末尾添加参数-–node-ip-x3D-node节点的公网IP" class="headerlink" title="在末尾添加参数 –node-ip&#x3D;node节点的公网IP"></a>在末尾添加参数 –node-ip&#x3D;node节点的公网IP</h4><pre><code>vim /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf</code></pre><p><font color="red">注意，这步很重要，如果不做，节点仍然会使用内网IP注册进集群</font></p><h4 id="文件内容："><a href="#文件内容：" class="headerlink" title="文件内容："></a>文件内容：</h4><pre><code># Note: This dropin only works with kubeadm and kubelet v1.11+[Service]Environment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&quot;Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&quot;# This is a file that &quot;kubeadm init&quot; and &quot;kubeadm join&quot; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamicallyEnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env# This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use# the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.EnvironmentFile=-/etc/sysconfig/kubeletExecStart=ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS --node-ip=1.117.142.4</code></pre><h3 id="2-将node1、node2加入集群"><a href="#2-将node1、node2加入集群" class="headerlink" title="2. 将node1、node2加入集群"></a>2. 将node1、node2加入集群</h3><p>node1、node2各执行一次刚才master提示的join命令</p><pre><code>kubeadm join 47.100.238.0:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:a255ee4b0eefa44a6b23580bbbfbcd7234903d6d33c4efb5d85d7c8f57311f18</code></pre><h3 id="3-查看是否添加进集群"><a href="#3-查看是否添加进集群" class="headerlink" title="3. 查看是否添加进集群"></a>3. 查看是否添加进集群</h3><pre><code>kubectl get pod -n kube-system -o wide</code></pre><h1 id="重置集群"><a href="#重置集群" class="headerlink" title="重置集群"></a>重置集群</h1><p>在搭建集群时，可能会遇到节点配置失败的情况，此时可以将该节点移出集群，在将节点移出集群时，应该将该节点上正在运行的Pod进行驱离。</p><pre><code>例如：驱离名为&quot;k8s-node-1&quot;的节点上的pod（master上操作）[root@master ~]# kubectl drain k8s-node-1 --delete-local-data --force --ignore-daemonsets删除节点（master上）[root@master ~]# kubectl delete node k8s-node-1重置节点(node上-也就是在被删除的节点上)[root@node1 ~]# kubeadm reset需要注意：注1：需要把master也驱离、删除、重置，这里给我坑死了，第一次没有驱离和删除master，最后的结果是查看结果一切正常，但coredns死活不能用，切勿尝试</code></pre>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH连接</title>
      <link href="/post/9a57782b.html"/>
      <url>/post/9a57782b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="使用密码连接ssh"><a href="#使用密码连接ssh" class="headerlink" title="使用密码连接ssh"></a>使用密码连接ssh</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 连接ssh默认22端口</span><br><span class="line">ssh root@ip地址</span><br><span class="line"></span><br><span class="line"># 如果ssh不是默认的22端口，可以使用 -p 指定端口 例如下面ssh连接2222端口</span><br><span class="line">ssh root@ip地址 -p 2222</span><br></pre></td></tr></table></figure><h2 id="使用密钥连接SSH"><a href="#使用密钥连接SSH" class="headerlink" title="使用密钥连接SSH"></a>使用密钥连接SSH</h2><p>当经常需要连接一个服务器的时候，那么每次连接都要输入密码，是否就觉得太过于繁琐了，这里当然就可以使用密钥进行登陆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 打开mac终端</span><br><span class="line"># 进入ssh目录</span><br><span class="line">cd ~/.ssh/</span><br><span class="line"></span><br><span class="line"># 生成属于自己的密钥(连续回车就可以了，如果不想连续回车，第一次输入的是文件名，第二次第三次输入的是密码。)</span><br><span class="line"># 其中可以使用常用参数：-t 指定加密算法，-C 指定邮箱</span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line"># 然后将自己的密钥，推送到指定服务器,下面是推送指令，并且会自动推送到服务器对应目录</span><br><span class="line">ssh-copy-id root@ip地址</span><br><span class="line"></span><br><span class="line"># 推送成功之后，就可以通过ssh直接连接了,就不会再提示你输入密码了</span><br><span class="line">ssh root@ip地址</span><br></pre></td></tr></table></figure><h2 id="简化密钥连接SSH"><a href="#简化密钥连接SSH" class="headerlink" title="简化密钥连接SSH"></a>简化密钥连接SSH</h2><p>上述的方法相对较方便了，但是每次都要输入ip地址，还是很麻烦，这种时候就可以给ip配置一个别名</p><p>创建config文件，简化连接操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建config文件</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><p>创建好了文件之后，进行相关的配置，比如我们刚才将我们本地的密钥，推送到了ip地址，这个ip地址，我们便可以进行如下的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host master</span><br><span class="line">Hostname 47.100.238.0</span><br><span class="line">Port 22</span><br><span class="line">User root</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>进行了上述配置之后，就可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 只需要使用以下指令就可以连接到指定服务器</span><br><span class="line">ssh master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql--inner join、left join、right join</title>
      <link href="/post/416ace21.html"/>
      <url>/post/416ace21.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><blockquote><p>取两个表的交集</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">FROM</span> table_name1 <span class="keyword">inner</span> <span class="keyword">join</span> table_name2 <span class="keyword">on</span> table_name1.字段名<span class="operator">=</span>table_name2.字段名;</span><br></pre></td></tr></table></figure><blockquote><p>取出左表（table1）所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则取出结果集中涉及到右表的字段会用 None填充。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">FROM</span> table_name1 <span class="keyword">left</span> <span class="keyword">join</span> table_name2 <span class="keyword">on</span> table_name1.字段名<span class="operator">=</span>table_name2.字段名;</span><br></pre></td></tr></table></figure><blockquote><p>取出右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则取出结果集中涉及到左表的字段会用 None填充。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">FROM</span> table_name1 <span class="keyword">right</span> <span class="keyword">join</span> table_name2 <span class="keyword">on</span> table_name1.字段名<span class="operator">=</span>table_name2.字段名;</span><br></pre></td></tr></table></figure><h1 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;wanghan...&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>:<span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">URL = <span class="string">&#x27;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;database&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(**config)</span><br><span class="line">engine = create_engine(URL)</span><br><span class="line"></span><br><span class="line">session = sessionmaker(bind=engine)()</span><br></pre></td></tr></table></figure><h4 id="数据库信息"><a href="#数据库信息" class="headerlink" title="数据库信息"></a>数据库信息</h4><p><img src="https://s1.ax1x.com/2022/07/13/jRYYi8.png" alt="jRYYi8.png"><br><img src="https://s1.ax1x.com/2022/07/13/jRtlpF.png" alt="jRtlpF.png"></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h3 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> <span class="string">&#x27;select User.name,ach.chinese,ach.mathematics,ach.english from Achievement as ach inner join User on ach.user_id = User.id&#x27;</span></span><br><span class="line">data <span class="operator">=</span> session.execute(<span class="keyword">sql</span>)</span><br><span class="line">print(data.fetchall())</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&#x27;hwang&#x27;, 99, 99, 99)]</span><br></pre></td></tr></table></figure><hr><h3 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">sql2 <span class="operator">=</span> <span class="string">&#x27;select User.name,ach.chinese,ach.mathematics,ach.english from Achievement as ach left join User on ach.user_id = User.id&#x27;</span></span><br><span class="line">data <span class="operator">=</span> session.execute(sql2)</span><br><span class="line">print(data.fetchall())</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&#x27;hwang&#x27;, 99, 99, 99), (None, 100, 100, 100)]</span><br></pre></td></tr></table></figure><hr><h3 id="right-join"><a href="#right-join" class="headerlink" title="right join"></a>right join</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">sql3 <span class="operator">=</span> <span class="string">&#x27;select User.name,ach.chinese,ach.mathematics,ach.english from Achievement as ach right join User on ach.user_id = User.id&#x27;</span></span><br><span class="line">data <span class="operator">=</span> session.execute(sql3)</span><br><span class="line">print(data.fetchall())</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&#x27;hwang&#x27;, 99, 99, 99), (&#x27;小王&#x27;, None, None, None), (&#x27;小米&#x27;, None, None, None)]</span><br></pre></td></tr></table></figure><hr><h1 id="关闭数据库链接"><a href="#关闭数据库链接" class="headerlink" title="关闭数据库链接"></a>关闭数据库链接</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql--查找</title>
      <link href="/post/e18b8621.html"/>
      <url>/post/e18b8621.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h4 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;wanghan...&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>:<span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">URL = <span class="string">&#x27;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;database&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(**config)</span><br><span class="line">engine = create_engine(URL)</span><br><span class="line"></span><br><span class="line">session = sessionmaker(bind=engine)()</span><br></pre></td></tr></table></figure><h4 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> <span class="string">&#x27;select name,age from User&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="提交并链接数据库"><a href="#提交并链接数据库" class="headerlink" title="提交并链接数据库"></a>提交并链接数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = session.execute(sql)</span><br><span class="line"><span class="built_in">print</span>(data.fetchall())</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql--删除</title>
      <link href="/post/3efde339.html"/>
      <url>/post/3efde339.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> 条件_字段名<span class="operator">=</span>条件_字段值;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h4 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;wanghan...&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>:<span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">URL = <span class="string">&#x27;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;database&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(**config)</span><br><span class="line">engine = create_engine(URL)</span><br><span class="line"></span><br><span class="line">session = sessionmaker(bind=engine)()</span><br></pre></td></tr></table></figure><h4 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> <span class="string">&#x27;delete from User where name = &quot;hwang&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="提交并链接数据库"><a href="#提交并链接数据库" class="headerlink" title="提交并链接数据库"></a>提交并链接数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.execute(sql)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql--修改</title>
      <link href="/post/db8b7690.html"/>
      <url>/post/db8b7690.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table_name <span class="keyword">set</span> 字段名<span class="number">1</span><span class="operator">=</span>新值<span class="number">1</span>,字段名<span class="number">2</span><span class="operator">=</span>新值<span class="number">2</span> <span class="keyword">WHERE</span> 条件_字段名<span class="operator">=</span>条件_字段值;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h4 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;wanghan...&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>:<span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">URL = <span class="string">&#x27;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;database&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(**config)</span><br><span class="line">engine = create_engine(URL)</span><br><span class="line"></span><br><span class="line">session = sessionmaker(bind=engine)()</span><br></pre></td></tr></table></figure><h4 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> <span class="string">&#x27;update User set age=21 where name=&quot;hwang&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="提交并关闭链接"><a href="#提交并关闭链接" class="headerlink" title="提交并关闭链接"></a>提交并关闭链接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.execute(sql)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--read_sql与read_sql_table、read_sql_query 的区别</title>
      <link href="/post/7dcfebfb.html"/>
      <url>/post/7dcfebfb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul><li>read_sql_query &amp;nbsp; &amp;nbsp; 读取sql，返回DataFrame格式</li><li>read_sql_table&amp;nbsp; &amp;nbsp; &amp;nbsp; 读取表名，返回DataFrame格式</li><li>read_sql &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 读取sql或表名，返回DataFrame格式</li></ul><h1 id="read-sql-query"><a href="#read-sql-query" class="headerlink" title="read_sql_query"></a>read_sql_query</h1><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.read_sql_query(sql，con，index_col = <span class="literal">None</span>，coerce_float = <span class="literal">True</span>，params = <span class="literal">None</span>，parse_dates = <span class="literal">None</span>，chunksize = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><p>sql：执行的sql语句<br>con：数据库链接方式<br>index_col：将设置值作为返回结果集中的索引列。通常为：index_col&#x3D;’id’<br>params：向sql传递的参数，看源码可以设置为字典、元组或列表。通常为：params&#x3D;{‘key’:’value’}</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">db_config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;wanghan...&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db_url = <span class="string">&#x27;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;database&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(**db_config)</span><br><span class="line">engine = create_engine(db_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找</span></span><br><span class="line">names=[<span class="string">&#x27;hwang&#x27;</span>,<span class="string">&#x27;hwang1&#x27;</span>]</span><br><span class="line">sql1= <span class="string">&#x27;&#x27;&#x27;select id,name from User where name in %(names)s&#x27;&#x27;&#x27;</span></span><br><span class="line">df1 = pd.read_sql_query(sql1,engine,index_col=<span class="string">&#x27;id&#x27;</span>,params=&#123;<span class="string">&#x27;names&#x27;</span>:names&#125;)</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 查找</span></span><br><span class="line">sql2= <span class="string">&#x27;&#x27;&#x27;select id,name from User where name in %(names)s&#x27;&#x27;&#x27;</span></span><br><span class="line">df = pd.DataFrame([<span class="string">&quot;hwang&quot;</span>,<span class="string">&quot;hwang1&quot;</span>],columns=[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">df = df.astype(<span class="built_in">str</span>).values.tolist()</span><br><span class="line">df2 = pd.read_sql_query(sql2,engine,index_col=<span class="string">&#x27;id&#x27;</span>,params=&#123;<span class="string">&#x27;names&#x27;</span>:df&#125;)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加</span></span><br><span class="line">sql3 = <span class="string">&#x27;&#x27;&#x27;insert into User (name,age) values (%(names)s,%(ages)s)&#x27;&#x27;&#x27;</span></span><br><span class="line">df3 = pd.read_sql_query(sql3,engine,params=&#123;<span class="string">&#x27;names&#x27;</span>:<span class="string">&#x27;test111&#x27;</span>,<span class="string">&#x27;ages&#x27;</span>:<span class="number">12</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sql4 = <span class="string">&#x27;&#x27;&#x27;update User set name = %(names)s where name = %(names_old)s&#x27;&#x27;&#x27;</span></span><br><span class="line">df4 = pd.read_sql_query(sql4,engine,params=&#123;<span class="string">&#x27;names&#x27;</span>:<span class="string">&#x27;test1111&#x27;</span>,<span class="string">&#x27;names_old&#x27;</span>:<span class="string">&#x27;test111&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">sql5 = <span class="string">&#x27;&#x27;&#x27;delete from User where name = %(names)s&#x27;&#x27;&#x27;</span></span><br><span class="line">df5 = pd.read_sql_query(sql4,engine,params=&#123;<span class="string">&#x27;names&#x27;</span>:<span class="string">&#x27;test1111&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># df1</span></span><br><span class="line">      name</span><br><span class="line"><span class="built_in">id</span>        </span><br><span class="line"><span class="number">4</span>    hwang</span><br><span class="line"><span class="number">1</span>   hwang1</span><br><span class="line"></span><br><span class="line"><span class="comment"># df2</span></span><br><span class="line">      name</span><br><span class="line"><span class="built_in">id</span>        </span><br><span class="line"><span class="number">4</span>    hwang</span><br><span class="line"><span class="number">1</span>   hwang1</span><br></pre></td></tr></table></figure><p>后面的增加、删除和修改没有返回值，但会抛出一个异常ResourceClosedError并结束程序继续运行。如果想执行完继续往下运行，可以使用try进行捕获。</p><h1 id="read-sql-table"><a href="#read-sql-table" class="headerlink" title="read_sql_table"></a>read_sql_table</h1><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.read_sql_table(table_name, con, schema=<span class="literal">None</span>, index_col=<span class="literal">None</span>, coerce_float=<span class="literal">True</span>, parse_dates=<span class="literal">None</span>, columns=<span class="literal">None</span>, chunksize=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h1 id="read-sql"><a href="#read-sql" class="headerlink" title="read_sql"></a>read_sql</h1><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.read_sql(sql, con, index_col=<span class="literal">None</span>, coerce_float=<span class="literal">True</span>, params=<span class="literal">None</span>, parse_dates=<span class="literal">None</span>, columns=<span class="literal">None</span>, chunksize=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--unique函数</title>
      <link href="/post/1f7af17c.html"/>
      <url>/post/1f7af17c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><h4 id="作用：unique-函数用于获取Series对象的唯一值。"><a href="#作用：unique-函数用于获取Series对象的唯一值。" class="headerlink" title="作用：unique()函数用于获取Series对象的唯一值。"></a>作用：unique()函数用于获取Series对象的唯一值。</h4></blockquote><ul><li>唯一性按出现顺序返回。基于哈希表的唯一，因此不排序</li><li>返回：ndarray 或 ExtensionArray作为 NumPy 数组返回的唯一值。</li><li>语法：Series.unique(self)</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Helen&quot;</span>, <span class="string">&quot;Jack&quot;</span>],<span class="string">&#x27;age&#x27;</span>: [<span class="number">28</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">36</span>],<span class="string">&#x27;score&#x27;</span>:[<span class="number">98</span>,<span class="number">92</span>,<span class="number">91</span>,<span class="number">89</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;name&quot;</span>].unique()) <span class="comment"># [&#x27;Jack&#x27; &#x27;Tom&#x27; &#x27;Helen&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;name&quot;</span>].nunique()) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 根据元素出现的顺序返回，所有元素的唯一值（ndarray）</span></span><br><span class="line"><span class="built_in">print</span>(df1.unique()) <span class="comment"># [1 2 3 4 5]</span></span><br><span class="line"><span class="comment"># 返回唯一元素的个数</span></span><br><span class="line"><span class="built_in">print</span>(df1.nunique()) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p>扩展：<br>    nunique：返回整个数组中数值不同的个数，可以通过参数dropna来自定义设置在统计不同值过程中是否需要包含None值，而unique()方法中没有可设置的参数，该方法在统计时无法排除None值。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--清洗数据</title>
      <link href="/post/33dce692.html"/>
      <url>/post/33dce692.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h1><p>这里你需要知道DateFrame中布尔索引这个东西，可以用满足布尔条件的列值来过滤数据，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Helen&quot;</span>, <span class="string">&quot;John&quot;</span>],<span class="string">&#x27;age&#x27;</span>: [<span class="number">28</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">36</span>],<span class="string">&#x27;score&#x27;</span>:[<span class="number">98</span>,<span class="number">92</span>,<span class="number">91</span>,<span class="number">89</span>]&#125;)</span><br><span class="line"></span><br><span class="line">info = df.age&gt;<span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"></span><br><span class="line">info = df[df.age&gt;<span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0    False</span><br><span class="line">1     True</span><br><span class="line">2     True</span><br><span class="line">3     True</span><br><span class="line">Name: age, dtype: bool</span><br><span class="line"></span><br><span class="line">    name  age  score</span><br><span class="line">1    Tom   39     92</span><br><span class="line">2  Helen   34     91</span><br><span class="line">3   John   36     89</span><br></pre></td></tr></table></figure><h1 id="isin"><a href="#isin" class="headerlink" title="isin()"></a>isin()</h1><h3 id="isin添加数据"><a href="#isin添加数据" class="headerlink" title="isin添加数据"></a>isin添加数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Helen&quot;</span>, <span class="string">&quot;John&quot;</span>],<span class="string">&#x27;age&#x27;</span>: [<span class="number">28</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">36</span>],<span class="string">&#x27;score&#x27;</span>:[<span class="number">98</span>,<span class="number">92</span>,<span class="number">91</span>,<span class="number">89</span>]&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">df[<span class="string">&quot;Class&quot;</span>] = [<span class="string">&quot;一年级&quot;</span>,<span class="string">&quot;二年级&quot;</span>,<span class="string">&quot;三年级&quot;</span>,<span class="string">&quot;四年级&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    name  age  score Class</span><br><span class="line">0   Jack   28     98   一年级</span><br><span class="line">1    Tom   39     92   二年级</span><br><span class="line">2  Helen   34     91   三年级</span><br><span class="line">3   John   36     89   四年级</span><br></pre></td></tr></table></figure><h3 id="isin筛选数据"><a href="#isin筛选数据" class="headerlink" title="isin筛选数据"></a>isin筛选数据</h3><p>筛选某一列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = df.Class.isin([<span class="string">&quot;一年级&quot;</span>,<span class="string">&quot;二年级&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"></span><br><span class="line">info = df[df.Class.isin([<span class="string">&quot;一年级&quot;</span>,<span class="string">&quot;二年级&quot;</span>])]</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0     True</span><br><span class="line">1     True</span><br><span class="line">2    False</span><br><span class="line">3    False</span><br><span class="line">Name: Class, dtype: bool</span><br><span class="line"></span><br><span class="line">   name  age  score Class</span><br><span class="line">0  Jack   28     98   一年级</span><br><span class="line">1   Tom   39     92   二年级</span><br></pre></td></tr></table></figure><p>筛选所有的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = df.isin([<span class="string">&quot;一年级&quot;</span>,<span class="string">&quot;二年级&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"></span><br><span class="line">info = df[df.isin([<span class="string">&quot;一年级&quot;</span>,<span class="string">&quot;二年级&quot;</span>])]</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    name    age  score  Class</span><br><span class="line">0  False  False  False   True</span><br><span class="line">1  False  False  False   True</span><br><span class="line">2  False  False  False  False</span><br><span class="line">3  False  False  False  False</span><br><span class="line"></span><br><span class="line">  name  age  score Class</span><br><span class="line">0  NaN  NaN    NaN   一年级</span><br><span class="line">1  NaN  NaN    NaN   二年级</span><br><span class="line">2  NaN  NaN    NaN   NaN</span><br><span class="line">3  NaN  NaN    NaN   NaN</span><br></pre></td></tr></table></figure><h1 id="isin应用"><a href="#isin应用" class="headerlink" title="isin应用"></a>isin应用</h1><blockquote><p>在处理数据量大的需求时，可以采用分段处理，这里借用isin来进行分段处理</p></blockquote><p>假设一个需求，我们已知电费的消耗数据和点给的价格</p><p>第一行代表2001年1月13日零点消耗了0.586kwh的电</p><table><thead><tr><th>date time</th><th>energy_kwh</th></tr></thead><tbody><tr><td>2001&#x2F;1&#x2F;13 0:00</td><td>0.586</td></tr><tr><td>2001&#x2F;1&#x2F;13 1:00</td><td>0.58</td></tr><tr><td>2001&#x2F;1&#x2F;13 2:00</td><td>0.572</td></tr><tr><td>2001&#x2F;1&#x2F;13 3:00</td><td>0.596</td></tr><tr><td>2001&#x2F;1&#x2F;13 4:00</td><td>0.592</td></tr><tr><td>2001&#x2F;1&#x2F;13 5:00</td><td>0.592</td></tr><tr><td>2001&#x2F;1&#x2F;13 6:00</td><td>0.596</td></tr><tr><td>2001&#x2F;1&#x2F;13 7:00</td><td>0.239</td></tr><tr><td>2001&#x2F;1&#x2F;13 8:00</td><td>0.566</td></tr><tr><td>2001&#x2F;1&#x2F;13 9:00</td><td>0.557</td></tr></tbody></table><table><thead><tr><th>时段</th><th>单位电费（元kwh)</th><th>时间段</th></tr></thead><tbody><tr><td>高峰期</td><td>0.75</td><td>17：00-24：00</td></tr><tr><td>正常期</td><td>0.68</td><td>7：00-17：00</td></tr><tr><td>低峰期</td><td>0.6</td><td>0：00-7:00</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用isin筛选出各时段，分段处理</span></span><br><span class="line">df.set_index(<span class="string">&#x27;date_time&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isin_method</span>(<span class="params">df</span>):</span><br><span class="line">    peak_hours = df.index.hour.isin(<span class="built_in">range</span>(<span class="number">17</span>, <span class="number">24</span>))</span><br><span class="line">    simple_hours = df.index.hour.isin(<span class="built_in">range</span>(<span class="number">7</span>, <span class="number">17</span>))</span><br><span class="line">    off_peak_hours = df.index.hour.isin(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">    df.loc[peak_hours, <span class="string">&#x27;cost&#x27;</span>] = df.loc[peak_hours, <span class="string">&#x27;energy_kwh&#x27;</span>] * <span class="number">0.75</span></span><br><span class="line">    df.loc[simple_hours,<span class="string">&#x27;cost&#x27;</span>] = df.loc[simple_hours, <span class="string">&#x27;energy_kwh&#x27;</span>] * <span class="number">0.68</span></span><br><span class="line">    df.loc[off_peak_hours,<span class="string">&#x27;cost&#x27;</span>] = df.loc[off_peak_hours, <span class="string">&#x27;energy_kwh&#x27;</span>] * <span class="number">0.6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--随机抽样</title>
      <link href="/post/58f8d422.html"/>
      <url>/post/58f8d422.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>随机抽样，它可以帮助我们从大量的数据中快速的构建出一组数据分析模型。</p><p><strong>sample() 函数的语法格式如下：</strong><br><code>DataFrame.sample(n=None, frac=None, replace=False, weights=None, random_state=None, axis=None)</code></p><p>参数说明：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>n</td><td>表示要抽取的行数</td></tr><tr><td>frac</td><td>表示要抽取的比例，比如frac&#x3D;0.5，代表抽取总体数据的50%</td></tr><tr><td>replace</td><td>布尔值参数，表示是否以有放回抽样的方式进行选择，默认为False，取出数据后不再放回。说白了默认的就是第一次抽到的，第二次不会再抽到了</td></tr><tr><td>random_state</td><td>可选参数，控制随机状态，默认为None，表示随机数据不会重复；若为1表示会取得重复数据</td></tr><tr><td>axis</td><td>表示在哪个方向抽取数据（axis&#x3D;1 表示列，axis&#x3D;0 表示行）</td></tr></tbody></table><h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1><p>以下是对每个参数的示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Helen&quot;</span>, <span class="string">&quot;John&quot;</span>],<span class="string">&#x27;age&#x27;</span>: [<span class="number">28</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">36</span>],<span class="string">&#x27;score&#x27;</span>:[<span class="number">98</span>,<span class="number">92</span>,<span class="number">91</span>,<span class="number">89</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机选择一行</span></span><br><span class="line">info = df.sample(n=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机选择一列</span></span><br><span class="line">info = df.sample(n=<span class="number">1</span>,axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    name  age  score</span><br><span class="line">0   Jack   28     98</span><br><span class="line">1    Tom   39     92</span><br><span class="line">2  Helen   34     91</span><br><span class="line">3   John   36     89</span><br><span class="line"></span><br><span class="line">  name  age  score</span><br><span class="line">1  Tom   39     92</span><br><span class="line"></span><br><span class="line">   score</span><br><span class="line">0     98</span><br><span class="line">1     92</span><br><span class="line">2     91</span><br><span class="line">3     89</span><br></pre></td></tr></table></figure><p>再看一组示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;data1&#x27;</span>: [<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>], <span class="string">&#x27;data2&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">8</span>], <span class="string">&#x27;data3&#x27;</span>: [<span class="number">12</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>]&#125;, index=[<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Parker&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;William&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机从&quot;data1&quot;列选取三个值</span></span><br><span class="line">info = df[<span class="string">&#x27;data1&#x27;</span>].sample(n=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机抽取百分之五十的比例，且每次都是抽取完放回，然后再次从完整的数据中抽出</span></span><br><span class="line">info = df.sample(frac=<span class="number">0.5</span>,replace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机抽取两行数据，且&#x27;data3&#x27;为权重，且允许重复数据出现</span></span><br><span class="line">info = df.sample(n=<span class="number">2</span>,weights=<span class="string">&#x27;data3&#x27;</span>,random_state=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">         data1  data2  data3</span><br><span class="line">John         2      2     12</span><br><span class="line">Parker       6      5      2</span><br><span class="line">Smith        8      0      1</span><br><span class="line">William      0      8      8</span><br><span class="line"></span><br><span class="line">Smith      8</span><br><span class="line">William    0</span><br><span class="line">John       2</span><br><span class="line">Name: data1, dtype: int64</span><br><span class="line"></span><br><span class="line">        data1  data2  data3</span><br><span class="line">John        2      2     12</span><br><span class="line">Parker      6      5      2</span><br><span class="line"></span><br><span class="line">         data1  data2  data3</span><br><span class="line">John         2      2     12</span><br><span class="line">William      0      8      8</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--iteritems、iterrows、itertuples</title>
      <link href="/post/64b1f25a.html"/>
      <url>/post/64b1f25a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ul><li><p>逐行检索：</p><ul><li>DataFrame.iterrows()</li><li>DataFrame.itertuples()</li></ul></li><li><p>逐列检索:</p><ul><li>DataFrame.iteritems()</li></ul></li></ul><h1 id="逐行检索"><a href="#逐行检索" class="headerlink" title="逐行检索"></a>逐行检索</h1><h2 id="iterrows"><a href="#iterrows" class="headerlink" title="iterrows"></a>iterrows</h2><p>输出：index，row （ 索引，每一行的数据（列名，行列值））</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>:[<span class="number">24</span>,<span class="number">32</span>], <span class="string">&quot;state&quot;</span>:[<span class="string">&quot;NY&quot;</span>,<span class="string">&quot;CA&quot;</span>], <span class="string">&quot;point&quot;</span>:[<span class="number">64</span>,<span class="number">92</span>]&#125;, index=[<span class="string">&quot;Alice&quot;</span>,<span class="string">&quot;Bob&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐行检索</span></span><br><span class="line"><span class="keyword">for</span> index,row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="comment"># 每一行的index名称</span></span><br><span class="line">    <span class="built_in">print</span>(index)</span><br><span class="line">    <span class="comment"># 每一行的数据 输出：（列名，列名column与当前行名index行对应的数据）</span></span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line">    <span class="comment"># 通过column，来输出与当前column对应的那一列的值</span></span><br><span class="line">    <span class="built_in">print</span>(row[<span class="string">&quot;age&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>iterrows返回的是一个副本，因此不会修改值操作时使用，是不会修改原始数据的。如果想修改需要借助at来修改原始数据。</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>:[<span class="number">24</span>,<span class="number">32</span>], <span class="string">&quot;state&quot;</span>:[<span class="string">&quot;NY&quot;</span>,<span class="string">&quot;CA&quot;</span>], <span class="string">&quot;point&quot;</span>:[<span class="number">64</span>,<span class="number">92</span>]&#125;, index=[<span class="string">&quot;Alice&quot;</span>,<span class="string">&quot;Bob&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    df.at[index, <span class="string">&#x27;point&#x27;</span>] += row[<span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="itertuples"><a href="#itertuples" class="headerlink" title="itertuples"></a>itertuples</h2><p>输出：row （每一行的数据）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>:[<span class="number">24</span>,<span class="number">32</span>], <span class="string">&quot;state&quot;</span>:[<span class="string">&quot;NY&quot;</span>,<span class="string">&quot;CA&quot;</span>], <span class="string">&quot;point&quot;</span>:[<span class="number">64</span>,<span class="number">92</span>]&#125;, index=[<span class="string">&quot;Alice&quot;</span>,<span class="string">&quot;Bob&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples():</span><br><span class="line">    <span class="comment"># 每一行的数据</span></span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line">    <span class="comment"># 每一行的数据中的某一列</span></span><br><span class="line">    <span class="built_in">print</span>(row.age)</span><br><span class="line">    <span class="comment"># 取row中的某一个键值对</span></span><br><span class="line">    <span class="built_in">print</span>(row[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="逐列检索"><a href="#逐列检索" class="headerlink" title="逐列检索"></a>逐列检索</h1><p>输出：column_name,item（列名，每一列的数据（行名，行列值））</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>:[<span class="number">24</span>,<span class="number">32</span>], <span class="string">&quot;state&quot;</span>:[<span class="string">&quot;NY&quot;</span>,<span class="string">&quot;CA&quot;</span>], <span class="string">&quot;point&quot;</span>:[<span class="number">64</span>,<span class="number">92</span>]&#125;, index=[<span class="string">&quot;Alice&quot;</span>,<span class="string">&quot;Bob&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐列检索</span></span><br><span class="line"><span class="keyword">for</span> column_name,item <span class="keyword">in</span> df.iteritems():</span><br><span class="line">    <span class="comment"># 每一列的column名称</span></span><br><span class="line">    <span class="built_in">print</span>(column_name)</span><br><span class="line">    <span class="comment"># 每一列的数据（index,index与当前column列对应的数据）</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    <span class="comment"># 通过index，来输出与当前index对应的那一行的值</span></span><br><span class="line">    <span class="built_in">print</span>(item[<span class="string">&#x27;Alice&#x27;</span>])</span><br></pre></td></tr></table></figure><h1 id="常用循环检索"><a href="#常用循环检索" class="headerlink" title="常用循环检索"></a>常用循环检索</h1><p>平时我们都是通过，df[“age”]这种来检索数据，不过这样每次只能检索一列或者一行的数据，我们可以借助zip函数实现，一次检索多行或多列的数据</p><h4 id="普通df-“age”"><a href="#普通df-“age”" class="headerlink" title="普通df[“age”]"></a>普通df[“age”]</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> age <span class="keyword">in</span> df[<span class="string">&#x27;age&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br></pre></td></tr></table></figure><h4 id="借用zip函数"><a href="#借用zip函数" class="headerlink" title="借用zip函数"></a>借用zip函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> age, point <span class="keyword">in</span> <span class="built_in">zip</span>(df[<span class="string">&#x27;age&#x27;</span>], df[<span class="string">&#x27;point&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(age, point)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--loc，iloc，at，iat</title>
      <link href="/post/368ff16c.html"/>
      <url>/post/368ff16c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h4 id="范围上"><a href="#范围上" class="headerlink" title="范围上"></a>范围上</h4><ul><li>loc和iloc通过指定范围不仅可以选择单个值，还可以选择多个数据。</li><li>at和iat只能选择单个值。</li></ul><h4 id="处理速度上"><a href="#处理速度上" class="headerlink" title="处理速度上"></a>处理速度上</h4><ul><li>at和iat的处理速度比loc和iloc更快</li></ul><h4 id="索引分类上"><a href="#索引分类上" class="headerlink" title="索引分类上"></a>索引分类上</h4><ul><li><p>标签型索引：loc、at</p></li><li><p>位置型索引：iloc、iat</p><h5 id="索引不同之处："><a href="#索引不同之处：" class="headerlink" title="索引不同之处："></a>索引不同之处：</h5><ul><li>loc、at是可以通过[index,column]来获取和修改元素</li><li>iloc、iat可以通过[行号，列号]来获取和修改元素</li></ul><p>  <strong>区分</strong>：这里我们来浅区分一下index、column和行号和列号。</p><blockquote><p><img src="https://s1.ax1x.com/2022/07/07/jwLs4H.png" alt="jwLs4H.png"><br>  由于index和column可以都自定义设置为整型，所以index和column的类型也是可以为整型的。当然这是一句废话。不过也是为了区分出loc是通过index和column来获取元素的，而iloc是通过index和column所在位置的索引来获取元素的。at和iat同理。</p></blockquote></li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>上面展示了loc和iloc的获取，这里就不展示了</p><h2 id="loc、ilco修改数据"><a href="#loc、ilco修改数据" class="headerlink" title="loc、ilco修改数据"></a>loc、ilco修改数据</h2><p><img src="https://s1.ax1x.com/2022/07/07/jwjFHK.png" alt="jwjFHK.png"></p><h1 id="loc、iloc和at、iat的区别"><a href="#loc、iloc和at、iat的区别" class="headerlink" title="loc、iloc和at、iat的区别"></a>loc、iloc和at、iat的区别</h1><blockquote><p>以下展示发现at和iat获取多个元素时会报错，而loc和iloc可以获取多个元素</p></blockquote><p><img src="https://s1.ax1x.com/2022/07/07/jwvvl9.png" alt="jwvvl9.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程锁</title>
      <link href="/post/71bad47a.html"/>
      <url>/post/71bad47a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p>当一个数据有多个线程都可以对其进行修改的时候，任何一个线程改变它都会对其他线程造成影响，如果我们某一个线程在使用完之前，其他线程不能对其修改，就需要对这个线程增加一个线程锁。避免多个线程保卫同一块数据的时候，产生错误，所以加锁来防止这种问题</p></blockquote><p>下面来看这个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">add()和sub()两个线程同时对num进行操作</span></span><br><span class="line"><span class="string">看结果，可以有以下推论：</span></span><br><span class="line"><span class="string">1、同时操作不会是程序崩溃（num是int类型，int类型本身是线程安全的）</span></span><br><span class="line"><span class="string">2、但是会操作结果呈现未知状态，说明这个流程是线程不安全的。因为线程运行的先后顺序是未知的。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    subThread01 = threading.Thread(target=add)</span><br><span class="line">    subThread02 = threading.Thread(target=sub)</span><br><span class="line"></span><br><span class="line">    subThread01.start()</span><br><span class="line">    subThread02.start()</span><br><span class="line"></span><br><span class="line">    subThread01.join()</span><br><span class="line">    subThread02.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num result : %s&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果三次采集</span></span><br><span class="line"><span class="comment"># num result : 669214</span></span><br><span class="line"><span class="comment"># num result : -1849179</span></span><br><span class="line"><span class="comment"># num result : -525674</span></span><br></pre></td></tr></table></figure><p>想要解决这个问题就必须通过锁来保障线程切换的时机。<br>需要我们值得留意的是，在<strong>Python</strong>基本数据类型中<strong>list、tuple、dict</strong>本身就是属于线程安全的，所以如果有多个线程对这3种容器做操作时，我们不必考虑线程安全问题。(非常好的设计)</p><h1 id="锁的作用"><a href="#锁的作用" class="headerlink" title="锁的作用"></a>锁的作用</h1><p>锁是Python提供给我们能够自行操控线程切换的一种手段，使用锁可以让线程的切换变的有序。</p><p>一旦线程的切换变的有序后，各个线程之间对数据的访问、修改就变的可控，所以若要保证线程安全，就必须使用锁。</p><p><strong>threading模块</strong>中提供了5种最常见的锁，下面是按照功能进行划分：</p><ul><li><p>同步锁：lock（一次只能放行一个）</p></li><li><p>递归锁：rlock（一次只能放行一个）</p></li><li><p>条件锁：condition（一次可以放行任意个）</p></li><li><p>事件锁：event（一次全部放行）</p></li><li><p>信号量锁：semaphore（一次可以放行特定个）</p></li></ul><h1 id="1、Lock-同步锁"><a href="#1、Lock-同步锁" class="headerlink" title="1、Lock() 同步锁"></a>1、Lock() 同步锁</h1><p>基本介绍<br>Lock锁的称呼有很多，如：同步锁、互斥锁</p><p>它们是什么意思呢？如下所示：</p><p><strong>互斥</strong>指的是某一资源<strong>同一时刻仅能有一个访问者</strong>对其进行访问，具有唯一性和排他性，但是互斥无法限制访问者对资源的访问顺序，即访问是<strong>无序的</strong></p><p>同步是指在互斥的基础上（大多数情况），通过其他机制实现访问者对资源的有序访问</p><p>同步其实已经实现了互斥，是互斥的一种更为复杂的实现，因为它在互斥的基础上实现了有序访问的特点</p><p>下面是threading模块与同步锁提供的相关方法：</p><p><strong>使用方式</strong></p><p><strong>同步锁一次只能放行一个线程</strong>，一个被加锁的线程在运行时不会将执行权交出去，只有当该线程被解锁时才会将执行权通过系统调度交由其他线程。</p><p>如下所示，使用同步锁解决最上面的问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    lock.acquire()<span class="comment"># 同步锁</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>():</span><br><span class="line">    lock.acquire()<span class="comment"># 同步锁  一次只能一个</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lock = threading.Lock()<span class="comment"># 创建同步锁</span></span><br><span class="line"></span><br><span class="line">    subThread01 = threading.Thread(target=add)</span><br><span class="line">    subThread02 = threading.Thread(target=sub)</span><br><span class="line"></span><br><span class="line">    subThread01.start()</span><br><span class="line">    subThread02.start()</span><br><span class="line"></span><br><span class="line">    subThread01.join()</span><br><span class="line">    subThread02.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num result : %s&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果三次采集</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br></pre></td></tr></table></figure><p>这样这个代码就完全变成了串行的状态，对于这种计算密集型I&#x2F;O业务来说，还不如直接使用串行化单线程执行来得快，所以这个例子仅作为一个示例，不能概述锁真正的用途。</p><h1 id="死锁现象"><a href="#死锁现象" class="headerlink" title="死锁现象"></a>死锁现象</h1><p>对于同步锁来说，一次acquire()必须对应一次release()，不能出现连续重复使用多次acquire()后再重复使用多次release()的操作，这样会引起死锁造成程序的阻塞，完全不动了，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    lock.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">    lock.acquire()  <span class="comment"># 死锁</span></span><br><span class="line">    <span class="comment"># 不执行</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>():</span><br><span class="line">    lock.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">    lock.acquire()  <span class="comment"># 死锁</span></span><br><span class="line">    <span class="comment"># 不执行</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lock = threading.Lock() <span class="comment"># 创建lock</span></span><br><span class="line"></span><br><span class="line">    subThread01 = threading.Thread(target=add)</span><br><span class="line">    subThread02 = threading.Thread(target=sub)</span><br><span class="line"></span><br><span class="line">    subThread01.start()</span><br><span class="line">    subThread02.start()</span><br><span class="line"></span><br><span class="line">    subThread01.join()</span><br><span class="line">    subThread02.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num result : %s&quot;</span> % num)</span><br></pre></td></tr></table></figure><p>with语句 （自动加锁、解锁）</p><p>由于threading.Lock()对象中实现了enter__()与__exit()方法，故我们可以使用with语句进行<strong>上下文管理形式</strong>的加锁解锁操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="keyword">with</span> lock:<span class="comment"># with语句lock的用法，自动加锁、解锁</span></span><br><span class="line">        <span class="comment"># 自动加锁</span></span><br><span class="line">        <span class="keyword">global</span> num</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 自动解锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>():</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="comment"># 自动加锁</span></span><br><span class="line">        <span class="keyword">global</span> num</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 自动解锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    subThread01 = threading.Thread(target=add)</span><br><span class="line">    subThread02 = threading.Thread(target=sub)</span><br><span class="line"></span><br><span class="line">    subThread01.start()</span><br><span class="line">    subThread02.start()</span><br><span class="line"></span><br><span class="line">    subThread01.join()</span><br><span class="line">    subThread02.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num result : %s&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果三次采集</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br></pre></td></tr></table></figure><h1 id="2、RLock-递归锁"><a href="#2、RLock-递归锁" class="headerlink" title="2、RLock() 递归锁"></a>2、RLock() 递归锁</h1><p>基本介绍</p><p>递归锁是同步锁的一个升级版本，在同步锁的基础上可以做到连续重复使用多次acquire()后再重复使用多次release()的操作，但是一定要注意加锁次数和解锁次数必须一致，否则也将引发死锁现象。</p><p>下面是threading模块与递归锁提供的相关方法：<br><img src="https://s1.ax1x.com/2022/06/25/jkyD2Q.png" alt="jkyD2Q.png"></p><p>使用方式</p><p>以下是递归锁的简单使用，下面这段操作如果使用同步锁则会发生死锁现象，但是递归锁不会：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    lock.acquire()<span class="comment"># 第一次上锁</span></span><br><span class="line">    lock.acquire()<span class="comment"># 第二次上锁，这种写法 递归锁 能正常运行；同步锁会发生死锁；</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    lock.release()<span class="comment"># 不理解 递归锁存在的意义？？？</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>():</span><br><span class="line">    lock.acquire()</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lock = threading.RLock()   <span class="comment"># 创建 递归锁 对象</span></span><br><span class="line"></span><br><span class="line">    subThread01 = threading.Thread(target=add)</span><br><span class="line">    subThread02 = threading.Thread(target=sub)</span><br><span class="line"></span><br><span class="line">    subThread01.start()</span><br><span class="line">    subThread02.start()</span><br><span class="line"></span><br><span class="line">    subThread01.join()</span><br><span class="line">    subThread02.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num result : %s&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果三次采集</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br></pre></td></tr></table></figure><p>with语句<br>由于threading.RLock()对象中实现了enter__()与__exit()方法，故我们可以使用with语句进行上下文管理形式的加锁解锁操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="keyword">with</span> lock:<span class="comment"># 递归锁和同步锁 都可以使用 with 语句，进行自动加锁、解锁</span></span><br><span class="line">        <span class="comment"># 自动加锁</span></span><br><span class="line">        <span class="keyword">global</span> num</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 自动解锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>():</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="comment"># 自动加锁</span></span><br><span class="line">        <span class="keyword">global</span> num</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 自动解锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lock = threading.RLock()</span><br><span class="line"></span><br><span class="line">    subThread01 = threading.Thread(target=add)</span><br><span class="line">    subThread02 = threading.Thread(target=sub)</span><br><span class="line"></span><br><span class="line">    subThread01.start()</span><br><span class="line">    subThread02.start()</span><br><span class="line"></span><br><span class="line">    subThread01.join()</span><br><span class="line">    subThread02.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num result : %s&quot;</span> % num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果三次采集</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br><span class="line"><span class="comment"># num result : 0</span></span><br></pre></td></tr></table></figure><h1 id="3、Condition-条件锁"><a href="#3、Condition-条件锁" class="headerlink" title="3、Condition() 条件锁"></a>3、Condition() 条件锁</h1><p>基本介绍</p><p>条件锁是在递归锁的基础上增加了能够暂停线程运行的功能。并且我们可以使用wait()与notify()来控制线程执行的个数。</p><p>注意：条件锁可以自由设定一次放行几个线程。</p><p>下面是threading模块与条件锁提供的相关方法：<br><img src="https://s1.ax1x.com/2022/06/25/jky524.png" alt="jky524.png"><br>使用方式<br>下面这个案例会启动10个子线程，并且会立即将10个子线程设置为等待状态。</p><p>然后我们可以发送一个或者多个通知，来恢复被等待的子线程继续运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">currentRunThreadNumber = <span class="number">0</span>    <span class="comment"># 当前运行线程的数量</span></span><br><span class="line">maxSubThreadNumber = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="keyword">global</span> currentRunThreadNumber</span><br><span class="line">    thName = threading.currentThread().name</span><br><span class="line"></span><br><span class="line">    condLock.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start and wait run thread : %s&quot;</span> % thName)</span><br><span class="line"></span><br><span class="line">    condLock.wait()  <span class="comment"># 暂停线程运行、等待唤醒</span></span><br><span class="line">    currentRunThreadNumber += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;carry on run thread : %s&quot;</span> % thName)</span><br><span class="line"></span><br><span class="line">    condLock.release()  <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    condLock = threading.Condition()   <span class="comment"># 创建条件锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSubThreadNumber):</span><br><span class="line">        subThreadIns = threading.Thread(target=task)</span><br><span class="line">        subThreadIns.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> currentRunThreadNumber &lt; maxSubThreadNumber:</span><br><span class="line">        notifyNumber = <span class="built_in">int</span>(</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Please enter the number of threads that need to be notified to run：&quot;</span>))  <span class="comment"># 手动输入放行数量</span></span><br><span class="line"><span class="comment"># 循环放行</span></span><br><span class="line">        condLock.acquire()</span><br><span class="line">        condLock.notify(notifyNumber)  <span class="comment"># 放行</span></span><br><span class="line">        condLock.release()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main thread run end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先启动10个子线程，然后这些子线程会全部变为等待状态</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-1</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-2</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-3</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-4</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-5</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-6</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-7</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-8</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-9</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量发送通知，放行特定数量的子线程继续运行</span></span><br><span class="line"><span class="comment"># Please enter the number of threads that need to be notified to run：5  # 放行5个</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-4</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-3</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-1</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-2</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the number of threads that need to be notified to run：5  # 放行5个</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-8</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-10</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-6</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-9</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the number of threads that need to be notified to run：1</span></span><br><span class="line"><span class="comment"># main thread run end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>with语句<br>由于threading.Condition()对象中实现了enter__()与__exit()方法，故我们可以使用with语句进行上下文管理形式的加锁解锁操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">currentRunThreadNumber = <span class="number">0</span></span><br><span class="line">maxSubThreadNumber = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="keyword">global</span> currentRunThreadNumber</span><br><span class="line">    thName = threading.currentThread().name    <span class="comment"># 返回当前线程名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> condLock:    <span class="comment"># with 用法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start and wait run thread : %s&quot;</span> % thName)</span><br><span class="line">        condLock.wait()  <span class="comment"># 暂停线程运行、等待唤醒</span></span><br><span class="line">        currentRunThreadNumber += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;carry on run thread : %s&quot;</span> % thName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    condLock = threading.Condition()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSubThreadNumber):</span><br><span class="line">        subThreadIns = threading.Thread(target=task)</span><br><span class="line">        subThreadIns.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> currentRunThreadNumber &lt; maxSubThreadNumber:</span><br><span class="line">        notifyNumber = <span class="built_in">int</span>(</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Please enter the number of threads that need to be notified to run：&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> condLock:   <span class="comment"># with 用法</span></span><br><span class="line">            condLock.notify(notifyNumber)  <span class="comment"># 放行</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main thread run end&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="4、Event-事件锁"><a href="#4、Event-事件锁" class="headerlink" title="4、Event() 事件锁"></a>4、Event() 事件锁</h1><p>基本介绍</p><p>事件锁是基于条件锁来做的，它与条件锁的区别在于一次只能放行全部，不能放行任意个数量的子线程继续运行。</p><p>我们可以将事件锁看为红绿灯，当红灯时所有子线程都暂停运行，并进入“等待”状态，当绿灯时所有子线程都恢复“运行”。</p><p>下面是threading模块与事件锁提供的相关方法：<br><img src="https://s1.ax1x.com/2022/06/25/jkyqVx.png" alt="jkyqVx.png"></p><p>使用方式<br>事件锁不能利用with语句来进行使用，只能按照常规方式。</p><p>如下所示，我们来模拟线程和红绿灯的操作，红灯停，绿灯行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">maxSubThreadNumber = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():    </span><br><span class="line">thName = threading.currentThread().name    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start and wait run thread : %s&quot;</span> % thName)    </span><br><span class="line"></span><br><span class="line">eventLock.wait()  <span class="comment"># 暂停运行，等待绿灯    </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;green light, %s carry on run&quot;</span> % thName)    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;red light, %s stop run&quot;</span> % thName)    </span><br><span class="line"></span><br><span class="line">eventLock.wait()  <span class="comment"># 暂停运行，等待绿灯    </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;green light, %s carry on run&quot;</span> % thName)    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sub thread %s run end&quot;</span> % thName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:    </span><br><span class="line">eventLock = threading.Event()    <span class="comment"># 事件锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSubThreadNumber):        </span><br><span class="line">subThreadIns = threading.Thread(target=task)     <span class="comment"># 创建线程   </span></span><br><span class="line">subThreadIns.start()    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 交替绿、红灯</span></span><br><span class="line">eventLock.<span class="built_in">set</span>()  <span class="comment"># 设置为绿灯    </span></span><br><span class="line">eventLock.clear()  <span class="comment"># 设置为红灯    </span></span><br><span class="line">eventLock.<span class="built_in">set</span>()  <span class="comment"># 设置为绿灯</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-1</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-2</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># green light, Thread-1 carry on run</span></span><br><span class="line"><span class="comment"># red light, Thread-1 stop run</span></span><br><span class="line"><span class="comment"># green light, Thread-1 carry on run</span></span><br><span class="line"><span class="comment"># sub thread Thread-1 run end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># green light, Thread-3 carry on run</span></span><br><span class="line"><span class="comment"># red light, Thread-3 stop run</span></span><br><span class="line"><span class="comment"># green light, Thread-3 carry on run</span></span><br><span class="line"><span class="comment"># sub thread Thread-3 run end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># green light, Thread-2 carry on run</span></span><br><span class="line"><span class="comment"># red light, Thread-2 stop run</span></span><br><span class="line"><span class="comment"># green light, Thread-2 carry on run</span></span><br><span class="line"><span class="comment"># sub thread Thread-2 run end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5、Semaphore-信号量锁"><a href="#5、Semaphore-信号量锁" class="headerlink" title="5、Semaphore() 信号量锁"></a>5、Semaphore() 信号量锁</h1><p>基本介绍</p><p><strong>信号量锁</strong>也是根据条件锁来做的，它与条件锁和事件锁的区别如下：</p><ul><li>条件锁：一次可以放行任意个处于“等待”状态的线程</li><li>事件锁：一次可以放行全部的处于“等待”状态的线程</li><li>信号量锁：通过规定，成批的放行特定个处于“上锁”状态的线程</li></ul><p>下面是threading模块与信号量锁提供的相关方法：</p><p><img src="https://s1.ax1x.com/2022/06/25/jk69sA.png" alt="jk69sA.png"></p><p>使用方式<br>以下是使用示例，你可以将它当做一段限宽的路段，每次只能放行相同数量的线程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">maxSubThreadNumber = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    thName = threading.currentThread().name</span><br><span class="line">    </span><br><span class="line">    semaLock.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;run sub thread %s&quot;</span> % thName)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    semaLock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 每次只能放行2个</span></span><br><span class="line">    semaLock = threading.Semaphore(<span class="number">2</span>)   <span class="comment"># 信号量锁 可以限制每次放行线程的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSubThreadNumber):</span><br><span class="line">        subThreadIns = threading.Thread(target=task)</span><br><span class="line">        subThreadIns.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># run sub thread Thread-1</span></span><br><span class="line"><span class="comment"># run sub thread Thread-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run sub thread Thread-3</span></span><br><span class="line"><span class="comment"># run sub thread Thread-4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run sub thread Thread-6</span></span><br><span class="line"><span class="comment"># run sub thread Thread-5</span></span><br></pre></td></tr></table></figure><p>with语句</p><p>由于threading.Semaphore()对象中实现了enter__()与__exit()方法，故我们可以使用with语句进行上下文管理形式的加锁解锁操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">maxSubThreadNumber = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    thName = threading.currentThread().name</span><br><span class="line">    <span class="keyword">with</span> semaLock:<span class="comment"># with 信号量锁 semaphore</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;run sub thread %s&quot;</span> % thName)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    semaLock = threading.Semaphore(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSubThreadNumber):</span><br><span class="line">        subThreadIns = threading.Thread(target=task)</span><br><span class="line">        subThreadIns.start()</span><br></pre></td></tr></table></figure><h1 id="锁关系浅析"><a href="#锁关系浅析" class="headerlink" title="锁关系浅析"></a>锁关系浅析</h1><p>上面5种锁可以说都是<strong>基于同步锁</strong>来做的，这些你都可以从源码中找到答案。</p><p>首先来看<strong>RLock递归锁</strong>，递归锁的实现非常简单，它的内部会维护着一个计数器，当计数器不为0的时候该线程不能被I&#x2F;O操作和时间轮询机制切换。但是当计数器为0的时候便不会如此了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self._block = _allocate_lock()</span><br><span class="line">    self._owner = <span class="literal">None</span></span><br><span class="line">    self._count = <span class="number">0</span>  <span class="comment"># 计数器</span></span><br></pre></td></tr></table></figure><p>而<strong>Condition条件锁</strong>的内部其实是有<strong>两把锁</strong>的，一把底层锁（同步锁）一把高级锁(递归锁)。</p><p>低层锁的解锁方式有两种，使用wait()方法会暂时解开底层锁同时加上一把高级锁，只有当接收到别的线程里的**notfiy()**后才会解开高级锁和重新上锁低层锁，也就是说条件锁底层是根据同步锁和递归锁的不断切换来进行实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, lock=<span class="literal">None</span></span>):    </span><br><span class="line"><span class="keyword">if</span> lock <span class="keyword">is</span> <span class="literal">None</span>:        </span><br><span class="line">lock = RLock()  <span class="comment"># 可以看到条件锁的内部是基于递归锁，而递归锁又是基于同步锁来做的    </span></span><br><span class="line">self._lock = lock    </span><br><span class="line">self.acquire = lock.acquire    </span><br><span class="line">self.release = lock.release    </span><br><span class="line"><span class="keyword">try</span>:        </span><br><span class="line">self._release_save = lock._release_save    </span><br><span class="line"><span class="keyword">except</span> AttributeError:        </span><br><span class="line"><span class="keyword">pass</span>    </span><br><span class="line"><span class="keyword">try</span>:        </span><br><span class="line">self._acquire_restore = lock._acquire_restore    </span><br><span class="line"><span class="keyword">except</span> AttributeError:        </span><br><span class="line"><span class="keyword">pass</span>    </span><br><span class="line"><span class="keyword">try</span>:        </span><br><span class="line">self._is_owned = lock._is_owned    </span><br><span class="line"><span class="keyword">except</span> AttributeError:        </span><br><span class="line"><span class="keyword">pass</span>    </span><br><span class="line">self._waiters = _deque()</span><br></pre></td></tr></table></figure><p>Event事件锁内部是基于条件锁来做的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span>:    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):        </span><br><span class="line">self._cond = Condition(Lock())  <span class="comment"># 实例化出了一个条件锁。        </span></span><br><span class="line">self._flag = <span class="literal">False</span>    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_reset_internal_locks</span>(<span class="params">self</span>):        <span class="comment"># private!  </span></span><br><span class="line">called by Thread._reset_internal_locks by _after_fork()        </span><br><span class="line">self._cond.__init__(Lock())    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_set</span>(<span class="params">self</span>):        </span><br><span class="line"><span class="string">&quot;&quot;&quot;Return true if and only if the internal flag is true.&quot;&quot;&quot;</span>        </span><br><span class="line"><span class="keyword">return</span> self._flag    </span><br><span class="line"></span><br><span class="line">isSet = is_set</span><br></pre></td></tr></table></figure><p>Semaphore信号量锁内部也是基于条件锁来做的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Semaphore</span>:    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value=<span class="number">1</span></span>):        </span><br><span class="line"><span class="keyword">if</span> value &lt; <span class="number">0</span>:            </span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;semaphore initial value must be &gt;= 0&quot;</span>)        </span><br><span class="line">self._cond = Condition(Lock()) <span class="comment"># 可以看到，这里是实例化出了一个条件锁        </span></span><br><span class="line">self._value = value</span><br></pre></td></tr></table></figure><h1 id="基本练习题"><a href="#基本练习题" class="headerlink" title="基本练习题"></a>基本练习题</h1><h4 id="条件锁的应用"><a href="#条件锁的应用" class="headerlink" title="条件锁的应用"></a>条件锁的应用</h4><p>需求：一个空列表，两个线程轮番往里面加值（一个加偶数，一个加奇数），最终让该列表中的值为 1 - 100 ，且是有序排列的。</p><p>思路：</p><ol><li>根据列表的长度判断应该添加偶数还是奇数（例如：如果长度为0，代表里面“没有数据”需要添加1，则需要添加奇数；1；如果长度为1，代表数据为“1”，则需要添加偶数：2）</li><li>代码主要逻辑实现就是：利用条件锁的特性，让程序在符合条件的时候执行，不符合条件的时候等待。用长度除以2，求余数，余数为0，则代表能除尽，需要执行添加奇数的线程，反之需要执行添加偶数的线程。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">lst = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加偶数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">even</span>():</span><br><span class="line">    <span class="comment"># with 自动加锁解锁</span></span><br><span class="line">    <span class="keyword">with</span> condluck:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">101</span>,<span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 根据当前列表的长度，判断当前的元素是否是偶数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(lst) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 交出执行权，等待另一个线程通知加偶数</span></span><br><span class="line">                condluck.wait()</span><br><span class="line">                lst.append(i)</span><br><span class="line">                <span class="comment"># 告诉当前在等待的线程你可以添加奇数了，但是这里不会立即交出执行权</span></span><br><span class="line">                condluck.notify()</span><br><span class="line">        condluck.notify()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加奇数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">odd</span>():</span><br><span class="line">    <span class="keyword">with</span> condluck:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>,<span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 根据列表的长度判断当前元素是否是奇数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(lst) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                lst.append(i)</span><br><span class="line">                condluck.notify()</span><br><span class="line">                condluck.wait()</span><br><span class="line">        condluck.notify()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 条件锁</span></span><br><span class="line">    condluck = threading.Condition()</span><br><span class="line"></span><br><span class="line">    addEvenTask = threading.Thread(target=even)</span><br><span class="line">    addoddTask = threading.Thread(target=odd)</span><br><span class="line">    addEvenTask.start()</span><br><span class="line">    addoddTask.start()</span><br><span class="line">    addEvenTask.join()</span><br><span class="line">    addoddTask.join()</span><br><span class="line">    <span class="built_in">print</span>(lst)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何向json文件添加注释</title>
      <link href="/post/d2c8e79d.html"/>
      <url>/post/d2c8e79d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="关于json文件添加“-x2F-x2F-”注释时报错问题"><a href="#关于json文件添加“-x2F-x2F-”注释时报错问题" class="headerlink" title="关于json文件添加“&#x2F;&#x2F;”注释时报错问题"></a>关于json文件添加“&#x2F;&#x2F;”注释时报错问题</h4><p>json文件内容如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 数据库名</span></span><br><span class="line">  <span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Taurus&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//AD文件存放路径</span></span><br><span class="line">  <span class="attr">&quot;file_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Product/Config&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//需要生成AD的表</span></span><br><span class="line">  <span class="attr">&quot;tables_name&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;AccountCashFreeze&quot;</span><span class="punctuation">,</span><span class="string">&quot;BenchStrategy&quot;</span><span class="punctuation">,</span><span class="string">&quot;CTAAlphas&quot;</span><span class="punctuation">,</span><span class="string">&quot;OTCOptionContractBasicInfo&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><pre><code>读取json文件的每一行数据将注释的每一行过滤掉将过滤之后的行添加进列表最后将每一个字符串进行拼接</code></pre><blockquote></blockquote><p>strip 用于删除开头和结尾的空格<br>strip(指定的字符串) 用于删除开头和结尾指定的字符串<br>startswith 用于检查字符串是否以指定字符串开头</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_build_json</span>(<span class="params">build_path</span>):</span><br><span class="line">    lines = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(build_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 读取文件内容</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="comment"># 对每一行进行过滤</span></span><br><span class="line">            <span class="keyword">if</span> row.strip().startswith(<span class="string">&quot;//&quot;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 将过滤后的行添加到列表</span></span><br><span class="line">            lines.append(row)</span><br><span class="line">    <span class="comment"># 将每一个字符串进行拼接</span></span><br><span class="line">    conf_data = json.loads(<span class="string">&quot;\n&quot;</span>.join(lines))</span><br><span class="line">    <span class="keyword">return</span> conf_data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列+多线程+进度条</title>
      <link href="/post/6fea2478.html"/>
      <url>/post/6fea2478.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="队列、多线程、进度条"><a href="#队列、多线程、进度条" class="headerlink" title="队列、多线程、进度条"></a>队列、多线程、进度条</h1><ol><li>利用队列<font color=red>先进先出</font>的特性，实现先存入的数据就先取出来</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建队列</span></span><br><span class="line">Queuelist = queue.Queue()</span><br><span class="line"></span><br><span class="line">letters = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>]</span><br><span class="line"><span class="comment"># letters = [&quot;a&quot;,&quot;b&quot;,&quot;e&quot;,&quot;c&quot;,&quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> letters:</span><br><span class="line">    <span class="comment"># 向队列添加数据</span></span><br><span class="line">    Queuelist.put(letter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断队列是否为空</span></span><br><span class="line"><span class="built_in">print</span>(Queuelist.empty())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断队列的大小</span></span><br><span class="line"><span class="keyword">while</span> Queuelist.qsize() &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># 获取队列的数据</span></span><br><span class="line">    letter = Queuelist.get()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;取出的数据为：<span class="subst">&#123;letter&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Queuelist.empty())</span><br><span class="line"><span class="comment"># 取出的数据为：a</span></span><br><span class="line"><span class="comment"># 取出的数据为：b</span></span><br><span class="line"><span class="comment"># 取出的数据为：c</span></span><br><span class="line"><span class="comment"># 取出的数据为：d</span></span><br><span class="line"><span class="comment"># 取出的数据为：e</span></span><br></pre></td></tr></table></figure><ol start="2"><li>这里我们借助数据的大小来创建对应大小的线程数，且最大线程数为20，并用类实现多线程<br>自定义线程：继承threading.Thread来定义线程类，其&#x3D;&#x3D;本质是重构Thread类中的run方法&#x3D;&#x3D;<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义线程：继承threading.Thread来定义线程类，其本质是重构Thread类中的run方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoCreateAD</span>(threading.Thread):  <span class="comment"># 采集线程类</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, letter</span>):</span><br><span class="line">        <span class="comment"># 调用Thread 父类方法</span></span><br><span class="line">        <span class="built_in">super</span>(AutoCreateAD, self).__init__()</span><br><span class="line">        <span class="comment"># 初始化子类属性</span></span><br><span class="line">        self.letter = letter</span><br><span class="line">    <span class="comment"># 线程启动的时候调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;线程%s获取道德数据%s&#x27;</span> % (threading.current_thread().getName(), self.letter))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">letters = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>]</span><br><span class="line"><span class="comment"># 最大线程数</span></span><br><span class="line">concurrent = <span class="number">20</span></span><br><span class="line"><span class="comment"># 当线程数小于最大线程数20</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(letters) &lt; concurrent:</span><br><span class="line">    concurrent = <span class="built_in">len</span>(letters)</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="comment"># 收集线程</span></span><br><span class="line">thread_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(concurrent):</span><br><span class="line">    <span class="comment"># 创建线程</span></span><br><span class="line">    t = AutoCreateAD(letters[num])</span><br><span class="line">    thread_list.append(t)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    t.start()</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">    <span class="comment"># 线程阻塞：等待所有线程完成</span></span><br><span class="line">    t.join()</span><br></pre></td></tr></table></figure></li></ol><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><blockquote><p>结合上面的队列和多线程，另外多加一个进度条</p></blockquote><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ol><li>读取配置文件</li><li>创建进度条，启动进度条</li><li>创建多线程</li><li>启动线程，任务进行中</li><li>修改进度条进度</li><li>线程阻塞，等待所有任务完成<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> MetaData, create_engine <span class="keyword">as</span> _create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> VARCHAR</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> progressbar</span><br><span class="line"></span><br><span class="line">MAX_PROGRESSBAR_LENGTH = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">meta_obj, table_name, schema</span>):</span><br><span class="line"></span><br><span class="line">    table = fetch_table(meta_obj, table_name, schema)</span><br><span class="line">    <span class="keyword">global</span> p_value</span><br><span class="line">    p_value += <span class="number">1</span></span><br><span class="line">    bar.update(p_value)</span><br><span class="line">    build_orm_model(table)</span><br><span class="line">    p_value += <span class="number">1</span></span><br><span class="line">    bar.update(p_value)</span><br><span class="line">    build_in_model(table)</span><br><span class="line">    p_value += <span class="number">1</span></span><br><span class="line">    bar.update(p_value)</span><br><span class="line">    build_out_model(table)</span><br><span class="line">    p_value += <span class="number">1</span></span><br><span class="line">    bar.update(p_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_progressbar</span>():</span><br><span class="line">    bar = progressbar.ProgressBar(max_value=MAX_PROGRESSBAR_LENGTH)</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_table</span>(<span class="params">meta_obj, table_name, schema</span>):</span><br><span class="line">    TABLE = meta_obj.tables[<span class="string">f&quot;<span class="subst">&#123;schema&#125;</span>.<span class="subst">&#123;table_name&#125;</span>&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> TABLE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_orm_model</span>(<span class="params">TABLE</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inmodel_template = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">class OTCOptionContractBasicInfoInModel(BaseModel):</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">outmodel_template = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">class OTCOptionContractBasicInfoInModel(BaseModel):</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_in_model</span>(<span class="params">table</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_out_model</span>(<span class="params">table</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义线程：继承threading.Thread来定义线程类，其本质是重构Thread类中的run方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoCreateAD</span>(threading.Thread):  <span class="comment"># 采集线程类</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, Qtable_list, meta_obj, schema</span>):</span><br><span class="line">        <span class="comment"># 调用Thread 父类方法</span></span><br><span class="line">        <span class="built_in">super</span>(AutoCreateAD, self).__init__()</span><br><span class="line">        <span class="comment"># 初始化子类属性</span></span><br><span class="line">        self.Qtable_list = Qtable_list</span><br><span class="line">        self.meta_obj = meta_obj</span><br><span class="line">        self.schema = schema</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 线程启动的时候调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> self.Qtable_list.qsize() &gt; <span class="number">0</span>:</span><br><span class="line">            table_name = self.Qtable_list.get()</span><br><span class="line">            <span class="comment"># print(&#x27;线程%s开始生成%s的AD模板&#x27; % (threading.current_thread().getName(), table_name))</span></span><br><span class="line">            start(self.meta_obj, table_name, self.schema)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect_mysql</span>(<span class="params">schema</span>):</span><br><span class="line">    _engine = _create_engine(</span><br><span class="line">        <span class="string">f&quot;mysql+pymysql://oa:sl2#EDyu2H@10.216.1.40:3306/<span class="subst">&#123;schema&#125;</span>?charset=utf8mb4&quot;</span> % ()</span><br><span class="line">    )</span><br><span class="line">    meta_obj = MetaData(schema=schema)</span><br><span class="line">    meta_obj.reflect(bind=_engine)</span><br><span class="line">    <span class="keyword">return</span> meta_obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_json</span>(<span class="params">build_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(build_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="keyword">if</span> row.strip().startswith(<span class="string">&quot;//&quot;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            lines.append(row)</span><br><span class="line">    <span class="keyword">return</span> json.loads(<span class="string">&quot;\n&quot;</span>.join(lines))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parameter = sys.argv[<span class="number">1</span>]</span><br><span class="line">        build_path = sys.argv[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> parameter == <span class="string">&quot;-f&quot;</span>:</span><br><span class="line">            lines = []</span><br><span class="line">            conf_data = load_json(build_path)</span><br><span class="line">            schema = conf_data[<span class="string">&quot;schema&quot;</span>]</span><br><span class="line">            file_path = conf_data[<span class="string">&quot;file_path&quot;</span>]</span><br><span class="line">            tables_name = conf_data[<span class="string">&quot;tables_name&quot;</span>]</span><br><span class="line">            <span class="comment"># 进度条最大值</span></span><br><span class="line">            MAX_PROGRESSBAR_LENGTH = <span class="built_in">len</span>(tables_name) * <span class="number">4</span></span><br><span class="line">            <span class="comment"># 链接数据库</span></span><br><span class="line">            meta_obj = connect_mysql(schema)</span><br><span class="line">            <span class="comment"># 生成队列</span></span><br><span class="line">            Qtable_list = queue.Queue()</span><br><span class="line">            <span class="comment"># 线程数</span></span><br><span class="line">            concurrent = <span class="number">20</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(tables_name) &lt; concurrent:</span><br><span class="line">                concurrent = <span class="built_in">len</span>(tables_name)</span><br><span class="line">            <span class="keyword">for</span> table_name <span class="keyword">in</span> tables_name:</span><br><span class="line">                Qtable_list.put(table_name)</span><br><span class="line">            <span class="comment"># 生成N个线程</span></span><br><span class="line">            thread_list = []</span><br><span class="line">            p_value = <span class="number">0</span></span><br><span class="line">            bar = build_progressbar()</span><br><span class="line">            bar.start()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(concurrent):</span><br><span class="line">                <span class="comment"># 创造线程</span></span><br><span class="line">                t = AutoCreateAD(Qtable_list, meta_obj, schema)</span><br><span class="line">                thread_list.append(t)</span><br><span class="line">                t.start()</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">                t.join()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = &#123;<span class="string">&quot;-f&quot;</span>:<span class="string">&quot;指定配置文件&quot;</span>&#125;</span><br><span class="line">            <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">import</span> traceback</span><br><span class="line">        traceback.print_exc()</span><br></pre></td></tr></table></figure><blockquote><p>运行命令：python xxx.py -f build.json</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git冲突----git clone成功，但报错error：invalid path</title>
      <link href="/post/5e34ac44.html"/>
      <url>/post/5e34ac44.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><blockquote><p>因为上一次提交代码的时候是用的Linux环境，但是这次使用了Windows环境，发现git pull报错，后面把Windows下面的本地代码删掉了，重新clone，但是发现也报了一样的错误。<br>由于报错的时候没截图，就从网上找了一个类似的，但我的报错内容是：<br>“error: invalid path ‘C:\Users\hwang\Desktop\project_test\logs\info\logging_test.log’”</p></blockquote><p><img src="https://s1.ax1x.com/2022/06/23/jCwT8P.jpg" alt="jCwT8P.jpg"></p><p>看上图信息得知，git clone 成功了，但是有一个无效的文件路径。</p><h4 id="遇到这种问题最好的-x3D-x3D-解决办法-x3D-x3D-就是，去线上看是否有一个这样的文件，如果有请更换这个文件的名称。"><a href="#遇到这种问题最好的-x3D-x3D-解决办法-x3D-x3D-就是，去线上看是否有一个这样的文件，如果有请更换这个文件的名称。" class="headerlink" title="遇到这种问题最好的&#x3D;&#x3D;解决办法&#x3D;&#x3D;就是，去线上看是否有一个这样的文件，如果有请更换这个文件的名称。"></a>遇到这种问题最好的&#x3D;&#x3D;解决办法&#x3D;&#x3D;就是，去线上看是否有一个这样的文件，如果有请更换这个文件的名称。</h4><p>比如：从线上删去了‘C:\Users\hwang\Desktop\project_test\logs\info\logging_test.log’这个文件，至于我的线上为什么有这样的文件名，我也不太清楚，可能是误操作<br><img src="https://s1.ax1x.com/2022/06/23/jCD34A.png" alt="jCD34A.png"></p><h4 id="问题的原因就在于：Windows和Linux系统对文件名的的兼容性不同，有些Linux系统兼容，但是到了Windows上就会非法的。"><a href="#问题的原因就在于：Windows和Linux系统对文件名的的兼容性不同，有些Linux系统兼容，但是到了Windows上就会非法的。" class="headerlink" title="问题的原因就在于：Windows和Linux系统对文件名的的兼容性不同，有些Linux系统兼容，但是到了Windows上就会非法的。"></a>问题的原因就在于：Windows和Linux系统对文件名的的兼容性不同，有些Linux系统兼容，但是到了Windows上就会非法的。</h4><p>请参阅命名文件 Windows 文档：</p><pre><code>不要使用以下保留名称作为文件名：CON，PRN，AUX，NUL，COM1，COM2，COM3，COM4，COM5，COM6，COM7，COM8，COM9，LPT1，LPT2，LPT3，LPT4，LPT5，LPT6，LPT7，LPT8和LPT9。还要避免这些名称后面紧跟着一个扩展名;例如，不建议使用 NUL.txt</code></pre><p>参考链接：<a href="https://confluence.atlassian.com/bitbucketserverkb/error-invalid-path-during-git-clone-to-windows-client-1085186345.html">https://confluence.atlassian.com/bitbucketserverkb/error-invalid-path-during-git-clone-to-windows-client-1085186345.html</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/post/de7c53fe.html"/>
      <url>/post/de7c53fe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="未使用线程"><a href="#未使用线程" class="headerlink" title="未使用线程"></a>未使用线程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">letter</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(letter,threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = time.time()</span><br><span class="line">    <span class="comment"># 这里我们可以看到循环了五个字母，而且每个字母都会停2s</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        func(i)</span><br><span class="line">    t = time.time()</span><br><span class="line">    <span class="built_in">print</span>(t-s) <span class="comment"># 10.02183198928833</span></span><br></pre></td></tr></table></figure><h4 id="加入线程池"><a href="#加入线程池" class="headerlink" title="加入线程池"></a>加入线程池</h4><blockquote><p>这里我们使用<code>from concurrent.futures import ThreadPoolExecutor</code>，相比于<code>from multiprocessing.dummy import Pool as ThreadPool</code>效率上几乎没有差别，</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">data = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">letter</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(letter,threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = time.time()</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        <span class="comment"># map函数，会将第二个参数迭代进第一个参数方法</span></span><br><span class="line">        results = pool.<span class="built_in">map</span>(func,data)</span><br><span class="line">    t = time.time()</span><br><span class="line">    <span class="built_in">print</span>(t-s) <span class="comment"># 2.0059328079223633</span></span><br></pre></td></tr></table></figure><p>这里可以看到使用了线程池以后执行效率大大的提高了，一共用了2s</p><p>最后：由于GIL限制,建议:IO密集的任务,用ThreadPoolExecutor;CPU密集任务,用ProcessPoolExcutor。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类属性、实例属性、类方法、静态方法、实例方法、区别</title>
      <link href="/post/724c0cfe.html"/>
      <url>/post/724c0cfe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>类对象：就是类本身</li><li>实例对象：由类实例化出来的对象</li><li>类属性：就是类对象所拥有的属性。他被类对象和实例对象共同拥有</li><li>实例属性：类的实例化对象的属性，属于实例对象独有</li><li>类方法：是类对象所拥有的方法，需要用修饰器”@classmethod”来标识其为类方法</li><li>实例方法：在类中最常定义的成员方法，它至少有一个参数并且必须以实例对象作为其第一个参数，一般以名为”self”的变量作为第一个参数。</li><li>静态方法：需要通过修饰器 @staticmethod 来进⾏修饰，静态⽅法不需要多定义参数，跟普通函数没什么区别，与类和实例都没有所谓的绑定关系，不论是通过类还是实例都可以引用该方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Func</span>():</span><br><span class="line"></span><br><span class="line">    name = <span class="string">&quot;hwang&quot;</span> <span class="comment"># 类属性</span></span><br><span class="line">    age = <span class="number">20</span> <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.title = <span class="string">&quot;China&quot;</span> <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">cls,value</span>):</span><br><span class="line">        cls.name = value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_title</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">sec</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;暂停几秒&quot;&quot;&quot;</span></span><br><span class="line">        time.sleep(sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Func：类对象</span></span><br><span class="line"><span class="built_in">print</span>(Func) <span class="comment"># &lt;class &#x27;__main__.Func&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 类对象的属性引用（使用）</span></span><br><span class="line"><span class="built_in">print</span>(Func.name) <span class="comment"># hwang</span></span><br><span class="line"><span class="comment"># func：类对象的实例化（使用）</span></span><br><span class="line">func = Func()</span><br><span class="line"><span class="built_in">print</span>(func)</span><br><span class="line"><span class="comment"># 类对象对类属性的修改</span></span><br><span class="line">Func.name = <span class="string">&quot;xm&quot;</span></span><br><span class="line"><span class="built_in">print</span>(func.name) <span class="comment"># xm</span></span><br><span class="line"><span class="built_in">print</span>(Func.name) <span class="comment"># xm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># func：实例对象（类的实例对象）</span></span><br><span class="line">func = Func()</span><br><span class="line"><span class="built_in">print</span>(func) <span class="comment"># &lt;__main__.Func object at 0x7ff5300e9450&gt;</span></span><br><span class="line"><span class="comment"># 实例对象（唯一操作）：属性引用（使用）</span></span><br><span class="line">func.name = <span class="string">&quot;xm&quot;</span></span><br><span class="line"><span class="built_in">print</span>(func.name) <span class="comment"># xm</span></span><br><span class="line"><span class="comment"># 实例对象无法修改类属性</span></span><br><span class="line"><span class="built_in">print</span>(Func.name) <span class="comment"># hwang</span></span><br><span class="line"><span class="comment"># 实例属性：类的实例化对象的属性，属于实例对象独有</span></span><br><span class="line"><span class="built_in">print</span>(func.title) <span class="comment"># China</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法对类属性的修改</span></span><br><span class="line">Func.hello(<span class="string">&quot;xm2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(Func.name) <span class="comment"># xm2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例方法</span></span><br><span class="line">f = Func()</span><br><span class="line"><span class="built_in">print</span>(f.get_title()) <span class="comment"># China</span></span><br><span class="line"><span class="comment"># print(Func.get_title()) # 报错</span></span><br><span class="line"><span class="built_in">print</span>(Func.get_title(f)) <span class="comment"># China</span></span><br><span class="line"><span class="built_in">print</span>(Func().get_title()) <span class="comment"># China</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态方法</span></span><br><span class="line">f = Func()</span><br><span class="line">f.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(f.get_title())</span><br></pre></td></tr></table></figure><h1 id="类对象的使用"><a href="#类对象的使用" class="headerlink" title="类对象的使用"></a>类对象的使用</h1><ul><li><p>类对象支持两种操作：属性引用和实例化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   ...:     name = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">   ...:     age = <span class="number">20</span></span><br><span class="line">   ...:</span><br><span class="line">   ...:     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">   ...:         <span class="keyword">pass</span></span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: Person.name</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: Person.age</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">20</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: p1 = Person()</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">print</span>(p1.name, p1.age)</span><br><span class="line">xxx <span class="number">20</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: p1.name = <span class="string">&#x27;yyy&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="built_in">print</span>(Person.name, p1.name)</span><br><span class="line">xxx yyy</span><br></pre></td></tr></table></figure></li><li><p>上面 In[6]和In[7] 是类对象的属性引用，In[8] 为类对象的实例化</p></li><li><p>实例对象唯一操作是属性引用，有两种有效的属性名称，数据属性和方法。</p></li></ul><h1 id="类属性、实例属性、类方法、实例方法、静态方法"><a href="#类属性、实例属性、类方法、实例方法、静态方法" class="headerlink" title="类属性、实例属性、类方法、实例方法、静态方法"></a>类属性、实例属性、类方法、实例方法、静态方法</h1><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><ul><li>类属性就是类对象所拥有的属性，它被所有类对象的实例对象所共有，在内存中只存在一个副本；</li><li>对于公有的类属性，在类外可以通过类对象和实例对象访问。</li></ul><h1 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h1><ul><li>类的实例化对象的属性，属于实例对象独有。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    ...:     name = <span class="string">&quot;xxx&quot;</span><span class="comment"># 类属性</span></span><br><span class="line">    ...:     age = <span class="number">20</span><span class="comment"># 类属性</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    ...:        self.addr = <span class="string">&quot;China&quot;</span><span class="comment"># 实例属性</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: p1 = Person()</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: Person.name</span><br><span class="line">Out[<span class="number">28</span>]: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: Person.age</span><br><span class="line">Out[<span class="number">29</span>]: <span class="number">20</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: p1.name</span><br><span class="line">Out[<span class="number">30</span>]: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: p1.addr</span><br><span class="line">Out[<span class="number">31</span>]: <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: Person.addr</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">32</span>-0ed446385bbc&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; <span class="number">1</span> Person.addr</span><br><span class="line"></span><br><span class="line">AttributeError: <span class="built_in">type</span> <span class="built_in">object</span> <span class="string">&#x27;Person&#x27;</span> has no attribute <span class="string">&#x27;addr&#x27;</span></span><br><span class="line">In [<span class="number">33</span>]: p1.name = <span class="string">&quot;yyy&quot;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: <span class="built_in">print</span>(Person.name, p1.name)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="string">&#x27;xxx&#x27;</span> <span class="string">&#x27;yyy&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>类对象和实例对象都可以访问类属性</li><li>类对象无法访问实例属性</li><li>类属性只有通过类对象进行修改，实例对象无法修改类属性, 通过实例对象给类属性进行赋值，实际上是给实例对象添加了一条新的属性</li></ul><h1 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h1><ul><li>类方法：是类对象所拥有的方法，需要用修饰器”@classmethod”来标识其为类方法，</li><li>对于类方法，第一个参数必须是类对象，一般以”cls”作为第一个参数(只是一个参数命名习惯，也可以换成其他的，不过不推荐)</li><li>能够通过实例对象和类对象去访问。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    ...:     name = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    ...:     age = <span class="number">20</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    ...:         self.addr = <span class="string">&quot;China&quot;</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     @<span class="built_in">classmethod</span></span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">cls</span>):</span><br><span class="line">    ...:         <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: Person.hello()</span><br><span class="line">Out[<span class="number">37</span>]: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: Person().hello()</span><br><span class="line">Out[<span class="number">38</span>]: <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>类方法的一个用途就是可以对类属性进行修改, 这样的话，实例对象通过调用类方法也可以对类属性进行修改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    ...:     name = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    ...:     age = <span class="number">20</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    ...:         self.addr = <span class="string">&quot;China&quot;</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     @<span class="built_in">classmethod</span></span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">set_name</span>(<span class="params">cls, value</span>):</span><br><span class="line">    ...:         cls.name = value</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: Person().set_name(<span class="string">&quot;yyy&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: Person.name</span><br><span class="line">Out[<span class="number">41</span>]: <span class="string">&#x27;yyy&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h1><ul><li>实例方法：在类中最常定义的成员方法，它至少有一个参数并且必须以实例对象作为其第一个参数，一般以名为”self”的变量作为第一个参数。</li><li>在类外实例方法只能通过实例对象去调用，不能通过其他方式去调用(其实类对象可以调用实例方法，只不过需要传一个实例对象作为第一个参数)。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    ...:     name = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    ...:     age = <span class="number">20</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    ...:         self.addr = <span class="string">&quot;China&quot;</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">get_addr</span>(<span class="params">self</span>):</span><br><span class="line">    ...:         <span class="keyword">return</span> self.addr</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: p = Person()</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: p.get_addr()</span><br><span class="line">Out[<span class="number">44</span>]: <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: Person.get_addr()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">45</span>-c70e23dcb313&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; <span class="number">1</span> Person.get_addr()</span><br><span class="line"></span><br><span class="line">TypeError: get_addr() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;self&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: Person.get_addr(p)</span><br><span class="line">Out[<span class="number">46</span>]: <span class="string">&#x27;China&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><ul><li><p>需要通过修饰器 @staticmethod 来进⾏修饰，静态⽅法不需要多定义参数</p></li><li><p>跟普通函数没什么区别，与类和实例都没有所谓的绑定关系，不论是通过类还是实例都可以引用该方法。</p></li><li><p>静态方法使用场景</p></li><li><ul><li>如果在方法中不需要访问任何实例方法和属性，纯粹地通过传入参数并返回数据的功能性方法，那么它就适合用静态方法来定义，它节省了实例化对象的开销成本，往往这种方法放在类外面的模块层作为一个函数存在也是没问题的，而放在类中，仅为这个类服务。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">54</span>]: <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    ...:     name = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    ...:     age = <span class="number">20</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    ...:         self.addr = <span class="string">&quot;China&quot;</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:     @<span class="built_in">staticmethod</span></span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">sec</span>):</span><br><span class="line">    ...:         <span class="string">&quot;&quot;&quot;暂停几秒&quot;&quot;&quot;</span></span><br><span class="line">    ...:         time.sleep(sec)</span><br><span class="line">    ...:     <span class="keyword">def</span> <span class="title function_">do_somethings</span>(<span class="params">self</span>):</span><br><span class="line">    ...:         <span class="built_in">print</span>(<span class="string">&quot;do ......&quot;</span>)</span><br><span class="line">    ...:         self.sleep(<span class="number">5</span>)</span><br><span class="line">    ...:         <span class="built_in">print</span>(<span class="string">&quot;end ....&quot;</span>)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: p = Person()</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: Person.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: p.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: p.do_somethings()</span><br><span class="line">do ......</span><br><span class="line">end ....</span><br></pre></td></tr></table></figure><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><table><thead><tr><th>…</th><th>类对象是否可以调用</th><th>实例对象是否可以调用</th></tr></thead><tbody><tr><td>类属性</td><td>是</td><td>是(可以调用但是无法直接修改)</td></tr><tr><td>实例属性</td><td>否</td><td>是</td></tr><tr><td>类方法</td><td>是</td><td>是</td></tr><tr><td>实例方法</td><td>否(其实可以调用，但是要传入一个实例对象)</td><td>是</td></tr><tr><td>静态方法</td><td>是</td><td>是</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-静态方法、类方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unitest基础</title>
      <link href="/post/e2415f.html"/>
      <url>/post/e2415f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>规则：</p><blockquote><p>首先介绍下unittest的用例规则：<br>1、测试文件必须导包：import unittest<br>2、测试类必须继承 unittest.TestCase<br>3、测试方法必须以 test_开头</p></blockquote><h1 id="TestSuite-测试套件-、TestRunner-测试执行）"><a href="#TestSuite-测试套件-、TestRunner-测试执行）" class="headerlink" title="TestSuite(测试套件)、TestRunner(测试执行）"></a>TestSuite(测试套件)、TestRunner(测试执行）</h1><blockquote><p>测试套件，用来管理多个测试用例文件（套件对象）</p></blockquote><h4 id="实践："><a href="#实践：" class="headerlink" title="实践："></a>实践：</h4><h4 id="Unitest-demo-py"><a href="#Unitest-demo-py" class="headerlink" title="Unitest_demo.py"></a>Unitest_demo.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TestCase自定义测试类需要继承的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 测试方法都要以test开头</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试方法1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试方法2&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Unitest-demo2-py"><a href="#Unitest-demo2-py" class="headerlink" title="Unitest_demo2.py"></a>Unitest_demo2.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method3</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试方法3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_mothod4</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试方法4&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="unitest-test-py"><a href="#unitest-test-py" class="headerlink" title="unitest_test.py"></a>unitest_test.py</h4><blockquote><p>TestSuite：测试套件，用来管理多个测试用例文件（套件对象）<br>addTest：让用例按顺序执行<br>makeSuite：加载一个类文件下的所有测试用例到套件对象<br>TextTestRunner：用来执行TestSuite（测试套件）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> Unitest_demo <span class="keyword">import</span> TestDemo</span><br><span class="line"><span class="keyword">from</span> Unitest_demo2 <span class="keyword">import</span> Demo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># TestSuite：测试套件，用来管理多个测试用例文件</span></span><br><span class="line">suite = unittest.TestSuite() <span class="comment"># 创建套件对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加测试类中的所有方法</span></span><br><span class="line"><span class="comment"># addTest：用例按顺序执行</span></span><br><span class="line"><span class="comment"># makeSuite：加载一个类文件下的所有测试用例到suite（套件对象）</span></span><br><span class="line">suite.addTest(unittest.makeSuite(TestDemo))</span><br><span class="line">suite.addTest(unittest.makeSuite(Demo))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化运行对象</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用运行对象 去 运行套件对象</span></span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><p><img src="https://s1.ax1x.com/2022/06/16/XHPuT0.png" alt="XHPuT0.png"></p><h1 id="TestLoader测试加载"><a href="#TestLoader测试加载" class="headerlink" title="TestLoader测试加载"></a>TestLoader测试加载</h1><blockquote><p>搜索指定目录文件下面指定字母开头的模块文件下test开始的方法，并将这些方法添加到测试套件，对Testsuite功能的补充，用来组装测试用例</p></blockquote><blockquote><p>一般用例写在Case这个文件夹，当测试用例超多的时候可以考虑TestLoader</p></blockquote><h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><pre><code>1. suite = unittest.TestLoader().discover(&quot;指定搜索的目录文件&quot;,&quot;指定字母开头模块文件&quot;)2. suite = unittest.defaultTestLoader.discover(&quot;指定搜索的目录文件&quot;,&quot;指定字母开头模块文件&quot;) 【推荐】</code></pre><blockquote><p>这里依然借助上面的Unitest_demo.py和Unitest_demo2.py</p></blockquote><h4 id="实践：-1"><a href="#实践：-1" class="headerlink" title="实践："></a>实践：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unitest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化测试加载对象并添加用例</span></span><br><span class="line">suite = unittest.defaultTestLoader.discover(<span class="string">&quot;../project_test&quot;</span>,<span class="string">&quot;Unitest_demo*.py&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化运行对象</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line"><span class="comment"># 用运行对象 去 运行套件对象</span></span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure><h4 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h4><p><img src="https://s1.ax1x.com/2022/06/16/XHiBEq.png" alt="XHiBEq.png"></p><h1 id="TestSuite、TestLoader区别"><a href="#TestSuite、TestLoader区别" class="headerlink" title="TestSuite、TestLoader区别"></a>TestSuite、TestLoader区别</h1><pre><code>共同点：都是测试套件不同点：实现方式不同：    TestSuite：要么添加指定的测试类中所有test开体验的方法，要么添加指定测试类中指定某个test开头的方法：        多个：suite.addTest(unittest.makeSuite(TestDemo))        单个：suite.addTest(Demo(&quot;test_method3&quot;))    TestLoader：搜索指定目录下指定字母开头的模块文件中以test字母开头的方法并将这些方法添加到测试套件中，最后返回测试套件</code></pre><h1 id="测试夹具"><a href="#测试夹具" class="headerlink" title="测试夹具"></a>测试夹具</h1><h2 id="类级别"><a href="#类级别" class="headerlink" title="类级别"></a>类级别</h2><p>在&#x3D;&#x3D;每个测试类中所有方法&#x3D;&#x3D;执行前后 都会自动调用的结构(在整个类中 执行之前执行之后各一次)</p><ul><li><font color="red">def setUpClass( )</font> ,类中所有方法之前</li><li><font color="red">def tearDownClass( )</font>，类中所有方法之后<br>特性：测试类运行之前运行一次setUpClass ，类运行之后运行一次tearDownClass</li></ul><blockquote><p>注意：类方法必须使用 @classmethod修饰<br>类方法：是类对象所拥有的方法，需要用修饰器”@classmethod”来标识其为类方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&#x27;-----------1.打开浏览器&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&#x27;------------5、关闭浏览器&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="方法级别"><a href="#方法级别" class="headerlink" title="方法级别"></a>方法级别</h2><p>在&#x3D;&#x3D;每个测试方法&#x3D;&#x3D;（用例代码）执行前后都会自动调用的结构</p><ul><li><font color="red">def setUp( )</font>,每个测试方法执行之前都会执行 （初始化）</li><li><font color="red">def tearDown( )</font>,每个测试方法执行之后都会执行 （释放）</li></ul><blockquote><p>特性：几个测试函数，执行几次。每个测试函数执行之前都会执行 setUp，执行之后都会执行tearDwon</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 每个测试方法执行之前执行的函数</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 每个测试方法执行之后执行的函数</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><blockquote><p>在unittest中使用断言，需要通过 self.断言方法<br>自动化脚本执行时都是无人值守，需要通过断言来判断自动化脚本的执行是否通过。<br>自动化脚本不写断言，相当于没有执行测试一个效果。</p></blockquote><h2 id="常用的断言"><a href="#常用的断言" class="headerlink" title="常用的断言"></a>常用的断言</h2><blockquote><p>self.assertEqual(ex1, ex2) # 判断ex1 是否和ex2 相等<br>self.assertIn(ex1, ex2) #  ex2是否包含 ex1   注意：所谓的包含不能跳字符<br>self.assertTrue(ex) #  判断ex是否为True</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unitest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;hwang&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method1</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(<span class="string">&quot;hwang&quot;</span>,name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method2</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertIn(<span class="string">&quot;h&quot;</span>,name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method3</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertTrue(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h1 id="跳过、判断"><a href="#跳过、判断" class="headerlink" title="跳过、判断"></a>跳过、判断</h1><blockquote><p>对于一些未完成的或者不满足测试条件的测试函数和测试类, 不想执行,可以使用跳过</p></blockquote><h4 id="写法-1"><a href="#写法-1" class="headerlink" title="写法"></a>写法</h4><blockquote><p>直接将测试函数标记成跳过<br>@unittest.skip(‘跳过条件’)<br>根据条件判断测试函数是否跳过 , 判断条件成立, 跳过<br>@unittest.skipIf(判断条件，’跳过原因’)</p></blockquote><p><strong><font size="4">skip：直接跳过</font></strong><br><strong><font size="4">skipIf：</font><font color="red" size="4">判断条件成立， 跳过。不成立，执行。</font></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unitest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params"><span class="string">&quot;直接跳过&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试用例1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skipIf(<span class="params">age == <span class="number">20</span>, <span class="string">&quot;成年，跳过&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试用例2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skipIf(<span class="params">age &gt; <span class="number">18</span>,<span class="string">&quot;成年，跳过&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试用例2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skipIf(<span class="params">age &lt; <span class="number">18</span>,<span class="string">&quot;未成年，不跳过&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method3</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试用例3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://s1.ax1x.com/2022/06/16/XHMWsP.png" alt="XHMWsP.png"></p><h1 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h1><blockquote><p>pip install ddt<br>使用数据驱动，要在class前加上修饰器 <strong><font color="red">@ddt</font></strong></p></blockquote><h2 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h2><blockquote><p>@data：单个参数里面要用字符串形式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unitest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 单个参数</span></span><br><span class="line"><span class="meta">    @data(<span class="params"><span class="string">&quot;20220616&quot;</span>,<span class="string">&quot;20220617&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method</span>(<span class="params">self,date</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;日期：&quot;</span>,date)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h2 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h2><blockquote><p>@data：多个参数里面要用列表形式<br>@unpack 装饰器：对数据拆包，把对应的内容传入对应的参数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unitest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt, data, unpack</span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 多参数数据需要使用list</span></span><br><span class="line"><span class="meta">    @data(<span class="params">[<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>]</span>)</span></span><br><span class="line">    <span class="comment"># unpack 拆包，用于将列表里面的数据拆开，分别对应传入下面变量中</span></span><br><span class="line"><span class="meta">    @unpack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_2</span>(<span class="params">self,username,password</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名：&quot;</span>,username)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;密码：&quot;</span>,password)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h2 id="Json文件传递参数"><a href="#Json文件传递参数" class="headerlink" title="Json文件传递参数"></a>Json文件传递参数</h2><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><h4 id="unitest-test-json"><a href="#unitest-test-json" class="headerlink" title="unitest_test.json"></a>unitest_test.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mysql&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wanghan&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;redis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hwang&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="unitest-test-py-1"><a href="#unitest-test-py-1" class="headerlink" title="unitest_test.py"></a>unitest_test.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> unitest</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data,unpack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用json多个参数读取</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reads_file</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;unittest_test.json&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        result = json.load(f)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 多参数数据驱动</span></span><br><span class="line"><span class="meta">    @data(<span class="params">*reads_file(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="meta">    @unpack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method</span>(<span class="params">self,mysql,redis</span>):</span><br><span class="line">        <span class="built_in">print</span>(mysql)</span><br><span class="line">        <span class="built_in">print</span>(mysql[<span class="string">&quot;username&quot;</span>])</span><br><span class="line">        <span class="built_in">print</span>(mysql[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">        <span class="built_in">print</span>(redis)</span><br><span class="line">        <span class="built_in">print</span>(redis[<span class="string">&quot;username&quot;</span>])</span><br><span class="line">        <span class="built_in">print</span>(redis[<span class="string">&quot;password&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><blockquote><p>1、with open里面默认是 ”r“<br>2、@data 里面的 * 含义是实现每个json对象单个传入方法执行，不然会吧json文件里面所用数据全部传入<br>* 是元祖；<br>** 是字典；<br>3、参数不能传错，要对应</p></blockquote><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p><img src="https://s1.ax1x.com/2022/06/16/XH1ib6.png" alt="XH1ib6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-unittest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--时间序列--Timestamp</title>
      <link href="/post/18e03d37.html"/>
      <url>/post/18e03d37.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Pandas 中的时间戳数据类型 Timestamp，它继承自<code>datetime.datetime</code>类，具有更丰富的时间处理功能。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.Timestamp(ts_input, freq=<span class="literal">None</span>, tz=<span class="literal">None</span>, unit=<span class="literal">None</span>,year=<span class="literal">None</span>, month=<span class="literal">None</span>, day=<span class="literal">None</span>, hour=<span class="literal">None</span>, minute=<span class="literal">None</span>,second=<span class="literal">None</span>, microsecond=<span class="literal">None</span>, nanosecond=<span class="literal">None</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>ts_input</td><td>要转换为时间戳的值</td></tr><tr><td>tz</td><td>时区，如 tz&#x3D;‘Asia&#x2F;Shanghai’ 上海时区</td></tr><tr><td>year、month、day</td><td>年、月、日</td></tr><tr><td>hour、minute、second、microsecond、nanosecond</td><td>时、分、秒、微秒、纳秒</td></tr></tbody></table><h1 id="创建时间戳"><a href="#创建时间戳" class="headerlink" title="创建时间戳"></a>创建时间戳</h1><p>可以使用多种方式创建<code>pandas.Timestamp</code>对象，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 从字符串创建</span></span><br><span class="line">ts = pd.Timestamp(<span class="string">&#x27;2022-10-01 12:34:56&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ts)  <span class="comment"># 2022-10-01 12:34:56</span></span><br><span class="line"><span class="comment"># 从整数创建（以纳秒为单位的时间戳）</span></span><br><span class="line">ts = pd.Timestamp(<span class="number">1664682896000000000</span>)</span><br><span class="line"><span class="built_in">print</span>(ts)  <span class="comment"># 2022-10-01 12:34:56</span></span><br><span class="line"><span class="comment"># 从datetime.datetime创建</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">dt = datetime(<span class="number">2022</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">34</span>, <span class="number">56</span>)</span><br><span class="line">ts = pd.Timestamp(dt)</span><br><span class="line"><span class="built_in">print</span>(ts)  <span class="comment"># 2022-10-01 12:34:56</span></span><br></pre></td></tr></table></figure><h1 id="获取时间戳的属性方法"><a href="#获取时间戳的属性方法" class="headerlink" title="获取时间戳的属性方法"></a>获取时间戳的属性方法</h1><p><code>pandas.Timestamp</code>对象可以提供多种时间戳属性，例如：年、月、日、小时、分钟、秒、微秒、纳秒、星期几、是否为闰年等。可以使用相应的属性名称获取这些属性。</p><h2 id="年月日、星期、闰年"><a href="#年月日、星期、闰年" class="headerlink" title="年月日、星期、闰年"></a>年月日、星期、闰年</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ts = pd.Timestamp(<span class="string">&#x27;2022-10-01 12:34:56&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ts.year)      <span class="comment"># 2022</span></span><br><span class="line"><span class="built_in">print</span>(ts.month)     <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(ts.day)       <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(ts.hour)      <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(ts.minute)    <span class="comment"># 34</span></span><br><span class="line"><span class="built_in">print</span>(ts.second)    <span class="comment"># 56</span></span><br><span class="line"><span class="built_in">print</span>(ts.microsecond) <span class="comment"># 0 微秒</span></span><br><span class="line"><span class="built_in">print</span>(ts.nanosecond)  <span class="comment"># 0 纳秒</span></span><br><span class="line"><span class="built_in">print</span>(ts.weekday()) <span class="comment"># 5 (星期六，0表示星期一)</span></span><br><span class="line"><span class="built_in">print</span>(ts.is_leap_year) <span class="comment"># False （不是闰年）</span></span><br></pre></td></tr></table></figure><h2 id="weekofyear-属性"><a href="#weekofyear-属性" class="headerlink" title="weekofyear 属性"></a>weekofyear 属性</h2><blockquote><p>获取该时间戳在当年的第多少周</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ts=pd.Timestamp(<span class="string">&quot;2020-3-17&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ts.weekofyear) <span class="comment"># 12</span></span><br></pre></td></tr></table></figure><h2 id="dayofyear-属性"><a href="#dayofyear-属性" class="headerlink" title="dayofyear 属性"></a>dayofyear 属性</h2><blockquote><p>获取该时间是一年的第多少天</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ts=pd.Timestamp(<span class="string">&quot;2021-1-6&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ts.dayofyear) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h2 id="is-year-end-属性"><a href="#is-year-end-属性" class="headerlink" title="is_year_end 属性"></a>is_year_end 属性</h2><blockquote><p>获取该时间戳是否是一年的最后一天</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ts=pd.Timestamp(<span class="string">&quot;2021-1-6&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ts.is_year_end) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="now-方法"><a href="#now-方法" class="headerlink" title="now() 方法"></a>now() 方法</h2><blockquote><p>获取当前时间的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ts=pd.Timestamp.now()</span><br><span class="line"><span class="built_in">print</span>(ts) <span class="comment"># 2021-01-06 21:30:08.051878</span></span><br></pre></td></tr></table></figure><h2 id="day-name-方法"><a href="#day-name-方法" class="headerlink" title="day_name() 方法"></a>day_name() 方法</h2><blockquote><p>获取时间戳是星期几名字的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ts=pd.Timestamp(<span class="string">&quot;2021-1-6&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ts.day_name()) <span class="comment"># Wednesday</span></span><br></pre></td></tr></table></figure><h2 id="isocalendar-方法"><a href="#isocalendar-方法" class="headerlink" title="isocalendar() 方法"></a>isocalendar() 方法</h2><blockquote><p>获取时间戳是哪一年、这一年的第几周、星期几</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date_res=pd.Timestamp(<span class="string">&quot;2021-1-6&quot;</span>,tz=<span class="string">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(date_res.isocalendar()) <span class="comment"># (2021, 1, 3)</span></span><br></pre></td></tr></table></figure><h1 id="时间戳运算"><a href="#时间戳运算" class="headerlink" title="时间戳运算"></a>时间戳运算</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ts1 = pd.Timestamp(<span class="string">&#x27;2022-10-01 12:34:56&#x27;</span>)</span><br><span class="line">ts2 = pd.Timestamp(<span class="string">&#x27;2022-10-02 13:35:57&#x27;</span>)</span><br><span class="line"><span class="comment"># 相减得到时间差（Timedelta对象）</span></span><br><span class="line">delta = ts2 - ts1</span><br><span class="line"><span class="built_in">print</span>(delta)  <span class="comment"># 1 days 01:01:01</span></span><br><span class="line"><span class="comment"># 相加得到新的Timestamp对象</span></span><br><span class="line">ts3 = ts1 + pd.Timedelta(days=<span class="number">2</span>, hours=<span class="number">3</span>, minutes=<span class="number">4</span>, seconds=<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(ts3)  <span class="comment"># 2022-10-03 15:39:01</span></span><br><span class="line"><span class="comment"># 比较两个Timestamp对象的大小</span></span><br><span class="line"><span class="built_in">print</span>(ts1 &lt; ts2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h1 id="时区处理"><a href="#时区处理" class="headerlink" title="时区处理"></a>时区处理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ts1 = pd.Timestamp(<span class="string">&#x27;2022-10-01 12:34:56&#x27;</span>)</span><br><span class="line">ts2 = ts1.tz_localize(<span class="string">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class="line">ts3 = ts2.tz_convert(<span class="string">&#x27;US/Eastern&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ts1)  <span class="comment"># 2022-10-01 12:34:56</span></span><br><span class="line"><span class="built_in">print</span>(ts2)  <span class="comment"># 2022-10-01 12:34:56+08:00</span></span><br><span class="line"><span class="built_in">print</span>(ts3)  <span class="comment"># 2022-10-01 00:34:56-04:00</span></span><br><span class="line"><span class="comment"># 获取时区信息</span></span><br><span class="line"><span class="built_in">print</span>(ts2.tzinfo)  <span class="comment"># Asia/Shanghai</span></span><br></pre></td></tr></table></figure><h1 id="通过时间戳创建索引"><a href="#通过时间戳创建索引" class="headerlink" title="通过时间戳创建索引"></a>通过时间戳创建索引</h1><p><code>pandas.Timestamp</code>对象可以用作时间戳索引，对于时间序列数据的处理非常方便</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dates = [pd.Timestamp(<span class="string">&#x27;2018-04-12&#x27;</span>), pd.Timestamp(<span class="string">&#x27;2018-05-12&#x27;</span>),</span><br><span class="line">         pd.Timestamp(<span class="string">&#x27;2022-04-12&#x27;</span>), pd.Timestamp(<span class="string">&#x27;2022-05-12&#x27;</span>),</span><br><span class="line">         pd.Timestamp(<span class="string">&#x27;2023-04-12&#x27;</span>), pd.Timestamp(<span class="string">&#x27;2023-05-12&#x27;</span>)]</span><br><span class="line">values = [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line"></span><br><span class="line">s = pd.Series(values, index=dates)</span><br><span class="line"><span class="comment"># 根据时间戳索引进行数据选择</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;2022-04-12&#x27;</span>])  <span class="comment"># 333</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;2022-04-12&#x27;</span>:<span class="string">&#x27;2023-01-04&#x27;</span>]) </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">333</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span>-04-<span class="number">12</span>    <span class="number">333</span></span><br><span class="line"><span class="number">2022</span>-05-<span class="number">12</span>    <span class="number">444</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--数据筛选</title>
      <link href="/post/61b1412f.html"/>
      <url>/post/61b1412f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="索引模糊匹配"><a href="#索引模糊匹配" class="headerlink" title="索引模糊匹配"></a>索引模糊匹配</h1><ul><li>truncate，截断函数，通过before和after参数，实现筛选特定范围内的数据，其中两个参数中可只存在一个，表示半开区间</li><li>dt.between，借助时间序列的dt属性，接受起始和结束参数，实现特定范围筛选</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">date = pd.date_range(<span class="string">&quot;2022-06-15&quot;</span>,<span class="string">&quot;2022-06-16&quot;</span>,freq=<span class="string">&quot;S&quot;</span>)</span><br><span class="line">num = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(date)+<span class="number">1</span>)]</span><br><span class="line">df = pd.DataFrame(num,columns=[<span class="string">&quot;num&quot;</span>],index=date)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#                        num</span></span><br><span class="line"><span class="comment"># 2022-06-15 00:00:00      1</span></span><br><span class="line"><span class="comment"># 2022-06-15 00:00:01      2</span></span><br><span class="line"><span class="comment"># 2022-06-15 00:00:02      3</span></span><br><span class="line"><span class="comment"># 2022-06-15 00:00:03      4</span></span><br><span class="line"><span class="comment"># 2022-06-15 00:00:04      5</span></span><br><span class="line"><span class="comment"># ...                    ...</span></span><br><span class="line"><span class="comment"># 2022-06-15 23:59:56  86397</span></span><br><span class="line"><span class="comment"># 2022-06-15 23:59:57  86398</span></span><br><span class="line"><span class="comment"># 2022-06-15 23:59:58  86399</span></span><br><span class="line"><span class="comment"># 2022-06-15 23:59:59  86400</span></span><br><span class="line"><span class="comment"># 2022-06-16 00:00:00  86401</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># [86401 rows x 1 columns]</span></span><br></pre></td></tr></table></figure><h1 id="索引模糊匹配-1"><a href="#索引模糊匹配-1" class="headerlink" title="索引模糊匹配"></a>索引模糊匹配</h1><blockquote><p>时间序列和字符串序列的匹配策略是不同的，时间序列是截断式模糊匹配，字符串序列是比较式模糊匹配</p></blockquote><h4 id="1-时间序列的匹配"><a href="#1-时间序列的匹配" class="headerlink" title="1. 时间序列的匹配"></a>1. 时间序列的匹配</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;2022-06-15 07&quot;</span>:<span class="string">&quot;2022-06-15 08&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#                        num</span></span><br><span class="line"><span class="comment"># 2022-06-15 07:00:00  25201</span></span><br><span class="line"><span class="comment"># 2022-06-15 07:00:01  25202</span></span><br><span class="line"><span class="comment"># 2022-06-15 07:00:02  25203</span></span><br><span class="line"><span class="comment"># 2022-06-15 07:00:03  25204</span></span><br><span class="line"><span class="comment"># 2022-06-15 07:00:04  25205</span></span><br><span class="line"><span class="comment"># ...                    ...</span></span><br><span class="line"><span class="comment"># 2022-06-15 08:59:55  32396</span></span><br><span class="line"><span class="comment"># 2022-06-15 08:59:56  32397</span></span><br><span class="line"><span class="comment"># 2022-06-15 08:59:57  32398</span></span><br><span class="line"><span class="comment"># 2022-06-15 08:59:58  32399</span></span><br><span class="line"><span class="comment"># 2022-06-15 08:59:59  32400</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># [7200 rows x 1 columns]</span></span><br></pre></td></tr></table></figure><h4 id="2-字符串序列的匹配"><a href="#2-字符串序列的匹配" class="headerlink" title="2. 字符串序列的匹配"></a>2. 字符串序列的匹配</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">df1 =df.copy()</span><br><span class="line">df1.index = df1.index.astype(&quot;str&quot;)</span><br><span class="line">print(df1[&quot;2022-06-15 07&quot;:&quot;2022-06-15 08&quot;])</span><br><span class="line"></span><br><span class="line">                       num</span><br><span class="line">2022-06-15 07:00:00  25201</span><br><span class="line">2022-06-15 07:00:01  25202</span><br><span class="line">2022-06-15 07:00:02  25203</span><br><span class="line">2022-06-15 07:00:03  25204</span><br><span class="line">2022-06-15 07:00:04  25205</span><br><span class="line">...                    ...</span><br><span class="line">2022-06-15 07:59:55  28796</span><br><span class="line">2022-06-15 07:59:56  28797</span><br><span class="line">2022-06-15 07:59:57  28798</span><br><span class="line">2022-06-15 07:59:58  28799</span><br><span class="line">2022-06-15 07:59:59  28800</span><br><span class="line"></span><br><span class="line">[3600 rows x 1 columns]</span><br></pre></td></tr></table></figure><h4 id="3-truncate截断函数"><a href="#3-truncate截断函数" class="headerlink" title="3. truncate截断函数"></a>3. truncate截断函数</h4><blockquote><p>布尔索引的简略写法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(df.truncate(before=&quot;2022-06-15 07&quot;,after=&quot;2022-06-15 09&quot;))</span><br><span class="line"></span><br><span class="line">#                        num</span><br><span class="line"># 2022-06-15 07:00:00  25201</span><br><span class="line"># 2022-06-15 07:00:01  25202</span><br><span class="line"># 2022-06-15 07:00:02  25203</span><br><span class="line"># 2022-06-15 07:00:03  25204</span><br><span class="line"># 2022-06-15 07:00:04  25205</span><br><span class="line"># ...                    ...</span><br><span class="line"># 2022-06-15 08:59:55  32396</span><br><span class="line"># 2022-06-15 08:59:56  32397</span><br><span class="line"># 2022-06-15 08:59:57  32398</span><br><span class="line"># 2022-06-15 08:59:58  32399</span><br><span class="line"># 2022-06-15 08:59:59  32400</span><br><span class="line"># </span><br><span class="line"># [7200 rows x 1 columns]</span><br></pre></td></tr></table></figure><h4 id="4-dt-between"><a href="#4-dt-between" class="headerlink" title="4. dt.between"></a>4. dt.between</h4><blockquote><p>该方法主要用于数据列的时间筛选，其优势在于可指定时间属性比较，例如：可以指定时间属性</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># reset_index() 重置DateFrame索引从0开始，并将原来的索引合并入DateFrame数据列</span><br><span class="line">df = df.reset_index()</span><br><span class="line">data = df[df[&quot;index&quot;].dt.time.between(pd.Timestamp(&quot;07:00:00&quot;).time(),pd.Timestamp(&quot;09:00:00&quot;).time())]</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">#                     index    num</span><br><span class="line"># 25200 2022-06-15 07:00:00  25201</span><br><span class="line"># 25201 2022-06-15 07:00:01  25202</span><br><span class="line"># 25202 2022-06-15 07:00:02  25203</span><br><span class="line"># 25203 2022-06-15 07:00:03  25204</span><br><span class="line"># 25204 2022-06-15 07:00:04  25205</span><br><span class="line"># ...                   ...    ...</span><br><span class="line"># 32396 2022-06-15 08:59:56  32397</span><br><span class="line"># 32397 2022-06-15 08:59:57  32398</span><br><span class="line"># 32398 2022-06-15 08:59:58  32399</span><br><span class="line"># 32399 2022-06-15 08:59:59  32400</span><br><span class="line"># 32400 2022-06-15 09:00:00  32401</span><br><span class="line"># </span><br><span class="line"># [7201 rows x 2 columns]</span><br></pre></td></tr></table></figure><h4 id="介绍reset-index"><a href="#介绍reset-index" class="headerlink" title="介绍reset_index()"></a>介绍reset_index()</h4><p><strong>参数</strong></p><blockquote><p>drop：是否删除原索引，默认为False<br>inplace: 是否在原DataFrame上改动，默认为False<br>level: 如果索引(index)有多个列，仅从索引中删除level指定的列，默认删除所有列<br>col_level: 如果列名(columns)有多个级别，决定被删除的索引将插入哪个级别，默认插入第一级<br>col_fill: 如果列名(columns)有多个级别，决定其他级别如何命名</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--高级接口dt（datetime）</title>
      <link href="/post/1f14ccbd.html"/>
      <url>/post/1f14ccbd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p><font size=4><strong>df 是Pandas对Series和DataFrame提供的其中一种属性接口，类似于datetime的使用，是对日期时间数据的处理</strong></font></p></blockquote><h1 id="dt"><a href="#dt" class="headerlink" title="dt"></a>dt</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame([&#123;<span class="string">&quot;日期&quot;</span>:<span class="string">&quot;2022-06-14&quot;</span>,<span class="string">&quot;价格&quot;</span>:<span class="string">&quot;60&quot;</span>&#125;,&#123;<span class="string">&quot;日期&quot;</span>:<span class="string">&quot;2022-06-17&quot;</span>,<span class="string">&quot;价格&quot;</span>:<span class="string">&quot;70&quot;</span>&#125;],columns=[<span class="string">&quot;日期&quot;</span>,<span class="string">&quot;价格&quot;</span>],index=[<span class="string">&quot;2022-06-14&quot;</span>,<span class="string">&quot;2022-06-17&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df[<span class="string">&quot;日期&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;日期&quot;</span>])</span><br><span class="line"><span class="comment"># 将日期str类型改为datetime类型</span></span><br></pre></td></tr></table></figure><h3 id="访问日期列中的日期，并输出字符串格式"><a href="#访问日期列中的日期，并输出字符串格式" class="headerlink" title="访问日期列中的日期，并输出字符串格式"></a>访问日期列中的日期，并输出字符串格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df.日期.dt.date.astype(str))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    2022-06-14</span><br><span class="line">    2022-06-17    2022-06-17</span><br><span class="line">    Name: 日期, dtype: object</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-date"><a href="#dt-date" class="headerlink" title="dt.date"></a>dt.date</h3><blockquote><p>返回的是Series的object类型</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.date)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    2022-06-14</span><br><span class="line">    2022-06-17    2022-06-17</span><br><span class="line">    Name: 日期, dtype: object</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-normalize"><a href="#dt-normalize" class="headerlink" title="dt.normalize"></a>dt.normalize</h3><blockquote><p>返回的是series的datetime64类型</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.normalize())</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14   2022-06-14</span><br><span class="line">    2022-06-17   2022-06-17</span><br><span class="line">    Name: 日期, dtype: datetime64[ns]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-year、dt-month、dt-day、dt-hour、dt-minute、dt-second"><a href="#dt-year、dt-month、dt-day、dt-hour、dt-minute、dt-second" class="headerlink" title="dt.year、dt.month、dt.day、dt.hour、dt.minute、dt.second"></a>dt.year、dt.month、dt.day、dt.hour、dt.minute、dt.second</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.year)</span><br><span class="line">print(df[&quot;日期&quot;].dt.month)</span><br><span class="line">print(df[&quot;日期&quot;].dt.day)</span><br><span class="line">print(df[&quot;日期&quot;].dt.hour)</span><br><span class="line">print(df[&quot;日期&quot;].dt.minute)</span><br><span class="line">print(df[&quot;日期&quot;].dt.second)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    2022</span><br><span class="line">    2022-06-17    2022</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">    2022-06-14    6</span><br><span class="line">    2022-06-17    6</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">    2022-06-14    14</span><br><span class="line">    2022-06-17    17</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">    2022-06-14    0</span><br><span class="line">    2022-06-17    0</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">    2022-06-14    0</span><br><span class="line">    2022-06-17    0</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">    2022-06-14    0</span><br><span class="line">    2022-06-17    0</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-week（一年的第几周）"><a href="#dt-week（一年的第几周）" class="headerlink" title="dt.week（一年的第几周）"></a>dt.week（一年的第几周）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.week)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    24</span><br><span class="line">    2022-06-17    24</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-weekday（星期几）"><a href="#dt-weekday（星期几）" class="headerlink" title="dt.weekday（星期几）"></a>dt.weekday（星期几）</h3><blockquote><p>0-6 对应 周1-周日</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.weekday)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    1</span><br><span class="line">    2022-06-17    4</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-dayofweek（星期几）"><a href="#dt-dayofweek（星期几）" class="headerlink" title="dt.dayofweek（星期几）"></a>dt.dayofweek（星期几）</h3><blockquote><p>0-6 对应 周1-周日</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.dayofweek)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    1</span><br><span class="line">    2022-06-17    4</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-dayofyear（一年的第几天）"><a href="#dt-dayofyear（一年的第几天）" class="headerlink" title="dt.dayofyear（一年的第几天）"></a>dt.dayofyear（一年的第几天）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.dayofyear)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    165</span><br><span class="line">    2022-06-17    168</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-quarter（一年的第几季度）"><a href="#dt-quarter（一年的第几季度）" class="headerlink" title="dt.quarter（一年的第几季度）"></a>dt.quarter（一年的第几季度）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.quarter)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    2</span><br><span class="line">    2022-06-17    2</span><br><span class="line">    Name: 日期, dtype: int64</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-is-month-start（是否是每月的第一天）"><a href="#dt-is-month-start（是否是每月的第一天）" class="headerlink" title="dt.is_month_start（是否是每月的第一天）"></a>dt.is_month_start（是否是每月的第一天）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.is_month_start)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    False</span><br><span class="line">    2022-06-17    False</span><br><span class="line">    Name: 日期, dtype: bool</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-is-month-end（是否是每月的最后一天）"><a href="#dt-is-month-end（是否是每月的最后一天）" class="headerlink" title="dt.is_month_end（是否是每月的最后一天）"></a>dt.is_month_end（是否是每月的最后一天）</h3><h3 id="dt-is-year-start-（是否是每年的第一天）"><a href="#dt-is-year-start-（是否是每年的第一天）" class="headerlink" title="dt.is_year_start （是否是每年的第一天）"></a>dt.is_year_start （是否是每年的第一天）</h3><h3 id="dt-is-year-end-（是否是每年的最后一天）"><a href="#dt-is-year-end-（是否是每年的最后一天）" class="headerlink" title="dt.is_year_end （是否是每年的最后一天）"></a>dt.is_year_end （是否是每年的最后一天）</h3><h3 id="dt-is-quarter-start-（是否是每季度的第一天）"><a href="#dt-is-quarter-start-（是否是每季度的第一天）" class="headerlink" title="dt.is_quarter_start （是否是每季度的第一天）"></a>dt.is_quarter_start （是否是每季度的第一天）</h3><h3 id="dt-is-quarter-end-（是否是每季度的最后一天）"><a href="#dt-is-quarter-end-（是否是每季度的最后一天）" class="headerlink" title="dt.is_quarter_end （是否是每季度的最后一天）"></a>dt.is_quarter_end （是否是每季度的最后一天）</h3><hr><h3 id="dt-is-leap-year（判断是否是闰年）"><a href="#dt-is-leap-year（判断是否是闰年）" class="headerlink" title="dt.is_leap_year（判断是否是闰年）"></a>dt.is_leap_year（判断是否是闰年）</h3><hr><h3 id="dt-month-name-（返回月份的英文名称）"><a href="#dt-month-name-（返回月份的英文名称）" class="headerlink" title="dt.month_name()（返回月份的英文名称）"></a>dt.month_name()（返回月份的英文名称）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.month_name())</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    June</span><br><span class="line">    2022-06-17    June</span><br><span class="line">    Name: 日期, dtype: object</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="dt-strftime-（设置日期格式）"><a href="#dt-strftime-（设置日期格式）" class="headerlink" title="dt.strftime() （设置日期格式）"></a>dt.strftime() （设置日期格式）</h3><blockquote><p>注意：他与datetime.strftime返回的类型是不一样的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(df[&quot;日期&quot;].dt.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;))</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    2022-06-14    2022-06-14 00:00:00</span><br><span class="line">    2022-06-17    2022-06-17 00:00:00</span><br><span class="line">    Name: 日期, dtype: object</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--数据类型之间的转换</title>
      <link href="/post/b1b31d48.html"/>
      <url>/post/b1b31d48.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="to-datetime"><a href="#to-datetime" class="headerlink" title="to_datetime"></a>to_datetime</h2><p><strong><font color=red size=5>str&#x2F;list[str]&#x2F;unicode &#x3D;&#x3D;&gt;  Timestamp&#x2F;DatetimeIndex</font></strong></p><p>str&#x2F;list[str]&#x2F;unicode&#x2F;object   &#x3D;&#x3D;&gt;    &lt;class ‘pandas._libs.tslibs.timestamps.&gt;Timestamp’&gt;</p><p>可以处理单个也可以同时批量处理多个，单个转为Timestamp，多个转为DatetimeIndex</p><p>pd.to_datetime(str, format&#x3D;’%Y%m%d’, errors&#x3D;’ignore’)</p><blockquote><p>参数：format，格式化显示时间的格式。<br>errors（三种取值）：<br>    ‘raise’，则无效的解析将引发异常（默认）<br>    ‘coerce’，那么无效解析将被设置为NaT<br>    ‘ignore’，那么无效的解析将返回输入值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data_str = <span class="string">&quot;2022-06-13 00:05:00&quot;</span></span><br><span class="line">data_date = pd.to_datetime(data_str)</span><br><span class="line"><span class="built_in">print</span>(data_date) <span class="comment"># 2022-06-13 00:05:00</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data_date)) <span class="comment"># &lt;class &#x27;pandas._libs.tslibs.timestamps.Timestamp&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="to-pydatetime"><a href="#to-pydatetime" class="headerlink" title="to_pydatetime"></a>to_pydatetime</h2><p><strong><font color=red size=5>Timestamp</font>（时间戳）<font color=red size=5> &#x3D;&#x3D;&gt; datetime </font></strong><br>&lt;class ‘pandas._libs.tslibs.timestamps.Timestamp</font>‘&gt;  &#x3D;&#x3D;&gt;  &lt;class ‘datetime.datetime’&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data_datetime = pd.Timestamp(<span class="string">&quot;2022-06-15&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data_datetime) <span class="comment"># 2022-06-15 00:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_datetime.to_pydatetime()) <span class="comment"># 2022-06-15 00:00:00</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data_datetime.to_pydatetime())) <span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="datetime-strftime-x-’-F’"><a href="#datetime-strftime-x-’-F’" class="headerlink" title="datetime.strftime(x,’%F’)"></a>datetime.strftime(x,’%F’)</h2><p><strong><font color=red size=5>DatetimeIndex &#x3D;&#x3D;&gt; str</font></strong></p><p>&lt;class ‘pandas.core.indexes.datetimes.DatetimeIndex’&gt; &#x3D;&#x3D;&gt; &lt;class ‘str’&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">date=pd.date_range(<span class="string">&#x27;5/25/2015&#x27;</span>,<span class="string">&#x27;6/26/2015&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(date)</span><br><span class="line"><span class="comment"># DatetimeIndex([&#x27;2015-05-25&#x27;, &#x27;2015-05-26&#x27;, &#x27;2015-05-27&#x27;, &#x27;2015-05-28&#x27;,</span></span><br><span class="line"><span class="comment">#                &#x27;2015-05-29&#x27;, &#x27;2015-05-30&#x27;, &#x27;2015-05-31&#x27;, &#x27;2015-06-01&#x27;,</span></span><br><span class="line"><span class="comment">#                &#x27;2015-06-02&#x27;, &#x27;2015-06-03&#x27;, &#x27;2015-06-04&#x27;, &#x27;2015-06-05&#x27;,</span></span><br><span class="line"><span class="comment">#                &#x27;2015-06-06&#x27;, &#x27;2015-06-07&#x27;, &#x27;2015-06-08&#x27;, &#x27;2015-06-09&#x27;,</span></span><br><span class="line"><span class="comment">#                &#x27;2015-06-10&#x27;, &#x27;2015-06-11&#x27;, &#x27;2015-06-12&#x27;, &#x27;2015-06-13&#x27;,</span></span><br><span class="line"><span class="comment">#                &#x27;2015-06-14&#x27;, &#x27;2015-06-15&#x27;, &#x27;2015-06-16&#x27;, &#x27;2015-06-17&#x27;,</span></span><br><span class="line"><span class="comment">#                &#x27;2015-06-18&#x27;, &#x27;2015-06-19&#x27;, &#x27;2015-06-20&#x27;, &#x27;2015-06-21&#x27;,</span></span><br><span class="line"><span class="comment">#                &#x27;2015-06-22&#x27;, &#x27;2015-06-23&#x27;, &#x27;2015-06-24&#x27;, &#x27;2015-06-25&#x27;,</span></span><br><span class="line"><span class="comment">#                &#x27;2015-06-26&#x27;],</span></span><br><span class="line"><span class="comment">#               dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">date_list = [x.strftime(<span class="string">&#x27;%F&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> date]</span><br><span class="line"><span class="built_in">print</span>(date_list)</span><br><span class="line"><span class="comment"># [&#x27;2015-05-25&#x27;, &#x27;2015-05-26&#x27;, &#x27;2015-05-27&#x27;, &#x27;2015-05-28&#x27;, &#x27;2015-05-29&#x27;, &#x27;2015-05-30&#x27;, &#x27;2015-05-31&#x27;, &#x27;2015-06-01&#x27;, &#x27;2015-06-02&#x27;, &#x27;2015-06-03&#x27;, &#x27;2015-06-04&#x27;, &#x27;2015-06-05&#x27;, &#x27;2015-06-06&#x27;, &#x27;2015-06-07&#x27;, &#x27;2015-06-08&#x27;, &#x27;2015-06-09&#x27;, &#x27;2015-06-10&#x27;, &#x27;2015-06-11&#x27;, &#x27;2015-06-12&#x27;, &#x27;2015-06-13&#x27;, &#x27;2015-06-14&#x27;, &#x27;2015-06-15&#x27;, &#x27;2015-06-16&#x27;, &#x27;2015-06-17&#x27;, &#x27;2015-06-18&#x27;, &#x27;2015-06-19&#x27;, &#x27;2015-06-20&#x27;, &#x27;2015-06-21&#x27;, &#x27;2015-06-22&#x27;, &#x27;2015-06-23&#x27;, &#x27;2015-06-24&#x27;, &#x27;2015-06-25&#x27;, &#x27;2015-06-26&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dict--返回字典最大、最小值的键</title>
      <link href="/post/4a7f11e9.html"/>
      <url>/post/4a7f11e9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="max-dict-key-x3D-dict-get"><a href="#max-dict-key-x3D-dict-get" class="headerlink" title="max(dict,key&#x3D;dict.get)"></a>max(dict,key&#x3D;dict.get)</h2><blockquote><p>这是因为max不知道如何比较dict的元素。因此，如果您不提供key，默认情况下，它会按key的字母顺序比较它们。但是当你给它一个函数时，它会使用这个函数，并根据这个函数找到max。<br>比如添加 key&#x3D;dict.get 关键字参数时，将获得最大值为 dict.get(x) 的值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;2021-07-16&#x27;</span>: <span class="number">115</span>, <span class="string">&#x27;2022-01-17&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;2022-07-18&#x27;</span>: <span class="number">252</span>, <span class="string">&#x27;2023-01-16&#x27;</span>: <span class="number">434</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a.get(<span class="string">&#x27;2023-01-16&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(a,key=a.get))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(a,key=a.get))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">434</span><br><span class="line">2023-01-16</span><br><span class="line">2022-01-17</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--数据合并</title>
      <link href="/post/869c3d81.html"/>
      <url>/post/869c3d81.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="基于column的连接"><a href="#基于column的连接" class="headerlink" title="基于column的连接"></a>基于column的连接</h1><h2 id="merge方法"><a href="#merge方法" class="headerlink" title="merge方法"></a>merge方法</h2><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><ul><li><p><strong>pd.merge(df1,df2,how&#x3D;”inner”)</strong></p><blockquote><p>inner：基于列的数据进行&#x3D;&#x3D;交集&#x3D;&#x3D;合并（默认）<br>outer：基于列的数据进行&#x3D;&#x3D;并集&#x3D;&#x3D;合并<br>left ：基于左dataframe列的数据合并<br>right：基于右dataframe列的数据合并</p></blockquote></li><li><p><strong>pd.merge(df1,df2,on&#x3D;”数据的列名”)</strong></p><blockquote><p>数据的列名（用来合并的列名）</p></blockquote></li><li><p><strong>pd.merge(df1,df2,left_on&#x3D;”beta”,right_index&#x3D;True,how&#x3D;”inner”)</strong></p><blockquote><p>left_on：基于左边DataFrame的列”beta”进行交集合并，也就是指定左边某一列作为合并的索引<br>right_on：基于右边DataFrame的列”beta”进行交集合并<br>left_index：基于左边DataFrame的index进行交集合并，也就是指定左边DataFrame的index作为合并的索引<br>right_index：基于右边DataFrame的index进行交集合并</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],<span class="string">&#x27;feature1&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],<span class="string">&#x27;pazham&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],<span class="string">&#x27;price&#x27;</span>:np.array([<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>])&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/07/XDejPK.png" alt="XDejPK.png">  <img src="https://s1.ax1x.com/2022/06/07/XDmCqA.png" alt="XDmCqA.png"></p><h3 id="1-1-内连接（交集）"><a href="#1-1-内连接（交集）" class="headerlink" title="1.1 内连接（交集）"></a>1.1 内连接（交集）</h3><blockquote><p>how&#x3D;”inner”，取相同列的交集</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 基于共同列alpha的内连接（交集）</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1,df2,how=<span class="string">&#x27;inner&#x27;</span>,on=<span class="string">&#x27;alpha&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br></pre></td></tr></table></figure><blockquote><p>取共同列”alpha”的数据，交集，进行连接</p></blockquote><p><img src="https://s1.ax1x.com/2022/06/07/XDZlOs.png" alt="XDZlOs.png"></p><h3 id="1-2-外连接（并集）"><a href="#1-2-外连接（并集）" class="headerlink" title="1.2 外连接（并集）"></a>1.2 外连接（并集）</h3><blockquote><p>how &#x3D; “outer”，取相同列的并集</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于列alpha的外连接（并集）</span></span><br><span class="line"></span><br><span class="line">df4 = pd.merge(df1,df2,how=<span class="string">&#x27;outer&#x27;</span>,on=<span class="string">&#x27;alpha&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df4)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/07/XDKpMF.png" alt="XDKpMF.png"></p><h3 id="1-3-左连接"><a href="#1-3-左连接" class="headerlink" title="1.3 左连接"></a>1.3 左连接</h3><blockquote><p>how&#x3D;”left”，以左边数据的列为主，列是相同列</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于列alpha的左连接</span></span><br><span class="line"></span><br><span class="line">df5 = pd.merge(df1,df2,how=<span class="string">&#x27;left&#x27;</span>,on=<span class="string">&#x27;alpha&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df5)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/07/XDKUsg.png" alt="XDKUsg.png"></p><h3 id="1-4-右连接"><a href="#1-4-右连接" class="headerlink" title="1.4 右连接"></a>1.4 右连接</h3><blockquote><p>how &#x3D; “right”，以右边数据的列为主，列是相同列</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于列alpha的右连接</span></span><br><span class="line"></span><br><span class="line">df6 = pd.merge(df1,df2,how=<span class="string">&#x27;right&#x27;</span>,on=<span class="string">&#x27;alpha&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df6)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/07/XDMekn.png" alt="XDMekn.png"></p><h3 id="2-1-多列连接"><a href="#2-1-多列连接" class="headerlink" title="2.1 多列连接"></a>2.1 多列连接</h3><blockquote><p>多列连接的处理逻辑和单列的大同小异，多列是通过找到多个相同列的数据，然后基于连接的方式来合并数据，比如：内连接，取多个相同列的数据，然后取交集合并</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],<span class="string">&#x27;beta&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>],</span><br><span class="line"></span><br><span class="line">                    <span class="string">&#x27;feature1&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],<span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],<span class="string">&#x27;beta&#x27;</span>:[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>],<span class="string">&#x27;pazham&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line"></span><br><span class="line">                        <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],<span class="string">&#x27;price&#x27;</span>:np.array([<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>])&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于相同列alpha，beta的内连接（交集）</span></span><br><span class="line">df7 = pd.merge(df1,df2,how=<span class="string">&quot;inner&quot;</span>,on=[<span class="string">&quot;alpha&quot;</span>,<span class="string">&quot;beta&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df7)</span><br></pre></td></tr></table></figure><blockquote><p>取相同列”alpha”、”beta”，交集，进行合并<br><img src="https://s1.ax1x.com/2022/06/07/XDYyWj.png" alt="XDYyWj.png"></p></blockquote><h1 id="基于index的连接"><a href="#基于index的连接" class="headerlink" title="基于index的连接"></a>基于index的连接</h1><h2 id="merge方法-1"><a href="#merge方法-1" class="headerlink" title="merge方法"></a>merge方法</h2><blockquote><p>根据参数配置，取左边数据的合并索引和右边数据的合并索引，进行连接方式的合并</p></blockquote><blockquote><p>left_on：取左边数据的某一列下的数据作为index，也就是作为合并的索引<br>right_index：直接取右边数据的index作为合并的索引</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>],<span class="string">&#x27;beta&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>],</span><br><span class="line"></span><br><span class="line">                    <span class="string">&#x27;feature1&#x27;</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],<span class="string">&#x27;feature2&#x27;</span>:[<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义df2</span></span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;alpha&#x27;</span>:[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],<span class="string">&#x27;pazham&#x27;</span>:[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;pine&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>],</span><br><span class="line"></span><br><span class="line">                        <span class="string">&#x27;kilo&#x27;</span>:[<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;low&#x27;</span>,<span class="string">&#x27;high&#x27;</span>,<span class="string">&#x27;medium&#x27;</span>],<span class="string">&#x27;price&#x27;</span>:np.array([<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>])&#125;,index=[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;f&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取左边DataFrame的&quot;beta&quot;列与右边数据的index匹配，取交集</span></span><br><span class="line"></span><br><span class="line">df9 = pd.merge(df1,df2,left_on=<span class="string">&quot;beta&quot;</span>,right_index=<span class="literal">True</span>,how=<span class="string">&quot;inner&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df9)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/07/XDBFPK.png" alt="XDBFPK.png"></p><blockquote><p>设置参数suffixes：可以修改连接时相同列的后缀名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将上图中的&quot;alpha_x&quot;和&quot;alpha_y&quot;的后缀改为&quot;_df1&quot;、&quot;_df2&quot;</span></span><br><span class="line"></span><br><span class="line">df9 = pd.merge(df1,df2,how=<span class="string">&#x27;inner&#x27;</span>,left_on=<span class="string">&#x27;beta&#x27;</span>,right_index=<span class="literal">True</span>,suffixes=(<span class="string">&#x27;_df1&#x27;</span>,<span class="string">&#x27;_df2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df9)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/08/XreBSU.png" alt="XreBSU.png"></p><h2 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h2><h3 id="1-1-内连接"><a href="#1-1-内连接" class="headerlink" title="1.1 内连接"></a>1.1 内连接</h3><blockquote><p>how&#x3D;”inner”，取相同列的交集<br>lsuffix：设置左边相同列的后缀<br>rsuffix：设置右边相同列的后缀</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">caller = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>, <span class="string">&#x27;K4&#x27;</span>, <span class="string">&#x27;K5&#x27;</span>], <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>, <span class="string">&#x27;A4&#x27;</span>, <span class="string">&#x27;A5&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">other = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>],<span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(caller)</span><br><span class="line"><span class="built_in">print</span>(other)</span><br><span class="line"></span><br><span class="line">df = caller.join(other,lsuffix=<span class="string">&#x27;_caller&#x27;</span>, rsuffix=<span class="string">&#x27;_other&#x27;</span>,how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>merge实现：<code>df = pd.merge(caller,other,how=&quot;inner&quot;,left_index=True,right_index=True,suffixes=(&quot;_caller&quot;,&quot;_other&quot;))</code></p><p><img src="https://s1.ax1x.com/2022/06/08/XrKG90.png" alt="XrKG90.png"></p><h3 id="1-2-将指定的列设置为索引"><a href="#1-2-将指定的列设置为索引" class="headerlink" title="1.2 将指定的列设置为索引"></a>1.2 将指定的列设置为索引</h3><blockquote><p>set_index：设置指定列为索引</p></blockquote><p><strong>set_index参数：</strong><br>keys : 要设置为索引的列名（如有多个应放在一个列表里）<br>drop : 将设置为索引的列删除，默认为True<br>append : 是否将新的索引追加到原索引后（即是否保留原索引），默认为False<br>inplace : 是否在原DataFrame上修改，默认为False<br>verify_integrity : 是否检查索引有无重复，默认为False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df3 = caller.set_index(<span class="string">&#x27;key&#x27;</span>).join(other.set_index(<span class="string">&#x27;key&#x27;</span>),how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/08/Xr0CzF.png" alt="Xr0CzF.png"></p><p><strong>这里建议使用merge合并，因为merge和join方法基本上都都能实现相同的功能</strong></p><h1 id="concat方法"><a href="#concat方法" class="headerlink" title="concat方法"></a>concat方法</h1><h2 id="series类型的拼接方法"><a href="#series类型的拼接方法" class="headerlink" title="series类型的拼接方法"></a>series类型的拼接方法</h2><blockquote><p>pd.concat([df1,df2],axis&#x3D;0,join&#x3D;”outer”)<br>拼接函数，分为行拼接和列拼接，默认是行拼接（axis&#x3D;0）。<br>内置拼接方法，分为内拼接和外拼接，默认为外拼接（join&#x3D;”outer”）<br>拼接的对象是pandas的数据类型</p></blockquote><h4 id="参数：-1"><a href="#参数：-1" class="headerlink" title="参数："></a>参数：</h4><ul><li><strong>pd.concat([df1,df2],axis&#x3D;0)</strong></li></ul><blockquote><p>0：行拼接（默认）<br>1：列拼接</p></blockquote><ul><li><strong>pd.concat([df1,df2],join&#x3D;”outer”)</strong></li></ul><blockquote><p>outer：外拼接，&#x3D;&#x3D;并集&#x3D;&#x3D;（默认）<br>inner：内拼接，&#x3D;&#x3D;交集&#x3D;&#x3D;</p></blockquote><h3 id="1-1-行拼接"><a href="#1-1-行拼接" class="headerlink" title="1.1 行拼接"></a>1.1 行拼接</h3><blockquote><p>axis&#x3D;0，默认，将两个数据上下拼接在一起，会有重复的index</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.Series([<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>],index=[<span class="string">&#x27;i1&#x27;</span>,<span class="string">&#x27;i2&#x27;</span>,<span class="string">&#x27;i3&#x27;</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.Series([<span class="number">4.4</span>,<span class="number">5.5</span>,<span class="number">6.6</span>],index=[<span class="string">&#x27;i2&#x27;</span>,<span class="string">&#x27;i3&#x27;</span>,<span class="string">&#x27;i4&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 行拼接，默认的axis=0，默认的拼接方法join=&quot;outer&quot;</span></span><br><span class="line"></span><br><span class="line">df3 = pd.concat([df1,df2])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/08/Xr40Z6.png" alt="Xr40Z6.png"></p><blockquote><p>行拼接若有相同的索引，为了区分索引，我们在最外层定义了索引的分组情况。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对行拼接分组</span></span><br><span class="line"></span><br><span class="line">df4 =pd.concat([df1,df2],keys=[<span class="string">&#x27;fea1&#x27;</span>,<span class="string">&#x27;fea2&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df4)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/08/Xr4vwV.png" alt="Xr4vwV.png"></p><h3 id="1-2-列拼接"><a href="#1-2-列拼接" class="headerlink" title="1.2 列拼接"></a>1.2 列拼接</h3><blockquote><p>axis&#x3D;1，将两个数据左右拼接在一起，不会有重复的index</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列拼接,默认是并集</span></span><br><span class="line"></span><br><span class="line">df5 = pd.concat([df1,df2],axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df5)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/08/XrTFyj.png" alt="XrTFyj.png"></p><blockquote><p>以交集的方式拼接</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列拼接的内连接（列拼接、交集）</span></span><br><span class="line">df6 = pd.concat([df1,df2],axis=<span class="number">1</span>,join=<span class="string">&quot;inner&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df6)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/08/XrTufU.png" alt="XrTufU.png"></p><blockquote><p>设置列拼接的列名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 列拼接的内连接（交集）</span><br><span class="line"></span><br><span class="line">df7 = pd.concat([df1,df2],axis=1,join=&#x27;inner&#x27;,keys=[&#x27;fea1&#x27;,&#x27;fea2&#x27;])</span><br><span class="line"></span><br><span class="line">print(df7)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/08/XrTUfO.png" alt="XrTUfO.png"></p><h2 id="DataFrame数据类型的拼接方法"><a href="#DataFrame数据类型的拼接方法" class="headerlink" title="DataFrame数据类型的拼接方法"></a>DataFrame数据类型的拼接方法</h2><h3 id="1-1-行拼接-1"><a href="#1-1-行拼接-1" class="headerlink" title="1.1 行拼接"></a>1.1 行拼接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;K0&#x27;, &#x27;K1&#x27;, &#x27;K2&#x27;, &#x27;K3&#x27;, &#x27;K4&#x27;, &#x27;K5&#x27;], &#x27;A&#x27;: [&#x27;A0&#x27;, &#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;A3&#x27;, &#x27;A4&#x27;, &#x27;A5&#x27;]&#125;)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;&#x27;key&#x27;: [&#x27;K0&#x27;, &#x27;K1&#x27;, &#x27;K2&#x27;],&#x27;B&#x27;: [&#x27;B0&#x27;, &#x27;B1&#x27;, &#x27;B2&#x27;]&#125;)</span><br><span class="line"></span><br><span class="line">print(df1)</span><br><span class="line"></span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line"># 行拼接</span><br><span class="line"></span><br><span class="line">df3 = pd.concat([df1,df2])</span><br><span class="line">print(df3)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/08/XrLMLQ.png" alt="XrLMLQ.png"></p><h3 id="1-2-列拼接-1"><a href="#1-2-列拼接-1" class="headerlink" title="1.2 列拼接"></a>1.2 列拼接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 列拼接</span><br><span class="line"></span><br><span class="line">df4 =pd.concat([df1,df2],axis=1)</span><br><span class="line"></span><br><span class="line">print(df4)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/06/08/XrLUQU.png" alt="XrLUQU.png"></p><blockquote><p>verify_integrity &#x3D; True：当列拼接或行拼接有重复的列名和行名，则报错</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 判断是否有重复的列名，若有则报错</span><br><span class="line"></span><br><span class="line">pd.concat([df1,df2],axis=1,verify_integrity = True)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git回退----git回退版本</title>
      <link href="/post/6fc29712.html"/>
      <url>/post/6fc29712.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-查看历史记录"><a href="#1-查看历史记录" class="headerlink" title="1. 查看历史记录"></a>1. 查看历史记录</h2><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p><img src="https://s1.ax1x.com/2022/06/06/X01wp6.png" alt="X01wp6.png"></p><blockquote><p>用来查看git的提交记录，但不能查看已经删除的记录。</p></blockquote><h2 id="2-查看所有操作记录"><a href="#2-查看所有操作记录" class="headerlink" title="2. 查看所有操作记录"></a>2. 查看所有操作记录</h2><h4 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h4><p><img src="https://s1.ax1x.com/2022/06/06/X0lxwd.png" alt="X0lxwd.png">所有分支的所有操作记录（包括（包括commit和reset的操作），包括已经被删除的commit记录。</p><h1 id="3-回退版本"><a href="#3-回退版本" class="headerlink" title="3. 回退版本"></a>3. 回退版本</h1><h4 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h4><p>git reset –hard HEAD^<br>git push -f origin master</p><blockquote><p>这两条命令是处理已提交commit且已推送的回退<br>git reset –hard head #当前版本<br>git reset –hard HEAD^ #回退到上一个版本<br>git reset –hard HEAD^^ #回退到上上一个版本<br>git reset –hard HEAD<del>3 #回退到往上3个版本<br>git reset –hard HEAD</del>10 #回退到往上10个版本<br>git push -f 强制推送，覆盖远程分支</p></blockquote><h4 id="第二种方法："><a href="#第二种方法：" class="headerlink" title="第二种方法："></a>第二种方法：</h4><p>git reset –hard 版本号<br>git push -f origin master</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Column（）常用属性</title>
      <link href="/post/f2f593dd.html"/>
      <url>/post/f2f593dd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>primary_key</td><td>是否为主键</td></tr><tr><td>unique</td><td>是否唯一</td></tr><tr><td>index</td><td>如果为True，为该列创建索引，提高查询效率</td></tr><tr><td>nullable</td><td>是否允许为空</td></tr><tr><td>default</td><td>默认值</td></tr><tr><td>name</td><td>在数据表中的字段映射</td></tr><tr><td>autoincrement</td><td>是否自动增长</td></tr><tr><td>onupdate</td><td>更新时执行的函数（以下有详细说明）</td></tr><tr><td>comment</td><td>字段描述</td></tr></tbody></table><blockquote><p><strong>nullable</strong>：指定某个字段是否为空。默认值是True，就是可以为空。<br><strong>unique</strong>：指定某个字段的值是否唯一。默认是False。<br><strong>onupdate</strong>：在数据更新的时候会调用这个参数指定的值或者函数。在第一次插入这条数据的时候，不会用onupdate的值，只会使用default的值。常用的就是update_time（每次更新数据的时候都要更新的值）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-SQLALchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字段常用数据类型</title>
      <link href="/post/64f6e099.html"/>
      <url>/post/64f6e099.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><ol><li><p><strong>Integer</strong>：整形，映射到数据库中是int类型。</p></li><li><p><strong>Float</strong>：浮点类型，映射到数据库中是float类型。他占据的32位。</p></li><li><p><strong>Double</strong>：双精度浮点类型，映射到数据库中是double类型，占据64位。</p></li><li><p><strong>String</strong>：可变字符类型，映射到数据库中是varchar类型.</p></li><li><p><strong>Boolean</strong>：布尔类型，映射到数据库中的是tinyint类型。</p></li><li><p><strong>DECIMAL</strong>：定点类型。是专门为了解决浮点类型精度丢失的问题的。在存储钱相关的字段的时候建议大家都使用这个数据类型。并且这个类型使用的时候需要传递两个参数，第一个参数是用来标记这个字段总能能存储多少个数字，第二个参数表示小数点后有多少位。</p></li><li><p><strong>Enum</strong>：枚举类型。指定某个字段只能是枚举中指定的几个值，不能为其他值。在ORM模型中，使用Enum来作为枚举，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;article&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    tag = Column(Enum(<span class="string">&quot;python&quot;</span>,<span class="string">&#x27;flask&#x27;</span>,<span class="string">&#x27;django&#x27;</span>))</span><br></pre></td></tr></table></figure><p>在Python3中，已经内置了enum这个枚举的模块，我们也可以使用这个模块去定义相关的字段。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TagEnum</span>(enum.Enum):</span><br><span class="line">    python = <span class="string">&quot;python&quot;</span></span><br><span class="line">    flask = <span class="string">&quot;flask&quot;</span></span><br><span class="line">    django = <span class="string">&quot;django&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;article&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    tag = Column(Enum(TagEnum))</span><br><span class="line"></span><br><span class="line">article = Article(tag=TagEnum.flask)</span><br></pre></td></tr></table></figure></li><li><p><strong>date</strong>：存储时间，只能存储年月日。映射到数据库中是date类型。在Python代码中，可以使用datetime.date来指定。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;article&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    create_time = Column(Date)</span><br><span class="line"></span><br><span class="line">article = Article(create_time=date(<span class="number">2017</span>,<span class="number">10</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>DateTime</strong>：存储时间，可以存储年月日时分秒毫秒等。映射到数据库中也是datetime类型。在Python代码中，可以使用datetime.datetime来指定。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;article&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    create_time = Column(DateTime)</span><br><span class="line"></span><br><span class="line">article = Article(create_time=datetime(<span class="number">2011</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>Time</strong>：存储时间，可以存储时分秒。映射到数据库中也是time类型。在Python代码中，可以使用datetime.time来至此那个。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;article&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    create_time = Column(Time)</span><br><span class="line"></span><br><span class="line">article = Article(create_time=time(hour=<span class="number">11</span>,minute=<span class="number">11</span>,second=<span class="number">11</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>Text</strong>：存储长字符串。一般可以存储6W多个字符。如果超出了这个范围，可以使用LONGTEXT类型。映射到数据库中就是text类型。</p></li><li><p><strong>LONGTEXT</strong>：长文本类型，映射到数据库中是longtext类型。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-SQLALchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建：主键、索引、唯一约束、联合唯一约束、联合主键约束</title>
      <link href="/post/e90465d8.html"/>
      <url>/post/e90465d8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="1、主键"><a href="#1、主键" class="headerlink" title="1、主键"></a>1、主键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy import <span class="operator">*</span></span><br><span class="line"></span><br><span class="line">test <span class="operator">=</span> <span class="keyword">Table</span>(</span><br><span class="line"><span class="string">&#x27;test&#x27;</span>, metadata,</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;id&#x27;</span>, BigInteger, primary_key<span class="operator">=</span><span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="2、索引"><a href="#2、索引" class="headerlink" title="2、索引"></a>2、索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy import <span class="operator">*</span></span><br><span class="line"></span><br><span class="line">test <span class="operator">=</span> <span class="keyword">Table</span>(</span><br><span class="line"><span class="string">&#x27;test&#x27;</span>, metadata,</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;id&#x27;</span>, BigInteger, index<span class="operator">=</span><span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3、唯一约束"><a href="#3、唯一约束" class="headerlink" title="3、唯一约束"></a>3、唯一约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy import <span class="operator">*</span></span><br><span class="line"></span><br><span class="line">test <span class="operator">=</span> <span class="keyword">Table</span>(</span><br><span class="line"><span class="string">&#x27;test&#x27;</span>, metadata,</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;id&#x27;</span>, BigInteger, <span class="keyword">unique</span><span class="operator">=</span><span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="4、联合唯一约束"><a href="#4、联合唯一约束" class="headerlink" title="4、联合唯一约束"></a>4、联合唯一约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy import <span class="operator">*</span></span><br><span class="line"></span><br><span class="line">test <span class="operator">=</span> <span class="keyword">Table</span>(</span><br><span class="line"><span class="string">&#x27;test&#x27;</span>, metadata,</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;id&#x27;</span>, BigInteger, <span class="keyword">primary</span><span class="operator">=</span><span class="literal">True</span>),</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;col1&#x27;</span>, String(<span class="number">20</span>)),</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;col2&#x27;</span>, <span class="type">Numeric</span>(<span class="number">20</span>, <span class="number">4</span>)),</span><br><span class="line">UniqueConstraint(<span class="string">&#x27;col1&#x27;</span>, <span class="string">&#x27;col2&#x27;</span>, name<span class="operator">=</span><span class="string">&#x27;idx_col1_col2&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="5、联合主键约束"><a href="#5、联合主键约束" class="headerlink" title="5、联合主键约束"></a>5、联合主键约束</h3><p>方法一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy import <span class="operator">*</span></span><br><span class="line"></span><br><span class="line">test <span class="operator">=</span> <span class="keyword">Table</span>(</span><br><span class="line"><span class="string">&#x27;test&#x27;</span>, metadata,</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;id&#x27;</span>, BigInteger),</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;col1&#x27;</span>, String(<span class="number">20</span>)),</span><br><span class="line">PrimaryKeyConstraint(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;col1&#x27;</span>, name<span class="operator">=</span><span class="string">&#x27;idx_id_col1&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy import <span class="operator">*</span></span><br><span class="line"></span><br><span class="line">test <span class="operator">=</span> <span class="keyword">Table</span>(</span><br><span class="line"><span class="string">&#x27;test&#x27;</span>, metadata,</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;id&#x27;</span>, BigInteger, primary_key<span class="operator">=</span><span class="literal">True</span>),</span><br><span class="line"><span class="keyword">Column</span>(<span class="string">&#x27;col1&#x27;</span>, String(<span class="number">20</span>), primary_key<span class="operator">=</span><span class="literal">True</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-SQLALchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>返回插入数据的ID</title>
      <link href="/post/6b283bfc.html"/>
      <url>/post/6b283bfc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="lastrowid"><a href="#lastrowid" class="headerlink" title="lastrowid"></a>lastrowid</h3><p>sql &#x3D; “insert ignore into User (name,age) values (‘hwang2’,20),(‘hwang3’,21),(‘hwang4’,44)”</p><p>cursor &#x3D; Session.execute(sql)</p><p>&#x3D;&#x3D;print(cursor.lastrowid)&#x3D;&#x3D;<br>Session.commit()</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-插入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git忽略----忽律本地已存在文件的修改</title>
      <link href="/post/1fc9dafc.html"/>
      <url>/post/1fc9dafc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>情景：本地存在的文件，且已add添加到暂存区，不想变动.gitignore，更不想每次提交前把勾去掉</p><p>详细解释：<br>git仓库提交总有一些文件不想提交到远程，而git忽略的文件也有但是不能动  因为.gitignore 文件的东西变得话 会提交到仓库。</p><p>我本地一些config的配置我不想每次提交都把勾去掉 所以git设置 忽略仅仅我本地的一些文件的上传</p><h2 id="（一定要进入到对应目录下进行操作）"><a href="#（一定要进入到对应目录下进行操作）" class="headerlink" title="（一定要进入到对应目录下进行操作）"></a>（一定要进入到对应目录下进行操作）</h2><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>git update-index –assume-unchanged 文件名</p><h2 id="取消忽略"><a href="#取消忽略" class="headerlink" title="取消忽略"></a>取消忽略</h2><p>git update-index –no-assume-unchanged config.php</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--DataFrame</title>
      <link href="/post/af5c68d4.html"/>
      <url>/post/af5c68d4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><font size="3">DataFrame是一个表格型结构，既有行标签，又有列标签，他也被称为异构数据，所谓异构，指的是表格中<font color="red">每列</font>的数据类型不同,比如：有一列是字符串，也可能有一列是整型或者浮点型</font></p><p><img src="https://s1.ax1x.com/2022/05/20/OOFzD0.png" alt="OOFzD0.png"></p><p>上述表格中每列的数据类型：</p><table><thead><tr><th>name</th><th>age</th><th>gender</th><th>rating</th></tr></thead><tbody><tr><td>String</td><td>integer</td><td>String</td><td>Float</td></tr></tbody></table><h1 id="创建DataFrame对象"><a href="#创建DataFrame对象" class="headerlink" title="创建DataFrame对象"></a>创建DataFrame对象</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(data,index,colums,dtype,copy)</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：<br>data：输入的数据，可以是一个ndarray，series，list，dict，也可以是一个DataFrame<br>index：行标签，如果不传值，默认从0开始<br>columns：行标签：如果不传值，默认从0开始<br>dtype：每一列的数据类型<br>copy：默认为False，表示复制数据data</p></blockquote><h2 id="一、创建"><a href="#一、创建" class="headerlink" title="一、创建"></a>一、创建</h2><ul><li><h3 id="空的"><a href="#空的" class="headerlink" title="空的"></a><strong>空的</strong></h3></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame()</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OOEW34.png" alt="OOEW34.png"></p><ul><li><h3 id="单一列表"><a href="#单一列表" class="headerlink" title="单一列表"></a><strong>单一列表</strong></h3></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OOEb4O.png" alt="OOEb4O.png"></p><ul><li><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a><strong>嵌套列表</strong></h3></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="string">&#x27;Alex&#x27;</span>,<span class="number">10</span>],[<span class="string">&#x27;Bob&#x27;</span>,<span class="number">12</span>],[<span class="string">&#x27;Clarke&#x27;</span>,<span class="number">13</span>]]</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OOV2Zt.png" alt="OOV2Zt.png"><br>指定columns，index时：</p><pre><code>df = pd.DataFrame(data,columns=[&#39;Name&#39;,&#39;Age&#39;],index=[1,2,3])</code></pre><p><img src="https://s1.ax1x.com/2022/05/20/OOZFdx.png" alt="OOZFdx.png"></p><ul><li><h3 id="列表嵌套字典"><a href="#列表嵌套字典" class="headerlink" title="列表嵌套字典"></a><strong>列表嵌套字典</strong></h3></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;a&quot;</span>:<span class="number">3</span>,<span class="string">&quot;c&quot;</span>:<span class="number">3</span>&#125;]</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure><blockquote><p>注：在该列表的第二个字典内，没有找到第一个字典中key为b的元素，也就是说第二个字典也没有b的value，所以他会用NaN代替value（第一个字典的c同理）</p></blockquote><p><img src="https://s1.ax1x.com/2022/05/20/OOujxS.png" alt="OOujxS.png"></p><h4 id="指定columns、index时"><a href="#指定columns、index时" class="headerlink" title="指定columns、index时"></a><strong>指定columns、index时</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;a&quot;</span>:<span class="number">3</span>,<span class="string">&quot;c&quot;</span>:<span class="number">3</span>&#125;]</span><br><span class="line">df1 = pd.DataFrame(data,columns=[<span class="string">&quot;a&quot;</span>],index=[<span class="string">&quot;first&quot;</span>,<span class="string">&quot;second&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OOldo9.png" alt="OOldo9.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>,<span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;a&quot;</span>:<span class="number">3</span>,<span class="string">&quot;c&quot;</span>:<span class="number">3</span>&#125;]</span><br><span class="line">df2 = pd.DataFrame(data,columns=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;d&quot;</span>],index=[<span class="string">&quot;first&quot;</span>,<span class="string">&quot;second&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OOluZQ.png" alt="OOluZQ.png"></p><blockquote><p>注：当指定的columns在字典的key中不存在时，会用NaN代替</p></blockquote><ul><li><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a><strong>字典</strong></h3></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">666</span>,<span class="string">&quot;b&quot;</span>:<span class="number">777</span>,<span class="string">&quot;c&quot;</span>:<span class="number">888</span>&#125;</span><br><span class="line">df = pd.DataFrame(data,index=[<span class="string">&quot;num&quot;</span>])</span><br></pre></td></tr></table></figure><blockquote><p>注：如果直接传入字典，不指定index，则会直接报错：提示指定index</p></blockquote><p><img src="https://s1.ax1x.com/2022/05/20/OOUcO1.png" alt="OOUcO1.png"></p><ul><li><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a><strong>Series</strong></h3></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">ds = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(ds)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ds))</span><br><span class="line">df = pd.DataFrame(ds)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df))</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OOtH9H.png" alt="OOtH9H.png"></p><ul><li><h3 id="字典形式的Series"><a href="#字典形式的Series" class="headerlink" title="字典形式的Series"></a><strong>字典形式的Series</strong></h3></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">&quot;one&quot;</span>: pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]),</span><br><span class="line">        <span class="string">&quot;two&quot;</span>: pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure><blockquote><p>注：在data字典中的第一个元素内index中没有d的value，也就是one列中的index：d没有对应的value，所以被NaN代替</p></blockquote><p><img src="https://s1.ax1x.com/2022/05/20/OONoq0.png" alt="OONoq0.png"></p><h2 id="二、columns查增删"><a href="#二、columns查增删" class="headerlink" title="二、columns查增删"></a>二、<font color="red">columns</font>查增删</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;<span class="string">&quot;one&quot;</span>: pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]),</span><br><span class="line">        <span class="string">&quot;two&quot;</span>: pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OONoq0.png" alt="OONoq0.png"></p><h3 id="1-取数据"><a href="#1-取数据" class="headerlink" title="1. 取数据"></a>1. 取数据</h3><pre><code>df = pd.DataFrame(data[&quot;one&quot;])</code></pre><p><img src="https://s1.ax1x.com/2022/05/20/OOavHx.png" alt="OOavHx.png"></p><h3 id="2-添加数据"><a href="#2-添加数据" class="headerlink" title="2. 添加数据"></a>2. 添加数据</h3><pre><code># 使用df[&quot;column&quot;] = 值，插入新数据的indexdf[&quot;three&quot;] = pd.Series([10,20,30],index=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])</code></pre><p><img src="https://s1.ax1x.com/2022/05/20/OOdQ2Q.png" alt="OOdQ2Q.png"></p><pre><code># 将存在的数据列做相加运算df[&quot;four&quot;] = df[&quot;one&quot;] + df[&quot;three&quot;]</code></pre><p><img src="https://s1.ax1x.com/2022/05/20/OOd7Zt.png" alt="OOd7Zt.png"></p><h3 id="3-使用insert-方法添加数据"><a href="#3-使用insert-方法添加数据" class="headerlink" title="3.使用insert()方法添加数据"></a>3.使用insert()方法添加数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">&quot;one&quot;</span>: pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]),</span><br><span class="line">        <span class="string">&quot;two&quot;</span>: pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">df[<span class="string">&quot;three&quot;</span>] = pd.Series([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>],index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>])</span><br><span class="line">df[<span class="string">&quot;four&quot;</span>] = df[<span class="string">&quot;one&quot;</span>] + df[<span class="string">&quot;three&quot;</span>]</span><br><span class="line"><span class="comment"># inser()方法后的第一个参数是该条数据在columns中的位置,columns位置从0开始</span></span><br><span class="line">df.insert(<span class="number">2</span>,column=<span class="string">&quot;center&quot;</span>,value=pd.Series([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>],index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]))</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OO017q.png" alt="OO017q.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">info=[[<span class="string">&#x27;Jack&#x27;</span>,<span class="number">18</span>],[<span class="string">&#x27;Helen&#x27;</span>,<span class="number">19</span>],[<span class="string">&#x27;John&#x27;</span>,<span class="number">17</span>]]</span><br><span class="line">df=pd.DataFrame(info,columns=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment">#注意是column参数</span></span><br><span class="line"><span class="comment">#数值1代表插入到columns列表:[&#x27;name&#x27;,&#x27;age&#x27;]的索引位置</span></span><br><span class="line">df.insert(<span class="number">1</span>,column=<span class="string">&#x27;score&#x27;</span>,value=[<span class="number">91</span>,<span class="number">90</span>,<span class="number">75</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OO0b8S.png" alt="OO0b8S.png"></p><h3 id="4-del、pop删除数据"><a href="#4-del、pop删除数据" class="headerlink" title="4. del、pop删除数据"></a>4. del、pop删除数据</h3><blockquote><p>通过 del 和 pop() 都能够删除 DataFrame 中的数据列。示例如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;three&#x27;</span> : pd.Series([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>], index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(d)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Our dataframe is:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment">#使用del删除</span></span><br><span class="line"><span class="keyword">del</span> df[<span class="string">&#x27;one&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment">#使用pop方法删除</span></span><br><span class="line">df.pop(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (df)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/20/OOBsqs.png" alt="OOBsqs.png"></p><h2 id="三、index查增删"><a href="#三、index查增删" class="headerlink" title="三、index查增删"></a>三、<font color="red">index</font>查增删</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">d = &#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]),</span><br><span class="line">   <span class="string">&#x27;three&#x27;</span> : pd.Series([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>], index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])&#125;</span><br><span class="line">df = pd.DataFrame(d)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/22/OzrL0U.png" alt="OzrL0U.png"></p><h3 id="1-查：loc-“标签索引”-函数"><a href="#1-查：loc-“标签索引”-函数" class="headerlink" title="1.查：loc[“标签索引”]函数"></a>1.查：loc[“标签索引”]函数</h3><blockquote><p>注：该函数允许传递两个参数行和列，之间用逗号隔开，而且只能使用标签索引：df.loc[“a”,”one”]</p></blockquote><pre><code>print(df.loc[&quot;a&quot;])</code></pre><p><img src="https://s1.ax1x.com/2022/05/22/Ozrxh9.png" alt="Ozrxh9.png"></p><h3 id="2-查：iloc-“整数索引”-函数"><a href="#2-查：iloc-“整数索引”-函数" class="headerlink" title="2. 查：iloc[“整数索引”]函数"></a>2. 查：iloc[“整数索引”]函数</h3><blockquote><p>注：该函数允许传递两个参数行和列，之间用逗号隔开，而且只能使用整数索引：df.iloc[“2”,”0”]</p></blockquote><pre><code>print(df.iloc[2])</code></pre><p><img src="https://s1.ax1x.com/2022/05/22/OzymaF.png" alt="OzymaF.png"></p><h3 id="3-查：切片"><a href="#3-查：切片" class="headerlink" title="3.查：切片"></a>3.查：切片</h3><pre><code># 左闭右开print(df[2:4]) # 意思：第三行</code></pre><p><img src="https://s1.ax1x.com/2022/05/22/Ozy5Mq.png" alt="Ozy5Mq.png"></p><h3 id="4-添加：append（）函数"><a href="#4-添加：append（）函数" class="headerlink" title="4. 添加：append（）函数"></a>4. 添加：append（）函数</h3><blockquote><p>使用 append() 函数，可以将新的数据行添加到 DataFrame 中，该函数会在行末追加数据行。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], columns = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]], columns = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="comment">#在行末追加新数据行</span></span><br><span class="line">df = df.append(df2)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/22/Oz6WTO.png" alt="Oz6WTO.png"></p><h3 id="5-删除：drop（）函数"><a href="#5-删除：drop（）函数" class="headerlink" title="5. 删除：drop（）函数"></a>5. 删除：drop（）函数</h3><blockquote><p>您可以使用行索引标签，从 DataFrame 中删除某一行数据。如果索引标签存在重复，那么它们将被一起删除</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], columns = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]], columns = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">df = df.append(df2)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment">#注意此处调用了drop()方法</span></span><br><span class="line">df = df.drop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span> (df)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/22/Ozcin0.png" alt="Ozcin0.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断当前日期在本月或本季度是第几周</title>
      <link href="/post/164973fe.html"/>
      <url>/post/164973fe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="本月"><a href="#本月" class="headerlink" title="本月"></a>本月</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_week_of_month</span>(<span class="params">date, week_sort</span>):</span><br><span class="line">    <span class="keyword">if</span> week_sort == <span class="string">&quot;正数&quot;</span>:</span><br><span class="line">        begin = <span class="built_in">int</span>(datetime(date.year, date.month, <span class="number">1</span>).strftime(<span class="string">&quot;%W&quot;</span>))</span><br><span class="line">        end = <span class="built_in">int</span>(datetime(date.year, date.month, date.day).strftime(<span class="string">&quot;%W&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 当前日期的最后一天</span></span><br><span class="line">        <span class="keyword">if</span> data.month &lt; <span class="number">12</span>:</span><br><span class="line">            month_start_end = datetime(data.year, data.month + <span class="number">1</span>, <span class="number">1</span>) - timedelta(days=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            month_start_end = datetime(data.year, data.month, <span class="number">31</span>)</span><br><span class="line">        begin = <span class="built_in">int</span>(datetime(date.year, date.month, date.day).strftime(<span class="string">&quot;%W&quot;</span>))</span><br><span class="line">        end = <span class="built_in">int</span>(datetime(month_start_end.year, month_start_end.month, month_start_end.day).strftime(<span class="string">&quot;%W&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> end - begin + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = pd.Timestamp(<span class="string">&quot;2022-05-20&quot;</span>)</span><br><span class="line">    week_sort = <span class="string">&quot;正数&quot;</span></span><br><span class="line">    week = get_week_of_month(data,week_sort)</span><br><span class="line">    <span class="built_in">print</span>(week)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h1 id="本季度"><a href="#本季度" class="headerlink" title="本季度"></a>本季度</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_week_of_quarter</span>(<span class="params">quarter_start_end, date, week_sort</span>):</span><br><span class="line">    <span class="keyword">if</span> week_sort == <span class="string">&quot;正数&quot;</span>:</span><br><span class="line">        begin = <span class="built_in">int</span>(datetime(quarter_start_end.year, quarter_start_end.month, <span class="number">1</span>).strftime(<span class="string">&quot;%W&quot;</span>))</span><br><span class="line">        end = <span class="built_in">int</span>(datetime(date.year, date.month, date.day).strftime(<span class="string">&quot;%W&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        begin = <span class="built_in">int</span>(datetime(date.year, date.month, date.day).strftime(<span class="string">&quot;%W&quot;</span>))</span><br><span class="line">        end = <span class="built_in">int</span>(datetime(quarter_start_end.year, quarter_start_end.month, quarter_start_end.day).strftime(<span class="string">&quot;%W&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> end - begin + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = pd.Timestamp(<span class="string">&quot;2022-05-20&quot;</span>)</span><br><span class="line">    week_sort = <span class="string">&quot;正数&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> week_sort == <span class="string">&quot;正数&quot;</span>:</span><br><span class="line">        <span class="comment"># 季度初</span></span><br><span class="line">        <span class="keyword">if</span> data.day == <span class="number">1</span> <span class="keyword">and</span> data.month <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>]:</span><br><span class="line">            quarter_begin = data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            quarter_begin = data - pd.offsets.QuarterBegin(startingMonth=<span class="number">1</span>)</span><br><span class="line">        week_num = get_week_of_quarter(quarter_begin,data,week_sort)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 当前日期的月末（因为每月的月末并不固定在30或31，所以需要每次都重新计算月末的日期）</span></span><br><span class="line">        <span class="keyword">if</span> data.month &lt; <span class="number">12</span>:</span><br><span class="line">            last_day = datetime(data.year, data.month + <span class="number">1</span>, <span class="number">1</span>) - timedelta(days=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            last_day = datetime(data.year, data.month, <span class="number">31</span>)</span><br><span class="line">        <span class="comment"># 季度末  也是 季度末的最后一天</span></span><br><span class="line">        <span class="keyword">if</span> data.day == last_day.day <span class="keyword">and</span> data.month <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>]:</span><br><span class="line">            quarter_end = data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            quarter_end = data + pd.offsets.QuarterEnd(startingMonth=<span class="number">3</span>)</span><br><span class="line">        week_num = get_week_of_quarter(quarter_end, data, week_sort)</span><br><span class="line">    <span class="built_in">print</span>(week_num)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坑--Bday()日期向前、后偏移一个工作日</title>
      <link href="/post/e589b6ab.html"/>
      <url>/post/e589b6ab.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>当我要计算一个月倒数的第几个工作日时，使用了pandas的Bday，用月末的时间减去Bday(n)时，发现有的月份非但没有向前推移一个工作日的时间，反而向后推移了一个工作日。</p></blockquote><p>上日历：<br><img src="https://s1.ax1x.com/2022/05/06/OKIuRJ.png" alt="OKIuRJ.png"></p><p>上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">a = pd.Timestamp(<span class="string">&quot;2022-04-30&quot;</span>)</span><br><span class="line"><span class="comment"># 向前偏移一个工作日</span></span><br><span class="line">b = a - pd.offsets.BDay(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 2022-05-02 00:00:00</span></span><br><span class="line">c = a - pd.offsets.BDay(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 2022-04-29 00:00:00</span></span><br><span class="line">d = a - pd.offsets.BDay(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(d) <span class="comment"># 2022-04-28 00:00:00</span></span><br><span class="line">e = a - pd.offsets.BDay(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(e) <span class="comment"># 2022-04-27 00:00:00</span></span><br><span class="line">f = a - pd.offsets.BDay(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(f) <span class="comment"># 2022-04-26 00:00:00</span></span><br><span class="line">g = a - pd.offsets.BDay(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(g) <span class="comment"># 2022-04-25 00:00:00</span></span><br></pre></td></tr></table></figure><p>注：此时你会发现Bday（0）的时候，是自动选择了当前日期的下一个工作日，<br>而Bday（1）则是选择了这个月的最后一个工作日，<br>包括后面偏移的几个工作日：2，3，4，5都很符合倒数第2，3，4，5个工作日，<br>这里我们盲猜这个Bday（0）是因为他当前所处的日期是一个非工作日，所以往后选择了一个工作日。<br>此刻你可能还没有感觉坑在哪？往后看：</p><p>上日历：<br><img src="https://s1.ax1x.com/2022/05/06/OK7owt.png" alt="OK7owt.png"></p><p>上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">a = pd.Timestamp(<span class="string">&quot;2022-05-31&quot;</span>)</span><br><span class="line"><span class="comment"># 向前偏移一个工作日</span></span><br><span class="line">b = a - pd.offsets.BDay(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 2022-05-31 00:00:00</span></span><br><span class="line">c = a - pd.offsets.BDay(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 2022-05-30 00:00:00</span></span><br><span class="line">d = a - pd.offsets.BDay(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(d) <span class="comment"># 2022-05-27 00:00:00</span></span><br><span class="line">e = a - pd.offsets.BDay(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(e) <span class="comment"># 2022-05-26 00:00:00</span></span><br><span class="line">f = a - pd.offsets.BDay(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(f) <span class="comment"># 2022-05-25 00:00:00</span></span><br><span class="line">g = a - pd.offsets.BDay(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(g) <span class="comment"># 2022-05-24 00:00:00</span></span><br></pre></td></tr></table></figure><p>注：这个时候你会发现Bday（0），哎，他没有往前或者往后推移了，而是就在当前的这个时间不动了，这个情况就和上面的情况有所冲突了，同样是Bday（0），日期前后推移不一样。<br>而且这个Bday（0）后面推移的几个工作日：1，2，3，4，5都是在当前时间往前推了1，2，3，4，5个工作日，是不是觉得挺合逻辑的。<br>但是！！！这里的1：代表的却是倒数第二个工作日，2:代表的是倒数第三个工作日，以此类推，现在这个情况就又和第一个代码有点冲突，第一个代码的1：代表的是倒数第一个工作日，2：代表的是倒数第二个工作日</p><p>此时如果你想他们如何才能符合1，2，3，4，5等等他们的逻辑都能符合，倒数1，2，3，4，5等个工作日呢</p><p>我的解决方案：<br>思路：由于出现的问题在于当前的日期时候是否是工作日，所以我们直接选择加一天再去减工作日。因为如果当前的日期是工作日，加一天之后，无论这个时间是否是工作日，他的上一个工作日一定是最后一个工作日。如果当前的日期不是工作日，加一天之后，也无论他是否是工作日，他的上一个工作日也一定是最后一个工作日。如果还是不懂可以按照我说的分别套入第二块代码和第一块代码（此处说的当前的日期是月末，加一天之后就是下个月月初了），总之这个代码就是利用了第一块代码的1-5个工作日的准确性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c = a + pd.DateOffset() - pd.offsets.BDay(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 2022-05-31 00:00:00</span></span><br><span class="line">d = a + pd.DateOffset() - pd.offsets.BDay(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(d) <span class="comment"># 2022-05-30 00:00:00</span></span><br><span class="line">e = a + pd.DateOffset() - pd.offsets.BDay(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(e) <span class="comment"># 2022-05-27 00:00:00</span></span><br><span class="line">f = a + pd.DateOffset() - pd.offsets.BDay(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(f) <span class="comment"># 2022-05-26 00:00:00</span></span><br><span class="line">g = a + pd.DateOffset() - pd.offsets.BDay(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(g) <span class="comment"># 2022-05-25 00:00:00</span></span><br></pre></td></tr></table></figure><p>这个时候就可以发现他符合了倒数1，2，3，4，5等工作日的需求</p><p>相反：从月初往后选取第n个工作日时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = a - pd.DateOffset() + pd.offsets.Bday(n)</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Bdy()函数：当当前时间是工作日时，Bday（0）则是当前时间，当当前时间是非工作日时，Bday（0）则会自动选择当前时间的下一个工作日。其他的n都是建立在Bday（0）的基础上进行推移n个工作日的</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dict--对字典进行排序并返回原字典格式</title>
      <link href="/post/663172b.html"/>
      <url>/post/663172b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>前段时间写代码总是需要用到字典排序，但返回值一般都为列表，偶尔看到一个返回值为字典的，整理一下，供日后使用查看。直接放代码：</p></blockquote><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><p>思路：itemgetter获取对象指定区域的值，operator.itemgetter(0)就是取的items返回的元组中的一个中的一个元素的第一个值，比如(1,2)[0]。和方法三一个意思。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">dic_instance = &#123;<span class="number">3</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">23</span>, <span class="number">1</span>: <span class="number">17</span>&#125;</span><br><span class="line">sort_key_dic_instance = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(dic_instance.items(), key=operator.itemgetter(<span class="number">0</span>)))  <span class="comment">#按照key值升序</span></span><br><span class="line">sort_val_dic_instance = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(dic_instance.items(), key=operator.itemgetter(<span class="number">1</span>)))  <span class="comment">#按照value值升序</span></span><br><span class="line"><span class="built_in">print</span>(sort_key_dic_instance)  <span class="comment"># output:&#123;1: 17, 2: 23, 3: 1&#125;</span></span><br><span class="line"><span class="built_in">print</span>(sort_val_dic_instance)  <span class="comment"># output:&#123;3: 1, 1: 17, 2: 23&#125;</span></span><br></pre></td></tr></table></figure><p>注意：若想降序输出则在sorted函数中添加参数 reverse&#x3D;True即可</p><h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><p>思路：先对字典的值进行排序，然后通过循环再通过排序过后的key来取出对应的value，实现key的排序，最后利用dict转型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">9</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">11</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">13</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">4</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.keys())) <span class="comment"># [4, 9, 11, 13]</span></span><br><span class="line"></span><br><span class="line">b = [(i,a[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(a.keys())]</span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># [(4, [1, 2, 3, 4]), (9, [1, 2, 3, 4]), (11, [1, 2, 3, 4]), (13, [1, 2, 3, 4])]</span></span><br><span class="line"></span><br><span class="line">b = <span class="built_in">dict</span>([(i,a[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(a.keys())])</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># &#123;4: [1, 2, 3, 4], 9: [1, 2, 3, 4], 11: [1, 2, 3, 4], 13: [1, 2, 3, 4]&#125;</span></span><br></pre></td></tr></table></figure><h4 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h4><p>思路：利用sorted方法进行排序，其中a.items()的结果是一个(键值)元组：dict_items([(9, 10), (10, 9), (8, 8)])，e代表这个列表里面的其中一个元素比如：(9,10)，e[0]代表key，e[1]代表value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">9</span>:<span class="number">10</span>,<span class="number">10</span>:<span class="number">9</span>,<span class="number">8</span>:<span class="number">8</span>&#125;</span><br><span class="line">b = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(a.items(),key=<span class="keyword">lambda</span> e:e[<span class="number">0</span>])) <span class="comment"># 按照key排序</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># &#123;8: 8, 9: 10, 10: 9&#125;</span></span><br><span class="line"></span><br><span class="line">b = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(d.items(),key=<span class="keyword">lambda</span> e:e[<span class="number">1</span>])) <span class="comment"># 按照value排序</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># &#123;8: 8, 10: 9, 9: 10&#125;</span></span><br></pre></td></tr></table></figure><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><blockquote><p>itemgetter()函数<br>operator模块中的itemgetter()函数，是获取对象指定区域中的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">b = itemgetter(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(b(a)) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">c = itemgetter(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(b(c)) <span class="comment"># 2，3，5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>list--倒序循环列表</title>
      <link href="/post/848b5c74.html"/>
      <url>/post/848b5c74.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="一、reversed倒序循环列表"><a href="#一、reversed倒序循环列表" class="headerlink" title="一、reversed倒序循环列表"></a>一、reversed倒序循环列表</h4><p>reversed方法是将列表进行拷贝倒序的，并不会影响原列表，相比之下会更耗内存一点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [1,2,3,4,5]</span><br><span class="line">for i in reversed(list):</span><br><span class="line">    print(i)</span><br><span class="line"># 5,4,3,2,1</span><br></pre></td></tr></table></figure><h4 id="优化方法："><a href="#优化方法：" class="headerlink" title="优化方法："></a>优化方法：</h4><blockquote><p>从列表的最后一个下标往前循环，每次跨步为-1，知道数组元素下标为0时,这样更节约内存</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in range(len(list)-1,-1,-1):</span><br><span class="line">    print(list[i])</span><br><span class="line"># 5,4,3,2,1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断当前日期是周几的几种方法</title>
      <link href="/post/842c75d4.html"/>
      <url>/post/842c75d4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><ol><li>dayofweek<br>此方法值范围为：0-6，0对应星期一，以此类推<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = pd.timestamp(&quot;2022-04-26&quot;)</span><br><span class="line">print(a.dayofweek) # 1</span><br></pre></td></tr></table></figure></li><li>day_name<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = pd.timestamp(&quot;2022-04-26&quot;)</span><br><span class="line">print(a.day_name()) # Tuesday 中文：星期二</span><br></pre></td></tr></table></figure></li></ol><h1 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h1><ol><li>weekday()<br>此方法值范围为：0-6，0对应星期一，以此类推<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = datetime.strptime(&quot;2022-04-26&quot;,&quot;%Y-%m-%d&quot;)</span><br><span class="line">print(b.weekday()) # 1 备注：当天是周二</span><br></pre></td></tr></table></figure></li><li>isoweekday()<br>此方法数值范围：1-7<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = datetime.strptime(&quot;2022-04-26&quot;,&quot;%Y-%m-%d&quot;)</span><br><span class="line">print(b.isoweekday()) # 2 备注：当天是周二</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>datetime.date类型  加减  Timestamp类型时报错</title>
      <link href="/post/7f0a3057.html"/>
      <url>/post/7f0a3057.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>‘datetime.date’是datetime的一种时间格式；<br>‘Timestamp’（注意是大写的字母）是Pandas的一种时间格式。<br>这两个虽然都是都表示时间，但是直接相加减，会报错unsupported operand type(s) for -: ‘datetime.date’ and ‘Timestamp’。</p></blockquote><p>同时，也应该注意到，如果是’datetime.datetime’与Pandas的’Timestamp’相加减，就不会报错。</p><h3 id="错误复现"><a href="#错误复现" class="headerlink" title="错误复现"></a>错误复现</h3><p>下面我们使用一个简单的代码，使这个错误复现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt.date.today() - (pd.Timestamp(dt.date.today()))</span><br></pre></td></tr></table></figure><p>上面结果就会出现以下结果<br>TypeError: unsupported operand type(s) for -: ‘datetime.date’ and ‘Timestamp’</p><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li><p>&#x3D;&#x3D;将’datetime.date’转换成pandas的’Timestamp’&#x3D;&#x3D;<br>使用pd.Timestamp(dt.date.today())就可以完成</p></li><li><p>&#x3D;&#x3D;将’datetime.date’转换成’datetime.datetime’也可以完成&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import datetime as dt</span><br><span class="line">today_d = dt.date.today()</span><br><span class="line">today_dt = dt.datetime.combine(today,dt.time())</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git上传----同一个git项目手动上传至gitee和GitHub保存</title>
      <link href="/post/670c88aa.html"/>
      <url>/post/670c88aa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>我原来是在github上传的，但是由于GitHub网速太慢经常访问不了，所以我决定尝试在gitee上存放，方便访问不了的时候也有地方存储代码，这样手动同时保存在GitHub和gitee</p></blockquote><ol><li><p>因为我的本地有上次提交的代码，所以我就直接删除了github的origin远程仓库标识</p><p> git remote rm origin</p></li><li><p>查看本地的远程仓库标识</p><p> git remote</p></li><li><p>添加多个远程仓库</p><p> git remote add github <a href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;</a>:zhangsan&#x2F;project_test.git<br> git remote add gitee <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#x65;&#x65;&#46;&#99;&#x6f;&#109;">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#x65;&#x65;&#46;&#99;&#x6f;&#109;</a>:zhangsan&#x2F;project_test.git</p></li><li><p>查看本地的远程仓库</p><p> git remote -v</p></li><li><p>往后修改的文件就可以</p><p> git add “”<br> git commit -m “”<br> git push github master<br> git push gitee master</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git分支----github将默认main分支改为master</title>
      <link href="/post/8250ac7f.html"/>
      <url>/post/8250ac7f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>   我的github上目前已经存在了main（main为默认的分支）和master分支，而且两个分支的内容是一样的。我本地只有main分支，此时我想将线上的master分支改为默认分支，这样以后拉代码的时候就方便了</p></blockquote><p><img src="https://s1.ax1x.com/2022/04/20/LrPCR0.png" alt="LrPCR0.png"></p><p><img src="https://s1.ax1x.com/2022/04/20/LrP3LD.png" alt="LrP3LD.png"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git配置----git配置多个邮箱的ssh密钥</title>
      <link href="/post/dd5585be.html"/>
      <url>/post/dd5585be.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="如果有多个邮箱需要使用ssh密钥，让每一个邮箱也都有对应的ssh秘钥"><a href="#如果有多个邮箱需要使用ssh密钥，让每一个邮箱也都有对应的ssh秘钥" class="headerlink" title="如果有多个邮箱需要使用ssh密钥，让每一个邮箱也都有对应的ssh秘钥"></a>如果有多个邮箱需要使用ssh密钥，让每一个邮箱也都有对应的ssh秘钥</h4><p>在.ssh文件夹下创建文件config，根据自己的需求配置对应的网站和密钥<br>内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># github server</span><br><span class="line">Host github.com</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">IdentityFile ~/.ssh/github1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># gitlab server</span><br><span class="line">Host gitlab.com</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h4 id="验证是否配置成功"><a href="#验证是否配置成功" class="headerlink" title="验证是否配置成功"></a>验证是否配置成功</h4><p>ssh -T <a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#105;&#116;&#104;&#117;&#x62;&#46;&#x63;&#111;&#x6d;">&#x67;&#105;&#x74;&#64;&#x67;&#105;&#116;&#104;&#117;&#x62;&#46;&#x63;&#111;&#x6d;</a> </p><blockquote><p>Hi haiwang! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>configparser</title>
      <link href="/post/18a77daf.html"/>
      <url>/post/18a77daf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>配置文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">host = 127.0.0.1</span><br><span class="line">port = 3306</span><br><span class="line">user = root</span><br><span class="line">password = 123</span><br></pre></td></tr></table></figure><p>应用：<br>注：在进行修改删除操作时，都需要重新写入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conf = configparser.ConfigParser()</span><br><span class="line">conf.read(<span class="string">&quot;config.ini&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取配置文件所有的标题</span></span><br><span class="line">sections = conf.sections()</span><br><span class="line"><span class="built_in">print</span>(sections) <span class="comment"># [&#x27;mysql&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取以mysql为标题的内容</span></span><br><span class="line">options = conf.options(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(options) <span class="comment"># [&#x27;host&#x27;, &#x27;port&#x27;, &#x27;user&#x27;, &#x27;password&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取以mysql为标题的键值对内容</span></span><br><span class="line">items = conf.items(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(items) <span class="comment"># [(&#x27;host&#x27;, &#x27;127.0.0.1&#x27;), (&#x27;port&#x27;, &#x27;3306&#x27;), (&#x27;user&#x27;, &#x27;root&#x27;), (&#x27;password&#x27;, &#x27;123&#x27;)]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取以mysql为标题的key为host的内容</span></span><br><span class="line">value = conf.get(<span class="string">&quot;mysql&quot;</span>,<span class="string">&quot;host&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(value) <span class="comment"># 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标题或内容是否存在</span></span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">result = conf.has_section(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 内容</span></span><br><span class="line">result = conf.has_option(<span class="string">&quot;mysql&quot;</span>,<span class="string">&quot;port&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标题</span></span><br><span class="line"><span class="comment"># 如果不存在则添加标题</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> conf.has_section(<span class="string">&quot;mysql1&quot;</span>):</span><br><span class="line">    conf.add_section(<span class="string">&quot;mysql1&quot;</span>)</span><br><span class="line"><span class="comment"># set 给mysql为标题的添加内容</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;mysql1&#x27;</span>,<span class="string">&#x27;host&#x27;</span>,<span class="string">&#x27;localhost&#x27;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;mysql1&#x27;</span>,<span class="string">&#x27;port&#x27;</span>,<span class="string">&#x27;3306&#x27;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;mysql1&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&#x27;mysql1&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="comment"># 将添加的标题和内容写入配置文件</span></span><br><span class="line">conf.write(<span class="built_in">open</span>(<span class="string">&quot;config.ini&quot;</span>,<span class="string">&#x27;w&#x27;</span>))</span><br><span class="line"><span class="comment"># 查看以mysql1为标题的键值对内容</span></span><br><span class="line">mysql1 = conf.items(<span class="string">&#x27;mysql1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(mysql1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改指定的内容</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;mysql1&quot;</span>,<span class="string">&quot;port&quot;</span>,<span class="string">&quot;8080&quot;</span>)</span><br><span class="line">conf.write(<span class="built_in">open</span>(<span class="string">&quot;config.ini&quot;</span>,<span class="string">&quot;w&quot;</span>))</span><br><span class="line"><span class="comment"># 查看以mysql1为标题的键值对内容</span></span><br><span class="line">mysql1 = conf.items(<span class="string">&#x27;mysql1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(mysql1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除标题或内容</span></span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">conf.remove_section(<span class="string">&quot;mysql1&quot;</span>)</span><br><span class="line"><span class="comment"># 内容</span></span><br><span class="line"><span class="comment"># conf.remove_option(&quot;mysql1&quot;,&quot;port&quot;)</span></span><br><span class="line">conf.write(<span class="built_in">open</span>(<span class="string">&quot;config.ini&quot;</span>,<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-configparser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy--创建、切片、属性、操作符、运算符、索引、布尔屏蔽、缺省参数</title>
      <link href="/post/a724a4a3.html"/>
      <url>/post/a724a4a3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># array创建</span></span><br><span class="line">a = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">b = np.array((<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">c = np.arange(<span class="number">5</span>)</span><br><span class="line">d = np.linspace(<span class="number">0</span>,<span class="number">2</span>*np.pi,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [0 1 2 3 4]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [0 1 2 3 4]</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># [0 1 2 3 4]</span></span><br><span class="line"><span class="built_in">print</span>(d) <span class="comment"># [0.         1.57079633 3.14159265 4.71238898 6.28318531]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">3</span>]) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建函数</span></span><br><span class="line">a = np.zeros((<span class="number">2</span>,<span class="number">2</span>)) <span class="comment"># 创建一个所有为0的数组</span></span><br><span class="line"><span class="built_in">print</span>(a)            <span class="comment"># [[0. 0.] [0. 0.]]</span></span><br><span class="line"></span><br><span class="line">b = np.ones((<span class="number">1</span>,<span class="number">2</span>)) <span class="comment"># 创建所有为1的数组</span></span><br><span class="line"><span class="built_in">print</span>(b)           <span class="comment"># [[1. 1.]]</span></span><br><span class="line"></span><br><span class="line">c = np.full((<span class="number">2</span>,<span class="number">2</span>),<span class="number">7</span>) <span class="comment"># 创建一个常量数组</span></span><br><span class="line"><span class="built_in">print</span>(c)             <span class="comment"># [[7 7] [7 7]]</span></span><br><span class="line"></span><br><span class="line">d = np.eye(<span class="number">2</span>) <span class="comment"># 创建一个2x2单位矩阵</span></span><br><span class="line"><span class="built_in">print</span>(d)      <span class="comment"># [[1. 0.] [0. 1.]]</span></span><br><span class="line"></span><br><span class="line">e = np.random.random((<span class="number">2</span>,<span class="number">2</span>)) <span class="comment"># 创建一个包含随机值的数组</span></span><br><span class="line"><span class="built_in">print</span>(e)                    <span class="comment"># [[0.02358394 0.05292655] [0.21802958 0.79153307]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">a = np.array([[<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">              [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>],</span><br><span class="line">              [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>],</span><br><span class="line">              [<span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span> ,<span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">              [<span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>]])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>,<span class="number">4</span>]) <span class="comment"># 25</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>,<span class="number">1</span>:<span class="number">4</span>]) <span class="comment"># [12 13 14]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">4</span>,<span class="number">0</span>]) <span class="comment"># [16 21 26]</span></span><br><span class="line"><span class="built_in">print</span>(a[:,<span class="number">1</span>]) <span class="comment"># [12 17 22 27 32]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(a[:]) <span class="comment"># [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">              [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>],</span><br><span class="line">              [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>],</span><br><span class="line">              [<span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span> ,<span class="number">29</span>, <span class="number">30</span>],</span><br><span class="line">              [<span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(a.dtype) <span class="comment"># int32</span></span><br><span class="line"><span class="built_in">print</span>(a.size) <span class="comment"># 25</span></span><br><span class="line"><span class="built_in">print</span>(a.shape) <span class="comment"># (5,5) # itemsize属性是每个项占用的字节数。这个数组的数据类型是int 32，一个int 32中有32位，一个字节中有8位，除以32除以8，你就可以得到它占用了多少字节，在本例中是4。</span></span><br><span class="line"><span class="built_in">print</span>(a.itemsize) <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">print</span>(a.ndim) <span class="comment"># 2 # ndim 属性是数组的维数。这个有2个。</span></span><br><span class="line"><span class="built_in">print</span>(a.nbytes) <span class="comment"># 100  nbytes 属性是数组中的所有数据消耗掉的字节数。你应该注意到，这并不计算数组的开销，因此数组占用的实际空间将稍微大一点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作符</span></span><br><span class="line">a = np.arange(<span class="number">25</span>)</span><br><span class="line">a = a.reshape((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">b = np.array([<span class="number">10</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">56</span>, <span class="number">79</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">45</span>,</span><br><span class="line">              <span class="number">4</span>, <span class="number">92</span>, <span class="number">5</span>, <span class="number">55</span>, <span class="number">63</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">6</span>, <span class="number">53</span>, <span class="number">24</span>,</span><br><span class="line">              <span class="number">56</span>, <span class="number">3</span>, <span class="number">56</span>, <span class="number">44</span>, <span class="number">78</span>])</span><br><span class="line">b = b.reshape((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [[ 0  1  2  3  4]</span></span><br><span class="line">         <span class="comment"># [ 5  6  7  8  9]</span></span><br><span class="line">         <span class="comment"># [10 11 12 13 14]</span></span><br><span class="line">         <span class="comment"># [15 16 17 18 19]</span></span><br><span class="line">         <span class="comment"># [20 21 22 23 24]]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [[10 62  1 14  2]</span></span><br><span class="line">         <span class="comment"># [56 79  2  1 45]</span></span><br><span class="line">         <span class="comment"># [ 4 92  5 55 63]</span></span><br><span class="line">         <span class="comment"># [43 35  6 53 24]</span></span><br><span class="line">         <span class="comment"># [56  3 56 44 78]]</span></span><br><span class="line"><span class="built_in">print</span>(a + b) <span class="comment"># [[ 10  63   3  17   6]</span></span><br><span class="line">             <span class="comment"># [ 61  85   9   9  54]</span></span><br><span class="line">             <span class="comment"># [ 14 103  17  68  77]</span></span><br><span class="line">             <span class="comment"># [ 58  51  23  71  43]</span></span><br><span class="line">             <span class="comment"># [ 76  24  78  67 102]]</span></span><br><span class="line"><span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="built_in">print</span>(a * b)</span><br><span class="line"><span class="built_in">print</span>(a / b)</span><br><span class="line"><span class="built_in">print</span>(a ** <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a &lt; b) <span class="comment"># 返回布尔类型</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; b) <span class="comment"># 返回布尔类型 # [[False False  True False  True]</span></span><br><span class="line">                         <span class="comment"># [False False  True  True False]</span></span><br><span class="line">                         <span class="comment"># [ True False  True False False]</span></span><br><span class="line">                         <span class="comment"># [False False  True False False]</span></span><br><span class="line">                         <span class="comment"># [False  True False False False]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.dot(b)) <span class="comment"># dot()函数计算两个数组的点积。它返回的是一个标量（只有大小没有方向的一个值）而不是数组。</span></span><br><span class="line">                <span class="comment"># [[ 417  380  254  446  555]</span></span><br><span class="line">                <span class="comment"># [1262 1735  604 1281 1615]</span></span><br><span class="line">                <span class="comment"># [2107 3090  954 2116 2675]</span></span><br><span class="line">                <span class="comment"># [2952 4445 1304 2951 3735]</span></span><br><span class="line">                <span class="comment"># [3797 5800 1654 3786 4795]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算符</span></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">sum</span>()) <span class="comment"># 45</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(a))</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">max</span>(a))</span><br><span class="line"><span class="comment"># cumsum()函数：首先将第一个元素和第二个元素相加，并计算结果存储在一个结果列表中，然后将该结果与第三个元素相加，然后再将该结果存储在一个结果列表中。这将对数组中的所有元素执行此操作，并返回这个结果列表</span></span><br><span class="line"><span class="built_in">print</span>(a.cumsum()) <span class="comment"># [ 0  1  3  6 10 15 21 28 36 45]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引</span></span><br><span class="line"><span class="comment"># 花式索引 是获取数组中我们想要的特定元素的有效方法</span></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>)</span><br><span class="line">indices = [<span class="number">1</span>,<span class="number">5</span>,-<span class="number">1</span>]</span><br><span class="line">b = a[indices]</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [ 0 10 20 30 40 50 60 70 80 90]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [10 50 90]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔屏蔽</span></span><br><span class="line"><span class="comment"># 布尔屏蔽是一个有用的功能，它允许我们根据我们指定的条件检索数组中的元素</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">a = np.linspace(<span class="number">0</span>,<span class="number">2</span>*np.pi,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = np.sin(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">plt.plot(a,b)</span><br><span class="line">mask = b &gt;= <span class="number">0</span></span><br><span class="line">plt.plot(a[mask],b[mask],<span class="string">&#x27;bo&#x27;</span>)</span><br><span class="line">mask = (b &gt;= <span class="number">0</span>) &amp; (a &lt;= np.pi / <span class="number">2</span>)</span><br><span class="line">plt.plot(a[mask],b[mask],<span class="string">&#x27;go&#x27;</span>)</span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"><span class="comment"># 上面的示例显示了如何进行布尔屏蔽。你所要做的就是将数组传递给涉及数组的条件，它将为你提供一个值的数组，为该条件返回true</span></span><br><span class="line"><span class="comment"># 我们利用这些条件来选择图上的不同点。蓝色点(在图中还包括绿点，但绿点掩盖了蓝色点)，显示值大于0的所有点。绿色点表示值大于0且小于一半π的所有点。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺省参数</span></span><br><span class="line"><span class="comment"># 不完全索引是从多维数组的第一个维度获取索引或切片的一种方便方法。例如，如果数组a=[1,2,3,4,5],[6,7,8,9,10]，那么[3]将在数组的第一个维度中给出索引为3的元素，这里是值4</span></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>)</span><br><span class="line">b = a[:<span class="number">5</span>]</span><br><span class="line">c = a[a&gt;=<span class="number">50</span>]</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [ 0 10 20 30 40 50 60 70 80 90]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [ 0 10 20 30 40]</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># [50 60 70 80 90]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--fillna（）填充缺失值NA、NaN</title>
      <link href="/post/30f089ce.html"/>
      <url>/post/30f089ce.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>df &#x3D; df.fillna(“ThisIsNULL”)<br>print(df)</p><p><img src="https://s1.ax1x.com/2022/04/18/LdH0oj.png" alt="LdH0oj.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">25</span>,dtype=<span class="built_in">float</span>).reshape(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [[ 0.  1.  2.  3.  4.]</span></span><br><span class="line"><span class="comment">#  [ 5.  6.  7.  8.  9.]</span></span><br><span class="line"><span class="comment">#  [10. 11. 12. 13. 14.]</span></span><br><span class="line"><span class="comment">#  [15. 16. 17. 18. 19.]</span></span><br><span class="line"><span class="comment">#  [20. 21. 22. 23. 24.]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i, :i] = np.nan</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [[ 0.  1.  2.  3.  4.]</span></span><br><span class="line"><span class="comment">#  [nan  6.  7.  8.  9.]</span></span><br><span class="line"><span class="comment">#  [nan nan 12. 13. 14.]</span></span><br><span class="line"><span class="comment">#  [nan nan nan 18. 19.]</span></span><br><span class="line"><span class="comment">#  [nan nan nan nan 24.]]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">3</span>,<span class="number">0</span>] = <span class="number">25.0</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [[ 0.  1.  2.  3.  4.]</span></span><br><span class="line"><span class="comment">#  [nan  6.  7.  8.  9.]</span></span><br><span class="line"><span class="comment">#  [nan nan 12. 13. 14.]</span></span><br><span class="line"><span class="comment">#  [25. nan nan 18. 19.]</span></span><br><span class="line"><span class="comment">#  [nan nan nan nan 24.]]</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(a,columns=<span class="built_in">list</span>(<span class="string">&quot;ABCDE&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment">#       A    B     C     D     E</span></span><br><span class="line"><span class="comment"># 0   0.0  1.0   2.0   3.0   4.0</span></span><br><span class="line"><span class="comment"># 1   NaN  6.0   7.0   8.0   9.0</span></span><br><span class="line"><span class="comment"># 2   NaN  NaN  12.0  13.0  14.0</span></span><br><span class="line"><span class="comment"># 3  25.0  NaN   NaN  18.0  19.0</span></span><br><span class="line"><span class="comment"># 4   NaN  NaN   NaN   NaN  24.0</span></span><br><span class="line"></span><br><span class="line">df = df.fillna(<span class="string">&quot;ThisIsNULL&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment">#             A           B           C           D     E</span></span><br><span class="line"><span class="comment"># 0           0           1           2           3   4.0</span></span><br><span class="line"><span class="comment"># 1  ThisIsNULL           6           7           8   9.0</span></span><br><span class="line"><span class="comment"># 2  ThisIsNULL  ThisIsNULL          12          13  14.0</span></span><br><span class="line"><span class="comment"># 3          25  ThisIsNULL  ThisIsNULL          18  19.0</span></span><br><span class="line"><span class="comment"># 4  ThisIsNULL  ThisIsNULL  ThisIsNULL  ThisIsNULL  24.0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pathlib最新操作路径模块</title>
      <link href="/post/76f2cb8a.html"/>
      <url>/post/76f2cb8a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><pre><code class="python">from pathlib import Path# 获取当前工作目录directory = Path.cwd()print(directory)    # C:\Users\hwang\Desktop\projectprint(type(directory))      # &lt;class &#39;pathlib.WindowsPath&#39;&gt; 可以同str()转化# 获取这个文件路径中相对应的home目录home_dir = Path.home()print(home_dir)     # C:\Users\hwang# 获取当前文件路径path_dir = Path(__file__)print(path_dir)     # C:\Users\hwang\Desktop\project\pathlib_test.py# 如果此时是在cmd下执行：执行结果pathlib_test.py 如果想要一样的结果，即绝对路径path_dir = Path(__file__).resolve()print(path_dir)     # C:\Users\hwang\Desktop\project\pathlib_test.py# 获取绝对路径absolute_path = Path(__file__).resolve()print(absolute_path)    # C:\Users\hwang\Desktop\project\pathlib_test.py# 获取文件属性file_attribute = Path(__file__)print(file_attribute.stat())      # os.stat_result(st_mode=33206, st_ino=1970324837814490, st_dev=2477322209, st_nlink=1, st_uid=0, st_gid=0, st_size=1173, st_atime=1650251522, st_mtime=1650251507, st_ctime=1650249658)print(file_attribute.stat().st_size)    # 1173# 路径组成部分path_constitute = Path(__file__)print(path_constitute.name)     # 文件名 pathlib_test.pyprint(path_constitute.stem)     # 去掉后缀的文件名 pathlib_testprint(path_constitute.suffix)       # 文件名后缀 .pyprint(path_constitute.parent)       # 父级目录 C:\Users\hwang\Desktop\projectprint(path_constitute.anchor)       # 路径最开头的目录 C:\# 获取上一级目录up_one_level = Path(__file__).parentprint(up_one_level) # C:\Users\hwang\Desktop\projectprint(up_one_level.parent) # C:\Users\hwang\Desktopprint(up_one_level.parent.parent) # C:\Users\hwang# 获取所有上一级目录all_up_one_level = Path(__file__).parentsprint(all_up_one_level)     # &lt;WindowsPath.parents&gt; 使用list转化print(list(all_up_one_level))   # [WindowsPath(&#39;C:/Users/hwang/Desktop/project&#39;), WindowsPath(&#39;C:/Users/hwang/Desktop&#39;), WindowsPath(&#39;C:/Users/hwang&#39;), WindowsPath(&#39;C:/Users&#39;), WindowsPath(&#39;C:/&#39;)]# 获取父级目录parent_directory = Path(__file__).parents[0]print(parent_directory) # C:\Users\hwang\Desktop\project# 获取某个 目录 下的所有路径（文件和目录），返回绝对路径all_path = Path.cwd().iterdir()for i in all_path:    print(i)# C:\Users\hwang\Desktop\project\.idea# C:\Users\hwang\Desktop\project\main.py# C:\Users\hwang\Desktop\project\pathlib_test.py# 获取所有子级文件和文件夹pathlib.Path(&quot;路径&quot;).glob(&quot;**/*&quot;)Path模块，返回的是 generatorglob模块，返回的是 文件/文件夹名  1) glob.glob(*) = glob.iglob(*)：返回当前目录下的文件和文件夹2) glob.glob(**) = glob.iglob(**)：返回当前目录、及子目录下的文件和文件夹3) Path.glob(**) = Path.rglob(**) ：返回当前目录、及子目录下的文件夹4) Path.glob(*)：返回当前目录下的文件和文件夹5) Path.rglob(*)：返回当前目录、及子目录下的文件和文件夹# 路径拼接path_join = Path(__file__).joinpath(&quot;123&quot;,&quot;456&quot;)print(path_join) # C:\Users\hwang\Desktop\project\pathlib_test.py\123\456# 判断是否存在？是否是目录？是否是文件？# 存在there = Path(&quot;/awd&quot;).exists()print(there) # False# 目录directory = Path(__file__).is_dir()print(directory) # False# 文件file = Path(__file__).is_file()print(file) # True# 创建目录、文件# 目录    设置parents=True可同时创建多个目录，默认为falsedirectory = Path(&quot;Hello&quot;).mkdir()print(directory) # None# 文件file = Path(&quot;hello.txt&quot;).touch()print(file) # None# 删除目录del_directory = Path(&quot;Hello&quot;).rmdir()print(del_directory) # None# 删除文件del_file = Path(&quot;hello.txt&quot;).unlink()print(del_file) # None# 移动文件  并重命名move_file = Path(&quot;hello.txt&quot;).replace(&quot;hello/hello_test.txt&quot;)print(move_file) # None# 重命名文件file = Path(&quot;hello/hello_test.txt&quot;)new_filename = file.with_name(&quot;hello.txt&quot;)file.replace(new_filename)# 修改后缀名file = Path(&quot;hello/hello.txt&quot;)new_file = file.with_suffix(&quot;.json&quot;)file.replace(new_file)son&quot;)file.replace(new_file)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-pathlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Pycharm同步服务器的代码到本地</title>
      <link href="/post/da104cbd.html"/>
      <url>/post/da104cbd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>场景：将gitlab上的代码拉取到服务器下运行，但又想将代码拉取到本地开发，让本地更改完代码之后同步更新远程服务器上的代码（此时的服务器和本地都可以拉去代码）</p></blockquote><p><strong>思路</strong>：先git clone下来到本地，然后pycharm打开此文件夹，利用pycharm部署代码到服务器，在配置部署时先在服务器创建一个同名文件夹，然后在配置完之后，上传到此文件夹下，并配置有任何修改都会同步到服务器下</p><ol><li><p>拉取指定分支的代码<br>git clone -b 指定分支名 “项目链接”</p></li><li><p>用pycharm打开此文件夹，并在服务器创建一个同名的文件夹</p></li><li><p>依次点击Tools—-&gt; Deployment —-&gt; Configuration…<br><img src="https://s1.ax1x.com/2022/04/15/L3cEUx.png" alt="L3cEUx.png"></p></li><li><p>依次点击 “+” —-&gt; SFTP<br><img src="https://s1.ax1x.com/2022/04/15/L3cdMQ.png" alt="L3cdMQ.png"></p></li><li><p>按照步骤填写以下内容，用于连接服务器的配置<br><img src="https://s1.ax1x.com/2022/04/15/L3gPW8.png" alt="L3gPW8.png"><br><img src="https://s1.ax1x.com/2022/04/15/L3gqkq.png" alt="L3gqkq.png"></p></li><li><p>配置本地与服务器之间的映射目录<br><img src="https://s1.ax1x.com/2022/04/15/L32qDH.png" alt="L32qDH.png"></p></li><li><p>按照步骤点击<br><img src="https://s1.ax1x.com/2022/04/15/L3Rn2T.png" alt="L3Rn2T.png"></p></li><li><p>配置本地代码与服务器代码实时同步<br><img src="https://s1.ax1x.com/2022/04/15/L3W2kR.png" alt="L3W2kR.png"></p></li><li><p>上传本地的代码到服务器<br><img src="https://s1.ax1x.com/2022/04/15/L3hXy8.png" alt="L3hXy8.png"></p></li><li><p>此时在本地修改完你的代码，Ctrl+s之后，代码就同步更新到服务器了</p></li></ol><h3 id="二、部署完发现无法自动更新"><a href="#二、部署完发现无法自动更新" class="headerlink" title="二、部署完发现无法自动更新"></a>二、部署完发现无法自动更新</h3><p>pycharm 连接远程库已ok，但是总是无法自动上传代码。并且在Tools-&gt; Deployment -&gt; Options 选项中出现Default server or group of server is not configured. Nothing would be uploaded automatically 这句话的意思就是，因为没有配置默认的连接服务器，所以无法自动上传代码【惊！！pycharm竟然这么蠢？？？明明已经连到指定的服务器了，你还跟我说需要指定？？】</p><p><strong>原因：</strong><br><img src="https://s1.ax1x.com/2022/05/17/O4ySaQ.png" alt="O4ySaQ.png"></p><p><strong>解决：</strong><br>进入Tools-&gt;Deployment -&gt; Configurations，选中一个deployment，然后设置为默认。如下图所示，【✅就是用于设置默认的server】：<br><img src="https://s1.ax1x.com/2022/05/17/O4ydJA.png" alt="O4ydJA.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/post/423abe9e.html"/>
      <url>/post/423abe9e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h4><p>ssh-keygen -t rsa -C “<a href="mailto:&#x78;&#x78;&#x78;&#x78;&#120;&#64;&#x78;&#x78;&#x78;&#x78;&#x78;&#46;&#x63;&#111;&#109;">&#x78;&#x78;&#x78;&#x78;&#120;&#64;&#x78;&#x78;&#x78;&#x78;&#x78;&#46;&#x63;&#111;&#109;</a>”（连续三次回车）</p><h4 id="验证是否配置成功"><a href="#验证是否配置成功" class="headerlink" title="验证是否配置成功"></a>验证是否配置成功</h4><p>ssh -T <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;</a></p><blockquote><p>Hi haiwang! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><h4 id="如果验证过程现实22端口连接失败，可以使用一下命令"><a href="#如果验证过程现实22端口连接失败，可以使用一下命令" class="headerlink" title="如果验证过程现实22端口连接失败，可以使用一下命令"></a>如果验证过程现实22端口连接失败，可以使用一下命令</h4><blockquote><p>ssh -T -p 443 <a href="mailto:&#x67;&#x69;&#116;&#x40;&#115;&#115;&#104;&#46;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;">&#x67;&#x69;&#116;&#x40;&#115;&#115;&#104;&#46;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;</a></p></blockquote><h4 id="查看远程分支和本地分支"><a href="#查看远程分支和本地分支" class="headerlink" title="查看远程分支和本地分支"></a>查看远程分支和本地分支</h4><p>git branch -a<br><img src="https://s1.ax1x.com/2022/04/15/L3uNcj.png" alt="L3uNcj.png"></p><h4 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h4><p>git branch -r<br><img src="https://s1.ax1x.com/2022/04/15/L3uwBq.png" alt="L3uwBq.png"></p><h4 id="同步远程分支"><a href="#同步远程分支" class="headerlink" title="同步远程分支"></a>同步远程分支</h4><p>git fetch<br>同步远程指定分支：git fetch origin 指定分支</p><pre><code>注意：（也就是本地可能只有master分支，但是同步之后就可以将远程的所有分支都拉取到本地了）</code></pre><h4 id="拉取指定的远程分支并在本地创建对应的分支"><a href="#拉取指定的远程分支并在本地创建对应的分支" class="headerlink" title="拉取指定的远程分支并在本地创建对应的分支"></a>拉取指定的远程分支并在本地创建对应的分支</h4><p>git checkout -b 本地分支 origin&#x2F;远程分支名<br>分支更新后继续同步：git pull origin 指定分支名</p><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>git checkout -b 分支名</p><h4 id="提交分支到线上"><a href="#提交分支到线上" class="headerlink" title="提交分支到线上"></a>提交分支到线上</h4><p>git add .<br>git commit -m “”<br>git push origin 新的分支名</p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>git merge master(合并master的分支到当前所在分支)</p><h4 id="撤销合并"><a href="#撤销合并" class="headerlink" title="撤销合并"></a>撤销合并</h4><p>如果你觉得你合并后的状态是一团乱麻，想把当前的修改都放弃，你可以用下面的命令回到合并之前的状态：<br>git reset –hard HEAD</p><h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h4><pre><code>注意：操作此命令时，不能在此分支下，否则报错</code></pre><p>git branch -d 本地分支</p><h4 id="强制删除本地分支"><a href="#强制删除本地分支" class="headerlink" title="强制删除本地分支"></a>强制删除本地分支</h4><p>git branch -D 本地分支</p><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><p>git push origin -d 远程分支</p><h4 id="git-add指定文件"><a href="#git-add指定文件" class="headerlink" title="git add指定文件"></a>git add指定文件</h4><p>git add 文件名</p><h4 id="将git-add-和-git-commit-合并提交"><a href="#将git-add-和-git-commit-合并提交" class="headerlink" title="将git add. 和 git commit 合并提交"></a>将git add. 和 git commit 合并提交</h4><p>git commit -am “介绍”</p><h4 id="同一文件反复修改时，反复提交"><a href="#同一文件反复修改时，反复提交" class="headerlink" title="同一文件反复修改时，反复提交"></a>同一文件反复修改时，反复提交</h4><p>git commit –amend -m “介绍”</p><p>举例：</p><pre><code># a.py 内容:print(&quot;hello world&quot;)# 此时git add + git commit# 之后又修改了a.py，print(&quot;Hello World&quot;)# 此时可以使用 git commit --amend -m &quot;介绍&quot; 覆盖修改的文件</code></pre><h4 id="查看git配置（用户名、密码、邮箱等）"><a href="#查看git配置（用户名、密码、邮箱等）" class="headerlink" title="查看git配置（用户名、密码、邮箱等）"></a>查看git配置（用户名、密码、邮箱等）</h4><p>git config –list</p><h4 id="修改git用户名"><a href="#修改git用户名" class="headerlink" title="修改git用户名"></a>修改git用户名</h4><p>git config –global user.name “hwang”</p><h4 id="将当前修改放入缓存区（建议使用下面的）"><a href="#将当前修改放入缓存区（建议使用下面的）" class="headerlink" title="将当前修改放入缓存区（建议使用下面的）"></a>将当前修改放入缓存区（建议使用下面的）</h4><p>git stash</p><h4 id="将修改放入缓存区并赋予版本"><a href="#将修改放入缓存区并赋予版本" class="headerlink" title="将修改放入缓存区并赋予版本"></a>将修改放入缓存区并赋予版本</h4><p>git stash save ‘1111’</p><h4 id="查看缓存区记录"><a href="#查看缓存区记录" class="headerlink" title="查看缓存区记录"></a>查看缓存区记录</h4><p>git stash list</p><pre><code># 显示内容stash@&#123;0&#125;: On wanghan: stash test</code></pre><h4 id="应用缓存（也就是将缓存区的内容恢复到工作区）"><a href="#应用缓存（也就是将缓存区的内容恢复到工作区）" class="headerlink" title="应用缓存（也就是将缓存区的内容恢复到工作区）"></a>应用缓存（也就是将缓存区的内容恢复到工作区）</h4><p>git stash apply</p><pre><code>注意；默认删除最近的stash@&#123;0&#125;记录这个应用方法不会删除缓存区的 stash@&#123;0&#125; 缓存记录</code></pre><p>git stash apply stash@{0}</p><pre><code>应用指定版本的缓存</code></pre><h4 id="应用缓存（方法二）"><a href="#应用缓存（方法二）" class="headerlink" title="应用缓存（方法二）"></a>应用缓存（方法二）</h4><p>git stash pop</p><pre><code>注意：删除的是缓存区的第一个，并且会删除缓存区的此条缓存记录</code></pre><p>但如果使用 git stash pop 后有冲突时，如何撤销?</p><p>可以使用 git reset –hard ，即可撤销 git stash pop 操作，将当前分支状态恢复。</p><h4 id="删除缓存区（删除指定版本的缓存）"><a href="#删除缓存区（删除指定版本的缓存）" class="headerlink" title="删除缓存区（删除指定版本的缓存）"></a>删除缓存区（删除指定版本的缓存）</h4><p>git stash drop stash@{0}</p><p>如果误用drop，删错缓存，可以根据使用完drop命令后，返回的ID，<br><img src="https://s1.ax1x.com/2022/05/18/OoPQLd.png" alt="OoPQLd.png"><br>“19a…”就是ID，然后：git stash apply ID 即可恢复</p><h4 id="删除缓存区（方法二）"><a href="#删除缓存区（方法二）" class="headerlink" title="删除缓存区（方法二）"></a>删除缓存区（方法二）</h4><p>git stash clear</p><h4 id="如果误删缓存，恢复办法！！！"><a href="#如果误删缓存，恢复办法！！！" class="headerlink" title="如果误删缓存，恢复办法！！！"></a>如果误删缓存，恢复办法！！！</h4><ol><li>git show 编号</li></ol><!----><pre><code>注意：这个编号就是你drop之后返回的一长串编号</code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><ol><li>git merge 编号<br>（将删除的缓存合并到本地 也就是恢复到本地来）</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda命令</title>
      <link href="/post/520ad726.html"/>
      <url>/post/520ad726.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="查看所有虚拟环境"><a href="#查看所有虚拟环境" class="headerlink" title="查看所有虚拟环境"></a>查看所有虚拟环境</h4><p>conda env list</p><h4 id="查看默认下载的第三方包的版本信息（可以pip-install-包-x3D-x3D-版本号，更新默认包的版本）"><a href="#查看默认下载的第三方包的版本信息（可以pip-install-包-x3D-x3D-版本号，更新默认包的版本）" class="headerlink" title="查看默认下载的第三方包的版本信息（可以pip install 包&#x3D;&#x3D;版本号，更新默认包的版本）"></a>查看默认下载的第三方包的版本信息（可以pip install 包&#x3D;&#x3D;版本号，更新默认包的版本）</h4><p>conda list</p><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><p>conda create -n py36tf1 numpy pandas python&#x3D;3.6</p><h4 id="激活新虚拟环境命令（-表示当前所在的环境）"><a href="#激活新虚拟环境命令（-表示当前所在的环境）" class="headerlink" title="激活新虚拟环境命令（*表示当前所在的环境）"></a>激活新虚拟环境命令（*表示当前所在的环境）</h4><p>conda activate py36tf1</p><p>source activate py36tf1（上一步报错执行这个）</p><h4 id="查看当前环境所有包"><a href="#查看当前环境所有包" class="headerlink" title="查看当前环境所有包"></a>查看当前环境所有包</h4><p>conda list</p><h4 id="退出当前虚拟环境"><a href="#退出当前虚拟环境" class="headerlink" title="退出当前虚拟环境"></a>退出当前虚拟环境</h4><p>conda deactivate</p><h4 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h4><p>conda remove -n 环境名称 –all</p><p>报错时：conda env remove -n 环境名称</p><h4 id="删除虚拟环境中的包"><a href="#删除虚拟环境中的包" class="headerlink" title="删除虚拟环境中的包"></a>删除虚拟环境中的包</h4><p>conda remove -n 环境名称 $package_name（包名）</p><h4 id="安装离线包（tar-bz2）"><a href="#安装离线包（tar-bz2）" class="headerlink" title="安装离线包（tar.bz2）"></a>安装离线包（tar.bz2）</h4><p>conda install –use-local 离线包路径</p><h4 id="导出已有环境"><a href="#导出已有环境" class="headerlink" title="导出已有环境"></a>导出已有环境</h4><p>conda env export &gt; 虚拟环境名（自定义）.yaml</p><h4 id="导入环境（yaml）"><a href="#导入环境（yaml）" class="headerlink" title="导入环境（yaml）"></a>导入环境（yaml）</h4><p>conda env create -f 文件名.yaml（导入进去后文件名就是虚拟环境名）</p><h4 id="安装requirements-txt"><a href="#安装requirements-txt" class="headerlink" title="安装requirements.txt"></a>安装requirements.txt</h4><p>conda install –yes –file requirements.txt</p><h4 id="在conda找不到依赖包时用pip代替安装"><a href="#在conda找不到依赖包时用pip代替安装" class="headerlink" title="在conda找不到依赖包时用pip代替安装"></a>在conda找不到依赖包时用pip代替安装</h4><p>while read requirement; do conda install –yes $requirement || pip install $requirement; done &lt; requirements.txt</p><h4 id="配置国内镜像源"><a href="#配置国内镜像源" class="headerlink" title="配置国内镜像源"></a>配置国内镜像源</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">pip config list  # 查看配置信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> conda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy--argwhere返回数组中非0数值的索引</title>
      <link href="/post/5911bed4.html"/>
      <url>/post/5911bed4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="argwhere返回数组中非0数值的索引"><a href="#argwhere返回数组中非0数值的索引" class="headerlink" title="argwhere返回数组中非0数值的索引"></a>argwhere返回数组中非0数值的索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">b = np.arange(12).reshape(3,4)</span><br></pre></td></tr></table></figure><p>print(b)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[ 0  1  2  3]</span><br><span class="line"> [ 4  5  6  7]</span><br><span class="line"> [ 8  9 10 11]]</span><br></pre></td></tr></table></figure><p>print(np.argwhere(b))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[[0 1]</span><br><span class="line"> [0 2]</span><br><span class="line"> [0 3]</span><br><span class="line"> [1 0]</span><br><span class="line"> [1 1]</span><br><span class="line"> [1 2]</span><br><span class="line"> [1 3]</span><br><span class="line"> [2 0]</span><br><span class="line"> [2 1]</span><br><span class="line"> [2 2]</span><br><span class="line"> [2 3]]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy--diag对角矩阵 flipud上下反转矩阵</title>
      <link href="/post/32adf1ad.html"/>
      <url>/post/32adf1ad.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="diag-生成对角矩阵"><a href="#diag-生成对角矩阵" class="headerlink" title="diag 生成对角矩阵"></a>diag 生成对角矩阵</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=np.diag([1,2,3,4]) #diag用于声明对角矩阵</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[1 0 0 0]</span><br><span class="line"> [0 2 0 0]</span><br><span class="line"> [0 0 3 0]</span><br><span class="line"> [0 0 0 4]]</span><br></pre></td></tr></table></figure><h4 id="flipud-将任意纬度的矩阵上下反转"><a href="#flipud-将任意纬度的矩阵上下反转" class="headerlink" title="flipud 将任意纬度的矩阵上下反转"></a>flipud 将任意纬度的矩阵上下反转</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.flipud(a) #执行完这句会自动输出结果</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array([[0, 0, 0, 4],</span><br><span class="line">       [0, 0, 3, 0],</span><br><span class="line">       [0, 2, 0, 0],</span><br><span class="line">       [1, 0, 0, 0]])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坑--Docker创建容器时报错：iptables：No chain target match by that name</title>
      <link href="/post/58cb2fcf.html"/>
      <url>/post/58cb2fcf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>报错内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: driver failed programming external connectivity on endpoint gansu_yj_zy (1636a69cd363c6cb6f12e8c4000ccdfcd6d3c12677964ec25908284566f93532):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 49172 -j DNAT --to-destination 172.17.0.16:8464 ! -i docker0: iptables: No chain/target/match by that name.</span><br></pre></td></tr></table></figure><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl docker start</span><br></pre></td></tr></table></figure><p>在启动firewalld之后，iptables被激活，此时没有docker chain，重启docker后被加入到iptable里面。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坑--解决pymysql.err.InterfaceError：（0, “”）报错的办法</title>
      <link href="/post/b8b24c56.html"/>
      <url>/post/b8b24c56.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>最近使用 Flask+MySQL 写了些简单的接口，部署到Linux之后，发现过了一段时间，再次访问接口就不能用了，报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/app.py&quot;, line 2328, in __call__</span><br><span class="line">    return self.wsgi_app(environ, start_response)</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/app.py&quot;, line 2314, in wsgi_app</span><br><span class="line">    response = self.handle_exception(e)</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/app.py&quot;, line 1760, in handle_exception</span><br><span class="line">    reraise(exc_type, exc_value, tb)</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/_compat.py&quot;, line 36, in reraise</span><br><span class="line">    raise value</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/app.py&quot;, line 2311, in wsgi_app</span><br><span class="line">    response = self.full_dispatch_request()</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/app.py&quot;, line 1834, in full_dispatch_request</span><br><span class="line">    rv = self.handle_user_exception(e)</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/app.py&quot;, line 1737, in handle_user_exception</span><br><span class="line">    reraise(exc_type, exc_value, tb)</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/_compat.py&quot;, line 36, in reraise</span><br><span class="line">    raise value</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/app.py&quot;, line 1832, in full_dispatch_request</span><br><span class="line">    rv = self.dispatch_request()</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/flask/app.py&quot;, line 1818, in dispatch_request</span><br><span class="line">    return self.view_functions[rule.endpoint](**req.view_args)</span><br><span class="line">  File &quot;/root/flaskDemo/api/user.py&quot;, line 18, in get_all_users</span><br><span class="line">    data = db.select_db(sql)</span><br><span class="line">  File &quot;/root/flaskDemo/common/mysql_operate.py&quot;, line 27, in select_db</span><br><span class="line">    self.cur.execute(sql)</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 170, in execute</span><br><span class="line">    result = self._query(query)</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/pymysql/cursors.py&quot;, line 328, in _query</span><br><span class="line">    conn.query(q)</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 516, in query</span><br><span class="line">    self._execute_command(COMMAND.COM_QUERY, sql)</span><br><span class="line">  File &quot;/root/python36/lib/python3.6/site-packages/pymysql/connections.py&quot;, line 750, in _execute_command</span><br><span class="line">    raise err.InterfaceError(&quot;(0, &#x27;&#x27;)&quot;)</span><br><span class="line">pymysql.err.InterfaceError: (0, &#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在网上查了下，是因为这个数据库的连接建立太久了，会自动断开，这个时候我们需要重新建立连接，否则访问接口就会出现异常报错了。</p><p>在 pymysql 创建的数据库连接对象下，有这么一个方法：ping()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">connect = pymysql.connect(**mysql_conn)</span><br><span class="line">cursors = connect.cursor()</span><br><span class="line">sql = <span class="string">f&quot;SELECT save_path,create_time from <span class="subst">&#123;tablename&#125;</span> WHERE forecast_time = &#x27;<span class="subst">&#123;forecast_time&#125;</span>&#x27; and level = &#x27;<span class="subst">&#123;level&#125;</span>&#x27; order by create_time desc &quot;</span></span><br><span class="line">logger.info(sql)</span><br><span class="line"><span class="comment"># 检查连接是否断开，如果断开就进行重连</span></span><br><span class="line">connect.ping(reconnect=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 使用 execute() 执行sql</span></span><br><span class="line">cursors.execute(sql)</span><br><span class="line">data = cursors.fetchall()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坑--Docker容器内部POSIX系统中文乱码</title>
      <link href="/post/b056df15.html"/>
      <url>/post/b056df15.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="情景：在容器内部但凡是中文都乱码，或者中文输入不进去，猜测容器内部系统不支持中文"><a href="#情景：在容器内部但凡是中文都乱码，或者中文输入不进去，猜测容器内部系统不支持中文" class="headerlink" title="情景：在容器内部但凡是中文都乱码，或者中文输入不进去，猜测容器内部系统不支持中文"></a>情景：在容器内部但凡是中文都乱码，或者中文输入不进去，猜测容器内部系统不支持中文</h3><h4 id="1、查看系统支持哪些语言包"><a href="#1、查看系统支持哪些语言包" class="headerlink" title="1、查看系统支持哪些语言包"></a>1、查看系统支持哪些语言包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale -a</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/03/14/bOJQK0.png" alt="bOJQK0.png"></p><p>如果是POSIX的话，在容器中编辑文件输入中文都会是乱码的</p><p>修改方式就是修改一个LANG环境变量值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#需要加上-e环境变量</span><br><span class="line">docker run --name nginx -e LANG=&quot;C.UTF-8&quot; -d nginx:latest</span><br></pre></td></tr></table></figure><p>创建完后，在容器中输入locale命令就可以看到更改为UTF-8了，编辑文件输入中文也就没问题了</p><h4 id="2、docker-compose编排的服务"><a href="#2、docker-compose编排的服务" class="headerlink" title="2、docker-compose编排的服务"></a>2、docker-compose编排的服务</h4><p>在docker-compose中也是添加环境变量，和docker-run类似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">environment:</span><br><span class="line">      LANG: C.UTF-8</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="3、dockerFile创建容器"><a href="#3、dockerFile创建容器" class="headerlink" title="3、dockerFile创建容器"></a>3、dockerFile创建容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在dockerFile文件中添加这一行即可</span><br><span class="line">ENV LANG C.UTF-8</span><br></pre></td></tr></table></figure><p>这样编排的服务，在容器内就可以输入中文了，一开始以为是vim的问题，修改了vim的中文支持并不管用，原来还是docker容器控制的，而且在容器内也尝试修改过LANG的值 ，也不管用，不会生效不知道为啥，建议在外部加入环境变量的控制。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git冲突----在合并之前提交过</title>
      <link href="/post/9088ebc2.html"/>
      <url>/post/9088ebc2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>场景：小明：在本地更新了x.py文件，并提交到了git仓库，小红在之前也修改了 x.py,但是又无法撤回或者说忘记修改了x.py的哪个地方，此时git pull便会报错</p><p><img src="https://s4.ax1x.com/2022/03/04/baVPgJ.png" alt="baVPgJ.png"></p><h1 id="亲测如下："><a href="#亲测如下：" class="headerlink" title="亲测如下："></a>亲测如下：</h1><ol><li><p>先git stash<br><img src="https://s4.ax1x.com/2022/03/04/baV5rR.png" alt="baV5rR.png">将自己工作区中修改的内容暂时缓存到git栈中，也可以说是备份在git栈中</p></li><li><p>git pull<br>把小明提交上去的代码拉下来</p></li><li><p>git stash pop 将git栈中缓存的代码恢复到工作区</p></li></ol><h3 id="如果无法解决-放弃本地代码，直接覆盖"><a href="#如果无法解决-放弃本地代码，直接覆盖" class="headerlink" title="如果无法解决,放弃本地代码，直接覆盖"></a>如果无法解决,放弃本地代码，直接覆盖</h3><p>git reset –hard</p><p>git pull</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git克隆----git拉取远程仓库的指定的目录或文件</title>
      <link href="/post/4e51d5ce.html"/>
      <url>/post/4e51d5ce.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><ol><li><p>创建xx文件夹</p></li><li><p>git init </p></li><li><p>git config core.sparseCheckout true #打开配置</p></li><li><p>echo ‘drawPic&#x2F;MP3000A&#x2F;*’ &gt;&gt; .git&#x2F;info&#x2F;sparse-checkout</p><p><code># drawPic/MP3000A/* 为分支下的绝对路径,.git/info/sparse-checkout 不变</code></p></li><li><p>git remote add origin xxxxx.git # 设置远程仓库</p></li><li><p>git pull origin 分支</p></li></ol><p>此时就会在你创建的目录下把你想拉取的远程目录拉下来</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git忽略----.gitignore忽略文件或文件夹</title>
      <link href="/post/3e171571.html"/>
      <url>/post/3e171571.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>当git提交后，发现没有过滤一些非必要上传的文件，比如.git&#x2F;.idea&#x2F;<strong>pycache</strong>&#x2F;这些文件夹</p><p>我们需要在项目的根目录下创建.gitignore文件</p><p>.gitignore</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这里是过滤的一些文件</span><br><span class="line">__pycache__/</span><br><span class="line">.idea/</span><br><span class="line">.git/</span><br><span class="line">.gitignore # 这个忽略文件也不需要上传</span><br><span class="line">logs/</span><br></pre></td></tr></table></figure><p>文件写好之后，先不着急提交，这里有一个小技巧</p><p>需要先执行一下命令，从仓库先把这些要忽略上传的文件删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 删除文件夹</span><br><span class="line">git rm --cached -r __pycache__</span><br><span class="line">git rm --cached -r .idea/</span><br><span class="line">git rm --cached -r .git/</span><br><span class="line">git rm --cached -r logs/</span><br><span class="line"># 删除文件</span><br><span class="line">git rm --cached logs/xx.log</span><br></pre></td></tr></table></figure><p>最后：</p><p>git add .</p><p>git commit -m “add .gitignore”</p><p>git push origin 你的分支</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib--contourf色斑图（等高线图）、contour等值线图</title>
      <link href="/post/61a09e7c.html"/>
      <url>/post/61a09e7c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算x,y坐标对应的高度值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - x / <span class="number">2</span> + x ** <span class="number">3</span> + y ** <span class="number">5</span>) * np.exp(-x ** <span class="number">2</span> - y ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成x,y的数据</span></span><br><span class="line">n = <span class="number">256</span></span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n)</span><br><span class="line">y = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把x,y数据生成mesh网格状的数据，因为等高线的显示是在网格的基础上添加上高度值</span></span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充等高线</span></span><br><span class="line">plt.contourf(X, Y, f(X, Y))</span><br><span class="line"><span class="comment"># 显示图表</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等值线图</span></span><br><span class="line">C = plt.contour(X, Y, f(X, Y))</span><br><span class="line"><span class="comment"># 给等值线添加标签</span></span><br><span class="line">plt.clabel(C)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="填充等高线图"><a href="#填充等高线图" class="headerlink" title="填充等高线图"></a>填充等高线图</h3><p><img src="https://s4.ax1x.com/2022/03/03/bJ63V0.png" alt="bJ63V0.png"></p><h3 id="等值线图（图上数字即为标签）"><a href="#等值线图（图上数字即为标签）" class="headerlink" title="等值线图（图上数字即为标签）"></a>等值线图（图上数字即为标签）</h3><p><img src="https://s4.ax1x.com/2022/03/03/bJ62xH.png" alt="bJ62xH.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy--meshgrid生成网格点坐标矩阵</title>
      <link href="/post/96b8ce4b.html"/>
      <url>/post/96b8ce4b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>场景： 通常适用于转换经纬度</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># [1 2 3]</span></span><br><span class="line">y = np.arange(<span class="number">4</span>,<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment"># [4 5 6 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网格点坐标矩阵</span></span><br><span class="line">X,Y = np.meshgrid(x,y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>X:[[1 2 3]<br> [1 2 3]<br> [1 2 3]<br> [1 2 3]]</p><p>Y: [[4 4 4]<br> [5 5 5]<br> [6 6 6]<br> [7 7 7]]</p><p>解释：<br>输出&#x3D;&#x3D;X的每一行&#x3D;&#x3D;的数值都是复制的x的值；输出&#x3D;&#x3D;Y的每一列&#x3D;&#x3D;的数值都是复制的y的值。</p><p>x的值是3，y的值是4，，，，， X、Y的矩阵是3列4行</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python导出当前环境依赖包信息</title>
      <link href="/post/46e3db58.html"/>
      <url>/post/46e3db58.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>pip freeze &gt; .&#x2F;requirements.txt  </p><p>内容为当前环境所有依赖包及对应版本。<br>同时也可以修改 .&#x2F;requirements.txt 为其他指定路径， 这样依赖包信息会生成到指定的目录下。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker相关知识点</title>
      <link href="/post/e04febf8.html"/>
      <url>/post/e04febf8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="1-docker-run-it-centos-x2F-bin-x2F-bash-后面的-bin-x2F-bash的作用"><a href="#1-docker-run-it-centos-x2F-bin-x2F-bash-后面的-bin-x2F-bash的作用" class="headerlink" title="1. docker run -it centos &#x2F;bin&#x2F;bash 后面的 bin&#x2F;bash的作用"></a>1. docker run -it centos &#x2F;bin&#x2F;bash 后面的 bin&#x2F;bash的作用</h3><hr><p>首先，docker run -it centos 的意思是，为centos这个镜像创建一个容器， -i和-t这两个参数的作用是，为该docker创建一个伪终端，这样就可以进入到容器的交互模式？（也就是直接进入到容器里面）后面的&#x2F;bin&#x2F;bash的作用是表示载入容器后运行bash ,docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这样当你使用docker ps 查看启动的容器时，就会发现你刚刚创建的那个容器并不在已启动的容器队列中。这个&#x2F;bin&#x2F;bash就表示启动容器后启动bash。</p><h3 id="2-交互式容器与守护式容器的区别"><a href="#2-交互式容器与守护式容器的区别" class="headerlink" title="2.交互式容器与守护式容器的区别"></a>2.交互式容器与守护式容器的区别</h3><hr><ul><li>什么是交互式容器？</li></ul><p>容器运行后直接进入到容器内部，退出容器内部后，容器直接关闭</p><ul><li>如何启动交互式容器？</li></ul><p>docker run -it –name 容器名 镜像名</p><ul><li>什么是守护式容器？</li></ul><p>是一个长期运行的容器，适合运行应用程序和服务</p><ul><li>如何启动守护式容器？</li></ul><p>docker run -d 容器名</p><p>-d: 以后台运行的方式运行容器，返回容器id，也就是启动守护式容器</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS模块--获取路径常用方法</title>
      <link href="/post/5b8577ff.html"/>
      <url>/post/5b8577ff.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="import-os"><a href="#import-os" class="headerlink" title="import os"></a>import os</h2><ol><li><p>用于获取当前所在目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.dirname(&quot;/mnt/hgfs/123.txt&quot;) # /mnt/hgfs</span><br></pre></td></tr></table></figure></li><li><p>用于获取文件名（包涵后缀）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.basename(&quot;/mnt/hgfs/123.txt&quot;) # 123.txt</span><br></pre></td></tr></table></figure></li><li><p>用于分离文件名和后缀名（效率优于split分离）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.splitext(123.txt)  # (&#x27;123&#x27;,&#x27;.txt&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>用于判断文件或目录是否存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.path.exists(&quot;/mnt/hgfs/123.txt&quot;)</span><br></pre></td></tr></table></figure></li><li><p>用于获取当前的绝对路径(如果有软链则会返回软链上的路径)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">os.path.abspath(__file__)  # 完整的当前路径  </span><br><span class="line">例如：/mnt/hgfs/123.txt</span><br><span class="line"></span><br><span class="line">os.path.abspath(&quot;123.txt&quot;)  # 当前路径的上一级目录 和 123.txt 拼接 </span><br><span class="line">例如：/mnt/123.txt</span><br><span class="line"></span><br><span class="line">源码解释：根据传入的参数编码不同，执行的方法不同</span><br></pre></td></tr></table></figure></li></ol><p>6.用于获取当前执行脚本的绝对路径（越过软链路径直接返回真实的完整路径）</p><pre><code>os.path.realpath(__file__)</code></pre><p>7.用于路径拼接</p><pre><code>os.path.join(&quot;/mnt/hgfs&quot;,&quot;123.txt&quot;) # /mnt/hgfs/123.txt</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy--二维数组转为一维数组</title>
      <link href="/post/8daec9d6.html"/>
      <url>/post/8daec9d6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用库函数</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">b = <span class="built_in">list</span>(chain.from_iterable(a))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 结果：[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h3 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h3><p>flatten：返回一个折叠成一维的数组。但是该函数只能适用于numpy对象，即array或者mat，普通的list列表是不行的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">b = a.flatten()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 结果：[1 2 3 4 9 8]</span></span><br></pre></td></tr></table></figure><p>如果用在list上则会报错，可以选择用列表表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[y <span class="keyword">for</span> x <span class="keyword">in</span> a <span class="keyword">for</span> y <span class="keyword">in</span> x]</span><br></pre></td></tr></table></figure><p>结果：[1,2,3,4,5,6]</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy--where条件筛选</title>
      <link href="/post/b194bbb8.html"/>
      <url>/post/b194bbb8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="当数组是一维数组时"><a href="#当数组是一维数组时" class="headerlink" title="当数组是一维数组时"></a>当数组是一维数组时</h3><p> 返回的值是一维的索引，所以只有一组索引数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">8</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># array([0, 1, 2, 3, 4, 5, 6, 7])</span></span><br><span class="line"> </span><br><span class="line">np.where(a&gt;<span class="number">4</span>)</span><br><span class="line"><span class="comment"># (array([5, 6, 7], dtype=int64),)</span></span><br></pre></td></tr></table></figure><h3 id="当数组是二维数组时"><a href="#当数组是二维数组时" class="headerlink" title="当数组是二维数组时"></a>当数组是二维数组时</h3><p>满足条件的数组值返回的是值的位置索引，因此会有两组索引数组来表示值的位置，返回的第一个array表示行坐标，第二个array表示纵坐标，两者一一对应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">b = np.arange(<span class="number">4</span>*<span class="number">5</span>).reshape(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line">       [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">       [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br><span class="line"> </span><br><span class="line">c = np.where(b&gt;<span class="number">14</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># (array([3, 3, 3, 3, 3], dtype=int64), array([0, 1, 2, 3, 4], dtype=int64))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c)) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 二维数组返回的是两个元组</span></span><br></pre></td></tr></table></figure><h5 id="取值："><a href="#取值：" class="headerlink" title="取值："></a>取值：</h5><p>通过 a[c] 便可以取到&gt;0的值：[4 5 6 7 8 9]</p><h3 id="根据判断的条件修改值"><a href="#根据判断的条件修改值" class="headerlink" title="根据判断的条件修改值"></a>根据判断的条件修改值</h3><p>1、numpy.where的返回结果</p><p>numpy.where调用方式为numpy.where(condition,1,2)</p><p>满足条件的位置上返回结果1，不满足的位置上返回结果2</p><p> 例如：通过where()函数将a数组中负值设为0，正值不变<br>(图像)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#[[1 2 3]</span></span><br><span class="line"><span class="comment"># [4 5 6]</span></span><br><span class="line"><span class="comment"># [7 8 9]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = np.where(a&gt;<span class="number">0</span>,a,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment">#[[0 0 0]</span></span><br><span class="line"><span class="comment"># [4 5 6]</span></span><br><span class="line"><span class="comment"># [7 8 9]]</span></span><br></pre></td></tr></table></figure><h3 id="当筛选数据为布尔值时"><a href="#当筛选数据为布尔值时" class="headerlink" title="当筛选数据为布尔值时"></a>当筛选数据为布尔值时</h3><p>第一个值从[1,9]中选，因为条件为True，所以是选1。第二个值从[2,8]中选，因为条件为False，所以选8，后面以此类推。类似的问题可以再看个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">np.where([[<span class="literal">True</span>,<span class="literal">False</span>], [<span class="literal">True</span>,<span class="literal">True</span>]],    <span class="comment"># 官网上的例子</span></span><br><span class="line"> [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]],</span><br><span class="line">             [[<span class="number">9</span>,<span class="number">8</span>], [<span class="number">7</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="comment"># 结果：array([[1, 8],[3, 4]])</span></span><br></pre></td></tr></table></figure><h3 id="当筛选条件为多条件时"><a href="#当筛选条件为多条件时" class="headerlink" title="当筛选条件为多条件时"></a>当筛选条件为多条件时</h3><p>多条件时condition，&amp;表示与，|表示或。如a &#x3D; np.where((0&lt;a)&amp;(a&lt;5), x, y)，当0&lt;a与a&lt;5满足时，返回x的值，当0&lt;a与a&lt;5不满足时，返回y的值。注意x, y必须和a保持相同尺寸。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyMySQL连接数据库（增删改查）</title>
      <link href="/post/44b6993a.html"/>
      <url>/post/44b6993a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>连接数据库</li><li>生成游标对象</li><li>执行SQL语句</li><li>关闭游标</li><li>关闭连接</li></ol><p>PyMySQL ：</p><p>是封装了MySQL驱动的Python驱动，一个能使Python连接到MySQL的库</p><p>环境要求：Python version &gt;&#x3D; 3.4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">#连接数据库</span><br><span class="line">conn=pymysql.connect(host = &#x27;127.0.0.1&#x27; # 连接名称，默认127.0.0.1</span><br><span class="line">,user = &#x27;root&#x27; # 用户名</span><br><span class="line">,passwd=&#x27;password&#x27; # 密码</span><br><span class="line">,port= 3306 # 端口，默认为3306</span><br><span class="line">,db=&#x27;test&#x27; # 数据库名称</span><br><span class="line">,charset=&#x27;utf8&#x27; # 字符编码</span><br><span class="line">)</span><br><span class="line">cur = conn.cursor() # 生成游标对象</span><br><span class="line">sql=&quot;select * from `student` &quot; # SQL语句</span><br><span class="line">cur.execute(sql) # 执行SQL语句</span><br><span class="line">data = cur.fetchall() # 通过fetchall方法获得数据</span><br><span class="line">for i in data[:2]: # 打印输出前2条数据</span><br><span class="line">print (i)</span><br><span class="line">cur.close() # 关闭游标</span><br><span class="line">conn.close() # 关闭连接</span><br></pre></td></tr></table></figure><p>上述代码中，实现了通过Python连接MySQL查询所有的数据，并输出前2条数据的功能。执行结果如下：</p><p>(‘a’, ‘赵大’, ‘16’)<br>(‘b’, ‘钱二’, ‘16’)</p><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">#连接数据库</span><br><span class="line">conn=pymysql.connect(host = &#x27;127.0.0.1&#x27; # 连接名称，默认127.0.0.1</span><br><span class="line">,user = &#x27;root&#x27; # 用户名</span><br><span class="line">,passwd=&#x27;password&#x27; # 密码</span><br><span class="line">,port= 3306 # 端口，默认为3306</span><br><span class="line">,db=&#x27;test&#x27; # 数据库名称</span><br><span class="line">,charset=&#x27;utf8&#x27; # 字符编码</span><br><span class="line">)</span><br><span class="line">cur = conn.cursor() # 生成游标对象</span><br><span class="line">#=============插入语句===============================</span><br><span class="line">sql= &quot;INSERT INTO student VALUES (&#x27;p&#x27;,&#x27;魏六&#x27;,&#x27;17&#x27;)&quot;</span><br><span class="line">#===================================================</span><br><span class="line">try:</span><br><span class="line">    cur.execute(sql1) # 执行插入的sql语句</span><br><span class="line">    conn.commit() # 提交到数据库执行</span><br><span class="line">except:</span><br><span class="line">    coon.rollback()# 如果发生错误则回滚</span><br><span class="line">    conn.close() # 关闭数据库连接</span><br></pre></td></tr></table></figure><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">#连接数据库</span><br><span class="line">conn=pymysql.connect(host = &#x27;127.0.0.1&#x27; # 连接名称，默认127.0.0.1</span><br><span class="line">    ,user = &#x27;root&#x27; # 用户名</span><br><span class="line">    ,passwd=&#x27;password&#x27; # 密码</span><br><span class="line">    ,port= 3306 # 端口，默认为3306</span><br><span class="line">    ,db=&#x27;test&#x27; # 数据库名称</span><br><span class="line">    ,charset=&#x27;utf8&#x27; # 字符编码</span><br><span class="line">)</span><br><span class="line">cur = conn.cursor() # 生成游标对象</span><br><span class="line">#=============删除语句===============================</span><br><span class="line">sql = &quot;DELETE FROM student WHERE `学号` = &quot;a&quot;</span><br><span class="line">#===================================================</span><br><span class="line">try:</span><br><span class="line">    cur.execute(sql) # 执行插入的sql语句</span><br><span class="line">    conn.commit() # 提交到数据库执行</span><br><span class="line">except:</span><br><span class="line">    coon.rollback()# 如果发生错误则回滚</span><br><span class="line">    conn.close() # 关闭数据库连接</span><br></pre></td></tr></table></figure><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">#连接数据库</span><br><span class="line">conn=pymysql.connect(host = &#x27;127.0.0.1&#x27; # 连接名称，默认127.0.0.1</span><br><span class="line">,user = &#x27;root&#x27; # 用户名</span><br><span class="line">,passwd=&#x27;password&#x27; # 密码</span><br><span class="line">,port= 3306 # 端口，默认为3306</span><br><span class="line">,db=&#x27;test&#x27; # 数据库名称</span><br><span class="line">,charset=&#x27;utf8&#x27; # 字符编码</span><br><span class="line">)</span><br><span class="line">cur = conn.cursor() # 生成游标对象</span><br><span class="line">#=============删除语句===============================</span><br><span class="line">sql =&quot;UPDATE student SET `学员姓名` = &#x27;欧阳&#x27; WHERE `学号` = &#x27;b&#x27; &quot;</span><br><span class="line">#===================================================</span><br><span class="line">try:</span><br><span class="line">    cur.execute(sql) # 执行插入的sql语句</span><br><span class="line">    conn.commit() # 提交到数据库执行</span><br><span class="line">except:</span><br><span class="line">    coon.rollback()# 如果发生错误则回滚</span><br><span class="line">    conn.close() # 关闭数据库连接</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关于数据库信息改入配置文件如何连接"><a href="#关于数据库信息改入配置文件如何连接" class="headerlink" title="关于数据库信息改入配置文件如何连接"></a>关于数据库信息改入配置文件如何连接</h2><p>CONFIG.py：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql_conn = &#123;</span><br><span class="line">    &quot;host&quot;:&quot;192.168.30.50&quot;,</span><br><span class="line">    &quot;port&quot;:3306,</span><br><span class="line">    &quot;database&quot;:&quot;aviation_ezhou&quot;,</span><br><span class="line">    &quot;user&quot;:&quot;root&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;Ecoweather@2022&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>连接.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> CONFIG <span class="keyword">import</span> mysql_conn</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(**mysql_conn)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后执行sql语句</span></span><br><span class="line">sql1 = <span class="string">f&#x27;SELECT distinct datetime,tem,prs_hwc,rhu from <span class="subst">&#123;uparData_tablename+yearMon&#125;</span> where station_name =&quot;<span class="subst">&#123;station_name&#125;</span>&quot; and datetime = &quot;<span class="subst">&#123;qqsj&#125;</span>&quot; ORDER BY prs_hwc;&#x27;</span></span><br><span class="line">cursor.execute(sql1)</span><br><span class="line">data = cursor.fetchall()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-PyMySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql--去重</title>
      <link href="/post/a05661b4.html"/>
      <url>/post/a05661b4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> table_name</span><br></pre></td></tr></table></figure><h4 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;wanghan...&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>:<span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">URL = <span class="string">&#x27;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;database&#125;?charset=utf8&#x27;</span>.<span class="built_in">format</span>(**config)</span><br><span class="line">engine = create_engine(URL)</span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> <span class="string">&#x27;select distinct name from Persion&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="提交并关闭链接"><a href="#提交并关闭链接" class="headerlink" title="提交并关闭链接"></a>提交并关闭链接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = session.execute(sql)</span><br><span class="line"><span class="built_in">print</span>(data.fetchall())</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-基础操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib--绘图中文乱码问题</title>
      <link href="/post/6fbde2dc.html"/>
      <url>/post/6fbde2dc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</p><p>解决方法为只要在文件开头加入 # – coding: UTF-8 – 或者 #coding&#x3D;utf-8 就行了<br>这是解决print的中文乱码的问题,并且还是低版本python,实测python的matplotlib画图时,如果有中文会出现乱码问题, 如图：<br><img src="https://s4.ax1x.com/2022/02/15/Hg3Dvq.png" alt="Hg3Dvq.png"></p><p>最常见的解决方法：</p><pre><code>plt.rcParams[&#39;font.sans-serif&#39;]=[&#39;SimHei&#39;] # 解决中文乱码plt.rcParams[&#39;axes.unicode_minus&#39;]=False # 用来正常显示负号</code></pre><p>效果：<br><img src="https://s4.ax1x.com/2022/02/15/Hg3vRA.png" alt="Hg3vRA.png"></p><h2 id="如果这种方法没起作用，那往下看"><a href="#如果这种方法没起作用，那往下看" class="headerlink" title="如果这种方法没起作用，那往下看"></a>如果这种方法没起作用，那往下看</h2><h2 id="如何使用-matplotlib-全局字体的自定义路径设置自定义字体？"><a href="#如何使用-matplotlib-全局字体的自定义路径设置自定义字体？" class="headerlink" title="如何使用 matplotlib 全局字体的自定义路径设置自定义字体？"></a>如何使用 matplotlib 全局字体的自定义路径设置自定义字体？</h2><p>我的应用程序中有一个自定义字体</p><pre><code>base_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))font_dirs = os.path.join(base_dir, &quot;font/SourceHanSansSC-Bold.otf&quot;)# /mng/hgfs/upar_tlogp_draw/font/SourceHanSansSC-Bold.otf</code></pre><p>为了将global字体设置为matplotlib，文档是这样说的：</p><pre><code>plt.rcParams[&#39;font.sans-serif&#39;]=[&#39;xxx font&#39;]</code></pre><p>但它只在字体已经在系统字体路径中时才有效，并且我必须在我的应用程序路径”&#x2F;mng&#x2F;hgfs&#x2F;upar_tlogp_draw&#x2F;font&#x2F;SourceHanSansSC-Bold.otf”中使用我的自定义字体。</p><p>我知道有这样一种方法：</p><pre><code>import matplotlib.font_manager as font_managerbase_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))zhfont1 = font_manager.FontProperties(fname=os.path.join(base_dir, &quot;font/SourceHanSansSC-Bold.otf&quot;))ax1.set_title(&#39;中文&#39;,fontproperties=zhfont1)</code></pre><p>但这不是我想要的，我不想一直设置”字体属性”，因为有很多代码需要更改</p><h2 id="亲测-重点！！！-："><a href="#亲测-重点！！！-：" class="headerlink" title="亲测(重点！！！)："></a><font color="red">亲测(重点！！！)</font>：</h2><h4 id="我最近遇到了这个问题，发现这是处理它的最简单方法。"><a href="#我最近遇到了这个问题，发现这是处理它的最简单方法。" class="headerlink" title="我最近遇到了这个问题，发现这是处理它的最简单方法。"></a>我最近遇到了这个问题，发现这是处理它的最简单方法。</h4><h4 id="添加字体是重要的部分，否则，字体将无法被检测到："><a href="#添加字体是重要的部分，否则，字体将无法被检测到：" class="headerlink" title="添加字体是重要的部分，否则，字体将无法被检测到："></a>添加字体是重要的部分，否则，字体将无法被检测到：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from matplotlib import font_manager</span><br><span class="line"># 全局变量</span><br><span class="line">base_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line">font_dirs = os.path.join(base_dir, &quot;font/SourceHanSansSC-Bold.otf&quot;)</span><br><span class="line"></span><br><span class="line"># 写入绘图程序中</span><br><span class="line">font_manager.fontManager.addfont(font_dirs)</span><br><span class="line">prop = font_manager.FontProperties(fname=font_dirs)</span><br><span class="line">plt.rcParams[&#x27;font.family&#x27;] = [&#x27;sans-serif&#x27;]  # 用来正常显示中文标签</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;] = prop.get_name()  # 用来正常显示中文标签</span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;] = False  # 用来正常显示负号</span><br></pre></td></tr></table></figure><p>后面我又在stackoverflow找到了另一种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.font_manager as font_manager</span><br><span class="line">font_dirs = [&#x27;/my/custom/font/dir&#x27;, ]</span><br><span class="line">font_files = font_manager.findSystemFonts(fontpaths=font_dirs)</span><br><span class="line">font_list = font_manager.createFontList(font_files)</span><br><span class="line">font_manager.fontManager.ttflist.extend(font_list)</span><br><span class="line">mpl.rcParams[&#x27;font.family&#x27;] = &#x27;My Custom Font&#x27;</span><br><span class="line"></span><br><span class="line"># kwarg 也可以是一个字符串，以防您只有一个目录要从中导入。fontpaths</span><br></pre></td></tr></table></figure><p>但是上面的方法，在对于比较新的matplotlib模块（例如版本&gt;&#x3D;3.2）时，createFontList已弃用</p><p>However，您可以使用ttf文件路径和自定义名称创建一个字体条目，<br>然后将其添加到fontManager.ttflist，并将matplotlib.rcParams[‘font.familt’]分配给该名称。<br>现在，您可以开始制作没有”字体属性”等的情节。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib as mpl</span><br><span class="line">import matplotlib.font_manager as fm</span><br><span class="line"></span><br><span class="line">fe = fm.FontEntry(</span><br><span class="line">    fname=&#x27;your custom ttf file path&#x27;,</span><br><span class="line">    name=&#x27;your custom ttf font name&#x27;)</span><br><span class="line">fm.fontManager.ttflist.insert(0, fe) # or append is fine</span><br><span class="line">mpl.rcParams[&#x27;font.family&#x27;] = fe.name # = &#x27;your custom ttf font name&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy--最大最小值</title>
      <link href="/post/69b428ee.html"/>
      <url>/post/69b428ee.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>最大值：np.max()</p><p>最小值：np.min()</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python--[：-1]和[：：-1]</title>
      <link href="/post/87f8902d.html"/>
      <url>/post/87f8902d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="python-中的-1-和-1"><a href="#python-中的-1-和-1" class="headerlink" title="python 中的[:-1]和[::-1]"></a>python 中的[:-1]和[::-1]</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>python里面的索引的特征是包含起点，但是不包含结束的索引值，-1表示最后一个元素，但是-1是结尾的index，所以含义就是取原始数据的除最后一个元素之外的值</p><h4 id="1-顺序相反操作"><a href="#1-顺序相反操作" class="headerlink" title="[::-1] 顺序相反操作"></a><font color="red">[::-1] 顺序相反操作</font></h4><h4 id="1-读取倒数第一个元素"><a href="#1-读取倒数第一个元素" class="headerlink" title="[-1] 读取倒数第一个元素"></a><font color="red">[-1] 读取倒数第一个元素</font></h4><h4 id="1、案例解释"><a href="#1、案例解释" class="headerlink" title="1、案例解释"></a>1、案例解释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a=&#x27;python&#x27;</span><br><span class="line"> </span><br><span class="line">b=a[::-1]</span><br><span class="line"> </span><br><span class="line">print(b) #nohtyp</span><br><span class="line"> </span><br><span class="line">c=a[::-2]</span><br><span class="line"> </span><br><span class="line">print(c) #nhy</span><br><span class="line"> </span><br><span class="line">#从后往前数的话，最后一个位置为-1</span><br><span class="line">d=a[:-1]  #从位置0到位置-1之前的数</span><br><span class="line"> </span><br><span class="line">print(d)  #pytho</span><br><span class="line"> </span><br><span class="line">e=a[:-2]  #从位置0到位置-2之前的数</span><br><span class="line"> </span><br><span class="line">print(e)  #pyth</span><br></pre></td></tr></table></figure><h4 id="2、用法说明"><a href="#2、用法说明" class="headerlink" title="2、用法说明"></a>2、用法说明</h4><p>b &#x3D; a[i:j]<br>表示复制a[i]到a[j-1]，以生成新的list对象</p><p>案例：<br>a &#x3D; [0,1,2,3,4,5,6,7,8,9]<br>b &#x3D; a[1:3]   # [1,2]</p><p>注意</p><p>当i缺省时，默认为0，即 a[:3]相当于 a[0:3]</p><p>当j缺省时，默认为len(alist), 即a[1:]相当于a[1:10]</p><p>当i，j都缺省时，a[:] 就相当于完整复制一份a</p><p>b &#x3D; a[i:j:s]<br>表示：i,j与上面的一样，但s表示步进，缺省为1.<br>所以 a[i:j:1] 相当于 a[i:j]</p><p>注意</p><p>当s&lt;0时，i缺省时，默认为-1. j缺省时，默认为-len(a)-1</p><p>所以a[::-1]相当于 a[-1:-len(a)-1:-1]，也就是从最后一个元素到第一个元素复制一遍，即倒序。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib--subplots()函数</title>
      <link href="/post/d83104c1.html"/>
      <url>/post/d83104c1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>在matplotlib一般使用plt.figure来设置窗口尺寸。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(a, b)) </span><br></pre></td></tr></table></figure><p>其中figsize用来设置图形的大小，a为图形的宽， b为图形的高，单位为英寸。</p><p>但是如果使用plt.subplots，就不一样了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize = (a, b))</span><br></pre></td></tr></table></figure><p>fig代表绘图窗口(Figure)；ax代表这个绘图窗口上的坐标系(axis)，一般会继续对ax进行操作。</p><blockquote><p>fig,ax &#x3D; plt.subplots()等价于：</p><ol><li>fig &#x3D; plt.figure()</li><li>ax &#x3D; fig.add_subplot(1,1,1)</li></ol></blockquote><h4 id="实例1："><a href="#实例1：" class="headerlink" title="实例1："></a>实例1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots(1, 3)</span><br></pre></td></tr></table></figure><p>第一个1参数是子图的行数，第二个3参数是子图的列数，如果想要设置子图的宽度和高度可以在函数内加入figsize值。</p><h4 id="实例2："><a href="#实例2：" class="headerlink" title="实例2："></a>实例2：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 做1*1个子图，等价于&quot;fig, ax = plt.subplot()&quot;，等价于&quot;fig, ax = plt.subplots()&quot;</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">ax2 = ax.twinx()  <span class="comment"># 让2个子图的x轴一样，同时创建副坐标轴。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作y=sin(x)函数</span></span><br><span class="line">x1 = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">100</span>)  <span class="comment"># 表示在区间[0, 2π]之间取100个点作为横坐标</span></span><br><span class="line">y1 = np.sin(x1)</span><br><span class="line">ax.plot(x1, y1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作y=cos(x)函数</span></span><br><span class="line">x2 = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">100</span>)</span><br><span class="line">y2 = np.cos(x2)</span><br><span class="line">ax2.plot(x2, y2)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例3："><a href="#实例3：" class="headerlink" title="实例3："></a>实例3：</h4><p>fig, ax &#x3D; plt.subplots(1,3),其中参数1和3分别代表子图的行数和列数，一共有 1x3 个子图像。函数返回一个figure图像和子图ax的array列表。</p><p>如果想要设置子图的宽度和高度可以在函数内加入figsize值</p><p>fig, ax &#x3D; plt.subplots(1,3,figsize&#x3D;(15,7))，这样就会有1行3个15x7大小的子图。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy--ndim、shape、dtype、astype、size用法(以及与 type 的区别)</title>
      <link href="/post/c8c8df19.html"/>
      <url>/post/c8c8df19.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data1= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">data2 = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">data3 = [[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]],[[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]]</span><br><span class="line">arr1 = np.array(data1)</span><br><span class="line">arr2 = np.array(data2)</span><br><span class="line">arr3 = np.array(data3)</span><br></pre></td></tr></table></figure><h3 id="1-ndim-返回的是数组的维度，返回的只有一个数，该数即表示数组的维度。"><a href="#1-ndim-返回的是数组的维度，返回的只有一个数，该数即表示数组的维度。" class="headerlink" title="1. ndim 返回的是数组的维度，返回的只有一个数，该数即表示数组的维度。"></a>1. ndim 返回的是数组的维度，返回的只有一个数，该数即表示数组的维度。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(arr1.ndim,arr2.ndim,arr3.ndim) </span><br><span class="line"># 1, 2, 3 （表示数组的维度）</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="2-shape：表示各位维度大小的元组。返回的是一个元组"><a href="#2-shape：表示各位维度大小的元组。返回的是一个元组" class="headerlink" title="2. shape：表示各位维度大小的元组。返回的是一个元组"></a>2. shape：表示各位维度大小的元组。返回的是一个元组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(arr1.shape,arr2.shape,arr3.shape)</span><br><span class="line"># (5,) (2, 3) (2, 2, 3) （表示数组维度的元组）</span><br></pre></td></tr></table></figure><p>对于一维数组：有疑问的是为什么不是（1，6），因为arr1.ndim维度为1，元组内只返回一个数。</p><hr><hr><p><br></br><br>前言：</p><blockquote><p>（1）type()是python内置的函数。type()  返回数据结构类型（list、dict、numpy.ndarray 等）<br><br>（2）dtype 返回数据元素的数据类型（int、float等）<br><br>（3）astype() 改变np.array中所有数据元素的数据类型。<br><br>————————————<br>备注：<br><br>1）由于 list、dict 等可以包含不同的数据类型，因此没有dtype属性<br><br>2）np.array 中要求所有元素属于同一数据类型，因此有dtype属性<br><br>备注：能用dtype() 才能用 astype()</p></blockquote><br><br><br><br><br><h3 id="3-dtype：一个用于说明数组数据类型的对象。返回的是该数组的数据类型。由于图中的数据都为整形，所以返回的都是int64。如果数组中有数据带有小数点，那么就会返回float64。"><a href="#3-dtype：一个用于说明数组数据类型的对象。返回的是该数组的数据类型。由于图中的数据都为整形，所以返回的都是int64。如果数组中有数据带有小数点，那么就会返回float64。" class="headerlink" title="3. dtype：一个用于说明数组数据类型的对象。返回的是该数组的数据类型。由于图中的数据都为整形，所以返回的都是int64。如果数组中有数据带有小数点，那么就会返回float64。"></a>3. dtype：一个用于说明数组数据类型的对象。返回的是该数组的数据类型。由于图中的数据都为整形，所以返回的都是int64。如果数组中有数据带有小数点，那么就会返回float64。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(arr1.dtype,arr2.dtype,arr3.dtype)</span><br><span class="line"># int64 int64 int64</span><br></pre></td></tr></table></figure><p><br><br><br><br></p><h3 id="4-astype：转换numpy数组的数据类型"><a href="#4-astype：转换numpy数组的数据类型" class="headerlink" title="4. astype：转换numpy数组的数据类型"></a>4. astype：转换numpy数组的数据类型</h3><p>int32 –&gt; float64        完全ojbk</p><p>float64 –&gt; int32        会将小数部分截断</p><p>string_ –&gt; float64       如果字符串数组表示的全是数字，也可以用astype转化为数值类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ar1 = np.arange(10,dtype=float)</span><br><span class="line">ar2 = ar1.astype(np.int)</span><br><span class="line">print(ar1,ar1.dtype)</span><br><span class="line"># [0. 1. 2. 3. 4. 5. 6. 7. 8. 9.] float64</span><br><span class="line">print(ar2,ar2.dtype)</span><br><span class="line"># [0 1 2 3 4 5 6 7 8 9] int64</span><br></pre></td></tr></table></figure><p>注意其中的float，它是python内置的类型，但是Numpy可以使用。Numpy会将Python类型映射到等价的dtype上。</p><p><br><br><br><br></p><h3 id="5-size"><a href="#5-size" class="headerlink" title="5. size"></a>5. size</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>size()函数主要是用来统计矩阵元素个数，或矩阵某一维上的元素个数的函数。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>numpy.size(a, axis&#x3D;None)</p><p>a：输入的矩阵</p><p>axis：int型的可选参数，指定返回哪一维的元素个数。当没有指定时，返回整个矩阵的元素个数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = np.array([[1,2,3],[4,5,6]])</span><br><span class="line">&gt;&gt;&gt; np.size(a)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; np.size(a,1)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; np.size(a,0)</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>axis的值没有设定，返回矩阵的元素个数</p><p>axis &#x3D; 0，返回该二维矩阵的行数</p><p>axis &#x3D; 1，返回该二维矩阵的列数</p><p>注：第二个参数axis从0开始，不是从1开始</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib--dates.Dateformatter(处理日期格式的x轴)</title>
      <link href="/post/76ddc0bd.html"/>
      <url>/post/76ddc0bd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>Matplotlib是Python中令人惊叹的可视化库，用于数组的二维图。 Matplotlib是一个基于NumPy数组的多平台数据可视化库，旨在与更广泛的SciPy堆栈配合使用。</p><html><h4><center>Matplotlib.dates.DateFormatter</center></h4><hr></html><p>这个matplotlib.dates.DateFormatterclass用于使用strftime格式的字符串格式化刻度(自纪元以来的秒数)。它的基类是matplotlib.ticker.Formatter。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法： class matplotlib.dates.DateFormatter(fmt, tz=None)</span><br></pre></td></tr></table></figure><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><ol><li>fmt:它接受strftime格式字符串进行格式化，并且是必需的参数。</li><li>tz:它保存有关时区的信息。如果设置为none，则在格式化日期字符串时将忽略时区信息。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 云体厚度时间变化图</span><br><span class="line">def Cloud_Formation_Thickness(inpath,outpath):</span><br><span class="line"></span><br><span class="line">    Ymd = inpath.split(&quot;/&quot;)[-1].split(&quot;_&quot;)[0]</span><br><span class="line">    Ymd = datetime.strptime(Ymd, &quot;%Y%m%d&quot;)</span><br><span class="line">    Ymd = Ymd.strftime(&quot;%Y-%m-%d &quot;)</span><br><span class="line"></span><br><span class="line">    data = pd.read_csv(inpath, encoding=&#x27;GBK&#x27;)</span><br><span class="line"></span><br><span class="line">    df1 = data[[&quot;时间&quot;, &quot;云厚1(m)&quot;]]</span><br><span class="line"></span><br><span class="line">    date_time = (Ymd + df1[&quot;时间&quot;]).astype(&#x27;datetime64&#x27;)</span><br><span class="line">    print(date_time)</span><br><span class="line"></span><br><span class="line">    plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]</span><br><span class="line">    plt.rcParams[&#x27;axes.unicode_minus&#x27;] = False</span><br><span class="line">    plt.figure(1, figsize=(8, 6), dpi=100)</span><br><span class="line"></span><br><span class="line">    plt.subplot(111)</span><br><span class="line">    plt.plot(date_time, df1[&quot;云厚1(m)&quot;], color=&quot;red&quot;, linewidth=1, alpha=0.8, label=&quot;云体厚度&quot;)</span><br><span class="line">    plt.xlabel(&quot;时间（min）&quot;, size=15)</span><br><span class="line">    # 云体厚度单位需要改</span><br><span class="line">    plt.ylabel(&quot;米（m）&quot;, size=15)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 设置x轴 并将x轴上的日期格式化                   &lt;&lt;&lt;&lt;&lt;-------------------------</span><br><span class="line">    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(&#x27;%y/%m/%d %H:%M&#x27;))  #具体的格式可以变化</span><br><span class="line">    plt.gca().xaxis.set_major_locator(mdates.HourLocator())</span><br><span class="line">    plt.gcf().autofmt_xdate()</span><br><span class="line">    plt.legend(loc=&quot;best&quot;, fontsize=15)</span><br><span class="line">    plt.title(&#x27;云体厚度时间变化图&#x27;, size=15)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line"></span><br><span class="line">    begin = date_time.tolist()[0]</span><br><span class="line">    end = date_time.tolist()[-1]</span><br><span class="line">    outpathplot = &quot;%s/%s-激光云高仪云体厚度时间变化图.png&quot; % (outpath, &#x27;%s-%s&#x27; % (int(begin.strftime(&#x27;%Y%m%d%H%M%S&#x27;)), int(end.strftime(&#x27;%Y%m%d%H%M%S&#x27;))))</span><br><span class="line">    plt.savefig(outpathplot)</span><br><span class="line"></span><br><span class="line">    return outpathplot</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://s4.ax1x.com/2021/12/30/T2hOjP.png" alt="T2hOjP.png"></p><h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">import matplotlib.dates as mdates</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"># 生成横纵坐标信息</span><br><span class="line">dates = [&#x27;2016-12-20 09:52:54&#x27;, &#x27;2016-12-20 15:52:54&#x27;, &#x27;2016-12-20 21:52:54&#x27;, &#x27;2016-12-21 03:52:54&#x27;]</span><br><span class="line">xs = [datetime.strptime(m,&#x27;%Y-%m-%d %H:%M:%S&#x27;).date() for m in dates]</span><br><span class="line">ys = range(len(xs))</span><br><span class="line">print(xs)</span><br><span class="line">print(ys)</span><br><span class="line"># 配置横坐标</span><br><span class="line">plt.gca().xaxis.set_major_formatter(mdates.DateFormatter(&#x27;%Y-%m-%d&#x27;))</span><br><span class="line">plt.gca().xaxis.set_major_locator(mdates.DayLocator())</span><br><span class="line"># Plot</span><br><span class="line">plt.plot(xs, ys)</span><br><span class="line">plt.gcf().autofmt_xdate()  # 自动旋转日期标记</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>如图：<br><img src="https://s4.ax1x.com/2021/12/30/T24j2R.png" alt="T24j2R.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib--xticks函数(设置X轴方法--刻度、标签)</title>
      <link href="/post/55dbc96d.html"/>
      <url>/post/55dbc96d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="xticks-函数原型："><a href="#xticks-函数原型：" class="headerlink" title="xticks()函数原型："></a>xticks()函数原型：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xticks(ticks, [labels], **kwargs)</span><br></pre></td></tr></table></figure><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><p>ticks：数组类型，用于设置X轴刻度间隔</p><p>[labels]：数组类型，用于设置每个间隔的显示标签, 可不添加该参数，不赋值，在这些位置添加的数值即为ticks数组中的数</p><p>**kwargs：用于设置标签字体倾斜度和颜色等外观属性。（注：python里的双星号代表这个位置接收任意多个关键字参数.</p><p><br></br><br>例如下图，X轴间隔2显示一个刻度，由ticks参数设置<br>X轴上的数字2、4、6等就称为标签，具体显示内容由labels参数决定<br><img src="https://s4.ax1x.com/2021/12/29/Tg3zEd.png" alt="Tg3zEd.png"></p><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><h6 id="1-先看不使用xticks函数的效果"><a href="#1-先看不使用xticks函数的效果" class="headerlink" title="1. 先看不使用xticks函数的效果"></a>1. 先看不使用xticks函数的效果</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">x = range(1,13,1)</span><br><span class="line">y = range(1,13,1)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2021/12/29/Tg3zEd.png" alt="Tg3zEd.png"></p><p>此时的x轴和y轴都是只显示偶数，其它的奇数未显示，这样在展示实验效果或放入文章中都会影响其可读性。<br>为了设置坐标轴的值，增加其可读性，有多种方法。这里介绍的是matplotlib的函数xticks()和yticks()。</p><p>使用xticks函数后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">x = range(1,13,1)</span><br><span class="line">y = range(1,13,1)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.xticks(x, x,color=&#x27;blue&#x27;,rotation=60)  #参数x空值X轴的间隔，第二个参数控制每个间隔显示的文本，后面两个参数控制标签的颜色和旋转角度</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2021/12/29/Tg88rF.png" alt="Tg88rF.png"></p><p>xticks()函数中，ticks参数为数组x，即1到12所有的整数， 即画出的图像会在这12个位置画出ticks，即上图中的刻度线。<br><br></br></p><h6 id="2-当赋予labels的值为空时，则在locs决定的位置上虽然会画出ticks，但不会显示任何值。如下："><a href="#2-当赋予labels的值为空时，则在locs决定的位置上虽然会画出ticks，但不会显示任何值。如下：" class="headerlink" title="2. 当赋予labels的值为空时，则在locs决定的位置上虽然会画出ticks，但不会显示任何值。如下："></a>2. 当赋予labels的值为空时，则在locs决定的位置上虽然会画出ticks，但不会显示任何值。如下：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">x = range(1,13,1)</span><br><span class="line">y = range(1,13,1)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.xticks(x,(),color=&#x27;blue&#x27;,rotation=60)  #参数x空值X轴的间隔，第二个参数控制每个间隔显示的文本，后面两个参数控制标签的颜色和旋转角度</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2021/12/29/TgGvtA.png" alt="TgGvtA.png"></p><p>该例子中，会明显看到ticks和labels的关系，ticks表示位置，labels决定这些位置上的标签，labels的默认值为和ticks相同。</p><h6 id="3-所以，对于labels参数，我们可以赋予其任意其它的值，如人名，月份等等。"><a href="#3-所以，对于labels参数，我们可以赋予其任意其它的值，如人名，月份等等。" class="headerlink" title="3. 所以，对于labels参数，我们可以赋予其任意其它的值，如人名，月份等等。"></a>3. 所以，对于labels参数，我们可以赋予其任意其它的值，如人名，月份等等。</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">x = range(1,13,1)</span><br><span class="line">y = range(1,13,1)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.xticks(x, (&#x27;Tom&#x27;,&#x27;Dick&#x27;,&#x27;Harry&#x27;,&#x27;Sally&#x27;,&#x27;Sue&#x27;,&#x27;Lily&#x27;,&#x27;Ava&#x27;,&#x27;Isla&#x27;,&#x27;Rose&#x27;,&#x27;Jack&#x27;,&#x27;Leo&#x27;,&#x27;Charlie&#x27;))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2021/12/29/TgJJhR.png" alt="TgJJhR.png"></p><p>还可以显示月份：</p><p><img src="https://s4.ax1x.com/2021/12/29/TgJwnO.png" alt="TgJwnO.png"></p><p>这里添加了 calendar 模块，用于显示月份的名称。calendar.month_name[1:13]即1月份到12月份每个月份的名称的数组。后面的参数color&#x3D;’blue’表示将标签颜色置为蓝色，rotation表示标签逆时针旋转60度。</p><p>通过上个示例，可看出第3个参数关键字参数**kwargs用于控制labels，具体可通过Text属性中的定义，添加到该参数中，关于其定义可参考在 <a href="https://matplotlib.org/stable/api/text_api.html">Text</a> 查询。</p><h6 id="4-另外，通过第1个参数ticks可以看出，xticks-函数还可以用来设置使x轴上ticks隐藏，即将空数组赋予它，则没有tick会显示在x轴上，此处参考：x轴数值隐藏。"><a href="#4-另外，通过第1个参数ticks可以看出，xticks-函数还可以用来设置使x轴上ticks隐藏，即将空数组赋予它，则没有tick会显示在x轴上，此处参考：x轴数值隐藏。" class="headerlink" title="4. 另外，通过第1个参数ticks可以看出，xticks()函数还可以用来设置使x轴上ticks隐藏，即将空数组赋予它，则没有tick会显示在x轴上，此处参考：x轴数值隐藏。"></a>4. 另外，通过第1个参数ticks可以看出，xticks()函数还可以用来设置使x轴上ticks隐藏，即将空数组赋予它，则没有tick会显示在x轴上，此处参考：x轴数值隐藏。</h6><p>可看出x轴上没有tick显示：</p><p><img src="https://s4.ax1x.com/2021/12/29/TgJoNj.png" alt="TgJoNj.png"></p><h6 id="5-同理，对于yticks-函数定义和xticks-函数定义完全相同。对于第一个例子，如果希望在y轴上的刻度线也显示1到12所有的整数，则将lens-1-13-1-赋予yticks-的locs参数即可："><a href="#5-同理，对于yticks-函数定义和xticks-函数定义完全相同。对于第一个例子，如果希望在y轴上的刻度线也显示1到12所有的整数，则将lens-1-13-1-赋予yticks-的locs参数即可：" class="headerlink" title="5. 同理，对于yticks()函数定义和xticks()函数定义完全相同。对于第一个例子，如果希望在y轴上的刻度线也显示1到12所有的整数，则将lens(1,13,1)赋予yticks()的locs参数即可："></a>5. 同理，对于yticks()函数定义和xticks()函数定义完全相同。对于第一个例子，如果希望在y轴上的刻度线也显示1到12所有的整数，则将lens(1,13,1)赋予yticks()的locs参数即可：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">13</span>,<span class="number">1</span>)</span><br><span class="line">y = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">13</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.xticks(x)</span><br><span class="line">plt.yticks(y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2021/12/30/T2DgN6.png" alt="T2DgN6.png"></p><p> 综上，可以设计一个x轴为月份，y为星期的图像：</p><p><img src="https://s4.ax1x.com/2021/12/30/T2ri5V.png" alt="T2ri5V.png"></p><p>对应一月份选择星期一，二月份选择星期二，往后依次类推，直至将12个月安排完。 </p><p>。 </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib--autofmt_xdate()函数(自动旋转X轴)</title>
      <link href="/post/701fddc7.html"/>
      <url>/post/701fddc7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib as plt</span><br><span class="line">plt.figure.autofmt_xdate() # （自动旋转）</span><br></pre></td></tr></table></figure><p>改变x轴坐标的显示方法可以斜着表示,不用平着挤一堆</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xfmt = mdates.DateFormatter(<span class="string">&#x27;%y/%m/%d %H:%M&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置x轴</span></span><br><span class="line">plt.gca().xaxis.set_major_formatter(xfmt)</span><br><span class="line"><span class="comment"># mdates.HourLocator: 让x轴以1小时间隔为刻度</span></span><br><span class="line">plt.gca().xaxis.set_major_locator(mdates.HourLocator())</span><br><span class="line"><span class="string">&quot;&quot;&quot; autofmt_xdate: 改变x轴坐标的显示方法可以斜着表示,不用平着挤一堆（自动旋转）!!!&quot;&quot;&quot;</span></span><br><span class="line">plt.gcf().autofmt_xdate()</span><br><span class="line"><span class="string">&quot;&quot;&quot; xticks：手动设置x轴旋转：倾斜度/尺寸 &quot;&quot;&quot;</span></span><br><span class="line">plt.xticks(rotation=<span class="number">10</span>, size=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h4 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h4><p>plt.gcf()、plt.gca()的区别?</p><p>igure就是一个图，axes表示图上的一个画图区域，一个图上可以有多个画图区域，意思就是说，一个图上可以有多个子图。</p><p>用函数gcf(）与gca()分别得到当前的figure与axes。（得到当前的图, 得到当前的轴).</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtualenv--虚拟环境搭建</title>
      <link href="/post/d8d085dd.html"/>
      <url>/post/d8d085dd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="一、虚拟环境"><a href="#一、虚拟环境" class="headerlink" title="一、虚拟环境"></a>一、虚拟环境</h4><p>虚拟环境可以搭建独立的Python运行环境，使得单个项目的运行环境与其他项目互不影响。</p><h4 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h4><p>1、安装虚拟环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br><span class="line">sudo pip install virtualenvwrapper</span><br></pre></td></tr></table></figure><p> 安装完虚拟环境后，如果提示找不到mkvirtualenv命令，须配置环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 1、在~（家目录）下创建目录用来存放虚拟环境</span><br><span class="line">mkdir .virtualenvs</span><br><span class="line"></span><br><span class="line"># 2、打开~/.bashrc文件，并添加如下：</span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"># 3、运行</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>2、通过命令创建虚拟环境</p><p>如果不指定Python版本，默认安装的是Python2的虚拟环境!!!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在python2中，创建虚拟环境</span><br><span class="line">mkvirtualenv 虚拟环境名称</span><br><span class="line">例 ：</span><br><span class="line">mkvirtualenv py_flask</span><br></pre></td></tr></table></figure><p>如果是在python3中，创建虚拟环境，需要指定版本!!!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p python3 虚拟环境名称</span><br><span class="line">例 ：</span><br><span class="line">mkvirtualenv -p python3 py3_flask</span><br></pre></td></tr></table></figure><p>提示：</p><p>所有的虚拟环境都位于&#x2F;home&#x2F;下的隐藏目录.virtualenvs下</p><p>创建虚拟环境需要联网</p><p>创建成功后, 会自动工作在这个虚拟环境上</p><p>工作在虚拟环境上, 提示符最前面会出现 “虚拟环境名称”</p><h4 id="四、如何使用虚拟环境"><a href="#四、如何使用虚拟环境" class="headerlink" title="四、如何使用虚拟环境"></a>四、如何使用虚拟环境</h4><p>1、查看所有的虚拟环境命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure><p>2、进入（使用）虚拟环境命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">workon 虚拟环境名称</span><br><span class="line"></span><br><span class="line">例 ：使用python2的虚拟环境</span><br><span class="line">workon py_flask</span><br><span class="line"></span><br><span class="line">例 ：使用python3的虚拟环境</span><br><span class="line">workon py3_flask</span><br></pre></td></tr></table></figure><p>3、退出虚拟环境的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>4、删除虚拟环境的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv 虚拟环境名称</span><br><span class="line"></span><br><span class="line">例 ：删除虚拟环境py3_flask</span><br><span class="line"></span><br><span class="line">先退出：deactivate</span><br><span class="line">再删除：rmvirtualenv py3_flask</span><br></pre></td></tr></table></figure><h4 id="五、如何在虚拟环境中安装工具包"><a href="#五、如何在虚拟环境中安装工具包" class="headerlink" title="五、如何在虚拟环境中安装工具包"></a>五、如何在虚拟环境中安装工具包</h4><p>工具包安装的位置，python3版本下：</p><p>~&#x2F;.virtualenvs&#x2F;py3_flask&#x2F;lib&#x2F;python3.5&#x2F;site-packages</p><p>python3版本下安装flask-0.10.1的包 :</p><p>进入对应的python3的虚拟环境中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名称</span><br><span class="line"></span><br><span class="line">例 : 安装flask-0.10.1的包</span><br><span class="line">pip install flask==0.10.1</span><br></pre></td></tr></table></figure><p>查看虚拟环境中安装的包 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip freeze</span><br><span class="line">pip list</span><br></pre></td></tr></table></figure><h4 id="六、如何在Pycharm中设置虚拟环境"><a href="#六、如何在Pycharm中设置虚拟环境" class="headerlink" title="六、如何在Pycharm中设置虚拟环境"></a>六、如何在Pycharm中设置虚拟环境</h4><p>1、获取虚拟环境的路径，可以通过在指定虚拟环境下，输入 which python 获得</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-virtualenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/post/5729df21.html"/>
      <url>/post/5729df21.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock,Thread</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                                      python多线程详解</span></span><br><span class="line"><span class="string">      什么是线程？</span></span><br><span class="line"><span class="string">      线程也叫轻量级进程，是操作系统能够进行运算调度的最小单位，它被包涵在进程之中，是进程中的实际运作单位。</span></span><br><span class="line"><span class="string">      线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所</span></span><br><span class="line"><span class="string">      拥有的全部资源。一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    为什么要使用多线程？</span></span><br><span class="line"><span class="string">    线程在程序中是独立的、并发的执行流。与分隔的进程相比，进程中线程之间的隔离程度要小，它们共享内存、文件句柄</span></span><br><span class="line"><span class="string">    和其他进程应有的状态。</span></span><br><span class="line"><span class="string">    因为线程的划分尺度小于进程，使得多线程程序的并发性高。进程在执行过程之中拥有独立的内存单元，而多个线程共享</span></span><br><span class="line"><span class="string">    内存，从而极大的提升了程序的运行效率。</span></span><br><span class="line"><span class="string">    线程比进程具有更高的性能，这是由于同一个进程中的线程都有共性，多个线程共享一个进程的虚拟空间。线程的共享环境</span></span><br><span class="line"><span class="string">    包括进程代码段、进程的共有数据等，利用这些共享的数据，线程之间很容易实现通信。</span></span><br><span class="line"><span class="string">    操作系统在创建进程时，必须为改进程分配独立的内存空间，并分配大量的相关资源，但创建线程则简单得多。因此，使用多线程</span></span><br><span class="line"><span class="string">    来实现并发比使用多进程的性能高得要多。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    总结起来，使用多线程编程具有如下几个优点：</span></span><br><span class="line"><span class="string">    进程之间不能共享内存，但线程之间共享内存非常容易。</span></span><br><span class="line"><span class="string">    操作系统在创建进程时，需要为该进程重新分配系统资源，但创建线程的代价则小得多。因此使用多线程来实现多任务并发执行比使用多进程的效率高</span></span><br><span class="line"><span class="string">    python语言内置了多线程功能支持，而不是单纯地作为底层操作系统的调度方式，从而简化了python的多线程编程。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    普通创建方式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># def run(n):</span></span><br><span class="line"><span class="comment">#     print(&#x27;task&#x27;,n)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print(&#x27;2s&#x27;)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print(&#x27;1s&#x27;)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print(&#x27;0s&#x27;)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     t1 = threading.Thread(target=run,args=(&#x27;t1&#x27;,))     # target是要执行的函数名（不是函数），args是函数对应的参数，以元组的形式存在</span></span><br><span class="line"><span class="comment">#     t2 = threading.Thread(target=run,args=(&#x27;t2&#x27;,))</span></span><br><span class="line"><span class="comment">#     t1.start()</span></span><br><span class="line"><span class="comment">#     t2.start()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    自定义线程：继承threading.Thread来定义线程类，其本质是重构Thread类中的run方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># class MyThread(threading.Thread):</span></span><br><span class="line"><span class="comment">#     def __init__(self,n):</span></span><br><span class="line"><span class="comment">#         super(MyThread,self).__init__()   #重构run函数必须写</span></span><br><span class="line"><span class="comment">#         self.n = n</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def run(self):</span></span><br><span class="line"><span class="comment">#         print(&#x27;task&#x27;,self.n)</span></span><br><span class="line"><span class="comment">#         time.sleep(1)</span></span><br><span class="line"><span class="comment">#         print(&#x27;2s&#x27;)</span></span><br><span class="line"><span class="comment">#         time.sleep(1)</span></span><br><span class="line"><span class="comment">#         print(&#x27;1s&#x27;)</span></span><br><span class="line"><span class="comment">#         time.sleep(1)</span></span><br><span class="line"><span class="comment">#         print(&#x27;0s&#x27;)</span></span><br><span class="line"><span class="comment">#         time.sleep(1)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     t1 = MyThread(&#x27;t1&#x27;)</span></span><br><span class="line"><span class="comment">#     t2 = MyThread(&#x27;t2&#x27;)</span></span><br><span class="line"><span class="comment">#     t1.start()</span></span><br><span class="line"><span class="comment">#     t2.start()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    守护线程</span></span><br><span class="line"><span class="string">    下面这个例子，这里使用setDaemon(True)把所有的子线程都变成了主线程的守护线程，</span></span><br><span class="line"><span class="string">    因此当主线程结束后，子线程也会随之结束，所以当主线程结束后，整个程序就退出了。</span></span><br><span class="line"><span class="string">    所谓’线程守护’，就是主线程不管该线程的执行情况，只要是其他子线程结束且主线程执行完毕，主线程都会关闭。也就是说:主线程不等待该守护线程的执行完再去关闭。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># def run(n):</span></span><br><span class="line"><span class="comment">#     print(&#x27;task&#x27;,n)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print(&#x27;3s&#x27;)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print(&#x27;2s&#x27;)</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print(&#x27;1s&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     t=threading.Thread(target=run,args=(&#x27;t1&#x27;,))</span></span><br><span class="line"><span class="comment">#     t.setDaemon(True)</span></span><br><span class="line"><span class="comment">#     t.start()</span></span><br><span class="line"><span class="comment">#     print(&#x27;end&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    通过执行结果可以看出，设置守护线程之后，当主线程结束时，子线程也将立即结束，不再执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主线程等待子线程结束</span></span><br><span class="line"><span class="string">    为了让守护线程执行结束之后，主线程再结束，我们可以使用join方法，让主线程等待子线程执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># def run(n):</span></span><br><span class="line"><span class="comment">#     print(&#x27;task&#x27;,n)</span></span><br><span class="line"><span class="comment">#     time.sleep(2)</span></span><br><span class="line"><span class="comment">#     print(&#x27;5s&#x27;)</span></span><br><span class="line"><span class="comment">#     time.sleep(2)</span></span><br><span class="line"><span class="comment">#     print(&#x27;3s&#x27;)</span></span><br><span class="line"><span class="comment">#     time.sleep(2)</span></span><br><span class="line"><span class="comment">#     print(&#x27;1s&#x27;)</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     t=threading.Thread(target=run,args=(&#x27;t1&#x27;,))</span></span><br><span class="line"><span class="comment">#     t.setDaemon(True)    #把子线程设置为守护线程，必须在start()之前设置</span></span><br><span class="line"><span class="comment">#     t.start()</span></span><br><span class="line"><span class="comment">#     t.join()     #设置主线程等待子线程结束</span></span><br><span class="line"><span class="comment">#     print(&#x27;end&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    多线程共享全局变量</span></span><br><span class="line"><span class="string">    线程时进程的执行单元，进程时系统分配资源的最小执行单位，所以在同一个进程中的多线程是共享资源的</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># g_num = 100</span></span><br><span class="line"><span class="comment"># def work1():</span></span><br><span class="line"><span class="comment">#     global  g_num</span></span><br><span class="line"><span class="comment">#     for i in range(3):</span></span><br><span class="line"><span class="comment">#         g_num+=1</span></span><br><span class="line"><span class="comment">#     print(&#x27;in work1 g_num is : %d&#x27; % g_num)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def work2():</span></span><br><span class="line"><span class="comment">#     global g_num</span></span><br><span class="line"><span class="comment">#     print(&#x27;in work2 g_num is : %d&#x27; % g_num)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     t1 = threading.Thread(target=work1)</span></span><br><span class="line"><span class="comment">#     t1.start()</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     t2=threading.Thread(target=work2)</span></span><br><span class="line"><span class="comment">#     t2.start()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，当多个线程同时修改同一条数据时可能会出现脏数据，</span></span><br><span class="line"><span class="string">    所以出现了线程锁，即同一时刻允许一个线程执行操作。线程锁用于锁定资源，可以定义多个锁，像下面的代码，当需要独占</span></span><br><span class="line"><span class="string">    某一个资源时，任何一个锁都可以锁定这个资源，就好比你用不同的锁都可以把这个相同的门锁住一样。</span></span><br><span class="line"><span class="string">        由于线程之间是进行随机调度的，如果有多个线程同时操作一个对象，如果没有很好地保护该对象，会造成程序结果的不可预期，</span></span><br><span class="line"><span class="string">    我们因此也称为“线程不安全”。</span></span><br><span class="line"><span class="string">        为了防止上面情况的发生，就出现了互斥锁（Lock）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># def work():</span></span><br><span class="line"><span class="comment">#     global n</span></span><br><span class="line"><span class="comment">#     lock.acquire()</span></span><br><span class="line"><span class="comment">#     temp = n</span></span><br><span class="line"><span class="comment">#     time.sleep(0.1)</span></span><br><span class="line"><span class="comment">#     n = temp-1</span></span><br><span class="line"><span class="comment">#     lock.release()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     lock = Lock()</span></span><br><span class="line"><span class="comment">#     n = 100</span></span><br><span class="line"><span class="comment">#     l = []</span></span><br><span class="line"><span class="comment">#     for i in range(100):</span></span><br><span class="line"><span class="comment">#         p = Thread(target=work)</span></span><br><span class="line"><span class="comment">#         l.append(p)</span></span><br><span class="line"><span class="comment">#         p.start()</span></span><br><span class="line"><span class="comment">#     for p in l:</span></span><br><span class="line"><span class="comment">#         p.join()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    递归锁：RLcok类的用法和Lock类一模一样，但它支持嵌套，在多个锁没有释放的时候一般会使用RLock类</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># def func(lock):</span></span><br><span class="line"><span class="comment">#     global gl_num</span></span><br><span class="line"><span class="comment">#     lock.acquire()</span></span><br><span class="line"><span class="comment">#     gl_num += 1</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#     print(gl_num)</span></span><br><span class="line"><span class="comment">#     lock.release()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     gl_num = 0</span></span><br><span class="line"><span class="comment">#     lock = threading.RLock()</span></span><br><span class="line"><span class="comment">#     for i in range(10):</span></span><br><span class="line"><span class="comment">#         t = threading.Thread(target=func,args=(lock,))</span></span><br><span class="line"><span class="comment">#         t.start()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    信号量（BoundedSemaphore类）</span></span><br><span class="line"><span class="string">    互斥锁同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据，比如厕所有3个坑，</span></span><br><span class="line"><span class="string">    那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># def run(n,semaphore):</span></span><br><span class="line"><span class="comment">#     semaphore.acquire()   #加锁</span></span><br><span class="line"><span class="comment">#     time.sleep(3)</span></span><br><span class="line"><span class="comment">#     print(&#x27;run the thread:%s\n&#x27; % n)</span></span><br><span class="line"><span class="comment">#     semaphore.release()    #释放</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__== &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     num=0</span></span><br><span class="line"><span class="comment">#     semaphore = threading.BoundedSemaphore(5)   #最多允许5个线程同时运行</span></span><br><span class="line"><span class="comment">#     for i in range(22):</span></span><br><span class="line"><span class="comment">#         t = threading.Thread(target=run,args=(&#x27;t-%s&#x27; % i,semaphore))</span></span><br><span class="line"><span class="comment">#         t.start()</span></span><br><span class="line"><span class="comment">#     while threading.active_count() !=1:</span></span><br><span class="line"><span class="comment">#         pass</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         print(&#x27;----------all threads done-----------&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    python线程的事件用于主线程控制其他线程的执行，事件是一个简单的线程同步对象，其主要提供以下的几个方法：</span></span><br><span class="line"><span class="string">        clear将flag设置为 False</span></span><br><span class="line"><span class="string">        set将flag设置为 True</span></span><br><span class="line"><span class="string">        is_set判断是否设置了flag</span></span><br><span class="line"><span class="string">        wait会一直监听flag，如果没有检测到flag就一直处于阻塞状态</span></span><br><span class="line"><span class="string">    事件处理的机制：全局定义了一个Flag，当Flag的值为False，那么event.wait()就会阻塞，当flag值为True，</span></span><br><span class="line"><span class="string">    那么event.wait()便不再阻塞</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">event = threading.Event()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lighter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    event.<span class="built_in">set</span>()         <span class="comment">#初始者为绿灯</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> &lt; count &lt;=<span class="number">10</span>:</span><br><span class="line">            event.clear()  <span class="comment">#红灯，清除标志位</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\33[41;lmred light is on...\033[0m]&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> count &gt; <span class="number">10</span>:</span><br><span class="line">            event.<span class="built_in">set</span>()    <span class="comment">#绿灯，设置标志位</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\33[42;lmgreen light is on...\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.is_set():     <span class="comment">#判断是否设置了标志位</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[%s] running.....&#x27;</span>%name)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[%s] sees red light,waiting...&#x27;</span>%name)</span><br><span class="line">            event.wait()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[%s] green light is on,start going...&#x27;</span>%name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># startTime = time.time()</span></span><br><span class="line">light = threading.Thread(target=lighter,)</span><br><span class="line">light.start()</span><br><span class="line"></span><br><span class="line">car = threading.Thread(target=car,args=(<span class="string">&#x27;MINT&#x27;</span>,))</span><br><span class="line">car.start()</span><br><span class="line">endTime = time.time()</span><br><span class="line"><span class="comment"># print(&#x27;用时：&#x27;,endTime-startTime)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                           GIL  全局解释器</span></span><br><span class="line"><span class="string">        在非python环境中，单核情况下，同时只能有一个任务执行。多核时可以支持多个线程同时执行。但是在python中，无论有多少个核</span></span><br><span class="line"><span class="string">        同时只能执行一个线程。究其原因，这就是由于GIL的存在导致的。</span></span><br><span class="line"><span class="string">        GIL的全程是全局解释器，来源是python设计之初的考虑，为了数据安全所做的决定。某个线程想要执行，必须先拿到GIL，我们可以</span></span><br><span class="line"><span class="string">        把GIL看做是“通行证”，并且在一个python进程之中，GIL只有一个。拿不到线程的通行证，并且在一个python进程中，GIL只有一个，</span></span><br><span class="line"><span class="string">        拿不到通行证的线程，就不允许进入CPU执行。GIL只在cpython中才有，因为cpython调用的是c语言的原生线程，所以他不能直接操</span></span><br><span class="line"><span class="string">        作cpu，而只能利用GIL保证同一时间只能有一个线程拿到数据。而在pypy和jpython中是没有GIL的</span></span><br><span class="line"><span class="string">        python在使用多线程的时候，调用的是c语言的原生过程。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                            python针对不同类型的代码执行效率也是不同的</span></span><br><span class="line"><span class="string">        1、CPU密集型代码（各种循环处理、计算等），在这种情况下，由于计算工作多，ticks技术很快就会达到阀值，然后出发GIL的</span></span><br><span class="line"><span class="string">        释放与再竞争（多个线程来回切换当然是需要消耗资源的），所以python下的多线程对CPU密集型代码并不友好。</span></span><br><span class="line"><span class="string">        2、IO密集型代码（文件处理、网络爬虫等设计文件读写操作），多线程能够有效提升效率（单线程下有IO操作会进行IO等待，</span></span><br><span class="line"><span class="string">        造成不必要的时间浪费，而开启多线程能在线程A等待时，自动切换到线程B，可以不浪费CPU的资源，从而能提升程序的执行</span></span><br><span class="line"><span class="string">        效率）。所以python的多线程对IO密集型代码比较友好。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主要要看任务的类型，我们把任务分为I/O密集型和计算密集型，而多线程在切换中又分为I/O切换和时间切换。如果任务属于是I/O密集型，</span></span><br><span class="line"><span class="string">    若不采用多线程，我们在进行I/O操作时，势必要等待前面一个I/O任务完成后面的I/O任务才能进行，在这个等待的过程中，CPU处于等待</span></span><br><span class="line"><span class="string">    状态，这时如果采用多线程的话，刚好可以切换到进行另一个I/O任务。这样就刚好可以充分利用CPU避免CPU处于闲置状态，提高效率。但是</span></span><br><span class="line"><span class="string">    如果多线程任务都是计算型，CPU会一直在进行工作，直到一定的时间后采取多线程时间切换的方式进行切换线程，此时CPU一直处于工作状态，</span></span><br><span class="line"><span class="string">    此种情况下并不能提高性能，相反在切换多线程任务时，可能还会造成时间和资源的浪费，导致效能下降。这就是造成上面两种多线程结果不能的解释。</span></span><br><span class="line"><span class="string">结论:I/O密集型任务，建议采取多线程，还可以采用多进程+协程的方式(例如:爬虫多采用多线程处理爬取的数据)；对于计算密集型任务，python此时就不适用了。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">```��</span><br><span class="line">结论:I/O密集型任务，建议采取多线程，还可以采用多进程+协程的方式(例如:爬虫多采用多线程处理爬取的数据)；对于计算密集型任务，python此时就不适用了。</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python--批量解压bz2、zip</title>
      <link href="/post/46874e67.html"/>
      <url>/post/46874e67.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="解压bz2"><a href="#解压bz2" class="headerlink" title="解压bz2"></a>解压bz2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">import bz2</span><br><span class="line"></span><br><span class="line"># bz2文件路径</span><br><span class="line">path = &quot;C:/Users/ll/Desktop/ecdata/bz2&quot;</span><br><span class="line"></span><br><span class="line"># 解压文件输出路径</span><br><span class="line">un_path = &quot;C:/Users/ll/Desktop/ecdata/bz2&quot;</span><br><span class="line"></span><br><span class="line">for (dirpath, dirnames, files) in os.walk(path):</span><br><span class="line"></span><br><span class="line">    for filename in files:</span><br><span class="line"></span><br><span class="line">        filepath = os.path.join(dirpath, filename)</span><br><span class="line">        # 解压后的文件名</span><br><span class="line">        newfilepath = os.path.join(un_path, filename.split(&#x27;.&#x27;)[0])</span><br><span class="line">        # 以字节流的方式读取bz2文件并写入新的文件</span><br><span class="line">        with open(newfilepath, &#x27;wb&#x27;) as new_file, bz2.BZ2File(filepath, &#x27;rb&#x27;) as file:</span><br><span class="line">            for data in iter(lambda: file.read(100 * 1024), b&#x27;&#x27;):</span><br><span class="line">                new_file.write(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解压zip"><a href="#解压zip" class="headerlink" title="解压zip"></a>解压zip</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">基本格式：zipfile.ZipFile(filename[,mode[,compression[,allowZip64]]])</span><br><span class="line">mode：可选 r,w,a 代表不同的打开文件的方式；r 只读；w 重写；a 添加</span><br><span class="line">compression：指出这个 zipfile 用什么压缩方法，默认是 ZIP_STORED，另一种选择是 ZIP_DEFLATED；</span><br><span class="line">allowZip64：bool型变量，当设置为True时可以创建大于 2G 的 zip 文件，默认值 True；</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">zip_file = zipfile.ZipFile(path)</span><br><span class="line">zip_list = zip_file.namelist() # 得到压缩包里所有文件</span><br><span class="line"></span><br><span class="line">for f in zip_list:</span><br><span class="line">    zip_file.extract(f, output) # 循环解压文件到指定目录output</span><br><span class="line"> </span><br><span class="line">zip_file.close() # 关闭文件，必须有，释放内存</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-bz2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker本地更换存储目录</title>
      <link href="/post/5ce8ade9.html"/>
      <url>/post/5ce8ade9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="Docker将本地docker的存储目录更换到本地"><a href="#Docker将本地docker的存储目录更换到本地" class="headerlink" title="Docker将本地docker的存储目录更换到本地"></a>Docker将本地docker的存储目录更换到本地</h3><p>Docker 默认安装的情况下，会使用 &#x2F;var&#x2F;lib&#x2F;docker&#x2F; 目录作为存储目录，用以存放拉取的镜像和创建的容器等。不过由于此目录一般都位于系统盘，遇到系统盘比较小，而镜像和容器多了后就容易尴尬，这里说明一下如何修改 Docker 的存储目录。</p><p>开发环境中, Docker测试服务器运行的容器,镜像太多了, 导致之前配置的50G磁盘空间经常性占满,决定把docker的存储目录更换到新的挂载点中.以作记录.</p><h4 id="1-查看Docker-磁盘使用情况"><a href="#1-查看Docker-磁盘使用情况" class="headerlink" title="1. 查看Docker 磁盘使用情况"></a>1. 查看Docker 磁盘使用情况</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure><h4 id="2-查看docker的存储目录"><a href="#2-查看docker的存储目录" class="headerlink" title="2. 查看docker的存储目录"></a>2. 查看docker的存储目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/11/09/IYZ1rF.png" alt="IYZ1rF.png"></p><h4 id="3-清理磁盘-可选择手动删除"><a href="#3-清理磁盘-可选择手动删除" class="headerlink" title="3. 清理磁盘(可选择手动删除)"></a>3. 清理磁盘(可选择手动删除)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docke system prune</span><br></pre></td></tr></table></figure><ul><li>删除关闭的容器</li><li>无用的数据卷和网络</li><li>无TAG的镜像</li><li>-a 参数 无用的镜像也会删除 (慎用)</li></ul><h4 id="4-停止Docker-服务"><a href="#4-停止Docker-服务" class="headerlink" title="4. 停止Docker 服务"></a>4. 停止Docker 服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h4 id="5-迁移数据目录"><a href="#5-迁移数据目录" class="headerlink" title="5. 迁移数据目录"></a>5. 迁移数据目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># /shardfile/docker/ docker目录需要自建</span><br><span class="line">rsync -avz /var/lib/docker /shardfile/docker/</span><br></pre></td></tr></table></figure><h4 id="6-修改配置文件"><a href="#6-修改配置文件" class="headerlink" title="6.修改配置文件"></a>6.修改配置文件</h4><p>最简单粗暴的办法，当然就是直接把数据盘挂载到&#x2F;var&#x2F;lib&#x2F;docker 目录下，不过这样对整体影响太大，其他程序需要使用数据盘时很不方便，所以还是从 Docker 端的修改入手。</p><p>官方文档的修改办法是编辑 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json </span><br></pre></td></tr></table></figure><p>默认情况下这个配置文件是没有的，这里实际也就是新建一个，然后写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data-root&quot;: &quot;/shardfile/docker&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此文件还涉及默认源的设定，如果设定了国内源，那么实际就是在源地址下方加一行，写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;],</span><br><span class="line">  &quot;data-root&quot;: &quot;/shardfile/docker&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-重启docker服务"><a href="#7-重启docker服务" class="headerlink" title="7.重启docker服务"></a>7.重启docker服务</h4><p>保存退出，然后重启 docker 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="8-检查"><a href="#8-检查" class="headerlink" title="8. 检查"></a>8. 检查</h4><p>再次查看 docke info 信息，可以看到目录已经变成了设定的&#x2F;shardfile&#x2F;docker</p><p>&#x3D;&#x3D;相关链接&#x3D;&#x3D;：</p><p><a href="https://zhuanlan.zhihu.com/p/95533274">修改 Docker 的默认存储路径</a></p><p><a href="https://blog.csdn.net/u011420410/article/details/99845765">Docker存储目录更换</a></p><p><a href="https://www.cnblogs.com/ooops/p/12886815.html">docker配置文件</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS挂载windows共享文件夹</title>
      <link href="/post/4aaea79b.html"/>
      <url>/post/4aaea79b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>CentOS挂载windows共享文件夹</p><p>1、挂载命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mount -t 挂载的文件系统 用户名，密码 //服务器ip/共享目录 Centos本地目录</span><br><span class="line">mount -t cifs -o username=user,password=123456 //&#123;ip&#125;/upload /share/upload</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t cifs -o username=&quot;wanghan&quot;,password=&quot;wanghan123&quot; //127.0.0.1/sharedata /data/Ecoweather/DATA</span><br></pre></td></tr></table></figure><p>相关报错文档：<br><a href="https://blog.csdn.net/fengaodlw/article/details/80863823">https://blog.csdn.net/fengaodlw/article/details/80863823</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql+redis多条件查询接口</title>
      <link href="/post/65055c06.html"/>
      <url>/post/65055c06.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">字段</span><br><span class="line">名称 大小 时间 </span><br><span class="line"></span><br><span class="line">多条件查询：基于单一时间 标识 1.等于这个时间 2.离查询时间最近的时间</span><br><span class="line">查询时间段</span><br><span class="line">名称模糊查询</span><br><span class="line">数值 大于小于 标识</span><br><span class="line">有的为空查询全部</span><br><span class="line">接口速度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">添加数据</span><br><span class="line">查询之后添加redis 删除redis</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">server = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@server.route(<span class="params"><span class="string">&#x27;/query&#x27;</span>,methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>():</span><br><span class="line">    T1 = time.time()</span><br><span class="line">    args = <span class="built_in">list</span>()</span><br><span class="line">    name = flask.request.values.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    number = flask.request.values.get(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">    date_time = flask.request.values.get(<span class="string">&#x27;date_time&#x27;</span>)</span><br><span class="line">    number_id = flask.request.values.get(<span class="string">&#x27;number_id&#x27;</span>)</span><br><span class="line">    date_time_id = flask.request.values.get(<span class="string">&#x27;date_time_id&#x27;</span>)</span><br><span class="line">    res = &#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;messages&quot;</span>: <span class="string">&quot;成功&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> name:</span><br><span class="line">        args.append(<span class="string">&quot;name LIKE &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;%&quot;</span>+name+<span class="string">&quot;%&quot;</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> number:</span><br><span class="line">        <span class="keyword">if</span> number_id == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            args.append(<span class="string">&quot;number&gt;=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(number))</span><br><span class="line">        <span class="keyword">elif</span> number_id == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            args.append(<span class="string">&quot;number&lt;=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(number))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = &#123;<span class="string">&quot;code&quot;</span>: <span class="number">500</span>, <span class="string">&quot;messages&quot;</span>: <span class="string">&quot;缺少number_id参数&quot;</span>&#125;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> date_time:</span><br><span class="line">        <span class="keyword">if</span> date_time.split(<span class="string">&quot;,&quot;</span>):</span><br><span class="line">            date_time_id = <span class="number">0</span></span><br><span class="line">            args.append(<span class="string">&quot;time&gt;&#x27;&#123;&#125;&#x27; AND time &lt; &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(date_time.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>],date_time.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">elif</span> date_time_id==<span class="string">&quot;1&quot;</span> <span class="keyword">or</span> date_time_id==<span class="string">&quot;2&quot;</span>:</span><br><span class="line">            args.append(<span class="string">&quot;time=&#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(date_time))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = &#123;<span class="string">&quot;code&quot;</span>: <span class="number">500</span>, <span class="string">&quot;messages&quot;</span>: <span class="string">&quot;缺少date_time_id参数&quot;</span>&#125;</span><br><span class="line">            </span><br><span class="line">    data_list = r.lrange(args, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data_list:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data_list:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;从缓存中读到数据&quot;</span>,i)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">and</span> date_time_id != <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            where_sql = <span class="string">&quot;SELECT name,number,time FROM pyp_test where &quot;</span> + <span class="string">&quot; and &quot;</span>.join(args)</span><br><span class="line">            cursors.execute(where_sql)</span><br><span class="line">            results = cursors.fetchall()</span><br><span class="line">            <span class="comment"># r.rpush(args,results)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(results) == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;未匹配到数据&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">                <span class="built_in">print</span>(row)</span><br><span class="line">                <span class="comment"># print(type(row))</span></span><br><span class="line">        <span class="keyword">elif</span> args <span class="keyword">and</span> date_time_id == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            where_sql = <span class="string">&quot;SELECT *,ABS(%s - time ) AS diffTime FROM pyp_test WHERE name = %s AND number = %s ORDER BY diffTime ASC LIMIT 0,1&quot;</span>%(args[<span class="number">2</span>].split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>],args[<span class="number">0</span>].split(<span class="string">&quot; &quot;</span>)[<span class="number">2</span>],args[<span class="number">1</span>].split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">            cursors.execute(where_sql)</span><br><span class="line">            results = cursors.fetchall()</span><br><span class="line">            <span class="comment">#将值插入列表尾部</span></span><br><span class="line">            <span class="comment"># r.rpush(args,results)</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">                <span class="built_in">print</span>(row)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            where_sql = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(where_sql)</span><br><span class="line">    <span class="comment"># for i in r.keys():</span></span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    <span class="comment">#     r.rpop(i)</span></span><br><span class="line">    <span class="comment"># print(r.keys())</span></span><br><span class="line"></span><br><span class="line">    T2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;程序运行时间:%s毫秒&#x27;</span> % ((T2 - T1) * <span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">return</span> json.dumps(res, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@server.route(<span class="params"><span class="string">&#x27;/adddata&#x27;</span>, methods=[<span class="string">&#x27;post&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adddata</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        name = flask.request.values.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        number = flask.request.values.get(<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">        date_time = flask.request.values.get(<span class="string">&#x27;date_time&#x27;</span>)</span><br><span class="line">        sql = <span class="string">&quot;REPLACE INTO pyp_test (name,number,time) VALUES (&#x27;%s&#x27;,%s,%s)&quot;</span>% (name, number, date_time)</span><br><span class="line">        cursors.execute(sql)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        connect.rollback()</span><br><span class="line">        res = &#123;<span class="string">&#x27;messages&#x27;</span>: <span class="built_in">str</span>(e), <span class="string">&#x27;code&#x27;</span>: <span class="number">1001</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> json.dumps(res, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        connect.commit()</span><br><span class="line">        <span class="comment"># for i in r.keys():</span></span><br><span class="line">        <span class="comment">#     r.rpop(i)</span></span><br><span class="line">        <span class="comment"># print(r.keys())</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;事务处理成功&quot;</span>)</span><br><span class="line">        res = &#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;messages&quot;</span>: <span class="string">&quot;插入数据成功！&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> json.dumps(res, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = redis.ConnectionPool(host=<span class="string">&#x27;172.17.152.205&#x27;</span>, db=<span class="number">10</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line">    r = redis.StrictRedis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line">    connect = pymysql.connect(</span><br><span class="line">        host=<span class="string">&quot;rm-2ze72mtf4661y9szq.mysql.rds.aliyuncs.com&quot;</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">&quot;algorithm_factor&quot;</span>,</span><br><span class="line">        passwd=<span class="string">&quot;Nn#aDyrWG84!&quot;</span>,</span><br><span class="line">        db=<span class="string">&quot;intelligent_grid&quot;</span>,</span><br><span class="line">        <span class="comment"># charset=&quot;utf-8&quot;</span></span><br><span class="line">        charset=<span class="string">&#x27;utf8mb4&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># pymysql.cursors.DictCursor指定返回字典类型</span></span><br><span class="line">    cursors = connect.cursor(pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server.run(port=<span class="number">5001</span>, debug=<span class="literal">True</span>,</span><br><span class="line">               host=<span class="string">&#x27;0.0.0.0&#x27;</span>)  <span class="comment"># 端口号要是不指定，默认为5000.debug=True,改了代码之后不用重启，会自动重启一次。后面增加host=&#x27;0.0.0.0&#x27;，别人可以访问</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理多条件组合查询的逻辑处理方法</title>
      <link href="/post/cd3dfa7d.html"/>
      <url>/post/cd3dfa7d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>最近一段时间经常要写一些联合查询的逻辑,同时要满足逻辑a,b,c或是其中一种,写起来很是麻烦.<br>有一天突然想到一个简单方法,将每一个子句先放置于list中,然后将list中的子句用” and “拼接起来,最外层判断list是否为空,不为空在最前面加上”where “的条件头即可.</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h2><p>有一个请求任务,其中有2个请求字段:<br>status_code:为空字符串,表示请求全部状态,为”8”表示全部成功,为”-4”表示在黑名单中<br>symbol:为空表示所有合约,或者表示具体的合约名</p><p>首先申明一个list为空<br>s_list &#x3D; list()<br>然后判断如果symbol为真,则将其加入到list中<br>if symbol:<br>s_list.append(“symbol&#x3D;’{}’”.format(symbol))<br>再判断如果status_code为真,也将其加入到list中<br>if status_code:<br>s_list.append(“status_code&#x3D;{}”.format(status_code))<br>在外层判断list的状态,为真则where子句存在,否则where子句为空字符串<br>if s_list:<br>where_sub_sql &#x3D; “where “ + “ and “.join(s_list)<br>else:<br>where_sub_sql &#x3D; “”</p><p>完整代码片段如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s_list = list()</span><br><span class="line">if symbol:</span><br><span class="line">    s_list.append(&quot;symbol=&#x27;&#123;&#125;&#x27;&quot;.format(symbol))</span><br><span class="line">if status_code:</span><br><span class="line">    s_list.append(&quot;status_code=&#123;&#125;&quot;.format(status_code))</span><br><span class="line">if s_list:</span><br><span class="line">    where_sub_sql = &quot;where &quot; + &quot; and &quot;.join(s_list)</span><br><span class="line">else:</span><br><span class="line">    where_sub_sql = &quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>list、dict--列表与字典的多层嵌套案例</title>
      <link href="/post/6a1f5a48.html"/>
      <url>/post/6a1f5a48.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><details>  <summary>需求</summary>  将data数据解析，返回给前端：统计每个团队一个月中，每天所有团队成员的任务总和  其中taskPeriod != 3 则一律视为当天有任务<details>  <summary>data数据</summary>  <pre><code>      data = &#123;    "contentInfo": [        &#123;            "team": "办公室",            "subInfo": [                &#123;                    "userName": "李峰",                    "userId": "3",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "曹晓华",                    "userId": "5",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "齐奇",                    "userId": "6",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "赵毅",                    "userId": "7",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "郭净天",                    "userId": "8",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "孙伟涛",                    "userId": "9",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "顾青",                    "userId": "10",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "郑强",                    "userId": "11",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "陈光辉",                    "userId": "13",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "刘靖",                    "userId": "27",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "孙昭昌",                    "userId": "52",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "何鹏",                    "userId": "59",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "孙振海",                    "userId": "134",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "牟磊",                    "userId": "135",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "王黎",                    "userId": "136",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;            ]        &#125;,        &#123;            "team": "变电检修一班",            "subInfo": [                &#123;                    "userName": "孙刚",                    "userId": "12",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "毛国明",                    "userId": "14",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 2                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 2                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "韩渭德",                    "userId": "15",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "张太森",                    "userId": "16",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "杜洪涛",                    "userId": "17",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "于水政",                    "userId": "18",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "姜杰",                    "userId": "19",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "荆元夫",                    "userId": "20",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "杨鹏",                    "userId": "21",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "姜鹏",                    "userId": "22",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "王继锋",                    "userId": "23",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "艾文豪",                    "userId": "123",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "吴艺明",                    "userId": "126",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;            ]        &#125;,        &#123;            "team": "变电检修五班",            "subInfo": [                &#123;                    "userName": "孙伟",                    "userId": "24",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "于大海",                    "userId": "38",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;            ]        &#125;,        &#123;            "team": "变电检修二班",            "subInfo": [                &#123;                    "userName": "魏宁",                    "userId": "25",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "孙振勇",                    "userId": "26",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "于海涛",                    "userId": "28",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "苑维琦",                    "userId": "29",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "常恒",                    "userId": "30",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "邢文峰",                    "userId": "31",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "秦继乙",                    "userId": "32",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "杨洁",                    "userId": "33",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "徐波",                    "userId": "34",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "李鸣青",                    "userId": "35",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "陈晓玲",                    "userId": "36",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "刘冰",                    "userId": "53",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 2                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;            ]        &#125;,        &#123;            "team": "变电检修三班",            "subInfo": [                &#123;                    "userName": "崔建",                    "userId": "37",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "赵杰",                    "userId": "39",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "姜涛",                    "userId": "40",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "史伟",                    "userId": "41",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "张嵋",                    "userId": "42",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "毕显涛",                    "userId": "43",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "宋有波",                    "userId": "44",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "虞咏青",                    "userId": "45",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;            ]        &#125;,        &#123;            "team": "变电检修四班",            "subInfo": [                &#123;                    "userName": "于绍峰",                    "userId": "46",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "刘杰",                    "userId": "47",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "李伟",                    "userId": "48",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "苏展",                    "userId": "49",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 2                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 2                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "王洋",                    "userId": "50",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "步雅楠",                    "userId": "51",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "张倩",                    "userId": "54",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "石峥",                    "userId": "55",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "袁宁",                    "userId": "124",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "潘宜帅",                    "userId": "125",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;            ]        &#125;,        &#123;            "team": "二次保护班",            "subInfo": [                &#123;                    "userName": "刘烨",                    "userId": "56",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "黄锐",                    "userId": "57",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "马晓路",                    "userId": "58",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "文宏成",                    "userId": "60",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "柯广才",                    "userId": "61",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "王树牢",                    "userId": "62",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "王蔚",                    "userId": "63",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "董绍毅",                    "userId": "64",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "田振霄",                    "userId": "65",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "杨士海",                    "userId": "66",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "张弘",                    "userId": "67",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "焦阳",                    "userId": "68",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "徐龙江",                    "userId": "70",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "彭寅",                    "userId": "71",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "宋彦臻",                    "userId": "72",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "刘强",                    "userId": "73",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "郭建杰",                    "userId": "74",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "高健",                    "userId": "75",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "庄彦",                    "userId": "76",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "段晓燕",                    "userId": "77",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "郭丰魁",                    "userId": "78",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "闫新",                    "userId": "80",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "宫邦润",                    "userId": "81",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "滕奇君",                    "userId": "82",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "张维桐",                    "userId": "83",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "董绍毅",                    "userId": "130",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "韩兴磊",                    "userId": "137",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "秦文康",                    "userId": "143",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "臧鹏",                    "userId": "144",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;            ]        &#125;,        &#123;            "team": "电气试验班",            "subInfo": [                &#123;                    "userName": "吴寿山",                    "userId": "84",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "雷敏",                    "userId": "85",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 2                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "白志轩",                    "userId": "86",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 1                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 2                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "张珂",                    "userId": "87",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "吴娟",                    "userId": "88",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "王威",                    "userId": "89",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "陈世敏",                    "userId": "90",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "葛学明",                    "userId": "91",                    "isDirector": 0,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "沙利",                    "userId": "92",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "徐奎菊",                    "userId": "93",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "解鹏",                    "userId": "94",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "陈伟",                    "userId": "95",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "葛惠阳",                    "userId": "96",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "陈伟坤",                    "userId": "97",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;,                &#123;                    "userName": "李宗",                    "userId": "98",                    "isDirector": 1,                    "dateInfo": [                        &#123;                            "date": "2021-04-01",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-02",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-03",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-04",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-05",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-06",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-07",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-08",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-09",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-10",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-11",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-12",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-13",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-14",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-15",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-16",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-17",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-18",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-19",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-20",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-21",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-22",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-23",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-24",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-25",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-26",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-27",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-28",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-29",                            "taskPeriod": 3                        &#125;,                        &#123;                            "date": "2021-04-30",                            "taskPeriod": 3                        &#125;                    ]                &#125;            ]        &#125;    ]&#125;  </code></pre></details><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 定义返回数据集</span><br><span class="line">res_team = &#123;&#125;</span><br><span class="line">for i in data[&#x27;contentInfo&#x27;]:</span><br><span class="line">    # 获取团队名称</span><br><span class="line">    team = &#123;i[&quot;team&quot;]:[]&#125;</span><br><span class="line">    # 将团队名称添加进数据集</span><br><span class="line">    res_team.update(team)</span><br><span class="line">    for subInfo in i[&quot;subInfo&quot;]:</span><br><span class="line">        # 根据数据初始化返回值</span><br><span class="line">        for j in subInfo[&quot;dateInfo&quot;]:</span><br><span class="line">            date = &#123;&#125;</span><br><span class="line">            date[&quot;date&quot;] = j[&quot;date&quot;]</span><br><span class="line">            date[&quot;count&quot;] = 0</span><br><span class="line">            # 判断初始化的数据是否已存在 和 防止循环到第二次时插入相同时间的数据造成初始化数据混乱</span><br><span class="line">            # 则用限制添加的长度，来防止数据混乱。</span><br><span class="line">            # 如：&#123;&#x27;办公室&#x27;: [&#123;&#x27;date&#x27;: &#x27;2021-04-01&#x27;, &#x27;count&#x27;: 0&#125;, &#123;&#x27;date&#x27;: &#x27;2021-04-01&#x27;, &#x27;count&#x27;: 1&#125;]&#125;</span><br><span class="line">            # 此时的date相同count不同，则是第二次循环时，判断的第一层并不能识别，造成插入新的数据 </span><br><span class="line">            if date not in res_team[i[&quot;team&quot;]] and len(res_team[i[&quot;team&quot;]])!=30:</span><br><span class="line">                res_team[i[&quot;team&quot;]].append(date)</span><br><span class="line">        # 统计每个团队每天的任务次数</span><br><span class="line">        for d in subInfo[&quot;dateInfo&quot;]:</span><br><span class="line">            if d[&#x27;taskPeriod&#x27;] != 3:</span><br><span class="line">                for e in res_team[i[&quot;team&quot;]]:</span><br><span class="line">                    e[&quot;count&quot;] += 1</span><br><span class="line">print(res_team)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#123;&quot;team&quot;:[&#123;&#x27;date&#x27;: &#x27;2021-04-01&#x27;, &#x27;count&#x27;: 3&#125;,&#123;&#x27;date&#x27;: &#x27;2021-04-02&#x27;, &#x27;count&#x27;: 3&#125;]&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><details>  <summary>输出结果</summary>  <pre><code>      &#123;'办公室': [&#123;'date': '2021-04-01', 'count': 1&#125;, &#123;'date': '2021-04-02', 'count': 1&#125;, &#123;'date': '2021-04-03', 'count': 1&#125;, &#123;'date': '2021-04-04', 'count': 1&#125;, &#123;'date': '2021-04-05', 'count': 1&#125;, &#123;'date': '2021-04-06', 'count': 1&#125;, &#123;'date': '2021-04-07', 'count': 1&#125;, &#123;'date': '2021-04-08', 'count': 1&#125;, &#123;'date': '2021-04-09', 'count': 1&#125;, &#123;'date': '2021-04-10', 'count': 1&#125;, &#123;'date': '2021-04-11', 'count': 1&#125;, &#123;'date': '2021-04-12', 'count': 1&#125;, &#123;'date': '2021-04-13', 'count': 1&#125;, &#123;'date': '2021-04-14', 'count': 1&#125;, &#123;'date': '2021-04-15', 'count': 1&#125;, &#123;'date': '2021-04-16', 'count': 1&#125;, &#123;'date': '2021-04-17', 'count': 1&#125;, &#123;'date': '2021-04-18', 'count': 1&#125;, &#123;'date': '2021-04-19', 'count': 1&#125;, &#123;'date': '2021-04-20', 'count': 1&#125;, &#123;'date': '2021-04-21', 'count': 1&#125;, &#123;'date': '2021-04-22', 'count': 1&#125;, &#123;'date': '2021-04-23', 'count': 1&#125;, &#123;'date': '2021-04-24', 'count': 1&#125;, &#123;'date': '2021-04-25', 'count': 1&#125;, &#123;'date': '2021-04-26', 'count': 1&#125;, &#123;'date': '2021-04-27', 'count': 1&#125;, &#123;'date': '2021-04-28', 'count': 1&#125;, &#123;'date': '2021-04-29', 'count': 1&#125;, &#123;'date': '2021-04-30', 'count': 1&#125;], '变电检修一班': [&#123;'date': '2021-04-01', 'count': 4&#125;, &#123;'date': '2021-04-02', 'count': 4&#125;, &#123;'date': '2021-04-03', 'count': 4&#125;, &#123;'date': '2021-04-04', 'count': 4&#125;, &#123;'date': '2021-04-05', 'count': 4&#125;, &#123;'date': '2021-04-06', 'count': 4&#125;, &#123;'date': '2021-04-07', 'count': 4&#125;, &#123;'date': '2021-04-08', 'count': 4&#125;, &#123;'date': '2021-04-09', 'count': 4&#125;, &#123;'date': '2021-04-10', 'count': 4&#125;, &#123;'date': '2021-04-11', 'count': 4&#125;, &#123;'date': '2021-04-12', 'count': 4&#125;, &#123;'date': '2021-04-13', 'count': 4&#125;, &#123;'date': '2021-04-14', 'count': 4&#125;, &#123;'date': '2021-04-15', 'count': 4&#125;, &#123;'date': '2021-04-16', 'count': 4&#125;, &#123;'date': '2021-04-17', 'count': 4&#125;, &#123;'date': '2021-04-18', 'count': 4&#125;, &#123;'date': '2021-04-19', 'count': 4&#125;, &#123;'date': '2021-04-20', 'count': 4&#125;, &#123;'date': '2021-04-21', 'count': 4&#125;, &#123;'date': '2021-04-22', 'count': 4&#125;, &#123;'date': '2021-04-23', 'count': 4&#125;, &#123;'date': '2021-04-24', 'count': 4&#125;, &#123;'date': '2021-04-25', 'count': 4&#125;, &#123;'date': '2021-04-26', 'count': 4&#125;, &#123;'date': '2021-04-27', 'count': 4&#125;, &#123;'date': '2021-04-28', 'count': 4&#125;, &#123;'date': '2021-04-29', 'count': 4&#125;, &#123;'date': '2021-04-30', 'count': 4&#125;], '变电检修五班': [&#123;'date': '2021-04-01', 'count': 0&#125;, &#123;'date': '2021-04-02', 'count': 0&#125;, &#123;'date': '2021-04-03', 'count': 0&#125;, &#123;'date': '2021-04-04', 'count': 0&#125;, &#123;'date': '2021-04-05', 'count': 0&#125;, &#123;'date': '2021-04-06', 'count': 0&#125;, &#123;'date': '2021-04-07', 'count': 0&#125;, &#123;'date': '2021-04-08', 'count': 0&#125;, &#123;'date': '2021-04-09', 'count': 0&#125;, &#123;'date': '2021-04-10', 'count': 0&#125;, &#123;'date': '2021-04-11', 'count': 0&#125;, &#123;'date': '2021-04-12', 'count': 0&#125;, &#123;'date': '2021-04-13', 'count': 0&#125;, &#123;'date': '2021-04-14', 'count': 0&#125;, &#123;'date': '2021-04-15', 'count': 0&#125;, &#123;'date': '2021-04-16', 'count': 0&#125;, &#123;'date': '2021-04-17', 'count': 0&#125;, &#123;'date': '2021-04-18', 'count': 0&#125;, &#123;'date': '2021-04-19', 'count': 0&#125;, &#123;'date': '2021-04-20', 'count': 0&#125;, &#123;'date': '2021-04-21', 'count': 0&#125;, &#123;'date': '2021-04-22', 'count': 0&#125;, &#123;'date': '2021-04-23', 'count': 0&#125;, &#123;'date': '2021-04-24', 'count': 0&#125;, &#123;'date': '2021-04-25', 'count': 0&#125;, &#123;'date': '2021-04-26', 'count': 0&#125;, &#123;'date': '2021-04-27', 'count': 0&#125;, &#123;'date': '2021-04-28', 'count': 0&#125;, &#123;'date': '2021-04-29', 'count': 0&#125;, &#123;'date': '2021-04-30', 'count': 0&#125;], '变电检修二班': [&#123;'date': '2021-04-01', 'count': 8&#125;, &#123;'date': '2021-04-02', 'count': 8&#125;, &#123;'date': '2021-04-03', 'count': 8&#125;, &#123;'date': '2021-04-04', 'count': 8&#125;, &#123;'date': '2021-04-05', 'count': 8&#125;, &#123;'date': '2021-04-06', 'count': 8&#125;, &#123;'date': '2021-04-07', 'count': 8&#125;, &#123;'date': '2021-04-08', 'count': 8&#125;, &#123;'date': '2021-04-09', 'count': 8&#125;, &#123;'date': '2021-04-10', 'count': 8&#125;, &#123;'date': '2021-04-11', 'count': 8&#125;, &#123;'date': '2021-04-12', 'count': 8&#125;, &#123;'date': '2021-04-13', 'count': 8&#125;, &#123;'date': '2021-04-14', 'count': 8&#125;, &#123;'date': '2021-04-15', 'count': 8&#125;, &#123;'date': '2021-04-16', 'count': 8&#125;, &#123;'date': '2021-04-17', 'count': 8&#125;, &#123;'date': '2021-04-18', 'count': 8&#125;, &#123;'date': '2021-04-19', 'count': 8&#125;, &#123;'date': '2021-04-20', 'count': 8&#125;, &#123;'date': '2021-04-21', 'count': 8&#125;, &#123;'date': '2021-04-22', 'count': 8&#125;, &#123;'date': '2021-04-23', 'count': 8&#125;, &#123;'date': '2021-04-24', 'count': 8&#125;, &#123;'date': '2021-04-25', 'count': 8&#125;, &#123;'date': '2021-04-26', 'count': 8&#125;, &#123;'date': '2021-04-27', 'count': 8&#125;, &#123;'date': '2021-04-28', 'count': 8&#125;, &#123;'date': '2021-04-29', 'count': 8&#125;, &#123;'date': '2021-04-30', 'count': 8&#125;], '变电检修三班': [&#123;'date': '2021-04-01', 'count': 7&#125;, &#123;'date': '2021-04-02', 'count': 7&#125;, &#123;'date': '2021-04-03', 'count': 7&#125;, &#123;'date': '2021-04-04', 'count': 7&#125;, &#123;'date': '2021-04-05', 'count': 7&#125;, &#123;'date': '2021-04-06', 'count': 7&#125;, &#123;'date': '2021-04-07', 'count': 7&#125;, &#123;'date': '2021-04-08', 'count': 7&#125;, &#123;'date': '2021-04-09', 'count': 7&#125;, &#123;'date': '2021-04-10', 'count': 7&#125;, &#123;'date': '2021-04-11', 'count': 7&#125;, &#123;'date': '2021-04-12', 'count': 7&#125;, &#123;'date': '2021-04-13', 'count': 7&#125;, &#123;'date': '2021-04-14', 'count': 7&#125;, &#123;'date': '2021-04-15', 'count': 7&#125;, &#123;'date': '2021-04-16', 'count': 7&#125;, &#123;'date': '2021-04-17', 'count': 7&#125;, &#123;'date': '2021-04-18', 'count': 7&#125;, &#123;'date': '2021-04-19', 'count': 7&#125;, &#123;'date': '2021-04-20', 'count': 7&#125;, &#123;'date': '2021-04-21', 'count': 7&#125;, &#123;'date': '2021-04-22', 'count': 7&#125;, &#123;'date': '2021-04-23', 'count': 7&#125;, &#123;'date': '2021-04-24', 'count': 7&#125;, &#123;'date': '2021-04-25', 'count': 7&#125;, &#123;'date': '2021-04-26', 'count': 7&#125;, &#123;'date': '2021-04-27', 'count': 7&#125;, &#123;'date': '2021-04-28', 'count': 7&#125;, &#123;'date': '2021-04-29', 'count': 7&#125;, &#123;'date': '2021-04-30', 'count': 7&#125;], '变电检修四班': [&#123;'date': '2021-04-01', 'count': 9&#125;, &#123;'date': '2021-04-02', 'count': 9&#125;, &#123;'date': '2021-04-03', 'count': 9&#125;, &#123;'date': '2021-04-04', 'count': 9&#125;, &#123;'date': '2021-04-05', 'count': 9&#125;, &#123;'date': '2021-04-06', 'count': 9&#125;, &#123;'date': '2021-04-07', 'count': 9&#125;, &#123;'date': '2021-04-08', 'count': 9&#125;, &#123;'date': '2021-04-09', 'count': 9&#125;, &#123;'date': '2021-04-10', 'count': 9&#125;, &#123;'date': '2021-04-11', 'count': 9&#125;, &#123;'date': '2021-04-12', 'count': 9&#125;, &#123;'date': '2021-04-13', 'count': 9&#125;, &#123;'date': '2021-04-14', 'count': 9&#125;, &#123;'date': '2021-04-15', 'count': 9&#125;, &#123;'date': '2021-04-16', 'count': 9&#125;, &#123;'date': '2021-04-17', 'count': 9&#125;, &#123;'date': '2021-04-18', 'count': 9&#125;, &#123;'date': '2021-04-19', 'count': 9&#125;, &#123;'date': '2021-04-20', 'count': 9&#125;, &#123;'date': '2021-04-21', 'count': 9&#125;, &#123;'date': '2021-04-22', 'count': 9&#125;, &#123;'date': '2021-04-23', 'count': 9&#125;, &#123;'date': '2021-04-24', 'count': 9&#125;, &#123;'date': '2021-04-25', 'count': 9&#125;, &#123;'date': '2021-04-26', 'count': 9&#125;, &#123;'date': '2021-04-27', 'count': 9&#125;, &#123;'date': '2021-04-28', 'count': 9&#125;, &#123;'date': '2021-04-29', 'count': 9&#125;, &#123;'date': '2021-04-30', 'count': 9&#125;], '二次保护班': [&#123;'date': '2021-04-01', 'count': 0&#125;, &#123;'date': '2021-04-02', 'count': 0&#125;, &#123;'date': '2021-04-03', 'count': 0&#125;, &#123;'date': '2021-04-04', 'count': 0&#125;, &#123;'date': '2021-04-05', 'count': 0&#125;, &#123;'date': '2021-04-06', 'count': 0&#125;, &#123;'date': '2021-04-07', 'count': 0&#125;, &#123;'date': '2021-04-08', 'count': 0&#125;, &#123;'date': '2021-04-09', 'count': 0&#125;, &#123;'date': '2021-04-10', 'count': 0&#125;, &#123;'date': '2021-04-11', 'count': 0&#125;, &#123;'date': '2021-04-12', 'count': 0&#125;, &#123;'date': '2021-04-13', 'count': 0&#125;, &#123;'date': '2021-04-14', 'count': 0&#125;, &#123;'date': '2021-04-15', 'count': 0&#125;, &#123;'date': '2021-04-16', 'count': 0&#125;, &#123;'date': '2021-04-17', 'count': 0&#125;, &#123;'date': '2021-04-18', 'count': 0&#125;, &#123;'date': '2021-04-19', 'count': 0&#125;, &#123;'date': '2021-04-20', 'count': 0&#125;, &#123;'date': '2021-04-21', 'count': 0&#125;, &#123;'date': '2021-04-22', 'count': 0&#125;, &#123;'date': '2021-04-23', 'count': 0&#125;, &#123;'date': '2021-04-24', 'count': 0&#125;, &#123;'date': '2021-04-25', 'count': 0&#125;, &#123;'date': '2021-04-26', 'count': 0&#125;, &#123;'date': '2021-04-27', 'count': 0&#125;, &#123;'date': '2021-04-28', 'count': 0&#125;, &#123;'date': '2021-04-29', 'count': 0&#125;, &#123;'date': '2021-04-30', 'count': 0&#125;], '电气试验班': [&#123;'date': '2021-04-01', 'count': 8&#125;, &#123;'date': '2021-04-02', 'count': 8&#125;, &#123;'date': '2021-04-03', 'count': 8&#125;, &#123;'date': '2021-04-04', 'count': 8&#125;, &#123;'date': '2021-04-05', 'count': 8&#125;, &#123;'date': '2021-04-06', 'count': 8&#125;, &#123;'date': '2021-04-07', 'count': 8&#125;, &#123;'date': '2021-04-08', 'count': 8&#125;, &#123;'date': '2021-04-09', 'count': 8&#125;, &#123;'date': '2021-04-10', 'count': 8&#125;, &#123;'date': '2021-04-11', 'count': 8&#125;, &#123;'date': '2021-04-12', 'count': 8&#125;, &#123;'date': '2021-04-13', 'count': 8&#125;, &#123;'date': '2021-04-14', 'count': 8&#125;, &#123;'date': '2021-04-15', 'count': 8&#125;, &#123;'date': '2021-04-16', 'count': 8&#125;, &#123;'date': '2021-04-17', 'count': 8&#125;, &#123;'date': '2021-04-18', 'count': 8&#125;, &#123;'date': '2021-04-19', 'count': 8&#125;, &#123;'date': '2021-04-20', 'count': 8&#125;, &#123;'date': '2021-04-21', 'count': 8&#125;, &#123;'date': '2021-04-22', 'count': 8&#125;, &#123;'date': '2021-04-23', 'count': 8&#125;, &#123;'date': '2021-04-24', 'count': 8&#125;, &#123;'date': '2021-04-25', 'count': 8&#125;, &#123;'date': '2021-04-26', 'count': 8&#125;, &#123;'date': '2021-04-27', 'count': 8&#125;, &#123;'date': '2021-04-28', 'count': 8&#125;, &#123;'date': '2021-04-29', 'count': 8&#125;, &#123;'date': '2021-04-30', 'count': 8&#125;]&#125;  </code></pre></details>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清理Docker 日志 节省磁盘空间</title>
      <link href="/post/ef7de880.html"/>
      <url>/post/ef7de880.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>普通的一天，打开普通的电脑，登录一台普通的服务器，敲下一条普通的命令。</p><p>在我使用命令补全时，出现了一条不普通的提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: cannot create temp file for here-document: No space left on device ls -bash </span><br></pre></td></tr></table></figure><p>怎么磁盘满了?</p><p>使用 df -h 一看还真是。</p><p>什么原因呢?</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>首先，查找一下系统里的大文件，看看是哪个小可爱搞的鬼。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh /* | grep G </span><br></pre></td></tr></table></figure><p>很快就定位到了这个目录：&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers。</p><p>原来是 Docker 这家伙，这个目录下存放的都是容器运行过程中产生的日志。</p><p>使用下面命令来给这些文件按大小排个序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -d1 -h /var/lib/docker/containers | sort -h </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">32K    /var/lib/docker/containers/d607c06e475191fff1abd0c2b4b672e7fe8a96cb197f4e8557b18600de2e60af </span><br><span class="line">36K    /var/lib/docker/containers/0d4321106721b9d26335fefef7b9e8e23629691684a4da2f953ac8223c8240c3 </span><br><span class="line">36K    /var/lib/docker/containers/7525aab4aa917aa1016169114762261726ac7b9cc712bef35cdc7035b50d20ce </span><br><span class="line">36K    /var/lib/docker/containers/9252e1c373d59ef5613c2b6122eb6e43aa2bd822bd2c199aa67d6eb659c4adb7 </span><br><span class="line">142M    /var/lib/docker/containers </span><br><span class="line">142M    /var/lib/docker/containers/15700ee92cd2831554b9a1e78127df0f07248c1498d35c17525407bc8a98bc1a</span><br></pre></td></tr></table></figure><p>文件名称就是容器 ID，每个文件对应一个容器，也就可以定位到，具体是哪个容器产生了大量的日志。</p><p>使用这个命令可以将大文件快速清空：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;cat /dev/null &gt; $&#123;log_file_name&#125;&quot; </span><br></pre></td></tr></table></figure><p>但是清空了文件哪算解决问题，新的日志还在源源不断往日志里打呢。看了看日志内容，很熟悉。前两天为了调试程序，刚加的一条 print。</p><p>编辑代码，删除 print，重启容器。好了，日志不再疯狂追加了。</p><p>为什么 print 语句将日志都输出到文件里了呢?别着急，后面再来详细介绍。</p><p>先处理一下眼前的问题，放任日志无限增长是肯定不行的，需要有一个单个文件大小限制。否则，明天张三再加一条 print，磁盘又满了。</p><p>这里有两个方案：</p><ol><li>单一容器配置</li><li>全局配置</li></ol><h2 id="单一容器配置"><a href="#单一容器配置" class="headerlink" title="单一容器配置"></a>单一容器配置</h2><p>启动容器时，通过参数来控制日志的文件个数和单个文件的大小：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --log-opt max-size=10m --log-opt max-file=3 redis </span><br></pre></td></tr></table></figure><p>但这样做是比较麻烦的，更多的采用的是全局配置的方式。</p><p>33 全局配置<br>编辑 &#x2F;etc&#x2F;docker&#x2F;daemon.json：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    &quot;log-driver&quot;:&quot;json-file&quot;, </span><br><span class="line">    &quot;log-opts&quot;:&#123; </span><br><span class="line">        &quot;max-size&quot; :&quot;50m&quot;, </span><br><span class="line">        &quot;max-file&quot;:&quot;3&quot; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>重启 Docker 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl restart docker </span><br></pre></td></tr></table></figure><p>注意： 已存在的容器不会生效，需要重建才可以。</p><p>接下来再说说上文提到的 print 问题。</p><h2 id="Docker-日志"><a href="#Docker-日志" class="headerlink" title="Docker 日志"></a>Docker 日志</h2><p>Docker 日志分为两类：</p><ol><li>Docker 引擎日志(也就是 dockerd 运行时的日志)</li><li>容器的日志，容器内的服务产生的日志</li></ol><h2 id="引擎日志"><a href="#引擎日志" class="headerlink" title="引擎日志"></a>引擎日志</h2><p>Docker 引擎日志一般是交给了 Upstart(Ubuntu 14.04) 或者 systemd (CentOS 7, Ubuntu 16.04)。前者一般位于 &#x2F;var&#x2F;log&#x2F;upstart&#x2F;docker.log 下，后者一般通过 journalctl -u docker 进行查看。</p><p>不同系统的位置都不一样，网上有人总结了一份列表，我修正了一下，可以参考：<br><img src="https://z3.ax1x.com/2021/10/08/5PPOIS.png" alt="5PPOIS.png"></p><h2 id="容器日志"><a href="#容器日志" class="headerlink" title="容器日志"></a>容器日志</h2><p>使用下面命令可以显示当前运行的容器的日志信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs CONTAINER </span><br></pre></td></tr></table></figure><p>UNIX 和 Linux 命令有三种输入输出，分别是 STDIN、STDOUT 和 STDERR。docker logs 显示的内容包含 STDOUT 和 STDERR。</p><p>在生产环境下，如果我们的应用输出到日志文件里，那么我们在使用 docker logs 时一般收集不到太多重要的信息。</p><p>这里来看一下 nginx 和 httpd 是怎么做的：</p><ul><li>nginx 官方镜像，使用了一种方式，让日志输出到 STDOUT，也就是创建一个符号链接 &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log 到 &#x2F;dev&#x2F;stdout。</li><li>httpd 使用的是让其输出到指定文件，正常日志输出到 &#x2F;proc&#x2F;self&#x2F;fd&#x2F;1 (STDOUT) ，错误日志输出到 &#x2F;proc&#x2F;self&#x2F;fd&#x2F;2 (STDERR)。<br>当日志量比较大的时候，使用 docker logs 来查看日志，会对 docker daemon 造成比较大的压力，容易导致容器创建慢等一系列问题。</li></ul><p>只有使用了 local 、json-file、journald 日志驱动的容器才可以使用 docker logs 捕获日志，使用其他日志驱动无法使用 docker logs。</p><p>Docker 默认使用 json-file 作为日志驱动。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker export 、import和docker save、load的区别是什么？</title>
      <link href="/post/f2d174f0.html"/>
      <url>/post/f2d174f0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><blockquote><p>区别：<br>docker load命令导入镜像库存储文件到本地镜像库；docker import命令导入一个容器快照到本地镜像库。容器快照将会丢弃所有的历史记录和元数据信息，而镜像存储文件将保存完整记录，体积也会更大。</p></blockquote><p>首先，想要清楚的了解<font color="red">docker load</font>与<font color="red">docker import</font>命令的区别，就必须了解镜像与容器的区别：</p><ul><li>镜像：用来启动容器的只读模板，是容器启动所需的rootfs，类似于虚拟机所使用的镜像。</li><li>容器：Docker 容器是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。</li></ul><blockquote><p>镜像是容器的基础，可以简单的理解为镜像是我们启动虚拟机时需要的镜像，容器时虚拟机成<br>功启动后，运行的服务。</p></blockquote><p>想要了解<font color="red">docker load</font>与<font color="red">docker import</font>命令的区别，还必须知道docker save与docker export命令：</p><ul><li><p><font color="red">docker save images_name</font>：将一个镜像导出为文件，再使用<font color="red">docker load</font>命令将文件导入为一个镜像，会保存该镜像的的所有历史记录。比<font color="red">docker export</font>命令导出的文件大，很好理解，因为会保存镜像的所有历史记录。</p></li><li><p><font color="red">docker export container_id</font>：将一个容器导出为文件，再使用<font color="red">docker import</font> 命令将容器导入成为一个新的镜像，但是相比<font color="red">docker save</font>命令，容器文件会丢失所有元数据和历史记录，仅保存容器当时的状态，相当于虚拟机快照。</p></li></ul><p><strong>docker import和docker load的区别</strong></p><p>实际上，既可以使用docker load命令来导入镜像库存储文件到本地镜像库，也可以使用docker import命令来导入一个容器快照到本地镜像库。</p><p>两者的区别在于容器快照将会丢弃所有的历史记录和元数据信息，而镜像存储文件将保存完整记录，体积也会更大。此外从容器快照文件导入时，也可以重新指定标签等元数据。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python判断mysql中某张表是否存在</title>
      <link href="/post/8ae8df90.html"/>
      <url>/post/8ae8df90.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>当向数据库添加表是，我们可能需要首先判断该表是否已经存在了，在继续后面的工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">table_exists</span>(<span class="params">con,table_name</span>):        <span class="comment">#这个函数用来判断表是否存在</span></span><br><span class="line">    sql = <span class="string">&quot;show tables;&quot;</span></span><br><span class="line">    con.execute(sql)</span><br><span class="line">    tables = [con.fetchall()]</span><br><span class="line">    table_list = re.findall(<span class="string">&#x27;(\&#x27;.*?\&#x27;)&#x27;</span>,<span class="built_in">str</span>(tables))</span><br><span class="line">    table_list = [re.sub(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;&#x27;</span>,each) <span class="keyword">for</span> each <span class="keyword">in</span> table_list]</span><br><span class="line">    <span class="keyword">if</span> table_name <span class="keyword">in</span> table_list:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>        <span class="comment">#存在返回1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>        <span class="comment">#不存在返回0</span></span><br><span class="line"> </span><br><span class="line">connect = pymysql.connect(</span><br><span class="line">        user = <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password = <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">        db = <span class="string">&#x27;MYSQL&#x27;</span>,</span><br><span class="line">        host = <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        port = <span class="number">3306</span>,</span><br><span class="line">        charset = <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">        )</span><br><span class="line">con = connect.cursor()</span><br><span class="line">con.execute(<span class="string">&#x27;use database&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">table_name = <span class="string">&#x27;animal&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(table_exists(con,table_name) != <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;表不存在，可以添加一张&quot;</span>)</span><br><span class="line"> </span><br><span class="line">con.close()</span><br><span class="line">connect.close()</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4K95Ks.png" alt="4K95Ks.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引（二）索引的数据结构B+TREE</title>
      <link href="/post/3037faa0.html"/>
      <url>/post/3037faa0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>索引本质上是一种数据结构，让我们在查询数据的时候尽量减少磁盘I&#x2F;O。</p><p>前边大概看了索引的原理。数据库的复杂性，以及读取磁盘时，磁盘I&#x2F;O等。任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。</p><p>那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生</p><p><img src="https://z3.ax1x.com/2021/09/17/4KpXnI.png" alt="4KpXnI.png"></p><p>B+树大概就是上边这个玩意。</p><p>如上图，是一颗b+树，最上层是树根，中间的是树枝，最下面是叶子节点，关于b+树后边会看到，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块或者叫做一个block块，这是操作系统一次IO往内存中读的内容，一个块对应四个扇区，可以看到每个磁盘块包含几个数据项（深蓝色所示，一个磁盘块里面包含多少数据，一个深蓝色的块表示一个数据，其实不是数据，后面有解释）和指针（黄色所示，看最上面一个，p1表示比上面深蓝色的那个17小的数据的位置在哪，看它指针指向的左边那个块，里面的数据都比17小，p2指向的是比17大比35小的磁盘块），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。</p><p>真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。</p><p>非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p><p>B+树的查找过程</p><p>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。</p><p>真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</p><p>b+树性质</p><h4 id="1-索引字段要尽量的小："><a href="#1-索引字段要尽量的小：" class="headerlink" title="1.索引字段要尽量的小："></a>1.索引字段要尽量的小：</h4><p>通过上面的分析，我们知道IO次数取决于b+数的高度h或者说层级，这个高度或者层级就是你每次查询数据的IO次数，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h&#x3D;㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；</p><p>而m &#x3D; 磁盘块的大小 &#x2F; 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。</p><p>这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。</p><p>这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p><h4 id="2：索引的最左匹配特性："><a href="#2：索引的最左匹配特性：" class="headerlink" title="2：索引的最左匹配特性："></a>2：索引的最左匹配特性：</h4><p>简单来说就是你的数据来了以后，从数据块的左边开始匹配，在匹配右边的，知道这句话就行啦，我们继续学下面的内容。当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；</p><p>但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。</p><p>比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p><h2 id="B-Tree索引的特点"><a href="#B-Tree索引的特点" class="headerlink" title="B-Tree索引的特点"></a>B-Tree索引的特点</h2><h4 id="1、B-tree索引可以加快数据的查询速度"><a href="#1、B-tree索引可以加快数据的查询速度" class="headerlink" title="1、B-tree索引可以加快数据的查询速度"></a>1、B-tree索引可以加快数据的查询速度</h4><p>存储引擎不需要进行全表扫描来获得需要的数据，取而代之的是从索引的根节点开始进行搜索。然后根据指针逐层向下查找，通过比较节点页的值和有目标值就可以找到合适的指针进入下层节点，而这些指针实际上定义了子节点页中值的上限和下限。</p><h4 id="2、B-tree索引更适合进行范围查询"><a href="#2、B-tree索引更适合进行范围查询" class="headerlink" title="2、B-tree索引更适合进行范围查询"></a>2、B-tree索引更适合进行范围查询</h4><p>因为前面说过，B-tree对索引是顺序组织存储的，所以就很适合进行查找范围数据。</p><h2 id="B-tree索引的使用场景"><a href="#B-tree索引的使用场景" class="headerlink" title="B-tree索引的使用场景"></a>B-tree索引的使用场景</h2><h4 id="1、-全值匹配的查询"><a href="#1、-全值匹配的查询" class="headerlink" title="1、 全值匹配的查询"></a>1、 全值匹配的查询</h4><p>指的是和索引中的所有列进行匹配，比如查询字段 name &#x3D; ‘tom’;</p><h4 id="2、匹配最左前缀的查询"><a href="#2、匹配最左前缀的查询" class="headerlink" title="2、匹配最左前缀的查询"></a>2、匹配最左前缀的查询</h4><p>比如为ａ列和ｂ列设置联合索引，只要联合索引的第一列（ａ列）符合查询条件，索引就会被用到，若只是第二列（ｂ列）符合条件则不会被用到该索引。</p><h4 id="３、匹配列前缀的查询"><a href="#３、匹配列前缀的查询" class="headerlink" title="３、匹配列前缀的查询"></a>３、匹配列前缀的查询</h4><p>只匹配某一列的值的开头部分</p><h4 id="4、匹配范围值"><a href="#4、匹配范围值" class="headerlink" title="4、匹配范围值"></a>4、匹配范围值</h4><h4 id="5、精准匹配某一列并范围匹配另外一列"><a href="#5、精准匹配某一列并范围匹配另外一列" class="headerlink" title="5、精准匹配某一列并范围匹配另外一列"></a>5、精准匹配某一列并范围匹配另外一列</h4><h4 id="6、只访问索引的查询"><a href="#6、只访问索引的查询" class="headerlink" title="6、只访问索引的查询"></a>6、只访问索引的查询</h4><p>在这里指的就是覆盖索引，即只需要访问索引，而无需访问数据行</p><h4 id="7、用于查询中的order-by-操作"><a href="#7、用于查询中的order-by-操作" class="headerlink" title="7、用于查询中的order by 操作"></a>7、用于查询中的order by 操作</h4><p>索引树中的节点是有序的。一般来说，若B-Tree可以按照某种方式查找到该值，那么也可以用这种方式用于排序。所以，如果 order by 子句中满足前面列出的几种查询类型，则这个索引也可以满足对应的排序需求。</p><h2 id="B-Tree索引的限制"><a href="#B-Tree索引的限制" class="headerlink" title="B-Tree索引的限制"></a>B-Tree索引的限制</h2><h4 id="1、-若不是按照索引的最左列开始查找，则无法使用该索引"><a href="#1、-若不是按照索引的最左列开始查找，则无法使用该索引" class="headerlink" title="1、 若不是按照索引的最左列开始查找，则无法使用该索引"></a>1、 若不是按照索引的最左列开始查找，则无法使用该索引</h4><p>比如建立联合索引（name 、phone_num），若搜索phone_num则无法使用该索引</p><h4 id="2、使用索引时，不能跳过索引中的列"><a href="#2、使用索引时，不能跳过索引中的列" class="headerlink" title="2、使用索引时，不能跳过索引中的列"></a>2、使用索引时，不能跳过索引中的列</h4><p>比如建立联合索引（name 、phone_num 、addr），若搜索name和addr 则无法使用该索引只能使用那么过滤</p><h4 id="3、not-in-和-lt-gt-操作无法使用该索引"><a href="#3、not-in-和-lt-gt-操作无法使用该索引" class="headerlink" title="3、not in 和 &lt;&gt; 操作无法使用该索引"></a>3、not in 和 &lt;&gt; 操作无法使用该索引</h4><h4 id="4、若查询中有某个列的范围查询，则其右边的所有列都无法使用索引"><a href="#4、若查询中有某个列的范围查询，则其右边的所有列都无法使用索引" class="headerlink" title="4、若查询中有某个列的范围查询，则其右边的所有列都无法使用索引"></a>4、若查询中有某个列的范围查询，则其右边的所有列都无法使用索引</h4><p>注意：存储引擎用不同的方式使用B-Tree索引，性能也各有不同，各有优劣。例如，MyISAM使用前缀压缩的技术使得索引更小，但InnoDB则按照原数据格式进行存储。<br>MyISAM索引通过数据的物理位置引用被索引的行，而InnoDB则根据逐渐引用被索引的行</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-Mysql索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引（七）唯一索引</title>
      <link href="/post/ae02e849.html"/>
      <url>/post/ae02e849.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>Mysql索引大概有五种类型：</p><p>普通索引(INDEX)：最基本的索引，没有任何限制</p><p><strong>唯一索引(UNIQUE)：与”普通索引”类似，不同的就是：索引列的值必须唯一，但允许有空值。</strong></p><p>主键索引(PRIMARY)：它 是一种特殊的唯一索引，不允许有空值。</p><p>全文索引(FULLTEXT )：可用于 MyISAM 表，mysql5.6之后也可用于innodb表，</p><p>用于在一篇文章中，检索文本信息的, 针对较大的数据，生成全文索引很耗时和空间。</p><p>联合（组合）索引：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。</p><hr><p>这里我们来看下唯一索引。</p><p>之前我们看了主键索引，他是一种特殊的唯一索引，二者的区别是，主键索引不能有空值，但是唯一索引可以有空值。</p><h2 id="一：基本使用"><a href="#一：基本使用" class="headerlink" title="一：基本使用"></a>一：基本使用</h2><p><strong>1：唯一索引可以是单列，也可以是多列，下面我们来看下创建语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建单列唯一索引</span><br><span class="line"></span><br><span class="line">alter table sc add unique (name);</span><br><span class="line"># 创建多列唯一索引</span><br><span class="line"></span><br><span class="line">alter table sc add unique key `name_score` (`name`,`score`);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2：删除唯一索引语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop index name;</span><br></pre></td></tr></table></figure><h2 id="二：唯一索引作用"><a href="#二：唯一索引作用" class="headerlink" title="二：唯一索引作用"></a>二：唯一索引作用</h2><p><strong>1：最大的所用就是确保写入数据库的数据是唯一值。</strong></p><p>单列唯一值基本上就是主键。</p><p>常用的一般都是多列的唯一索引，比如：当前商品，一个用户只能购买一件。我们将用户id及商品id列设置成唯一索引。那么就可以避免一个用户出现重复购买的情况。</p><p>示例：</p><p>创建数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; CREATE TABLE t(</span><br><span class="line">    -&gt; c1 CHAR(1) not null,</span><br><span class="line">    -&gt; c2 CHAR(1) not null,</span><br><span class="line">    -&gt; c3 CHAR(1) not null,</span><br><span class="line">    -&gt; c4 CHAR(1) not null,</span><br><span class="line">    -&gt; c5 CHAR(1) not null</span><br><span class="line">    -&gt; )ENGINE myisam CHARSET UTF8;</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加几条数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; insert into t VALUES(&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;),(&#x27;2&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;2&#x27;),(&#x27;3&#x27;,&#x27;3&#x27;,&#x27;3&#x27;,&#x27;3&#x27;,&#x27;3&#x27;),(&#x27;4&#x27;,&#x27;4&#x27;,&#x27;4&#x27;,&#x27;4&#x27;,&#x27;4&#x27;),(&#x27;5&#x27;,&#x27;5&#x27;,&#x27;5&#x27;,&#x27;5&#x27;,&#x27;5&#x27;);</span><br><span class="line">Query OK, 5 rows affected (0.00 sec)</span><br><span class="line">Records: 5  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建唯一索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; alter table t add unique key `name_score` (`c2`,`c3`);</span><br><span class="line">Query OK, 5 rows affected (0.01 sec)              </span><br><span class="line">Records: 5  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写入重复数据失败：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; insert into t (c1,c2,c3,c4,c5) values (&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;1-1&#x27; for key &#x27;name_score&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2：提高查询速度</strong></p><p>使用index索引时,经常导致慢查询,耗时2秒左右,遇忙时更有达到5秒的</p><p>改用unique之后,查询耗时在0.0003秒 基本可以忽略不计</p><h2 id="三：唯一索引和主键索引的具体区别"><a href="#三：唯一索引和主键索引的具体区别" class="headerlink" title="三：唯一索引和主键索引的具体区别"></a>三：唯一索引和主键索引的具体区别</h2><p><strong>1：唯一性约束所在的列允许空值，但是主键约束所在的列不允许空值。</strong><br><br><strong>2：可以把唯一性约束放在一个或者多个列上，这些列或列的组合必须有唯一的。但是，唯一性约束所在的列并不是表的主键列。</strong><br><br><strong>3：唯一性约束强制在指定的列上创建一个唯一性索引。在默认情况下，创建唯一性的非聚簇索引，但是，也可以指定所创建的索引是聚簇索引。</strong><br><br><strong>4：建立主键的目的是让外键来引用.</strong><br><br><strong>5： 一个表最多只有一个主键，但可以有很多唯一键</strong></p><h2 id="四：存在唯一键冲突时，避免策略"><a href="#四：存在唯一键冲突时，避免策略" class="headerlink" title="四：存在唯一键冲突时，避免策略"></a>四：存在唯一键冲突时，避免策略</h2><p><strong>1：使用insert ignore语句</strong></p><p>insert ignore会忽略数据库中已经存在的数据(根据主键或者唯一索引判断)，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; insert ignore into t (c1,c2,c3,c4,c5) values (&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;2&#x27;);</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"> </span><br><span class="line">MariaDB [test]&gt; select * from t;</span><br><span class="line">+----+----+----+----+----+</span><br><span class="line">| c1 | c2 | c3 | c4 | c5 |</span><br><span class="line">+----+----+----+----+----+</span><br><span class="line">| 1  | 1  | 1  | 1  | 1  |</span><br><span class="line">| 2  | 2  | 2  | 2  | 2  |</span><br><span class="line">| 3  | 3  | 3  | 3  | 3  |</span><br><span class="line">| 4  | 4  | 4  | 4  | 4  |</span><br><span class="line">| 5  | 5  | 5  | 5  | 5  |</span><br><span class="line">+----+----+----+----+----+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Sql执行成功，但是我们查询表的数据，发现并没有写入成功。是因为唯一索引已经存在。跳过了这条写入的命令。</p><h4 id="2：使用replace-into语句"><a href="#2：使用replace-into语句" class="headerlink" title="2：使用replace into语句"></a>2：使用replace into语句</h4><p>replace into 首先尝试插入数据到表中。 如果发现表中已经有此行数据(根据主键或者唯一索引判断)则先删除此行数据，然后插入新的数据，否则，直接插入新数据。</p><p>使用replace into，你必须具有delete和insert权限</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; replace into t (c1,c2,c3,c4,c5) values (&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;2&#x27;);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 先执行删除，再执行写入</span><br><span class="line"> </span><br><span class="line">MariaDB [test]&gt; select * from t;</span><br><span class="line">+----+----+----+----+----+</span><br><span class="line">| c1 | c2 | c3 | c4 | c5 |</span><br><span class="line">+----+----+----+----+----+</span><br><span class="line">| 1  | 1  | 1  | 1  | 2  |</span><br><span class="line">| 2  | 2  | 2  | 2  | 2  |</span><br><span class="line">| 3  | 3  | 3  | 3  | 3  |</span><br><span class="line">| 4  | 4  | 4  | 4  | 4  |</span><br><span class="line">| 5  | 5  | 5  | 5  | 5  |</span><br><span class="line">+----+----+----+----+----+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3：使用insert on duplicate key update语句</strong></p><p>如果在insert into 语句末尾指定了on duplicate key update，并且插入行后会导致在一个UNIQUE索引或PRIMARY KEY中出现重复值，则在出现重复值的行执行UPDATE；如果不会导致重复的问题，则插入新行，跟普通的insert into一样。</p><p>使用insert into，你必须具有insert和update权限</p><p>如果有新记录被插入，则受影响行的值显示1；如果原有的记录被更新，则受影响行的值显示2；如果记录被更新前后值是一样的，则受影响行数的值显示0</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; insert into t (c1,c2,c3,c4,c5) values (&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;2&#x27;) on duplicate key update c2 = 5;</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line">MariaDB [test]&gt; select * from t;</span><br><span class="line">+----+----+----+----+----+</span><br><span class="line">| c1 | c2 | c3 | c4 | c5 |</span><br><span class="line">+----+----+----+----+----+</span><br><span class="line">| 1  | 5  | 1  | 1  | 2  |</span><br><span class="line">| 2  | 2  | 2  | 2  | 2  |</span><br><span class="line">| 3  | 3  | 3  | 3  | 3  |</span><br><span class="line">| 4  | 4  | 4  | 4  | 4  |</span><br><span class="line">| 5  | 5  | 5  | 5  | 5  |</span><br><span class="line">+----+----+----+----+----+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要注意一下：</p><p>insert … on duplicate key 在执行时，innodb引擎会先判断插入的行是否产生重复key错误，<br>如果存在，在对该现有的行加上S(共享锁)锁，如果返回该行数据给mysql,然后mysql执行完duplicate后的update操作，<br>然后对该记录加上X(排他锁)，最后进行update写入。</p><p>如果有两个事务并发的执行同样的语句，<br>那么就会产生death lock（死锁）</p><p>因此在使用的时候尽量避免：</p><p>尽量对存在多个唯一键的table使用该语句</p><p>在有可能有并发事务执行的insert 的内容一样情况下不使用该语句</p><p><strong>4：总结</strong><br>这三种方法都能避免主键或者唯一索引重复导致的插入失败问题。</p><p>insert ignore能忽略重复数据，只插入不重复的数据。</p><p>replace into和insert … on duplicate key update，都是替换原有的重复数据，区别在于replace into是删除原有的行后，在插入新行，如有自增id，这个会造成自增id的改变；insert … on duplicate key update在遇到重复行时，会直接更新原有的行，具体更新哪些字段怎么更新，取决于update后的语句。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-Mysql索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引（四）索引的数据结构HASH</title>
      <link href="/post/57713f36.html"/>
      <url>/post/57713f36.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>我们常用的索引数据结构比较多的是B+TREE。</p><p>还有另一种索引数据结构是hash，但是innoDB、mysiam数据引擎不支持hash数据结构。</p><p>不同的存储引擎支持的索引类型也不一样：</p><p>InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</p><p>MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</p><p>Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</p><p>NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</p><p>Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</p><p>这个玩意，mysiam和innodb是不支持的，所以，一般情况下用不上了解就好。</p><h2 id="一：hash算法复杂度"><a href="#一：hash算法复杂度" class="headerlink" title="一：hash算法复杂度"></a>一：hash算法复杂度</h2><p>哈希算法时间复杂度为O(1)，且不只存在于索引中，每个数据库应用中都存在该数据结构。</p><h2 id="二：HASH索引特性"><a href="#二：HASH索引特性" class="headerlink" title="二：HASH索引特性"></a>二：HASH索引特性</h2><p>在MySQL的存储引擎中，MyISAM不支持哈希索引，而InnoDB中的hash索引是存储引擎根据B-Tree索引自建的，后面会对其做具体说明。</p><p>hash索引的特点</p><p><strong>1、 hash索引是基于hash表实现的，只有查询条件精确匹配hash索引中的所有列的时候，才能用到hash索引。</strong></p><p><strong>2、 对于hash索引中的所有列，存储引擎都会为每一行计算一个hash码，hash索引中存储的就是hash码。</strong></p><p><strong>3、 hash索引包括键值、hash码和指针 。</strong></p><p>因为hash索引本身只需要存储对应的hash值，所以索引的结构十分紧凑，这也让hash索引查找的速度非常快。然而，hash索引也是存在其限制的：</p><h2 id="三：hash索引的限制"><a href="#三：hash索引的限制" class="headerlink" title="三：hash索引的限制"></a>三：hash索引的限制</h2><p><strong>1、 Hash索引必须进行二次查找</strong></p><p>使用哈市索引两次查找，第一次找到相应的行，第二次读取数据，但是被频繁访问到的行一般会缓存在内存中，这点对数据库性能的影响不大。<br>　　<br><strong>2、hash索引不能用于外排序</strong><br>hash索引存储的是hash码而不是键值，所以无法用于外排序<br>　　<br><strong>3、hash索引不支持部分索引查找也不支持范围查找</strong></p><p>只能用到等值查询，不能范围和模糊查询<br>　　<br><strong>4、hash索引中的hash码的计算可能存在hash冲突</strong></p><p>当出现hash冲突的时候，存储引擎必须遍历整个链表中的所有行指针，逐行比较，直到找到所有的符合条件的行，若hash冲突很多的话，一些索引的维护代价机会很高，所以说hash索引不适用于选择性很差的列上（重复值很多）。姓名、性别、身份证（合适）</p><p>上面说到InnoDB的“自适应hash索引”。就是当InnoDB注意到某些索引值被使用的非常频繁时，它会在内存中基于B-Tree索引上在创建一个hash索引，这样就让B-tree索引也具有hash索引的一些优点。这是一个完全自动的内部的行为，用户无法控制或配置，不过，如果有需要，完全可以关闭该功能。</p><h2 id="四：创建自定义hash索引"><a href="#四：创建自定义hash索引" class="headerlink" title="四：创建自定义hash索引"></a>四：创建自定义hash索引</h2><p>若存储引擎不支持hash索引，又想拥有hash索引所带来的性能提升，则可以模拟InnoDB一样创建哈希索引。</p><p>思路也比较简单，就是在B-tree基础上创建一个伪哈希索引。这和真正的hash索引不是一回事，因为还是采用B-Tree进行查找，但是它使用的是hash值而不是键本身进行查找。只需要在查询的where子句中手动指定使用hash函数即可。下面举个简单的例子：</p><p>比如：当我们需要存储大量的URL，并需要根据URL进行搜索查找。若用B-Tree来存储URL，存储的内容就会很大。此时的查询语句就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select id from url where url = &quot;www.baidu.com&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若删除原来的url列上的索引，而新增一个被索引的url_crc列，使用crc32做hash函数，则可以使用如下方式查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select id from url where url = &quot;www.baidu.com&quot; and url_crc=CRC32(&quot;www.baidu.com&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样做的话，性能就会有很大提升，因为mysql优化器会使用这个选择性高而体积很小的基于url_crc列的多音来完成查找。即使有多个记录相同的索引值，查找仍然很快，只需要根据hash值做快速的整数比较就能找到索引条目，然后一一返回对应的行。</p><h2 id="五：Hash缺点"><a href="#五：Hash缺点" class="headerlink" title="五：Hash缺点"></a>五：Hash缺点</h2><p><strong>1、需要维护hash值，可以手动维护，也可以使用触发器实现。</strong><br><br><strong>2、若数据表非常大的话，CRC32（）会出现大量hash冲突，则可以自己实现一个64位的hash函数，这个自定义的hash函数要返回整数而不是字符串，因为范围整数，对此效率更高。一个简单的办法就是使用MD5（）函数返回值的一部分来作为自定义的hash函数。但是这可能比自己写一个hash算法性能要差一些。</strong></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-Mysql索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引（三）聚集索引与非聚集索引（辅助索引）</title>
      <link href="/post/b848a5c1.html"/>
      <url>/post/b848a5c1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>Mysql中常用的两个存储引擎innodb和mysiam的索引是不同的。</p><p>聚集索引就是以主键创建的索引</p><p>非聚集索引就是除了主键以外的索引。</p><p>非聚集索引也叫做二级索引，不用纠结那么多名词，将其等价就行了。非聚集索引在建立的时候也未必是单列的，可以多个列来创建索引。</p><p>关于mysiam和innoDB的特性及区别，我在下边放了一张图：</p><p><img src="https://z3.ax1x.com/2021/09/17/4uv7sx.png" alt="4uv7sx.png"></p><p>在数据库中，B+树的高度一般都在2到4层，这也就是说查找某一个键值的行记录时最多只需要2到4次IO，这倒不错。因为当前一般的机械硬盘每秒至少可以做100次IO，24次的IO意味着查询时间只需要0.02~0.04秒。</p><p>数据库中的B+树索引可以分为聚集索引（clustered index）和辅助索引（secondary index）。</p><p>聚集索引与辅助索引相同的是：不管是聚集索引还是辅助索引，其内部都是B+树的形式，即高度是平衡的，叶子结点存放着所有的数据。</p><p>聚集索引与辅助索引不同的是：辅助索引的叶子节点不包含行记录的全部数据</p><h2 id="一：非聚集索引（辅助索引）"><a href="#一：非聚集索引（辅助索引）" class="headerlink" title="一：非聚集索引（辅助索引）"></a>一：非聚集索引（辅助索引）</h2><p>Mysiam创建数据表的时候，会在磁盘上生成三个.frm.MYD.MYI结尾的三个文件，frm结尾的是表结构，MYD结尾的是数据文件，MYI结尾的就是索引文件，也就是说索引也是存在硬盘上的。</p><p>叶子节点存放的是对应的那条数据的主键字段的值，除了包含键值以外，每个叶子节点中的索引行中还包含一个书签（bookmark），其实这个书签你可以理解为是一个{‘name字段’，name的值，主键id值}的这么一个数据。</p><p>该书签用来告诉InnoDB存储引擎去哪里可以找到与索引相对应的行数据。如果我们select 后面要的是name，我们直接就可以在辅助索引的叶子节点找到对应的name值，比如：select name from tb1 where name&#x3D;‘xx’；</p><p>这个xx值你直接就在辅助索引的叶子节点就能找到，这种我们也可以称为覆盖索引。如果你select后面的字段不是name，例如：select age from tb1 where name&#x3D;‘xx’；</p><p>也就是说，我通过辅助索引的叶子节点不能直接拿到age的值，需要通过辅助索引的叶子节点中保存的主键id的值再去通过聚集索引来找到完整的一条记录，然后从这个记录里面拿出age的值，这种操作有时候也成为回表操作，就是从头再回去查一遍，这种的查询效率也很高，但是比覆盖索引低一些，再说一下昂，再辅助索引的叶子节点就能找到你想找的数据可称为覆盖索引。</p><h2 id="二：聚集性索引"><a href="#二：聚集性索引" class="headerlink" title="二：聚集性索引"></a>二：聚集性索引</h2><p>InnoDB 在 B+ 树数据结构中索引又分为聚集索引和辅助索引</p><p>InnoDB创建数据表的时候，会在磁盘上生成.frm.idb结尾的两个文件。</p><p>索引存储在.idb结尾的数据文件中，InnoDB引擎的表，它的索引和数据都在同一个文件里面，所以我一直强调，使用InnoDB存储引擎的时候，每建一个表，就需要给一个主键，是因为这个主键是InnoDB存储引擎的.idb文件来组织存储数据的依据或者说方式，也就是说InnoDB存储引擎在存储数据的时候默认就按照索引的那种树形结构来帮你存。</p><p>这种索引，我们就称为聚集索引，也就是在聚集数据组织数据的时候，就用这种索引。</p><p>InnoDB这么做就是为了加速查询效率，因为你经常会遇到基于主键来查询数据的情况，并且通常我们把id字段作为主键，第一点是因为id占用的数据空间不大，第二点是你经常会用到id来查数据。</p><p>如果你的表有两个字段，一个id一个name，id为主键，当你查询的时候如果where后面的条件是name&#x3D;多少多少，那么你就没有用到主键给你带来的加速查询的效果（需要主键之外的辅助索引），如果你用where id&#x3D;多少多少，就会按照我们刚才上面说的哪种树形结构来给你找寻数据了（当然不仅仅有这种树形结构的数据结构类型），能够快速的帮你定位到数据块。</p><p>这种聚集索引的特点是它会以id字段作为依据，去建立树形结构，但是叶子节点存的是你表中的一条完整记录，一条完整的数据。</p><p>聚集索引的特性：</p><ol><li><p>InnoDB存储引擎表示索引组织表，即表中数据按照主键顺序存放。而聚集索引（clustered index）就是按照每张表的主键构造一棵B+树，同时叶子结点存放的即为整张表的行记录数据，也将聚集索引的叶子结点称为数据页。聚集索引的这个特性决定了索引组织表中数据也是索引的一部分。同B+树数据结构一样，每个数据页都通过一个双向链表来进行链接。</p></li><li><p>如果未定义主键，MySQL取第一个唯一索引（unique）而且只含非空列（NOT NULL）作为主键，InnoDB使用它作为聚簇索引。</p></li><li><p>如果没有这样的列，InnoDB就自己产生一个这样的ID值，它有六个字节，而且是隐藏的，使其作为聚簇索引。</p></li><li><p>由于实际的数据页只能按照一棵B+树进行排序，因此每张表只能拥有一个聚集索引。在多少情况下，查询优化器倾向于采用聚集索引。因为聚集索引能够在B+树索引的叶子节点上直接找到数据。此外由于定义了数据的逻辑顺序，聚集索引能够特别快地访问针对范围值得查询。</p></li></ol><h2 id="三：关于索引的建议"><a href="#三：关于索引的建议" class="headerlink" title="三：关于索引的建议"></a>三：关于索引的建议</h2><p>1：单表索引不超过六个</p><p>2： 不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。</p><p>3：用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-Mysql索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引（五）联合索引</title>
      <link href="/post/befa8d0a.html"/>
      <url>/post/befa8d0a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>Mysql索引大概有五种类型：</p><p><strong>普通索引(INDEX)：最基本的索引，没有任何限制</strong></p><p><strong>唯一索引(UNIQUE)：与”普通索引”类似，不同的就是：索引列的值必须唯一，但允许有空值。</strong></p><p><strong>主键索引(PRIMARY)：它 是一种特殊的唯一索引，不允许有空值。</strong></p><p><strong>全文索引(FULLTEXT )：可用于 MyISAM 表，mysql5.6之后也可用于innodb表</strong>，</p><p><strong>用于在一篇文章中，检索文本信息的, 针对较大的数据，生成全文索引很耗时和空间。</strong></p><p><strong><font size=4>联合（组合）索引：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。</font></strong></p><hr><p>这里我们先来看联合索引（组合索引）。</p><p>比较简单的是单列索引（b+tree）。这个就不做解释。</p><p>遇到多条件查询时，不可避免会使用到多列索引。</p><p>我们使用一个例子来理解联合索引的使用方法：</p><p>我们来创建一个表，里边有五个字段c1,c2,c3,c4,c5。这个数据表有一个组合索引(c1,c2,c3,c4)</p><p>创建数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; CREATE TABLE t(</span><br><span class="line">    -&gt; c1 CHAR(1) not null,</span><br><span class="line">    -&gt; c2 CHAR(1) not null,</span><br><span class="line">    -&gt; c3 CHAR(1) not null,</span><br><span class="line">    -&gt; c4 CHAR(1) not null,</span><br><span class="line">    -&gt; c5 CHAR(1) not null</span><br><span class="line">    -&gt; )ENGINE myisam CHARSET UTF8;</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br></pre></td></tr></table></figure><p>添加联合索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; alter table t add index c1234(c1,c2,c3,c4);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)              </span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><p>添加几条数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [test]&gt; insert into t VALUES(&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;),(&#x27;2&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;2&#x27;),(&#x27;3&#x27;,&#x27;3&#x27;,&#x27;3&#x27;,&#x27;3&#x27;,&#x27;3&#x27;),(&#x27;4&#x27;,&#x27;4&#x27;,&#x27;4&#x27;,&#x27;4&#x27;,&#x27;4&#x27;),(&#x27;5&#x27;,&#x27;5&#x27;,&#x27;5&#x27;,&#x27;5&#x27;,&#x27;5&#x27;);</span><br><span class="line">Query OK, 5 rows affected (0.00 sec)</span><br><span class="line">Records: 5  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><p>接下来我们使用MySql Explain开始分析我们各种情况的查询语句是否用到了联合索引。且用到了联合索引中的那几个元素。</p><h4 id="1：效率最高，同时走四个索引"><a href="#1：效率最高，同时走四个索引" class="headerlink" title="1：效率最高，同时走四个索引"></a>1：效率最高，同时走四个索引</h4><p>（1）：按顺序写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t where c1 = &#x27;1&#x27; and c2 = &#x27;1&#x27; and c3 = &#x27;1&#x27; and c4 = &#x27;1&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4uX9yV.png" alt="4uX9yV.png"></p><p>（2）：不按顺序写，经过mysql的优化，也是走全部索引的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t where  c3 = &#x27;1&#x27; and c4 = &#x27;1&#x27; and c1 = &#x27;1&#x27; and c2 = &#x27;1&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4uXmS1.png" alt="4uXmS1.png"></p><h2 id="2：最左前缀原则"><a href="#2：最左前缀原则" class="headerlink" title="2：最左前缀原则"></a>2：最左前缀原则</h2><p>（1）：不走索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t where c2 = &#x27;1&#x27; and c3 = &#x27;1&#x27; and c4 = &#x27;1&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4uX1Te.png" alt="4uX1Te.png"></p><p>因为组合索引遵循最左前缀原则，而，我们的组合索引第一个字段是c1，如果我们的where查询条件中没有c1这个筛选条件，那么mysql默认认为我们不希望通过索引查询。</p><p>（2）：覆盖部分索引</p><p><img src="https://z3.ax1x.com/2021/09/17/4uX8FH.png" alt="4uX8FH.png"></p><p>我们可以对比上边两次查询的结果，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t where c1 = &#x27;1&#x27; and c4 = &#x27;1&#x27;;</span><br></pre></td></tr></table></figure><p>只走了C1索引，因为组合索引遵循最左前缀原则。</p><p>explain select * from t where c1 &#x3D; ‘1’ and c2 &#x3D; ‘1’;<br>这条查询语句走了C1和C2两个索引，同样，这个也是最左前缀原则的结果。</p><p>通过上边的对比，我们在使用联合索引的时候需要注意索引的使用顺序问题。</p><h4 id="3：当查询条件中有范围查询及模糊查询的情况"><a href="#3：当查询条件中有范围查询及模糊查询的情况" class="headerlink" title="3：当查询条件中有范围查询及模糊查询的情况"></a>3：当查询条件中有范围查询及模糊查询的情况</h4><p>（1）：第一个字段使用模糊查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t where c1 like &#x27;3&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4uXtSI.png" alt="4uXtSI.png"></p><p>（2）：第一个字段使用模糊查询并且其后边还有查询条件的时候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t where c1 like &#x27;3&#x27; and c2 = &#x27;1&#x27; and c3 = &#x27;1&#x27; and c4 = &#x27;1&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4uXglq.png" alt="4uXglq.png"></p><p>从上边的查询结果我们可以看出，第一个字段使用模糊查询对之后的查询条件使用索引是没有影响的。</p><p>（3）：使用between关键字范围查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t where c1 between &#x27;1&#x27; and &#x27;3&#x27; and c2 = &#x27;1&#x27; and c3 = &#x27;1&#x27; and c4 = &#x27;1&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4ujeAg.png" alt="4ujeAg.png"></p><p>全索引匹配。</p><p>（4）：使用“&gt;”“&lt;”进行范围查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t where c1 &gt; &#x27;3&#x27; and c2 = &#x27;1&#x27; and c3 = &#x27;1&#x27; and c4 = &#x27;1&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4ujM3n.png" alt="4ujM3n.png"></p><p>使用 &gt; &lt; 的时候，会对索引产生影响，通过上边的查询结果我们可以发现当第一个字段使用范围查询之后，后边的条件便不会再走索引了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t where c1 = &#x27;1&#x27; and c2 &gt; &#x27;1&#x27; and c3 = &#x27;1&#x27; and c4 = &#x27;1&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4ujtN4.png" alt="4ujtN4.png"></p><p>这次就是走两个索引C1和C2。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-Mysql索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引（六）主键索引</title>
      <link href="/post/a4d37989.html"/>
      <url>/post/a4d37989.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>Mysql索引大概有五种类型：</p><p><strong>普通索引(INDEX)：最基本的索引，没有任何限制</strong></p><p><strong>唯一索引(UNIQUE)：与”普通索引”类似，不同的就是：索引列的值必须唯一，但允许有空值。</strong></p><p>**<font size=4><strong>主键索引(PRIMARY)：它 是一种特殊的唯一索引，不允许有空值。</font></strong></p><p><strong>全文索引(FULLTEXT )：可用于 MyISAM 表，mysql5.6之后也可用于innodb表</strong>，</p><p><strong>用于在一篇文章中，检索文本信息的, 针对较大的数据，生成全文索引很耗时和空间。</strong></p><p><strong>联合（组合）索引：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。</strong></p><hr><p>这里我们来看下主键索引（特殊的唯一索引）。</p><p>主键索引一般建议使用数据表的自增唯一主键来作为主键索引使用。</p><p>主键索引，简称主键，原文是PRIMARY KEY，由一个或多个列组成，用于唯一性标识数据表中的某一条记录。一个表可以没有主键，但最多只能有一个主键，并且主键值不能包含NULL。</p><p>在MySQL中，InnoDB数据表的主键设计我们通常遵循几个原则：</p><p>1、采用一个没有业务用途的自增属性列作为主键；<br>2、主键字段值总是不更新，只有新增或者删除两种操作；<br>3、不选择会动态更新的类型，比如当前时间戳等。</p><p>在MyISAM引擎中，唯一索引除了key值允许存在NULL外，其余的和主键索引没有本质性区别。也就是说，在MyISAM引擎中，不允许存在NULL值的唯一索引，本质上和主键索引是一回事。</p><p>而在InnoDB引擎中，主键索引和辅助索引的区别就很大了。主键索引会被选中作为聚集索引，而唯一索引和普通辅助索引间除了唯一性约束外，在存储上没本质区别。</p><p>从查询性能上来说，在MyISAM表中主键索引和不允许有NULL的唯一索引的查询性能是相当的，在InnoDB表通过唯一索引查询则需要多一次从辅助索引到主键索引的转换过程。InnoDB表基于普通索引的查找代价更高，因为每次检索到结果后，还需要至少再多检索一次才能确认是否还有更多符合条件的结果，主键索引和唯一索引就不需要这么做了。</p><p>关于主键索引，我能想到的基本上就是这些了。这个没有sql的验证。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-Mysql索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引（一）索引的原理</title>
      <link href="/post/be3a308e.html"/>
      <url>/post/be3a308e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>之前在学习mysql的时候，对索引有了初步的了解。</p><p>但是，了解的不是很透，比如说，当时我就不知道，索引其实是一个数据结构。</p><h2 id="一：索引介绍"><a href="#一：索引介绍" class="headerlink" title="一：索引介绍"></a>一：索引介绍</h2><h4 id="1：为何要有索引"><a href="#1：为何要有索引" class="headerlink" title="1：为何要有索引?"></a>1：为何要有索引?</h4><p>一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，因此对查询语句的优化显然是重中之重。说起加速查询，就不得不提到索引了。</p><h4 id="2：什么是索引？"><a href="#2：什么是索引？" class="headerlink" title="2：什么是索引？"></a>2：什么是索引？</h4><p>索引在MySQL中也叫做“键”或者”key”（primary key，unique key，还有一个index key），是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能非常关键，尤其是当表中的数据量越来越大时，索引对于性能的影响愈发重要，减少io次数，加速查询。（其中primary key和unique key，除了有加速查询的效果之外，还有约束的效果，primary key 不为空且唯一，unique key 唯一，而index key只有加速查询的效果，没有约束效果）</p><p>索引优化应该是对查询性能优化最有效的手段了。索引能够轻易将查询性能提高好几个数量级。<br>索引相当于字典的音序表，如果要查某个字，如果不使用音序表，则需要从几百页中逐页去查。</p><p>强调：一旦为表创建了索引，以后的查询最好先查索引，再根据索引定位的结果去找数据</p><h4 id="3：对索引的误解"><a href="#3：对索引的误解" class="headerlink" title="3：对索引的误解"></a>3：对索引的误解</h4><p><strong>（1）：索引时不必越多越好，添加索引对查询会提高速度，对写入及删除会较低效率。因此需要找到一个创建索引的平衡点</strong></p><p><strong>（2）：索引太多，会影响磁盘的使用率，尽量删除一些不必要的索引。</strong></p><h2 id="二：索引的原理"><a href="#二：索引的原理" class="headerlink" title="二：索引的原理"></a>二：索引的原理</h2><h4 id="1：索引的原理"><a href="#1：索引的原理" class="headerlink" title="1：索引的原理"></a>1：索引的原理</h4><p>索引就相当于是一本字典的查找目录。我们可以根据拼音查找，我们也可以根据偏旁部首之类的查找。</p><p>下面内容看不懂的同学也没关系，能明白上边这个目录的道理就行了。 那么你想，书的目录占不占页数，这个页是不是也要存到硬盘里面，也占用硬盘空间。你再想，你在没有数据的情况下先建索引或者说目录快，还是已经存在好多的数据了，然后再去建索引，哪个快，肯定是没有数据的时候快。</p><p>因为如果已经有了很多数据了，你再去根据这些数据建索引，是不是要将数据全部遍历一遍，然后根据数据建立索引。你再想，索引建立好之后再添加数据快，还是没有索引的时候添加数据快，索引是用来干什么的，是用来加速查询的，那对你写入数据会有什么影响，肯定是慢一些了，因为你但凡加入一些新的数据，都需要把索引或者说书的目录重新做一个，所以索引虽然会加快查询，但是会降低写入的效率。</p><h4 id="2：索引的影响"><a href="#2：索引的影响" class="headerlink" title="2：索引的影响"></a>2：索引的影响</h4><p><strong>1、在表中有大量数据的前提下，创建索引速度会很慢</strong></p><p><strong>2、在索引创建完毕后，对表的查询性能会发幅度提升，但是写性能会降低</strong></p><p>本质都是：通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。</p><p>这里大概解释一下：</p><p>数据库也是一样，但显然要复杂的多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。</p><p>数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段…这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。</p><p>但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的。</p><p>而数据库实现比较复杂，一方面数据是保存在磁盘上的，另外一方面为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p><h4 id="3：磁盘IO读取"><a href="#3：磁盘IO读取" class="headerlink" title="3：磁盘IO读取"></a>3：磁盘IO读取</h4><p>这个涉及到部分硬件的原理，这个不了解无所谓，只需要知道，磁盘I&#x2F;O是很耗费资源和时间的，而且磁盘I&#x2F;O是有瓶颈的。</p><p>考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。</p><p>具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-Mysql索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何清空表中的数据</title>
      <link href="/post/623e59f4.html"/>
      <url>/post/623e59f4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名;</span><br></pre></td></tr></table></figure><h2 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table 表名;</span><br></pre></td></tr></table></figure><h2 id="比-较："><a href="#比-较：" class="headerlink" title="比  较："></a>比  较：</h2><ol><li>不带where参数的delete语句可以删除mysql表中所有内容，使用truncate table也可以清空mysql表中所有内容。</li><li>效率上truncate比delete快，但truncate删除后不记录mysql日志，不可以恢复数据。</li><li>delete的效果有点像将mysql表中所有记录一条一条删除到删完，而truncate相当于保留mysql表的结构，重新创建了这个表，所有的状态都相当于新表。</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-批量插入多条数据-pymysql-executemany方法</title>
      <link href="/post/89eb30ad.html"/>
      <url>/post/89eb30ad.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>pymysql中游标对象，execute可以执行一次sql语句</p><p>如果我们一次需要执行多次sql语句</p><p>可以用新的方法批量操作</p><h2 id="executemany方法"><a href="#executemany方法" class="headerlink" title="executemany方法"></a>executemany方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.executemany(&quot;&quot;&quot; insert into aaa(字段1, 字段n) values(占位1，占位n)&quot;&quot;&quot;, [（数据1，数据n），（数据1，数据n）])</span><br></pre></td></tr></table></figure><p>说明，executemany方法的第二个参数是一个列表，每一个成员都是一个元组。</p><p>元组中的数据，会按照位置对应关系替代到占位1与占位2中</p><hr><p>》试验代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host = &quot;127.0.0.1&quot;,</span><br><span class="line">    port=3306,</span><br><span class="line">    user=&#x27;root&#x27;,</span><br><span class="line">    password=&#x27;root&#x27;,</span><br><span class="line">    database=&#x27;pytest3&#x27;,</span><br><span class="line">    charset=&#x27;utf8&#x27;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"># res = cursor.execute(&quot;&quot;&quot; select * from aaa ;&quot;&quot;&quot;)</span><br><span class="line">li = []</span><br><span class="line">for i in range(20,30):</span><br><span class="line">    li.append((i,&quot;学生%s&quot; %i))</span><br><span class="line"></span><br><span class="line">cursor.executemany(&quot;&quot;&quot; insert into aaa(id, name) values(%s,&quot;%s&quot;)&quot;&quot;&quot;, li)</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">print(&#x27;ok&#x27;)</span><br></pre></td></tr></table></figure><p>》效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from aaa;</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">|  1 | 11       |</span><br><span class="line">|  2 | 1        |</span><br><span class="line">|  3 | 2        |</span><br><span class="line">|  4 | 3        |</span><br><span class="line">|  5 | 4        |</span><br><span class="line">|  6 | 5        |</span><br><span class="line">| 20 | &#x27;学生20&#x27; |</span><br><span class="line">| 21 | &#x27;学生21&#x27; |</span><br><span class="line">| 22 | &#x27;学生22&#x27; |</span><br><span class="line">| 23 | &#x27;学生23&#x27; |</span><br><span class="line">| 24 | &#x27;学生24&#x27; |</span><br><span class="line">| 25 | &#x27;学生25&#x27; |</span><br><span class="line">| 26 | &#x27;学生26&#x27; |</span><br><span class="line">| 27 | &#x27;学生27&#x27; |</span><br><span class="line">| 28 | &#x27;学生28&#x27; |</span><br><span class="line">| 29 | &#x27;学生29&#x27; |</span><br><span class="line">+----+----------+</span><br><span class="line">16 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-PyMySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>replace into用法</title>
      <link href="/post/c98ae352.html"/>
      <url>/post/c98ae352.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h4 id="相同"><a href="#相同" class="headerlink" title="相同"></a>相同</h4><ul><li>replace into 跟 insert 功能类似</li></ul><h4 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h4><ul><li><strong>replace into 首先尝试插入数据到表中！如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据否则，直接插入新数据。</strong></li></ul><p><font color=red>要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。</font></p><hr><h1 id="replace-into-的三种形式："><a href="#replace-into-的三种形式：" class="headerlink" title="replace into 的三种形式："></a>replace into 的三种形式：</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace into tbl_name(col_name, ...) values(...)</span><br></pre></td></tr></table></figure><p>第一种形式类似于insert into的用法</p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace into tbl_name(col_name, ...) select ...</span><br></pre></td></tr></table></figure><p>第二种replace select的用法也类似于insert select，这种用法并不一定要求列名匹配，事实上，MYSQL甚至不关心select返回的列名，它需要的是列的位置。例如，replace into tb1( name, title, mood) select rname, rtitle, rmood from tb2;?这个例子使用replace into从?tb2中将所有数据导入tb1中。</p><h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace into tbl_name <span class="built_in">set</span> col_name=value, ...**</span><br></pre></td></tr></table></figure><p>第三种replace set用法类似于update set用法，使用一个例如“SET col_name &#x3D; col_name + 1”的赋值，则对位于右侧的列名称的引用会被作为DEFAULT(col_name)处理。因此，该赋值相当于SET col_name &#x3D; DEFAULT(col_name) + 1。</p><p>前两种形式用的多些。其中 “into” 关键字可以省略，不过最好加上 “into”，这样意思更加直观。另外，对于那些没有给予值的列，MySQL 将自动为这些列赋上默认值。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL-SQL语句-插入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas--Series</title>
      <link href="/post/b3d7f110.html"/>
      <url>/post/b3d7f110.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1、Series"><a href="#1、Series" class="headerlink" title="1、Series"></a>1、Series</h2><p>线性的数据结构, series是一个一维数组</p><p>Pandas 会默然用0到n-1来作为series的index, 但也可以自己指定index( 可以把index理解为dict里面的key )</p><h4 id="1-1创造一个serise数据"><a href="#1-1创造一个serise数据" class="headerlink" title="1.1创造一个serise数据"></a>1.1创造一个serise数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">9</span>, <span class="string">&#x27;zheng&#x27;</span>, <span class="string">&#x27;beijing&#x27;</span>, <span class="number">128</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><ul><li><p>打印</p><p>打印</p><p>0          9<br>1      zheng<br>2    beijing<br>3        128<br>dtype: object</p></li><li><p>访问其中某个数据</p><p>访问其中某个数据</p><p>print(s[1:2])</p><h1 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h1><p>1    zheng<br>dtype: object</p></li></ul><h4 id="1-2-指定index"><a href="#1-2-指定index" class="headerlink" title="1.2 指定index"></a>1.2 指定index</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">9</span>, <span class="string">&#x27;zheng&#x27;</span>, <span class="string">&#x27;beijing&#x27;</span>, <span class="number">128</span>, <span class="string">&#x27;usa&#x27;</span>, <span class="number">990</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><ul><li><p>打印</p><p>打印</p><p>1          9<br>2      zheng<br>3    beijing<br>e        128<br>f        usa<br>g        990<br>dtype: object</p></li><li><p>根据索引找出值</p><p>print(s[‘f’])    # usa</p></li></ul><h4 id="1-3-用dictionary构造一个series"><a href="#1-3-用dictionary构造一个series" class="headerlink" title="1.3 用dictionary构造一个series"></a>1.3 用dictionary构造一个series</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = &#123;<span class="string">&quot;ton&quot;</span>: <span class="number">20</span>, <span class="string">&quot;mary&quot;</span>: <span class="number">18</span>, <span class="string">&quot;jack&quot;</span>: <span class="number">19</span>, <span class="string">&quot;car&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"></span><br><span class="line">sa = pd.Series(s, name=<span class="string">&quot;age&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sa)</span><br></pre></td></tr></table></figure><ul><li><p>打印</p><p>car      NaN<br>jack    19.0<br>mary    18.0<br>ton     20.0<br>Name: age, dtype: float64</p></li><li><p>检测类型</p><p>print(type(sa))    # &lt;class ‘pandas.core.series.Series’&gt;</p></li></ul><h4 id="1-4-用numpy-ndarray构造一个Series"><a href="#1-4-用numpy-ndarray构造一个Series" class="headerlink" title="1.4 用numpy ndarray构造一个Series"></a>1.4 用numpy ndarray构造一个Series</h4><p>#生成一个随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">num_abc = pd.Series(np.random.randn(<span class="number">5</span>), index=<span class="built_in">list</span>(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line">num = pd.Series(np.random.randn(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="built_in">print</span>(num_abc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="number">0</span>   -<span class="number">0.102860</span></span><br><span class="line"><span class="number">1</span>   -<span class="number">1.138242</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1.408063</span></span><br><span class="line"><span class="number">3</span>   -<span class="number">0.893559</span></span><br><span class="line"><span class="number">4</span>    <span class="number">1.378845</span></span><br><span class="line">dtype: float64</span><br><span class="line">a   -<span class="number">0.658398</span></span><br><span class="line">b    <span class="number">1.568236</span></span><br><span class="line">c    <span class="number">0.535451</span></span><br><span class="line">d    <span class="number">0.103117</span></span><br><span class="line">e   -<span class="number">1.556231</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h4 id="1-5-切片"><a href="#1-5-切片" class="headerlink" title="1.5 切片"></a>1.5 切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">9</span>, <span class="string">&#x27;zheng&#x27;</span>, <span class="string">&#x27;beijing&#x27;</span>, <span class="number">128</span>, <span class="string">&#x27;usa&#x27;</span>, <span class="number">990</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 选择第1到3个, 包左不包右 zheng beijing</span></span><br><span class="line"><span class="built_in">print</span>(s[[<span class="number">1</span>,<span class="number">3</span>]])  <span class="comment"># 选择第1个和第3个, zheng 128</span></span><br><span class="line"><span class="built_in">print</span>(s[:-<span class="number">1</span>]) <span class="comment"># 选择第1个到倒数第1个, 9 zheng beijing 128 usa</span></span><br></pre></td></tr></table></figure><h4 id="1-6-切片操作数据"><a href="#1-6-切片操作数据" class="headerlink" title="1.6 切片操作数据"></a>1.6 切片操作数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">9</span>, <span class="string">&#x27;zheng&#x27;</span>, <span class="string">&#x27;beijing&#x27;</span>, <span class="number">128</span>, <span class="string">&#x27;usa&#x27;</span>, <span class="number">990</span>], index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = s[<span class="number">1</span>:<span class="number">3</span>] + s[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">sum1 = s[<span class="number">1</span>:<span class="number">4</span>] + s[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">sum2 = s[<span class="number">1</span>:<span class="number">3</span>] + s[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">sum3 = s[:<span class="number">3</span>] + s[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"><span class="built_in">print</span>(sum1)</span><br><span class="line"><span class="built_in">print</span>(sum2)</span><br><span class="line"><span class="built_in">print</span>(sum3)</span><br></pre></td></tr></table></figure><p>#打印</p><pre><code>2        zhengzheng3    beijingbeijingdtype: object2        zhengzheng3    beijingbeijinge               256dtype: object2        zhengzheng3    beijingbeijinge               NaNdtype: object1               NaN2        zhengzheng3    beijingbeijinge               NaNf               NaNg               NaNdtype: object</code></pre><h4 id="1-7-查找"><a href="#1-7-查找" class="headerlink" title="1.7 查找"></a>1.7 查找</h4><ul><li>范围查找</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">s = &#123;<span class="string">&quot;ton&quot;</span>: <span class="number">20</span>, <span class="string">&quot;mary&quot;</span>: <span class="number">18</span>, <span class="string">&quot;jack&quot;</span>: <span class="number">19</span>, <span class="string">&quot;jim&quot;</span>: <span class="number">22</span>, <span class="string">&quot;lj&quot;</span>: <span class="number">24</span>, <span class="string">&quot;car&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"> </span><br><span class="line">sa = pd.Series(s, name=<span class="string">&quot;age&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sa[sa&gt;<span class="number">19</span>])</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4uoKpT.png" alt="4uoKpT.png"></p><ul><li>中位数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">s = &#123;<span class="string">&quot;ton&quot;</span>: <span class="number">20</span>, <span class="string">&quot;mary&quot;</span>: <span class="number">18</span>, <span class="string">&quot;jack&quot;</span>: <span class="number">19</span>, <span class="string">&quot;jim&quot;</span>: <span class="number">22</span>, <span class="string">&quot;lj&quot;</span>: <span class="number">24</span>, <span class="string">&quot;car&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"> </span><br><span class="line">sa = pd.Series(s, name=<span class="string">&quot;age&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sa.median())  <span class="comment"># 20</span></span><br></pre></td></tr></table></figure><ul><li>判断是否大于中位数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">s = &#123;<span class="string">&quot;ton&quot;</span>: <span class="number">20</span>, <span class="string">&quot;mary&quot;</span>: <span class="number">18</span>, <span class="string">&quot;jack&quot;</span>: <span class="number">19</span>, <span class="string">&quot;jim&quot;</span>: <span class="number">22</span>, <span class="string">&quot;lj&quot;</span>: <span class="number">24</span>, <span class="string">&quot;car&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"> </span><br><span class="line">sa = pd.Series(s, name=<span class="string">&quot;age&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sa&gt;sa.median())</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4uoG7R.png" alt="4uoG7R.png"></p><ul><li><h4 id="1-9-满足条件的统一赋值"><a href="#1-9-满足条件的统一赋值" class="headerlink" title="1.9 满足条件的统一赋值"></a>1.9 满足条件的统一赋值</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">s = &#123;<span class="string">&quot;ton&quot;</span>: <span class="number">20</span>, <span class="string">&quot;mary&quot;</span>: <span class="number">18</span>, <span class="string">&quot;jack&quot;</span>: <span class="number">19</span>, <span class="string">&quot;jim&quot;</span>: <span class="number">22</span>, <span class="string">&quot;lj&quot;</span>: <span class="number">24</span>, <span class="string">&quot;car&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"> </span><br><span class="line">sa = pd.Series(s, name=<span class="string">&quot;age&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(s) <span class="comment"># 打印原字典</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------&#x27;</span>)   <span class="comment"># 分割线</span></span><br><span class="line"> </span><br><span class="line">sa[sa&gt;<span class="number">19</span>] = <span class="number">88</span> <span class="comment"># 将所有大于19的同一改为88</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sa) <span class="comment"># 打印更改之后的数据</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------&#x27;</span>)   <span class="comment"># 分割线</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(sa / <span class="number">2</span>) <span class="comment"># 将所有数据除以2</span></span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/17/4uoR9f.png" alt="4uoR9f.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>datetime模块</title>
      <link href="/post/7c528cb9.html"/>
      <url>/post/7c528cb9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="x3D-x3D-datetime是模块，datetime模块还包含一个datetime类-x3D-x3D"><a href="#x3D-x3D-datetime是模块，datetime模块还包含一个datetime类-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;datetime是模块，datetime模块还包含一个datetime类&#x3D;&#x3D;"></a>&#x3D;&#x3D;datetime是模块，datetime模块还包含一个datetime类&#x3D;&#x3D;</h2><h4 id="通过from-datetime-import-datetime导入的才是datetime这个类。"><a href="#通过from-datetime-import-datetime导入的才是datetime这个类。" class="headerlink" title="通过from datetime import datetime导入的才是datetime这个类。"></a>通过from datetime import datetime导入的才是datetime这个类。</h4><p>如果仅导入import datetime，则必须引用全名datetime.datetime。</p><p>datetime.now()返回当前日期和时间，其类型是datetime。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">datetime_now = datetime.now() <span class="comment"># 创建当前时间的 datetime 对象</span></span><br><span class="line"><span class="built_in">print</span>(datetime_now)  <span class="comment"># 2021-09-16 17:21:39.869128</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(datetime_now))  <span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">dt = datetime(<span class="number">2021</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">00</span>)  <span class="comment"># 用指定日期时间创建 datetime 对象</span></span><br><span class="line"><span class="built_in">print</span>(dt)  <span class="comment"># 2021-10-01 12:00:00</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dt))  <span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="x3D-x3D-1、str转换为datetime-x3D-x3D"><a href="#x3D-x3D-1、str转换为datetime-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;1、str转换为datetime&#x3D;&#x3D;"></a>&#x3D;&#x3D;1、str转换为datetime&#x3D;&#x3D;</h2><h4 id="很多时候，用户输入的日期和时间是字符串，要处理日期和时间，首先必须把str转换为datetime。转换方法是通过datetime-strptime-实现，需要一个日期和时间的格式化字符串："><a href="#很多时候，用户输入的日期和时间是字符串，要处理日期和时间，首先必须把str转换为datetime。转换方法是通过datetime-strptime-实现，需要一个日期和时间的格式化字符串：" class="headerlink" title="很多时候，用户输入的日期和时间是字符串，要处理日期和时间，首先必须把str转换为datetime。转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串："></a>很多时候，用户输入的日期和时间是字符串，要处理日期和时间，首先必须把str转换为datetime。转换方法是通过datetime.<font size=6 color=red>strptime()</font>实现，需要一个日期和时间的格式化字符串：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from datetime import datetime</span><br><span class="line">&gt;&gt;&gt; cday = datetime.strptime(&#x27;2015-6-1 18:19:59&#x27;, &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">&gt;&gt;&gt; print(cday)</span><br><span class="line">2015-06-01 18:19:59</span><br></pre></td></tr></table></figure><p>字符串’%Y-%m-%d %H:%M:%S’规定了日期和时间部分的格式。</p><h4 id="报错示例："><a href="#报错示例：" class="headerlink" title="报错示例："></a>报错示例：</h4><h4 id="1、ValueError-time-data-‘2020-1-1’-does-not-match-format-‘-Y-m-d’数据存储的分隔符与对应的参数格式分隔符亦必须与其保持一致，否则就会得到错误"><a href="#1、ValueError-time-data-‘2020-1-1’-does-not-match-format-‘-Y-m-d’数据存储的分隔符与对应的参数格式分隔符亦必须与其保持一致，否则就会得到错误" class="headerlink" title="1、ValueError: time data ‘2020,1 ,1’ does not match format ‘%Y,%m,%d’数据存储的分隔符与对应的参数格式分隔符亦必须与其保持一致，否则就会得到错误"></a>1、ValueError: time data ‘2020,1 ,1’ does not match format ‘%Y,%m,%d’数据存储的分隔符与对应的参数格式分隔符亦必须与其保持一致，否则就会得到错误</h4><p>正确修改：前后格式必须保持一致</p><hr><h4 id="ValueError-time-data-‘2014-x2F-7-x2F-1’-does-not-match-format-‘-Y-m-d’"><a href="#ValueError-time-data-‘2014-x2F-7-x2F-1’-does-not-match-format-‘-Y-m-d’" class="headerlink" title="ValueError: time data ‘2014&#x2F;7&#x2F;1’ does not match format ‘%Y-%m-%d’"></a>ValueError: time data ‘2014&#x2F;7&#x2F;1’ does not match format ‘%Y-%m-%d’</h4><p>正确修改：把‘2014&#x2F;7&#x2F;1’改成‘2014-7-1’ 或者把‘%Y-%m-%d’改成 ‘%Y&#x2F;%m&#x2F;%d’格式</p><h2 id="x3D-x3D-2、datetime转换为str-x3D-x3D"><a href="#x3D-x3D-2、datetime转换为str-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;2、datetime转换为str&#x3D;&#x3D;"></a>&#x3D;&#x3D;2、datetime转换为str&#x3D;&#x3D;</h2><h4 id="如果已经有了datetime对象，要把它格式化为字符串显示给用户，就需要转换为str，转换方法是通过strftime-实现的，同样需要一个日期和时间的格式化字符串："><a href="#如果已经有了datetime对象，要把它格式化为字符串显示给用户，就需要转换为str，转换方法是通过strftime-实现的，同样需要一个日期和时间的格式化字符串：" class="headerlink" title="如果已经有了datetime对象，要把它格式化为字符串显示给用户，就需要转换为str，转换方法是通过strftime()实现的，同样需要一个日期和时间的格式化字符串："></a>如果已经有了datetime对象，要把它格式化为字符串显示给用户，就需要转换为str，转换方法是通过<font color=red size=6>strftime()</font>实现的，同样需要一个日期和时间的格式化字符串：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from datetime import datetime</span><br><span class="line">&gt;&gt;&gt; now = datetime.now()</span><br><span class="line">&gt;&gt;&gt; print(now.strftime(&#x27;%a, %b %d %H:%M&#x27;))</span><br><span class="line">Mon, May 05 16:28</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">## 3、datetime转换为时间戳</span><br><span class="line"></span><br><span class="line">time_stamp = time.mktime(date_time.timetuple())</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">## 4、时间戳转换成string</span><br><span class="line"></span><br><span class="line">string = time.strftime(&#x27;%Y-%m-%d&#x27;,time.localtime(time_stamp))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### datetime加减</span><br><span class="line"></span><br><span class="line">对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用+和-运算符，不过需要导入&lt;font color=red size=5&gt;timedelta&lt;/font&gt;这个类：</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>from datetime import datetime, timedelta<br>now &#x3D; datetime.now()<br>now<br>datetime.datetime(2015, 5, 18, 16, 57, 3, 540997)<br>now + timedelta(hours&#x3D;10)<br>datetime.datetime(2015, 5, 19, 2, 57, 3, 540997)<br>now - timedelta(days&#x3D;1)<br>datetime.datetime(2015, 5, 17, 16, 57, 3, 540997)<br>now + timedelta(days&#x3D;2, hours&#x3D;12)<br>datetime.datetime(2015, 5, 21, 4, 57, 3, 540997)</p></blockquote></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 本地时间转换为UTC时间</span><br><span class="line"></span><br><span class="line">本地时间是指系统设定时区的时间，例如北京时间是UTC+8:00时区的时间，而UTC时间指UTC+0:00时区的时间。</span><br><span class="line"></span><br><span class="line">一个datetime类型有一个时区属性tzinfo，但是默认为None，所以无法区分这个datetime到底是哪个时区，除非强行给datetime设置一个时区：</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>from datetime import datetime, timedelta, timezone<br>tz_utc_8 &#x3D; timezone(timedelta(hours&#x3D;8)) # 创建时区UTC+8:00<br>now &#x3D; datetime.now()<br>now<br>datetime.datetime(2015, 5, 18, 17, 2, 10, 871012)<br>dt &#x3D; now.replace(tzinfo&#x3D;tz_utc_8) # 强制设置为UTC+8:00<br>dt<br>datetime.datetime(2015, 5, 18, 17, 2, 10, 871012, tzinfo&#x3D;datetime.timezone(datetime.timedelta(0, 28800)))</p></blockquote></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果系统时区恰好是UTC+8:00，那么上述代码就是正确的，否则，不能强制设置为UTC+8:00时区。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 时区转换</span><br><span class="line"></span><br><span class="line">我们可以先通过utcnow()拿到当前的UTC时间，再转换为任意时区的时间：</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="拿到UTC时间，并强制设置时区为UTC-0-00"><a href="#拿到UTC时间，并强制设置时区为UTC-0-00" class="headerlink" title="拿到UTC时间，并强制设置时区为UTC+0:00:"></a>拿到UTC时间，并强制设置时区为UTC+0:00:</h1><blockquote><blockquote><blockquote><p>utc_dt &#x3D; datetime.utcnow().replace(tzinfo&#x3D;timezone.utc)<br>print(utc_dt)<br>2015-05-18 09:05:12.377316+00:00</p></blockquote></blockquote></blockquote><h1 id="astimezone-将转换时区为北京时间"><a href="#astimezone-将转换时区为北京时间" class="headerlink" title="astimezone()将转换时区为北京时间:"></a>astimezone()将转换时区为北京时间:</h1><blockquote><blockquote><blockquote><p>bj_dt &#x3D; utc_dt.astimezone(timezone(timedelta(hours&#x3D;8)))<br>print(bj_dt)<br>2015-05-18 17:05:12.377316+08:00</p></blockquote></blockquote></blockquote><h1 id="astimezone-将转换时区为东京时间"><a href="#astimezone-将转换时区为东京时间" class="headerlink" title="astimezone()将转换时区为东京时间:"></a>astimezone()将转换时区为东京时间:</h1><blockquote><blockquote><blockquote><p>tokyo_dt &#x3D; utc_dt.astimezone(timezone(timedelta(hours&#x3D;9)))<br>print(tokyo_dt)<br>2015-05-18 18:05:12.377316+09:00</p></blockquote></blockquote></blockquote><h1 id="astimezone-将bj-dt转换时区为东京时间"><a href="#astimezone-将bj-dt转换时区为东京时间" class="headerlink" title="astimezone()将bj_dt转换时区为东京时间:"></a>astimezone()将bj_dt转换时区为东京时间:</h1><blockquote><blockquote><blockquote><p>tokyo_dt2 &#x3D; bj_dt.astimezone(timezone(timedelta(hours&#x3D;9)))<br>print(tokyo_dt2)<br>2015-05-18 18:05:12.377316+09:00</p></blockquote></blockquote></blockquote><p>&#96;&#96;&#96;<br>时区转换的关键在于，拿到一个datetime时，要获知其正确的时区，然后强制设置时区，作为基准时间。</p><p>利用带时区的datetime，通过astimezone()方法，可以转换到任意时区。</p><p>注：不是必须从UTC+0:00时区转换到其他时区，任何带时区的datetime都可以正确转换，例如上述bj_dt到tokyo_dt的转换。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>datetime表示的时间需要时区信息才能确定一个特定的时间，否则只能视为本地时间。</p><p>如果要存储datetime，最佳方法是将其转换为timestamp再存储，因为timestamp的值与时区完全无关。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-datetime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql定时任务：按天建表</title>
      <link href="/post/fa56e9f0.html"/>
      <url>/post/fa56e9f0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="mysql设置定时任务："><a href="#mysql设置定时任务：" class="headerlink" title="mysql设置定时任务："></a>mysql设置定时任务：</h2><p>需求：mysql数据库里面做个定时任务自动每天创建一张表。</p><h4 id="1-查看是否开启event与开启event"><a href="#1-查看是否开启event与开启event" class="headerlink" title="1.查看是否开启event与开启event"></a>1.查看是否开启event与开启event</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%sche%&#x27;;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若未开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global event_scheduler =1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-创建存储过程"><a href="#2-创建存储过程" class="headerlink" title="2.创建存储过程"></a>2.创建存储过程</h4><p>每天创建一个名为 test_年月日的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"></span><br><span class="line">drop procedure if exists create_table01//</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE create_table01()</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">declare str_date varchar(50);</span><br><span class="line"></span><br><span class="line">SET str_date = date_format(now(),&#x27;%Y%m%d&#x27;);  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">SET @sqlcmd1 = CONCAT(&#x27;CREATE TABLE test_&#x27;,str_date,&#x27;(</span><br><span class="line"></span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line"></span><br><span class="line">time datetime not null</span><br><span class="line"></span><br><span class="line">) ;&#x27;);</span><br><span class="line"></span><br><span class="line">PREPARE p1 FROM @sqlcmd1;</span><br><span class="line"></span><br><span class="line">EXECUTE p1;</span><br><span class="line"></span><br><span class="line">DEALLOCATE PREPARE p1;</span><br><span class="line"></span><br><span class="line">END//</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-创建事件，调用存储过程"><a href="#3-创建事件，调用存储过程" class="headerlink" title="3.创建事件，调用存储过程"></a>3.创建事件，调用存储过程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">drop event if exists test_event01;</span><br><span class="line"></span><br><span class="line">create event test_event01</span><br><span class="line"></span><br><span class="line">on schedule every 1 DAY STARTS NOW()</span><br><span class="line"></span><br><span class="line">do call create_table01();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开启事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter event test_event on completion preserve enable;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>查询是否建表成功</p><p>若是想关闭事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter event test_event on completion preserve disable;</span><br></pre></td></tr></table></figure><h4 id="4-事件执行时间的设置"><a href="#4-事件执行时间的设置" class="headerlink" title="4.事件执行时间的设置"></a>4.事件执行时间的设置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE EVENT test_event01 ON SCHEDULE EVERY 1 DAY STARTS &#x27;2012-09-24 00:00:00&#x27;</span><br><span class="line"></span><br><span class="line">ON COMPLETION PRESERVE ENABLE DO CALL  create_table01();</span><br></pre></td></tr></table></figure><p>EVERY #后面的是时间间隔，可以选 1 second，3 minute，5 hour，9 day，1 month，1 quarter（季度），1 year</p><p>#从2013年1月13号0点开始，每天运行一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ON SCHEDULE EVERY 1 DAY   STARTS &#x27;2013-01-13 00:00:00&#x27;</span><br></pre></td></tr></table></figure><p>#从现在开始每隔九天定时执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ON SCHEDULE EVERY 9 DAY STARTS NOW() ；</span><br></pre></td></tr></table></figure><p>#每个月的一号凌晨1 点执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on schedule every 1 month starts date_add(date_add(date_sub(curdate(),interval day(curdate())-1 day),interval 1 month),interval 1 hour);</span><br></pre></td></tr></table></figure><p>#每个季度一号的凌晨1点执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on schedule every 1 quarter starts date_add(date_add(date(concat(year(curdate()),&#x27;-&#x27;,elt(quarter(curdate()),1,4,7,10),&#x27;-&#x27;,1)),interval 1 quarter),interval 1 hour);</span><br></pre></td></tr></table></figure><p>#每年1月1号凌晨1点执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on schedule every 1 quarter starts date_add(date_add(date(concat(year(curdate()),&#x27;-&#x27;,elt(quarter(curdate()),1,4,7,10),&#x27;-&#x27;,1)),interval 1 quarter),interval 1 hour);</span><br></pre></td></tr></table></figure><h3 id="5-几个相关概念"><a href="#5-几个相关概念" class="headerlink" title="5.几个相关概念"></a>5.几个相关概念</h3><p>存储程序：( 存储函数(stored function)+存储过程(stored procedure)+触发器(trigger)+事件(event) )</p><p>存储函数：返回一个计算结果，该结果可以用在表达式里</p><p>存储过程：不直接返回一个结果，但可以用来完成一般的运算或是生成一个结果集并传递会客户</p><p>触发器：与数据表关联，当那个数据表被 insert、delete、update语句修改时，触发器将自动执行</p><p>事件：根据时间表在预订时刻自动执行</p><hr><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>我使用的是navicat图形化工具编码的。所以下面我介绍的是使用本工具创建存储过程。</p><p>1.打开navicat，选择需要创建表的数据库，点击“查询”，在查询编辑器中输入下面代码：</p><p>依次选中执行：++存储过程–&gt;定时任务–&gt;开启事件++</p><p>注：如果想换事件要先停止时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">存储过程</span></span><br><span class="line">delimiter //</span><br><span class="line"></span><br><span class="line">drop procedure if exists create_table01//</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE create_table01()</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">declare str_date varchar(50);</span><br><span class="line"></span><br><span class="line">SET str_date = date_format(now(),&#x27;%Y%m%d&#x27;);  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">时间唯一索引有问题，后续与站点结合创建</span></span><br><span class="line">SET @sqlcmd1 = CONCAT(&#x27;CREATE TABLE surf_chn_mul_full_min_&#x27;,str_date,</span><br><span class="line">&quot;(</span><br><span class="line">`id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;自增编号&#x27;,</span><br><span class="line">`province` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT &#x27;省份&#x27;,</span><br><span class="line">`station_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT &#x27;站名&#x27;,</span><br><span class="line">`date_time` datetime NOT NULL COMMENT &#x27;资料时间&#x27;,</span><br><span class="line">`lat` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT &#x27;纬度&#x27;,</span><br><span class="line">`lon` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT &#x27;经度&#x27;,</span><br><span class="line">`temperature` decimal(10,4) DEFAULT NULL COMMENT &#x27;气温，单位(1℃),当前时刻的空气温度&#x27;,</span><br><span class="line">`temperature_dewpoint` decimal(10,4) DEFAULT NULL COMMENT &#x27;露点温度，单位(1℃),当前时刻的露点温度值&#x27;,</span><br><span class="line">`pressure` decimal(10,4) DEFAULT NULL COMMENT &#x27;气压，单位(1hPa)&#x27;,</span><br><span class="line">`pressure_sealevel` decimal(10,4) DEFAULT NULL COMMENT &#x27;海平面气压，单位(1hPa),当前时刻的海平面气压值&#x27;,</span><br><span class="line">`visibility` decimal(10,4) DEFAULT NULL COMMENT &#x27;10 分钟平均水平能见度，单位(1m),当前时刻的10 分钟平均水平能见度&#x27;,</span><br><span class="line">`cloud_low` decimal(10,4) DEFAULT NULL COMMENT &#x27;低云量，单位(1 成)&#x27;,</span><br><span class="line">`cloud_base_height` decimal(10,4) DEFAULT NULL COMMENT &#x27;云底高度，单位(1m),正点的低（中）云状云高&#x27;,</span><br><span class="line">`relative_humidity` decimal(10,4) DEFAULT NULL COMMENT &#x27;相对湿度，单位(1%),当前时刻的相对湿度&#x27;,</span><br><span class="line">`wind_direct_2m` decimal(10,4) DEFAULT NULL COMMENT &#x27;2 分钟风向，单位(1°),当前时刻的 2 分钟平均风向&#x27;,</span><br><span class="line">`wind_speed_2m` decimal(10,4) DEFAULT NULL COMMENT &#x27;2 分钟平均风速，单位(1m/s),当前时刻的 2 分钟平均风速&#x27;,</span><br><span class="line">`precipitation_1h` decimal(10,4) DEFAULT NULL COMMENT &#x27;小时降水量，单位(1mm),每 1 小时内的降水量累计量&#x27;,</span><br><span class="line">`weather_code` int(6) DEFAULT NULL COMMENT &#x27;现在天气现象编码&#x27;,</span><br><span class="line">`create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP  COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">`update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP COMMENT&#x27;修改时间&#x27;,</span><br><span class="line"> PRIMARY KEY (`id`),</span><br><span class="line">UNIQUE KEY `index_time` (`date_time`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci&quot;);</span><br><span class="line"></span><br><span class="line">PREPARE p1 FROM @sqlcmd1;</span><br><span class="line"></span><br><span class="line">EXECUTE p1;</span><br><span class="line"></span><br><span class="line">DEALLOCATE PREPARE p1;</span><br><span class="line"></span><br><span class="line">END//</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">定时任务!!!!!!!!!!!!!!</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果事件存在则删除</span></span><br><span class="line">drop event if exists test_event01;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建事件</span></span><br><span class="line">create event test_event01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从现在开始每一分钟执行一次</span></span><br><span class="line">on schedule every 1 MINUTE STARTS NOW()</span><br><span class="line"></span><br><span class="line">do call create_table01();</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启事件</span></span><br><span class="line">alter event test_event on completion preserve enable;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭事件</span></span><br><span class="line">alter event test_event on completion preserve disable;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy--tolist函数</title>
      <link href="/post/4bdc17ba.html"/>
      <url>/post/4bdc17ba.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="将矩阵转换成列表"><a href="#将矩阵转换成列表" class="headerlink" title="将矩阵转换成列表"></a>将矩阵转换成<font color="blue">列表</font></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.arrary([[1,2,3],[4,5,6],[7,8,9]])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/08/h79K1J.png" alt="h79K1J.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = a.tolist()</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/08/h79BnI.png" alt="h79BnI.png"></p><h2 id="选择列表中指定元素："><a href="#选择列表中指定元素：" class="headerlink" title="选择列表中指定元素："></a>选择<font color="blue">列表</font>中指定元素：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c = a.tolist()[0]</span><br><span class="line">d = a.tolist()[2]</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/08/h79Wcj.png" alt="h79Wcj.png"></p><h2 id="列表切片："><a href="#列表切片：" class="headerlink" title="列表切片："></a><font color="blue">列表</font>切片：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e = a.tolist()[0:2]</span><br><span class="line"></span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/08/h7CpE6.png" alt="h7CpE6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决apt-get install xxx报错</title>
      <link href="/post/f1fcff76.html"/>
      <url>/post/f1fcff76.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="E-无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。"><a href="#E-无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。" class="headerlink" title="E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。"></a>E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。</h2><p><img src="https://z3.ax1x.com/2021/09/07/hIYNGQ.png" alt="hIYNGQ.png"></p><p>解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libhdf5-dev=1.8.11-5ubuntu7(依赖)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量</title>
      <link href="/post/b916a8dc.html"/>
      <url>/post/b916a8dc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>删除某个环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset 环境变量名</span><br></pre></td></tr></table></figure><p>展示所有环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">export -p</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">env</span><br></pre></td></tr></table></figure><p>查看环境变量的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $ 环境变量名</span><br></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export 环境变量名 = 绝对路径</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>compile-uncompyle6--py文件与pyc互转</title>
      <link href="/post/1705e628.html"/>
      <url>/post/1705e628.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="一："><a href="#一：" class="headerlink" title="一："></a>一：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 将目录下的文件转为.pyc</span></span><br><span class="line"><span class="keyword">import</span> compileall</span><br><span class="line">compileall.compile_dir(<span class="string">r&#x27;/mnt/hgfs/fy4_liucheng&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 将单个.py文件转为.pyc</span></span><br><span class="line"><span class="keyword">import</span> py_compile</span><br><span class="line">py_compile.<span class="built_in">compile</span>(<span class="string">&#x27;fy4_main.py&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h1><p><img src="https://z3.ax1x.com/2021/09/07/hIVy5V.png" alt="hIVy5V.png"></p><h2 id="二："><a href="#二：" class="headerlink" title="二："></a>二：</h2><h4 id="安装uncompyle6"><a href="#安装uncompyle6" class="headerlink" title="安装uncompyle6"></a>安装uncompyle6</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uncompyle6</span><br></pre></td></tr></table></figure><h4 id="命令行使用：转化filename-pyc"><a href="#命令行使用：转化filename-pyc" class="headerlink" title="命令行使用：转化filename.pyc"></a>命令行使用：转化filename.pyc</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 -o filename.py filename.pyc</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/09/26/4cSpxx.png" alt="4cSpxx.png"></p><h4 id="批量转化给定目录下的所有pyc文件"><a href="#批量转化给定目录下的所有pyc文件" class="headerlink" title="批量转化给定目录下的所有pyc文件"></a>批量转化给定目录下的所有pyc文件</h4><p>典型案例：pyc文件分布在不同子目录下，我们需要逐层遍历，将每一个pyc文件分别转化成一个同名的py文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">walk_dir</span>(<span class="params"><span class="built_in">dir</span>,topdown=<span class="literal">True</span></span>):</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="built_in">dir</span>, topdown):</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.pyc&#x27;</span>):</span><br><span class="line">        part_name = name[<span class="number">0</span>:-<span class="number">4</span>]</span><br><span class="line">        part_file_name = os.path.join(root, part_name)</span><br><span class="line">        <span class="built_in">print</span>(part_file_name)</span><br><span class="line">os.system(<span class="string">&#x27;uncompyle6 -o %s.py %s.pyc&#x27;</span>%(part_file_name,part_file_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">dirname = <span class="string">&quot;D:\dirname&quot;</span></span><br><span class="line">walk_dir(dirname)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-compile、uncompyle6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker多阶构建</title>
      <link href="/post/1c3ec647.html"/>
      <url>/post/1c3ec647.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="多阶构建"><a href="#多阶构建" class="headerlink" title="多阶构建"></a>多阶构建</h2><pre><code>docker版本：&gt;=17.05</code></pre><p>多阶段构建需要我们在Dockerfile中使用FORM声明，每次FROM指令可以使用不同的基础镜像，并且FORM指令都会开始新的构建，我们可以<font color=red><strong>选择一个阶段的构建结果复制到另一个阶段，在最终的镜像中只会留下最后一次构建的结果</strong></font>，这样就可以很容易的解决前面提到的问题，并且只需要编写一个Dockerfile文件。</p><p>在Dockerfile里使用as来为某一阶段取一别名“build-env”：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> duojie-docker:latest as build-<span class="keyword">env</span></span><br></pre></td></tr></table></figure><p>然后从上一阶段的镜像中复制文件，也可以复制任意镜像中的文件</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-env /code/ /code/</span></span><br></pre></td></tr></table></figure><p>看一个简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像</span><br><span class="line">FROM duojie-docker:latest as build-env</span><br><span class="line"></span><br><span class="line">WORKDIR /code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FROM python:37</span><br><span class="line"></span><br><span class="line">COPY --from=build-env /code/ /code/</span><br><span class="line"></span><br><span class="line">WORKDIR /code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMD [&quot;python&quot;,&quot;test.py&quot;]</span><br></pre></td></tr></table></figure><p>执行docker build -t –rm duojie-docker后再执行docker images ，然后我们来看镜像的大小：</p><p>多阶构建给我们带来很多便利，最大的优势是在保证运行镜像足够小的情况下还减轻了Dockerfile的维护负担，因此我们极力推荐使用多阶构建来将你的代码打包成Docker 镜像。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS模块--查找、创建、删除文件</title>
      <link href="/post/f3eec9d8.html"/>
      <url>/post/f3eec9d8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 判断目录是否存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">    <span class="comment"># 创建多层目录</span></span><br><span class="line">    os.makedirs(path)</span><br><span class="line">    <span class="comment"># 创建目录</span></span><br><span class="line">    os.mkdir(path)</span><br><span class="line">    <span class="comment"># 删除一个文件</span></span><br><span class="line">    os.remove(path)</span><br><span class="line">    <span class="comment"># 递归地删除目录。如果子目录成功被删除，则将会成功删除父目录，子目录没成功删除，将抛异常。</span></span><br><span class="line">    os.removedirs(path)</span><br></pre></td></tr></table></figure><h4 id="os-walk-方法用于遍历目录下的文件名，向上或者向下"><a href="#os-walk-方法用于遍历目录下的文件名，向上或者向下" class="headerlink" title="os.walk()方法用于遍历目录下的文件名，向上或者向下"></a>os.walk()方法用于遍历目录下的文件名，向上或者向下</h4><p>参数：</p><ul><li><strong>top</strong> – 是你所要遍历的目录的地址, 返回的是一个三元组(root,dirs,files)。<ul><li>root 所指的是当前正在遍历的这个文件夹的本身的地址</li><li>dirs 是一个 list ，内容是该文件夹中所有的目录的名字(不包括子目录)</li><li>files 同样是 list , 内容是该文件夹中所有的文件(不包括子目录)</li></ul></li><li><strong>topdown</strong> –可选，为 True，则优先遍历 top 目录，否则优先遍历 top 的子目录(默认为开启)。如果 topdown 参数为 True，walk 会遍历top文件夹，与top 文件夹中每一个子目录。</li><li><strong>onerror</strong> – 可选，需要一个 callable 对象，当 walk 需要异常时，会调用。</li><li><strong>followlinks</strong> – 可选，如果为 True，则会遍历目录下的快捷方式(linux 下是软连接 symbolic link )实际所指的目录(默认关闭)，如果为 False，则优先遍历 top 的子目录。</li></ul><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">walkFile</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># root 表示当前正在访问的文件夹路径</span></span><br><span class="line">        <span class="comment"># dirs 表示该文件夹下的子目录名list</span></span><br><span class="line">        <span class="comment"># files 表示该文件夹下的文件list</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历文件</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="built_in">print</span>(os.path.join(root, f))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历所有的文件夹</span></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">            <span class="built_in">print</span>(os.path.join(root, d))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json模块常用方法</title>
      <link href="/post/6345e3c9.html"/>
      <url>/post/6345e3c9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="JSON-函数"><a href="#JSON-函数" class="headerlink" title="JSON 函数"></a>JSON 函数</h2><p>使用 JSON 函数需要导入 json 库：import json。</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>json.dumps()</td><td>将 Python 对象转换成 JSON 字符串。</td></tr><tr><td>json.loads()</td><td>将 JSON 字符串转换成 Python 对象。</td></tr><tr><td>json.dump()</td><td>将 Python 中的对象转化成 JSON 字符串储存到文件中。</td></tr><tr><td>json.load()</td><td>将文件中的 JSON 字符串转化成 Python 对象提取出来。</td></tr></tbody></table><h3 id="json-dumps（序列化）"><a href="#json-dumps（序列化）" class="headerlink" title="json.dumps（序列化）"></a><strong>json.dumps</strong>（序列化）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#python字典</span></span><br><span class="line">item = &#123;<span class="string">&#x27;website&#x27;</span>: <span class="string">&#x27;C语言中文网&#x27;</span>, <span class="string">&#x27;rank&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment"># json.dumps之后</span></span><br><span class="line">item = json.dumps(item,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;转换之后的数据类型为：&#x27;</span>,<span class="built_in">type</span>(item))</span><br><span class="line"><span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转换之后的数据类型为： &lt;class &#x27;str&#x27;&gt;</span><br><span class="line">&#123;&quot;website&quot;: &quot;C语言中文网&quot;, &quot;url&quot;: &quot;c.biancheng.net&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="json-loads（反序列化）"><a href="#json-loads（反序列化）" class="headerlink" title="json.loads（反序列化）"></a><strong>json.loads</strong>（反序列化）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#JOSN字符串</span></span><br><span class="line">website_info=<span class="string">&#x27;&#123;&quot;name&quot; : &quot;c语言中文网&quot;&#125;&#x27;</span></span><br><span class="line">py_dict=json.loads(website_info)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;python字典数据格式：%s；数据类型：%s&quot;</span>% (py_dict,<span class="built_in">type</span>(py_dict)))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python字典数据格式：&#123;&#x27;name&#x27;: &#x27;c语言中文网&#x27;&#125;；数据类型：&lt;class &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure><h3 id="json-dump"><a href="#json-dump" class="headerlink" title="json.dump()"></a><strong>json.dump()</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">json.dump(<span class="built_in">object</span>,f,inden=<span class="number">0</span>，ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明如下：</span></span><br><span class="line"><span class="comment"># object：Python 数据对象，比如字典，列表等</span></span><br><span class="line"><span class="comment"># f：文件流对象，即文件句柄。</span></span><br><span class="line"><span class="comment"># indent：格式化存储数据，使 JSON 字符串更易阅读。</span></span><br><span class="line"><span class="comment"># ensure_ascii：是否使用 ascii 编码，当数据中出现中文的时候，需要将其设置为 False。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">ditc_info=&#123;<span class="string">&quot;name&quot;</span> : <span class="string">&quot;c语言中文网&quot;</span>,<span class="string">&quot;PV&quot;</span> : <span class="string">&quot;50万&quot;</span>,<span class="string">&quot;UV&quot;</span> : <span class="string">&quot;20万&quot;</span>,<span class="string">&quot;create_time&quot;</span> : <span class="string">&quot;2010年&quot;</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;web.josn&quot;</span>,<span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(ditc_info,f,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>打开 web.json 文件，其内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c语言中文网&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;PV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;50万&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;UV&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20万&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;create_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2010年&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="json-load"><a href="#json-load" class="headerlink" title="json.load"></a>json.load</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">site = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;c语言中文网&#x27;</span>,<span class="string">&quot;url&quot;</span>:<span class="string">&quot;c.biancheng.net&quot;</span>&#125;</span><br><span class="line">filename = <span class="string">&#x27;website.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(site,f,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (filename,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(json.load(f))</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>&#x27;name&#x27;<span class="punctuation">:</span> &#x27;c语言中文网&#x27;<span class="punctuation">,</span> &#x27;url&#x27;<span class="punctuation">:</span> &#x27;c.biancheng.net&#x27;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="json-dumps的参数-ensure-ascii-x3D-False"><a href="#json-dumps的参数-ensure-ascii-x3D-False" class="headerlink" title="json.dumps的参数:ensure_ascii&#x3D;False"></a>json.dumps的参数:ensure_ascii&#x3D;False</h3><p>json_dumps(dict)时，如果dict包含有汉字，一定加上ensure_ascii&#x3D;False。否则按参数默认值True，意思是保证dumps之后的结果里所有的字符都能够被ascii表示，汉字在ascii的字符集里面，因此经过dumps以后的str里，汉字会变成对应的unicode。</p><h4 id="x3D-x3D-综上所述-json-load-与-json-dump-操作的是文件流对象，实现了-json-文件的读写操作，而-json-loads-与-json-dumps-操作的是-Python-对象或者-JOSN-字符串。-x3D-x3D"><a href="#x3D-x3D-综上所述-json-load-与-json-dump-操作的是文件流对象，实现了-json-文件的读写操作，而-json-loads-与-json-dumps-操作的是-Python-对象或者-JOSN-字符串。-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;综上所述 json.load() 与 json.dump() 操作的是文件流对象，实现了 json 文件的读写操作，而 json.loads() 与 json.dumps() 操作的是 Python 对象或者 JOSN 字符串。&#x3D;&#x3D;"></a>&#x3D;&#x3D;综上所述 json.load() 与 json.dump() 操作的是文件流对象，实现了 json 文件的读写操作，而 json.loads() 与 json.dumps() 操作的是 Python 对象或者 JOSN 字符串。&#x3D;&#x3D;</h4>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sys.argv接收json格式参数问题</title>
      <link href="/post/c0c7d5fd.html"/>
      <url>/post/c0c7d5fd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="亲测"><a href="#亲测" class="headerlink" title="亲测"></a>亲测</h3><p>场景：使用sys.argv接收参数时，在服务器下和容器下接收到的同一个json参数不一致</p><p>1.例如：</p><pre><code>python ./fy4_main.py exe &#123;&quot;times&quot;:&#123;&quot;clp&quot;:&quot;20210112005542&quot;&#125;,&quot;outpath&quot;:&quot;/output/fy4&quot;,&quot;fy4_l2&quot;:&#123;&quot;clp&quot;:&quot;/CMADAAS/DATA/FY4A/L2/AGRI/2021//20210112/Z_SATE_C_BAWX_20210112005542_P_FY4A-_AGRI--_N_REGC_1047E_L2-_CLP-_MULT_NOM_20210112004500_20210112004917_4000M_V0001.NC&quot;&#125;,&quot;shp&quot;:&quot;/input/xibei.shp&quot;&#125;</code></pre><p>在某些环境下，接收到exe后面的json参数后，会发现<font color="red">双引号被直接省略</font>，导致无法转为json字符串</p><p>如下：</p><pre><code>[&#39;times:&#123;clp:20210112005542&#125;&#39;, &#39;outpath:/output/fy4&#39;, &#39;fy4_l2:&#123;clp:/CMADAAS/DATA/FY4A/L2/AGRI/2021//20210112/Z_SATE_C_BAWX_20210112005542_P_FY4A-_AGRI--_N_REGC_1047E_L2-_CLP-_MULT_NOM_20210112004500_20210112004917_4000M_V0001.NC&#125;&#39;, &#39;shp:/input/xibei.shp&#39;]</code></pre><p>当将上面的参数执行json.loads(上面json参数)时，可能会报错：<font color="red">“No JSON object could be decoded”</font></p><p>解决方式如下：</p><pre><code>在执行命令的命令中，json参数的前后加一个单引号python ./fy4_main.py exe &#39;&#123;&quot;times&quot;:&#123;&quot;clp&quot;:&quot;20210112005542&quot;&#125;,&quot;outpath&quot;:&quot;/output/fy4&quot;,&quot;fy4_l2&quot;:&#123;&quot;clp&quot;:&quot;/CMADAAS/DATA/FY4A/L2/AGRI/2021//20210112/Z_SATE_C_BAWX_20210112005542_P_FY4A-_AGRI--_N_REGC_1047E_L2-_CLP-_MULT_NOM_20210112004500_20210112004917_4000M_V0001.NC&quot;&#125;,&quot;shp&quot;:&quot;/input/xibei.shp&quot;&#125;&#39;</code></pre><p>此时接收的json参数args为（两种）：</p><pre><code>[&#39;\&#39;&#123;&quot;times&quot;:&#123;&quot;clp&quot;:&quot;20210112005542&quot;&#125;,&quot;outpath&quot;:&quot;/output/fy4&quot;,&quot;fy4_l2&quot;:&#123;&quot;clp&quot;:&quot;/CMADAAS/DATA/FY4A/L2/AGRI/2021//20210112/Z_SATE_C_BAWX_20210112005542_P_FY4A-_AGRI--_N_REGC_1047E_L2-_CLP-_MULT_NOM_20210112004500_20210112004917_4000M_V0001.NC&quot;&#125;,&quot;shp&quot;:&quot;/input/xibei.shp&quot;&#125;\&#39;&#39;][&#39;&#123;&quot;times&quot;:&#123;&quot;clp&quot;:&quot;20210112005542&quot;&#125;,&quot;outpath&quot;:&quot;/output/fy4&quot;,&quot;fy4_l2&quot;:&#123;&quot;clp&quot;:&quot;/CMADAAS/DATA/FY4A/L2/AGRI/2021//20210112/Z_SATE_C_BAWX_20210112005542_P_FY4A-_AGRI--_N_REGC_1047E_L2-_CLP-_MULT_NOM_20210112004500_20210112004917_4000M_V0001.NC&quot;&#125;,&quot;shp&quot;:&quot;/input/xibei.shp&quot;&#125;&#39;]</code></pre><p>此时未防止服务器下和容器内接收到的参数不一致，所以转为json字符串更全面的办法是：</p><pre><code>try:    dicts = json.loads(args[0])except:    dicts = json.loads(args[0].split(&quot;&#39;&quot;)[1])print(dicts)</code></pre><hr><h3 id="其他场景"><a href="#其他场景" class="headerlink" title="其他场景"></a>其他场景</h3><p>1、json格式不对：传递的json中可能含有单引号，再就是双引号会失效，下面会讲到</p><p>2、json中有中文，在py文件中解析会报编码错误</p><p>3、json中有空格，导致py文件接收参数时不完整</p><h4 id="问题一：格式问题"><a href="#问题一：格式问题" class="headerlink" title="问题一：格式问题"></a>问题一：格式问题</h4><p>通过sys.argv传参给py文件，一个问题就是双引号会被当成是字符的一部分为省略掉如图：</p><p><img src="https://z3.ax1x.com/2021/08/25/hZUycD.png" alt="hZUycD.png"></p><p>解决方法：转义，如图：</p><p><img src="https://z3.ax1x.com/2021/08/25/hZU6je.png" alt="hZU6je.png"></p><h4 id="问题二：中文问题，argv传参的最多大问题是此时的中文编码是控制台的编码而不是utf-8，如图："><a href="#问题二：中文问题，argv传参的最多大问题是此时的中文编码是控制台的编码而不是utf-8，如图：" class="headerlink" title="问题二：中文问题，argv传参的最多大问题是此时的中文编码是控制台的编码而不是utf-8，如图："></a>问题二：中文问题，argv传参的最多大问题是此时的中文编码是控制台的编码而不是utf-8，如图：</h4><p><img src="https://z3.ax1x.com/2021/08/25/hZUfAI.png" alt="hZUfAI.png"></p><p>解决方法：获取字符编码再解码</p><p><img src="https://z3.ax1x.com/2021/08/25/hZa8UI.png" alt="hZa8UI.png"></p><h4 id="问题三：json中有空格咋办，这种情况很少，但是不能完全避免，此时的空格会被认为是两个argv参数之间的分隔符，如图："><a href="#问题三：json中有空格咋办，这种情况很少，但是不能完全避免，此时的空格会被认为是两个argv参数之间的分隔符，如图：" class="headerlink" title="问题三：json中有空格咋办，这种情况很少，但是不能完全避免，此时的空格会被认为是两个argv参数之间的分隔符，如图："></a>问题三：json中有空格咋办，这种情况很少，但是不能完全避免，此时的空格会被认为是两个argv参数之间的分隔符，如图：</h4><p><img src="https://z3.ax1x.com/2021/08/25/hZat8f.png" alt="hZat8f.png"></p><p>解决方法：拼接argvs，目前没想到别的方法，拼接是简单粗暴的，但是不能用join拼接，因为中文编码报错。使用+：</p><p><img src="https://z3.ax1x.com/2021/08/25/hZaUxS.png" alt="hZaUxS.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-sys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python读取txt文件、with</title>
      <link href="/post/6d11d57c.html"/>
      <url>/post/6d11d57c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="Python读取txt文件，有两种方式："><a href="#Python读取txt文件，有两种方式：" class="headerlink" title="Python读取txt文件，有两种方式："></a>Python读取txt文件，有两种方式：</h2><h4 id="1-逐行读取readline"><a href="#1-逐行读取readline" class="headerlink" title="(1)逐行读取readline()"></a>(1)逐行读取readline()</h4><p>函数用于读取文件中的一行，包含最后的换行符“\n”。此函数的基本语法格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> data=<span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>)</span><br><span class="line"><span class="number">2</span> line=data.readline()</span><br><span class="line"><span class="number">3</span> <span class="keyword">while</span> line:</span><br><span class="line"><span class="number">4</span>       <span class="built_in">print</span> line</span><br><span class="line"><span class="number">5</span>       line=data.readline()</span><br></pre></td></tr></table></figure><h4 id="2-一次全部读入内存readlines"><a href="#2-一次全部读入内存readlines" class="headerlink" title="(2)一次全部读入内存readlines()"></a>(2)一次全部读入内存readlines()</h4><p>readlines() 函数用于读取文件中的所有行，它和调用不指定 size 参数的 read() 函数类似，只不过该函数返回是一个字符串列表，其中每个元素为文件中的一行内容。</p><p>和 readline() 函数一样，readlines() 函数在读取每一行时，会连同行尾的换行符一块读取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> data=<span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>)</span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span> line <span class="keyword">in</span> data.readlines():</span><br><span class="line"><span class="number">3</span>       <span class="built_in">print</span> line</span><br></pre></td></tr></table></figure><h1 id="python-使用-with-open（）-as-读写文件"><a href="#python-使用-with-open（）-as-读写文件" class="headerlink" title="python 使用 with open（） as 读写文件"></a>python 使用 with open（） as 读写文件</h1><p>读文件:</p><p>要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符：</p><blockquote><p>f &#x3D; open(‘E:\python\python\test.txt’, ‘r’)</p></blockquote><p>标示符’r’表示读，这样，我们就成功地打开了一个文件。</p><p>如果文件不存在，open()函数就会抛出一个IOError的错误，并且给出错误码和详细的信息告诉你文件不存在：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;E:\python\python\notfound.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;E:\python\python\notfound.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;Hello, python!&#x27;</span></span><br></pre></td></tr></table></figure><p>最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：</p><blockquote><blockquote><blockquote><p>f.close()</p></blockquote></blockquote></blockquote><p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用with … open来实现：<br>它可以自动调用close方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br></pre></td></tr></table></figure><h4 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    <span class="built_in">print</span>(line.strip()) <span class="comment"># 把末尾的&#x27;\n&#x27;删掉</span></span><br></pre></td></tr></table></figure><h2 id="read、readline、readlines的区别"><a href="#read、readline、readlines的区别" class="headerlink" title="read、readline、readlines的区别"></a>read、readline、readlines的区别</h2><p>调用read()会一次性读取文件的全部内容，如果文件有20G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。</p><p>另外，调用readline()可以每次读取一行内容。</p><p>调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</p><ol><li>read() 每次读取整个文件，它通常将读取到底文件内容放到一个字符串变量中，也就是说 .read() 生成文件内容是一个字符串类型。</li><li>readline()每只读取文件的一行，通常也是读取到的一行内容放到一个字符串变量中，返回str类型。</li><li>readlines()每次按行读取整个文件内容，将读取到的内容放到一个列表中，返回list类型。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-read、readline、readlines、with </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器镜像打成tar包</title>
      <link href="/post/60c799df.html"/>
      <url>/post/60c799df.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="一、简述需求："><a href="#一、简述需求：" class="headerlink" title="一、简述需求："></a>一、<strong>简述需求：</strong></h2><p><strong>在现在容器上保存镜像进行打包，在另一台服务上使用</strong></p><h3 id="1-查看打包容器"><a href="#1-查看打包容器" class="headerlink" title="1.查看打包容器"></a>1.查看打包容器</h3><p>首先查看下现有要打tar包的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/08/23/hCqCyn.png" alt="hCqCyn.png"></p><h3 id="2-保存镜像"><a href="#2-保存镜像" class="headerlink" title="2.保存镜像"></a>2.保存镜像</h3><p>接下来用commit参数进行保存镜像， -a 提交人的姓名  -m “提交内容”，格式如：docker  commit  -a  -m  现有容器ID     保存后的名称：版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a &quot;wanghan&quot; -m &quot;区域异常值消除算法&quot; e6f78e0b5ec7 regional_outlier:1.0</span><br></pre></td></tr></table></figure><p>接下来查看下镜像是否出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/08/23/hCqa6A.png" alt="hCqa6A.png"></p><h3 id="3-打包"><a href="#3-打包" class="headerlink" title="3.打包"></a>3.打包</h3><p>然后save参数进行打包，格式如：docker save -o  要打镜像包名称     镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o regional_outlier.tar regional_outlier:1.0</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/08/23/hCLSAK.png" alt="hCLSAK.png"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>将tar包导入为镜像<br>首先进行load进行导出镜像操作        docker load:导入使用，docker save 命令导出的镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i regional_outlier.tar</span><br></pre></td></tr></table></figure><p>查看本地是否出现镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坑--在python脚本执行后，docker容器立即退出</title>
      <link href="/post/62176461.html"/>
      <url>/post/62176461.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="在python脚本执行后立即退出docker容器："><a href="#在python脚本执行后立即退出docker容器：" class="headerlink" title="在python脚本执行后立即退出docker容器："></a>在python脚本执行后立即退出docker容器：</h4><ul><li>命令成功但立即退出启动容器。我无法使用“docker start container id”启动容器。</li><li>手动运行“python test.py”在容器内成功，但在“docker run ….”中没有成功。</li></ul><h3 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h3><p>刚刚启动服务器是不够的。当CMD退出时，容器也会退出。因此，如果您 &#x3D;&#x3D;启动一个守护进程的服务，您需要保持您的进程存活。&#x3D;&#x3D; 这可以通过例如拖尾服务日志文件来实现。 supervisord是另一种运行进程并使CMD保持活跃的方式。</p><p>例如，您可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD /test.py &amp;&amp; tail -F /var/log/zookeeper.log</span><br></pre></td></tr></table></figure><p>从命令行运行你可以做类似的事情</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i -v /root/test.py:/test.py zookeeper bash -c &quot;python test.py &amp;&amp; tail -F /var/log/zookeeper.log&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eval函数：字符串形式的列表，转换为列表</title>
      <link href="/post/96491a2f.html"/>
      <url>/post/96491a2f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>遇到个问题，模型得到的结果是字符串形式的列表，简单例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str_list = &quot;[1,2,3,4,5,6]&quot;</span><br></pre></td></tr></table></figure><p>但是我们想用里面的列表，于是使用eval()函数进行快速转换，使用非常方便，演示如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_1 = eval(str_list)</span><br><span class="line">print(list_1)</span><br><span class="line"># [1,2,3,4,5,6]</span><br></pre></td></tr></table></figure><p>当然了如果直接list（str_list）是得不到你想要的结果的：[‘[‘, ‘1’, ‘,’, ‘2’, ‘,’, ‘3’, ‘,’, ‘4’, ‘,’, ‘5’, ‘,’, ‘6’, ‘]’]</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>eval函数可以解析expression字符串中的内容评估为表达式执行，globals用于使用全局变量，需要套入字典使用，locals同理</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(expression, globals, locals)</span><br></pre></td></tr></table></figure><ul><li>expression –需要一个字符串，该字符串将被解析并评估为Python表达式</li><li>globals（可选）–一个字典，用于指定可用的全局方法和变量。</li><li>locals（可选）-另一个字典，用于指定可用的本地方法和变量。</li></ul><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><h2 id="expression的使用"><a href="#expression的使用" class="headerlink" title="expression的使用"></a>expression的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="string">&quot; 12&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(num)) <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line">num = <span class="string">&quot;( 12)*2&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(num)) <span class="comment"># 24</span></span><br><span class="line"></span><br><span class="line">complex_num =<span class="string">&quot; 2 + 3j&quot;</span></span><br><span class="line"><span class="built_in">print</span>(complex_num) <span class="comment">#  2 + 3j</span></span><br><span class="line"></span><br><span class="line">test_str = <span class="string">&quot; Not number&quot;</span></span><br><span class="line"><span class="built_in">print</span>(test_str) <span class="comment">#  Not number</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用内置表达式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;sum([8, 16, 34])&quot;</span>)) <span class="comment"># 58</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;2+3&#x27;&quot;</span>) <span class="comment"># &#x27;2+3&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="globals的使用"><a href="#globals的使用" class="headerlink" title="globals的使用"></a>globals的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">100</span>  <span class="comment"># A global variable</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;num1 + 100&quot;</span>, &#123;<span class="string">&quot;num1&quot;</span>: num1&#125;))</span><br></pre></td></tr></table></figure><h2 id="locals的使用"><a href="#locals的使用" class="headerlink" title="locals的使用"></a>locals的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;sum([a, 2, 2])&quot;</span>,&#123;&#125;, &#123;<span class="string">&quot;a&quot;</span>:<span class="number">2</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;num1 + num2&quot;</span>,&#123;&#125;,&#123;<span class="string">&quot;num1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;num2&quot;</span>:<span class="number">2</span>&#125;))</span><br></pre></td></tr></table></figure><h1 id="安全隐患"><a href="#安全隐患" class="headerlink" title="安全隐患"></a>安全隐患</h1><p>Python中的eval（）很有用，但也有重要的安全隐患。eval函数被认为是不安全的，因为它允许您或其他用户动态执行任意Python代码。那对我们有什么影响？</p><p><font color=red>假设您正在服务器上运行的应用程序中要求用户&#x3D;&#x3D;输入&#x3D;&#x3D;。</font></p><p>现在，如果您在输入上使用eval函数，则用户可以访问服务器本身。用户可以像这样传递一些可疑的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__ import__(<span class="string">&#x27;subprocess&#x27;</span>).getoutput(<span class="string">&#x27;rm –rf *&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上面的代码将删除应用程序当前目录中的所有文件，这肯定会影响我们。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>因此，最好避免使用eval函数，但是如果仍然要使用eval函数，我们可以借助globals和locals参数来限制其功能。</p><p>例如，假设我有一个应用程序，可以在给定数字或所有给定数字的总和中找到最小值。像这样使用eval的最方便方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="built_in">input</span>()))</span><br><span class="line"><span class="comment"># 此时输入了sum([1,2,3])</span></span><br><span class="line"><span class="comment"># 或者：min([1,2,3]) 甚至。。。</span></span><br></pre></td></tr></table></figure><p>此时我们无法控制用户的输入内容，因此我们可以利用globals和locals参数，使得eval不能识别sum（）和min（）以外的函数。这肯定会和上面的代码做同样的事情，但是要安全得多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="built_in">input</span>(),&#123;<span class="string">&quot;__builtins__&quot;</span>:<span class="literal">None</span>&#125;,&#123;<span class="string">&quot;sum&quot;</span>:<span class="built_in">sum</span>,<span class="string">&quot;min&quot;</span>:<span class="built_in">min</span>&#125;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-内置函数-eval </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决软件包 xxxx 的文件名列表文件缺少最后结尾的换行符</title>
      <link href="/post/925d9613.html"/>
      <url>/post/925d9613.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="一、解决软件包-xxxx-的文件名列表文件缺少最后结尾的换行符"><a href="#一、解决软件包-xxxx-的文件名列表文件缺少最后结尾的换行符" class="headerlink" title="一、解决软件包 xxxx 的文件名列表文件缺少最后结尾的换行符"></a>一、解决软件包 xxxx 的文件名列表文件缺少最后结尾的换行符</h2><h3 id="执行sudo-apt-update-—-gt-sudo-apt-upgrade"><a href="#执行sudo-apt-update-—-gt-sudo-apt-upgrade" class="headerlink" title="执行sudo apt update —&gt;sudo apt upgrade"></a>执行sudo apt update —&gt;sudo apt upgrade</h3><p><font color=red>dpkg: 无法恢复的致命错误，中止：<br>软件包 &#x3D;&#x3D;xxxxx&#x3D;&#x3D; 的文件名列表文件缺少最后结尾的换行符<br>E: Sub-process &#x2F;usr&#x2F;bin&#x2F;dpkg returned an error code (2)<br></font></p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>sudo su</p><p>cd &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;info</p><p>ls &#x2F;&#x2F;我这是因为gtk文件名列表文件出问题了，我查看相关文件有四个：&#x3D;&#x3D;xxxx&#x3D;&#x3D;.list，&#x3D;&#x3D;xxxx&#x3D;&#x3D;.md5sums，&#x3D;&#x3D;xxxx&#x3D;&#x3D;.postinst，&#x3D;&#x3D;xxxx&#x3D;&#x3D;.postrm</p><p>rm xxxxx.* &#x2F;&#x2F;将相关文件全删除</p><p>sudo apt upgrade &#x2F;&#x2F;成功</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Cartopy（避坑教程）</title>
      <link href="/post/5267b626.html"/>
      <url>/post/5267b626.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="在-Linux-上，-安装-Cartopy，不能直接pip安装，需要先安装依赖。"><a href="#在-Linux-上，-安装-Cartopy，不能直接pip安装，需要先安装依赖。" class="headerlink" title="在 Linux 上， 安装 Cartopy，不能直接pip安装，需要先安装依赖。"></a>在 Linux 上， 安装 Cartopy，不能直接pip安装，需要先安装依赖。</h3><h4 id="如果直接"><a href="#如果直接" class="headerlink" title="如果直接"></a>如果直接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Cartopy</span><br></pre></td></tr></table></figure><h4 id="则报错："><a href="#则报错：" class="headerlink" title="则报错："></a>则报错：</h4><p><img src="https://z3.ax1x.com/2021/08/12/f0kR4f.png" alt="f0kR4f.png"></p><p>Cartopy包安装必须依赖numpy、pyshp、Shapely包，在处理地图投影变形和读写和操作栅格图像时还需要pyproj、pillow包，且 Cartopy常与Matplotlib一起使用，Matplotlib是Python 的绘图库，因此还需安装Matplotlib，在 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">UC Irvine</a>页面上找到这些工具包针对 Windows 操作系统的预编译版本，一定要注意与自己Python版本号对应，我的版本是3.7，因此我下载的是：在 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">UC Irvine</a>找到这几个包对应的python3.7版本号和操作系统<br>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">numpy-1.18.0+mkl-cp37-cp37m-win_amd64.whl</span><br><span class="line"></span><br><span class="line">pyshp-2.1.0-py2.py3-none-any.whl</span><br><span class="line"></span><br><span class="line">Shapely‑1.7.1‑cp37‑cp37m‑win_amd64.whl</span><br><span class="line"></span><br><span class="line">matplotlib-3.2.0rc2-cp37-cp37m-win_amd64.whl</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="找到对应的-whl之后，则执行："><a href="#找到对应的-whl之后，则执行：" class="headerlink" title="找到对应的.whl之后，则执行："></a>找到对应的.whl之后，则执行：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy==1.18.1</span><br><span class="line"></span><br><span class="line">pip install pyshp==2.1.3</span><br><span class="line"># pyshp：Python 实现的 ESRI Shapefile 读写包；</span><br><span class="line"></span><br><span class="line">pip install Shapely==1.7.1</span><br><span class="line"># shapely：操作和分析空间地理对象；</span><br><span class="line"></span><br><span class="line">pip install matplotlib==3.1.2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="如果这些依赖都存在的话，需要pip-list来确认依赖的版本是否正确"><a href="#如果这些依赖都存在的话，需要pip-list来确认依赖的版本是否正确" class="headerlink" title="如果这些依赖都存在的话，需要pip list来确认依赖的版本是否正确"></a>如果这些依赖都存在的话，需要<strong>pip list</strong>来确认依赖的版本是否正确</h4><p>最后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Cartopy</span><br></pre></td></tr></table></figure><h2 id="此时如果安装-x3D-x3D-报错-x3D-x3D-："><a href="#此时如果安装-x3D-x3D-报错-x3D-x3D-：" class="headerlink" title="此时如果安装&#x3D;&#x3D;报错&#x3D;&#x3D;："></a>此时如果安装&#x3D;&#x3D;报错&#x3D;&#x3D;：</h2><h3 id="第一种报错："><a href="#第一种报错：" class="headerlink" title="第一种报错："></a>第一种报错：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    ERROR: Command errored out with exit status 1:</span><br><span class="line">     command: /home/mlli/anaconda3/envs/deepsphere/bin/python -c &#x27;import sys, setuptools, tokenize; sys.argv[0] = &#x27;&quot;&#x27;&quot;&#x27;/home/mlli/pip-install-6xdwlgfn/cartopy_b061d538b6be48e0a39db2878cca4ebf/setup.py&#x27;&quot;&#x27;&quot;&#x27;; __file__=&#x27;&quot;&#x27;&quot;&#x27;/home/mlli/pip-install-6xdwlgfn/cartopy_b061d538b6be48e0a39db2878cca4ebf/setup.py&#x27;&quot;&#x27;&quot;&#x27;;f=getattr(tokenize, &#x27;&quot;&#x27;&quot;&#x27;open&#x27;&quot;&#x27;&quot;&#x27;, open)(__file__);code=f.read().replace(&#x27;&quot;&#x27;&quot;&#x27;\r\n&#x27;&quot;&#x27;&quot;&#x27;, &#x27;&quot;&#x27;&quot;&#x27;\n&#x27;&quot;&#x27;&quot;&#x27;);f.close();exec(compile(code, __file__, &#x27;&quot;&#x27;&quot;&#x27;exec&#x27;&quot;&#x27;&quot;&#x27;))&#x27; egg_info --egg-base /home/mlli/pip-pip-egg-info-avvdfa6v</span><br><span class="line">         cwd: /home/mlli/pip-install-6xdwlgfn/cartopy_b061d538b6be48e0a39db2878cca4ebf/</span><br><span class="line">    Complete output (3 lines):</span><br><span class="line">    /home/mlli/pip-install-6xdwlgfn/cartopy_b061d538b6be48e0a39db2878cca4ebf/setup.py:107: UserWarning: Unable to determine GEOS version. Ensure you have 3.3.3 or later installed, or installation may fail.</span><br><span class="line">      &#x27;.&#x27;.join(str(v) for v in GEOS_MIN_VERSION), ))</span><br><span class="line">    Proj 4.9.0 must be installed.</span><br><span class="line">    ----------------------------------------</span><br><span class="line">ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;Proj 4.9.0 must be installed.&#x3D;&#x3D;</p><p>看到这条报错信息，一定是因为上面的依赖安装的版本不对<br>要安装对应python版本的依赖,可以卸载重装一边依赖</p><h3 id="第二种报错"><a href="#第二种报错" class="headerlink" title="第二种报错"></a>第二种报错</h3><p>类似于这种的：</p><p><img src="https://z3.ax1x.com/2021/08/16/fWjyWt.png" alt="fWjyWt.png"></p><p>&#x3D;&#x3D;error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1&#x3D;&#x3D;<br>这个报错也是由于电脑相关依赖文件没装，<br>在这个报错上方可能出现，python.h这个文件需要下载安装，找不到等</p><p>解决办法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br><span class="line"># 或者sudo apt-get install xxxxx-dev，根据具体情况而变</span><br></pre></td></tr></table></figure><p>如果上述方法行不通，可以<strong>python -V</strong>查看自己的python版本</p><p>有时候需要指定版本，因为我使用的是3.7，所以就要专门安装3.7对应的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3.7-dev</span><br></pre></td></tr></table></figure><h2 id="第三种（同第二种）"><a href="#第三种（同第二种）" class="headerlink" title="第三种（同第二种）"></a>第三种（同第二种）</h2><p>&#x3D;&#x3D;Python.h：没有那个文件或目录&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In file included from greenlet.c:5:0:</span><br><span class="line">greenlet.h:8:20: 致命错误： Python.h：没有那个文件或目录</span><br><span class="line">编译中断。</span><br><span class="line">error: Setup script exited with error: command &#x27;gcc&#x27; failed with exit status 1</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br><span class="line"># 或者sudo apt-get install xxxxx-dev，根据具体情况而变</span><br></pre></td></tr></table></figure><p>如果上述方法行不通，可以<strong>python -V</strong>查看自己的python版本<br>然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3.7-dev</span><br></pre></td></tr></table></figure><h2 id="上述如果都解决不了，可尝试"><a href="#上述如果都解决不了，可尝试" class="headerlink" title="上述如果都解决不了，可尝试"></a>上述如果都解决不了，可尝试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1  $ sudo apt-get install libgeos-dev</span><br><span class="line"></span><br><span class="line">2  $ sudo apt-get install libgeos++-dev</span><br><span class="line"></span><br><span class="line">3 $ sudo apt-get install proj-bin</span><br><span class="line"></span><br><span class="line">4 $ sudo apt-get install libproj-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后 pip install cartopy</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令</title>
      <link href="/post/b1109de1.html"/>
      <url>/post/b1109de1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>注意，docker的操作全程需要root权限，所以最好将用户的sudo权限进行细分控制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 添加名为docker的用户群</span><br><span class="line">sudo groupadd docker</span><br><span class="line"># 将当前用户添加大docker用户群</span><br><span class="line">sudo usermod -aG docker [你当前的用户名]</span><br><span class="line">## 退出系统，重新登录</span><br></pre></td></tr></table></figure><hr><h2 id="根据dockerfile文件构建镜像"><a href="#根据dockerfile文件构建镜像" class="headerlink" title="根据dockerfile文件构建镜像"></a>根据dockerfile文件构建镜像</h2><p>docker build -t 镜像名 dockerfile的路径 .</p><h4 id="Docker镜像拉取"><a href="#Docker镜像拉取" class="headerlink" title="Docker镜像拉取"></a>Docker镜像拉取</h4><p>docker pull 镜像名:标签</p><h2 id="查看docker容器镜像元数据"><a href="#查看docker容器镜像元数据" class="headerlink" title="查看docker容器镜像元数据"></a>查看docker容器镜像元数据</h2><p>docker inspect</p><h2 id="查看所有的镜像"><a href="#查看所有的镜像" class="headerlink" title="查看所有的镜像"></a>查看所有的镜像</h2><p>docker images</p><h4 id="删除镜像（先删除容器）"><a href="#删除镜像（先删除容器）" class="headerlink" title="删除镜像（先删除容器）"></a>删除镜像（先删除容器）</h4><p>docker rmi 镜像ID</p><h2 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h2><p>docker ps</p><h4 id="查看所有的容器"><a href="#查看所有的容器" class="headerlink" title="查看所有的容器"></a>查看所有的容器</h4><p>docker ps -a</p><h4 id="创建容器（并运行镜像）"><a href="#创建容器（并运行镜像）" class="headerlink" title="创建容器（并运行镜像）"></a>创建容器（并运行镜像）</h4><p>docker run -it –name 容器名 镜像名<br>参数： </p><ul><li>-w &#x2F;data&#x2F;alg&#x2F;a&#x2F;   运行时直接进入&#x2F;data&#x2F;alg&#x2F;a&#x2F;目录下执行</li><li>-d 保证容器在后台运行（前提为容器中有一个长期运行的进程，容器才不会关闭）</li></ul><h4 id="创建容器（并进入容器）"><a href="#创建容器（并进入容器）" class="headerlink" title="创建容器（并进入容器）"></a>创建容器（并进入容器）</h4><p>docker run -it python:37 bash</p><h4 id="进入容器-运行中的"><a href="#进入容器-运行中的" class="headerlink" title="进入容器(运行中的)"></a>进入容器(运行中的)</h4><p>docker exec -it 容器名 &#x2F;bin&#x2F;bash</p><p>attach： 直接进入容器启动命令的终端，不会启动新的进程</p><p>exec： 是在容器中打开新的终端，并且可以启动新的进程</p><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><p>exit</p><h4 id="停止所有的容器"><a href="#停止所有的容器" class="headerlink" title="停止所有的容器"></a>停止所有的容器</h4><p>docker stop $(docker ps -a -q)</p><h4 id="重命名容器"><a href="#重命名容器" class="headerlink" title="重命名容器"></a>重命名容器</h4><p>docker rename 旧容器名 新容器名</p><h4 id="启动已停止的容器"><a href="#启动已停止的容器" class="headerlink" title="启动已停止的容器"></a>启动已停止的容器</h4><p>docker  start  容器ID</p><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><p>docker  restart  容器ID</p><h4 id="删除容器-先停止，后删除"><a href="#删除容器-先停止，后删除" class="headerlink" title="删除容器(先停止，后删除)"></a>删除容器(先停止，后删除)</h4><p>docker rm 容器名&#x2F;容器ID</p><h4 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h4><p>docker rm $(docker ps -a -q)</p><h4 id="批量停止指定容器"><a href="#批量停止指定容器" class="headerlink" title="批量停止指定容器"></a>批量停止指定容器</h4><p>docker stop <code>sudo docker ps | grep &#39;关键字&#39; | awk &#39;&#123;print $1&#125;&#39;</code></p><h4 id="批量删除指定容器"><a href="#批量删除指定容器" class="headerlink" title="批量删除指定容器"></a>批量删除指定容器</h4><p>docker rm <code>sudo docker ps | grep &#39;关键字&#39; | awk &#39;&#123;print $1&#125;&#39;</code></p><h4 id="批量删除所有已停止的容器"><a href="#批量删除所有已停止的容器" class="headerlink" title="批量删除所有已停止的容器"></a>批量删除所有已停止的容器</h4><p>docker rm <code>docker ps -a|grep Exited|awk &#39;&#123;print $1&#125;&#39;</code></p><h4 id="批量删除指定镜像"><a href="#批量删除指定镜像" class="headerlink" title="批量删除指定镜像"></a>批量删除指定镜像</h4><p>docker rmi $(sudo docker images | grep 关键字 | awk ‘{print $1”:”$2}’)</p><br><h2 id="查看容器日志（容器外）"><a href="#查看容器日志（容器外）" class="headerlink" title="查看容器日志（容器外）"></a>查看容器日志（容器外）</h2><p>docker logs -f 容器ID</p><ul><li>-t 是加入时间戳</li><li>-f 跟随最新的日志打印</li><li>–tail 数字 显示最后多少条</li></ul><h4 id="查看容器内运行的进程"><a href="#查看容器内运行的进程" class="headerlink" title="查看容器内运行的进程"></a>查看容器内运行的进程</h4><p>docker top 容器ID</p><br><h2 id="复制docker中的文件到宿主机（容器在运行中）"><a href="#复制docker中的文件到宿主机（容器在运行中）" class="headerlink" title="复制docker中的文件到宿主机（容器在运行中）"></a>复制docker中的文件到宿主机（容器在运行中）</h2><p>docker cp 容器id：文件路径 宿主机文件存放路径</p><h4 id="复制宿主机的文件到docker中"><a href="#复制宿主机的文件到docker中" class="headerlink" title="复制宿主机的文件到docker中"></a>复制宿主机的文件到docker中</h4><p>docker cp 宿主机文件路径  容器id：docker文件路径</p><br><hr><h1 id="x3D-x3D-容器迁移-x3D-x3D"><a href="#x3D-x3D-容器迁移-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;容器迁移&#x3D;&#x3D;"></a>&#x3D;&#x3D;容器迁移&#x3D;&#x3D;</h1><blockquote><p>迁移在许多情况下都是不可避免的。硬件升级、数据中心变化、过时的操作系统、运行环境的变化，所有这些都可能成为迁移的触发点。</p></blockquote><blockquote><p>Docker容器迁移通常是迁移任务的一部分。今天我们将看到将Docker容器从现有服务器迁移到另一台服务器的不同方法。</p></blockquote><blockquote><p>如何将Docker容器迁移到另一台服务器，没有直接将Docker容器从一台服务器迁移到另一台服务器的方法，我们通过使用下面这些方法中的一个或多个来解决Docker容器迁移的问题。</p></blockquote><h2 id="1、导出和导入容器"><a href="#1、导出和导入容器" class="headerlink" title="1、导出和导入容器"></a>1、导出和导入容器</h2><p>容器迁移，先导出容器，在导入成镜像即可。  </p><h5 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h5><p>导出容器意味着从容器的文件系统创建压缩文件，导出的文件保存为“gzip”文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export 容器ID | gzip &gt; 容器名.tar.gz  </span><br></pre></td></tr></table></figure><h5 id="导入成镜像"><a href="#导入成镜像" class="headerlink" title="导入成镜像"></a>导入成镜像</h5><p>然后通过文件传输工具(如scp或rsync)将压缩文件复制到新服务器。在新服务器中，这个gzip文件随后被导入到一个新容器中。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcat 容器名.tar.gz | docker import - 容器名</span><br></pre></td></tr></table></figure><blockquote><p>缺点：<br>导出容器工具的一个缺点是，它不导出容器的端口和变量，也不导出包含容器的底层数据。<br>当尝试在另一台服务器中加载容器时，这可能会导致错误。在这种情况下，我们选择Docker镜像迁移来将容器从一台服务器迁移到另一台服务器。</p></blockquote><h2 id="2、容器镜像迁移"><a href="#2、容器镜像迁移" class="headerlink" title="2、容器镜像迁移"></a>2、容器镜像迁移</h2><p>将Docker容器迁移到另一台服务器的最常用方法是迁移容器关联到的镜像。  </p><p>对于必须迁移的容器，首先使用“Docker commit”命令将其Docker镜像保存到压缩文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit container-id image-name </span><br></pre></td></tr></table></figure><p>生成的镜像将被压缩并上传到新服务器上，在新服务器中，将使用“docker run”创建一个新容器。</p><p>使用此方法，数据卷不会被迁移，但它会保留在容器内创建的应用程序的数据。</p><h2 id="3、保存和加载镜像"><a href="#3、保存和加载镜像" class="headerlink" title="3、保存和加载镜像"></a>3、保存和加载镜像</h2><p>docker镜像是应用程序的代码、库、配置文件等的包。Docker容器是由这些镜像创建的。</p><p>可以使用“docker save”压缩镜像并将其迁移到新服务器。</p><p>docker save image-name &gt; image-name.tar<br>在新服务器中，使用“docker load”将压缩镜像文件用于创建新镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat image-name.tar | docker load </span><br></pre></td></tr></table></figure><h2 id="4、迁移数据卷"><a href="#4、迁移数据卷" class="headerlink" title="4、迁移数据卷"></a>4、迁移数据卷</h2><p>Docker容器中的数据卷是共享目录，其中包含特定于容器的数据。卷中的数据是持久的，在容器重新创建期间不会丢失。</p><p>使用导出或提交工具将Docker容器或镜像从一台服务器迁移到另一台服务器时，不会迁移基础数据卷。</p><p>在这种情况下，包含数据的目录将手动迁移到新服务器。然后在新服务器创建容器，引用该目录作为其数据卷。</p><p>另一个简单的方法是通过在“docker run”命令中传递“-volumes from”参数来备份和恢复数据卷。</p><p>docker run –rm –volumes-from datavolume-name -v $(pwd):&#x2F;backup image-name tar cvf backup.tar &#x2F;path-to-datavolume<br>这里，datavolume名称是&#x2F;path&#x2F;to&#x2F;volume。此命令提供数据卷的备份。要指定工作目录，还可以指定-w&#x2F;backup。在&#x2F;backup文件夹中生成的备份可以通过scp或ftp工具复制到新服务器。然后提取复制的备份并将其还原到新容器中的数据卷中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm --volumes-from datavolume-name -v $(pwd):/backup image-name bash -c &quot;cd /path-to-datavolume &amp;&amp; tar xvf /backup/backup.tar --strip 1&quot; </span><br></pre></td></tr></table></figure><hr><h1 id="x3D-x3D-容器备份恢复-x3D-x3D"><a href="#x3D-x3D-容器备份恢复-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;容器备份恢复&#x3D;&#x3D;"></a>&#x3D;&#x3D;容器备份恢复&#x3D;&#x3D;</h1><h2 id="备份容器"><a href="#备份容器" class="headerlink" title="备份容器"></a>备份容器</h2><p>1.首先查看当前容器列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/08/11/faEf2Q.png" alt="faEf2Q.png"></p><h5 id="2-比如我要备份红框里面的容器draw，容器id为3c9a8a74bc0d，需要先创建该容器的快照，执行如下命令："><a href="#2-比如我要备份红框里面的容器draw，容器id为3c9a8a74bc0d，需要先创建该容器的快照，执行如下命令：" class="headerlink" title="2.比如我要备份红框里面的容器draw，容器id为3c9a8a74bc0d，需要先创建该容器的快照，执行如下命令："></a>2.比如我要备份红框里面的容器draw，容器id为3c9a8a74bc0d，需要先创建该容器的快照，执行如下命令：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># draw-backup为备份名</span><br><span class="line">docker commit -p 3c9a8a74bc0d draw-backup</span><br></pre></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/08/11/faEW8g.png" alt="faEW8g.png"></p><p>3.执行完成后，查看镜像，运行如下命令可以看到已经备份成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h5 id="4-导出到本地目录（如：-x2F-home-x2F-用户名-x2F-Desktop目录下，并命名为draw-backup-tar）"><a href="#4-导出到本地目录（如：-x2F-home-x2F-用户名-x2F-Desktop目录下，并命名为draw-backup-tar）" class="headerlink" title="4.导出到本地目录（如：&#x2F;home&#x2F;用户名&#x2F;Desktop目录下，并命名为draw-backup.tar）"></a>4.导出到本地目录（如：&#x2F;home&#x2F;用户名&#x2F;Desktop目录下，并命名为draw-backup.tar）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save draw-backup  &gt; /home/wanghan/Desktop/draw-backup.tar</span><br></pre></td></tr></table></figure><h2 id="恢复容器"><a href="#恢复容器" class="headerlink" title="恢复容器"></a>恢复容器</h2><p>1.为了验证容器是否能导入，先删除docker里面的镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi draw-backup</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p>例如：<br><img src="https://z3.ax1x.com/2021/08/11/famRwn.png" alt="famRwn.png"></p><hr><h1 id="x3D-x3D-数据卷-x3D-x3D-（数据持久化）"><a href="#x3D-x3D-数据卷-x3D-x3D-（数据持久化）" class="headerlink" title="&#x3D;&#x3D;数据卷&#x3D;&#x3D;（数据持久化）"></a>&#x3D;&#x3D;数据卷&#x3D;&#x3D;（数据持久化）</h1><p>一般情况下，容器只是运行环境，不应该承担数据存储的角色，如果有数据存储的需求或者需要读取系统文件，就需要将系统的某个文件夹挂在到容器中，这样容器既能读取系统文件，也能将运行时生成的文件写到系统中保存起来，最典型的就是MySQL之类的数据库容器，如果不将数据保存起来，随着容器的消失，数据也跟着消失了。  </p><p>数据卷通过启动参数 -v 来指定。<br>-v后面的映射关系是”宿主机文件路径:容器里对应的文件路径”，其中，宿主机上的文件&#x2F;目录是要提前存在的，容器里对应的文件&#x2F;目录会自动创建。<br><strong>因此，为了方便管理，最好是宿主机路径与容器路径保持一致。</strong><br><strong>用法：</strong>   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 宿主机文件绝对路径：容器路径  镜像名 /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged=true --name savegoi -v /data1/data/:/CMADAAS/DATA/ -v /data1/yftk/alg/savegoi:/data/alg -v /data1/yftk/alg/savegoi/savegoi.jar:/data/alg/app.jar -v /data1/yftk/input:/input -v /data1/yftk/output:/output -p 8192:8192 -d jdk8:latest</span><br></pre></td></tr></table></figure><p>系统文件：<br><img src="https://z3.ax1x.com/2021/08/11/fUcHbQ.png" alt="fUcHbQ.png"><br>Docker内：<br><img src="https://z3.ax1x.com/2021/08/11/fUgpKU.png" alt="fUgpKU.png"></p><h1 id="x3D-x3D-端口暴露-x3D-x3D"><a href="#x3D-x3D-端口暴露-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;端口暴露&#x3D;&#x3D;"></a>&#x3D;&#x3D;端口暴露&#x3D;&#x3D;</h1><h5 id="P参数：docker自动映射暴露端口"><a href="#P参数：docker自动映射暴露端口" class="headerlink" title="-P参数：docker自动映射暴露端口"></a>-P参数：docker自动映射暴露端口</h5><p>docker run -d -p 5000:80 training&#x2F;webapp  <span style="color:#009900;">&#x2F;&#x2F;host上5000号端口，映射到容器暴露的80端口；</span></p><p>docker run -d -p 127.0.0.1:5000:80 training&#x2F;webapp <span style="color:#009900;">&#x2F;&#x2F;host上127.0.0.1:5000号端口，映射到容器暴露的80端口；</span></p><p>docker run -d -p 127.0.0.1::5000 training&#x2F;webapp <span style="color:#009900;">&#x2F;&#x2F;host上127.0.0.1:随机端口，映射到容器暴露的80端口；</span></p><p>docker run -d -p 127.0.0.1:5000:5000&#x2F;udp training&#x2F;webapp <span style="color:#009900;">&#x2F;&#x2F;绑定udp端口；</span></p><p>机端口，映射到容器暴露的80端口；</span></p><p>docker run -d -p 127.0.0.1:5000:5000&#x2F;udp training&#x2F;webapp <span style="color:#009900;">&#x2F;&#x2F;绑定udp端口；</span></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile制作python3.7镜像</title>
      <link href="/post/3f303350.html"/>
      <url>/post/3f303350.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>搭建一个简单的Python环境</p><h2 id="x3D-x3D-获取镜像-x3D-x3D"><a href="#x3D-x3D-获取镜像-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;获取镜像&#x3D;&#x3D;"></a>&#x3D;&#x3D;获取镜像&#x3D;&#x3D;</h2><p>从<a href="https://hub.docker.com/_/python?tab=tags&page=1&ordering=-last_updated&name=3.7.1">docker hub</a>获取最新的python镜像，例如我这次准备用的是<a href="https://hub.docker.com/_/python/">3.7.1-stretch</a></p><h4 id="编写dockerfile文件"><a href="#编写dockerfile文件" class="headerlink" title="编写dockerfile文件"></a>编写dockerfile文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.7.1-stretch</span><br></pre></td></tr></table></figure><h4 id="生成镜像"><a href="#生成镜像" class="headerlink" title="生成镜像"></a>生成镜像</h4><p>使用docker命令，生成docker镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名:标签名 -f dockerfile路径 .</span><br><span class="line">例如：docker build -t python:37 .</span><br></pre></td></tr></table></figure><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="进入镜像（创建并进入容器）"><a href="#进入镜像（创建并进入容器）" class="headerlink" title="进入镜像（创建并进入容器）"></a>进入镜像（创建并进入容器）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it python:37 bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql自增主键清零方法（从1开始）</title>
      <link href="/post/122756da.html"/>
      <url>/post/122756da.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="truncate语句，是清空表中的内容，包括自增主键的信息。truncate表后，表的主键就会重新从1开始。"><a href="#truncate语句，是清空表中的内容，包括自增主键的信息。truncate表后，表的主键就会重新从1开始。" class="headerlink" title="truncate语句，是清空表中的内容，包括自增主键的信息。truncate表后，表的主键就会重新从1开始。"></a>truncate语句，是清空表中的内容，包括自增主键的信息。truncate表后，表的主键就会重新从1开始。</h2><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>1、语法：</p><p>TRUNCATE TABLE table1</p><p>2、当用户没有truncate的权限时且曾经的数据不需要时：</p><ol><li>删除原有主键：</li></ol><p>ALTER TABLE ‘table_name’ DROP ‘id’;</p><ul><li>1</li></ul><ol><li>添加新主键：</li></ol><p>ALTER TABLE ‘table_name’ ADD ‘id’ int(11) NOT NULL FIRST;</p><ul><li>1</li></ul><ol><li>设置新主键：</li></ol><p>ALTER TABLE ‘table_name’ MODIFY COLUMN ‘id’ int(11) NOT NULL AUTO_INCREMENT,ADD PRIMARY KEY(id);</p><ul><li>1</li></ul><p>3、当用户没有权限时： </p><p>可以直接设置数据表的 AUTO_INCREMENT 值为想要的初始值，比如10000：</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile文件+构建镜像</title>
      <link href="/post/f418cfc4.html"/>
      <url>/post/f418cfc4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>例如：</p><h3 id="1-Dockerfile文件构建python3-7镜像"><a href="#1-Dockerfile文件构建python3-7镜像" class="headerlink" title="1. Dockerfile文件构建python3.7镜像"></a>1. Dockerfile文件构建python3.7镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.7.1-stretch</span><br><span class="line"></span><br><span class="line"># 添加python依赖包</span><br><span class="line">RUN pip install pymysql requests redis ConfigParser</span><br></pre></td></tr></table></figure><h3 id="2-Dockerfile文件执行python脚本"><a href="#2-Dockerfile文件执行python脚本" class="headerlink" title="2. Dockerfile文件执行python脚本"></a>2. Dockerfile文件执行python脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 指定基础镜像</span><br><span class="line">FROM harbor-test.ecoweather.cn/library/python:37</span><br><span class="line"></span><br><span class="line"># 工作路径，相当与 cd xx</span><br><span class="line">WORKDIR /code</span><br><span class="line"></span><br><span class="line"># 运行指定的命令</span><br><span class="line">RUN mkdir /EC &amp;&amp; mkdir /log</span><br><span class="line"></span><br><span class="line">WORKDIR /code/log</span><br><span class="line">RUN touch draw_data.log</span><br><span class="line"></span><br><span class="line">WORKDIR /code</span><br><span class="line"></span><br><span class="line"># 复制　指定路径文件到指定路径下</span><br><span class="line"># ADD 复制，可以自动解压包</span><br><span class="line">COPY /draw/draw_data_test.py /code</span><br><span class="line">COPY /draw/config.yaml /code</span><br><span class="line">COPY requirements.txt /code</span><br><span class="line">COPY Dockerfile /code</span><br><span class="line">COPY /data/model/EC/2021070612.070 /code/EC/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN pip install --upgrade pip -i http://nexus-pro.paas.ecoweather.cn/repository/ecoweather-pip/simple  --trusted-host nexus-pro.paas.ecoweather.cn</span><br><span class="line">RUN pip install -r requirements.txt  -i http://nexus-pro.paas.ecoweather.cn/repository/ecoweather-pip/simple  --trusted-host nexus-pro.paas.ecoweather.cn</span><br><span class="line"># RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp;  echo &#x27;Asia/Shanghai&#x27; &gt;/etc/timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># RUN是构件容器时就运行的命令以及提交运行结果</span><br><span class="line"></span><br><span class="line"># CMD是容器启动时执行的命令，在构件时并不运行</span><br><span class="line">CMD [&quot;python&quot;,&quot;draw_data_test.py&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-Dockerfile文件执行带参数的python脚本"><a href="#3-Dockerfile文件执行带参数的python脚本" class="headerlink" title="3. Dockerfile文件执行带参数的python脚本"></a>3. Dockerfile文件执行带参数的python脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FROM python:37</span><br><span class="line"></span><br><span class="line">WORKDIR /code</span><br><span class="line"></span><br><span class="line">RUN mkdir &quot;test&quot;</span><br><span class="line">RUN touch regional_outlier_test.log</span><br><span class="line"></span><br><span class="line">COPY Dockerfile /code</span><br><span class="line">COPY regional_outlier_test.py /code</span><br><span class="line">COPY requirements.txt /code</span><br><span class="line">COPY test /code/test</span><br><span class="line"></span><br><span class="line">RUN pip install --upgrade pip -i https://pypi.doubanio.com/simple/</span><br><span class="line">RUN pip install -r requirements.txt -i https://pypi.doubanio.com/simple/</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;python&quot;,&quot;regional_outlier_test.py&quot;]</span><br><span class="line"># regional_outlier_test.py</span><br><span class="line">CMD [&quot;exe&quot;,&quot;/code/test/test_data/&quot;,&quot;W_NAFP_C_ECMF_20200901054848_P_C1D09010000090103001.nc&quot;,&quot;2T&quot;,&quot;K&quot;,&quot;220&quot;,&quot;243&quot;,&#x27;&#123;&quot;type&quot;:&quot;FeatureCollection&quot;,&quot;features&quot;:[&#123;&quot;type&quot;:&quot;Feature&quot;,&quot;properties&quot;:&#123;&#125;,&quot;geometry&quot;:&#123;&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[99.1845703125,38.85682013474361],[98.0859375,38.58252615935333],[99.1845703125,36.70365959719456],[104.8974609375,35.28150065789119],[100.94238281249998,34.88593094075317],[103.22753906249998,31.653381399664],[106.435546875,31.31610138349565],[113.90625,32.287132632616384],[114.60937499999998,34.70549341022544],[112.06054687499998,38.685509760012],[107.9736328125,39.842286020743394],[99.1845703125,38.85682013474361]]]&#125;&#125;]&#125;&#x27;]</span><br></pre></td></tr></table></figure><h3 id="4-Dockerfile文件构建jdk、maven环境"><a href="#4-Dockerfile文件构建jdk、maven环境" class="headerlink" title="4. Dockerfile文件构建jdk、maven环境"></a>4. Dockerfile文件构建jdk、maven环境</h3><p>Python环境下载：<a href="https://www.python.org/downloads/release/python-3711/">https://www.python.org/downloads/release/python-3711/</a></p><p>Maven环境下载：<a href="http://apache-mirror.rbc.ru/pub/apache/maven/maven-3/">http://apache-mirror.rbc.ru/pub/apache/maven/maven-3/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">FROM python:37</span><br><span class="line"></span><br><span class="line">WORKDIR /code</span><br><span class="line"></span><br><span class="line">RUN mkdir &quot;test&quot; &amp;&amp; mkdir &quot;/var/tmp/jdk&quot; &amp;&amp; mkdir &quot;/var/tmp/maven&quot;</span><br><span class="line"></span><br><span class="line"># 拷贝项目</span><br><span class="line">RUN touch regional_outlier_test.log</span><br><span class="line">COPY Dockerfile /code</span><br><span class="line">COPY regional_outlier_test.py /code</span><br><span class="line">COPY requirements.txt /code</span><br><span class="line">COPY test /code/test</span><br><span class="line"></span><br><span class="line"># 拷贝jdk/maven环境</span><br><span class="line">COPY jdk1.8.0_301 /opt/jdk8</span><br><span class="line"># 拷贝maven环境</span><br><span class="line"># RUN tar xzvf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line"># RUN cp -R apache-maven-3.6.3 /usr/local/bin</span><br><span class="line">COPY apache-maven-3.6.3 /var/tmp/maven/apache-maven-3.6.3</span><br><span class="line"></span><br><span class="line"># 配置JDK/maven环境变量</span><br><span class="line">ENV JAVA_HOME /opt/jdk8</span><br><span class="line">ENV MAVEN_HOME /var/tmp/maven/apache-maven-3.6.3</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">RUN pip install --upgrade pip -i https://pypi.doubanio.com/simple/</span><br><span class="line">RUN pip install -r requirements.txt -i https://pypi.doubanio.com/simple/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;python&quot;,&quot;regional_outlier_test.py&quot;]</span><br><span class="line"># regional_outlier_test.py</span><br><span class="line">CMD [&quot;exe&quot;,&quot;/code/test/test_data/&quot;,&quot;W_NAFP_C_ECMF_20200901054848_P_C1D09010000090103001.nc&quot;,&quot;2T&quot;,&quot;K&quot;,&quot;220&quot;,&quot;243&quot;,&#x27;&#123;&quot;type&quot;:&quot;FeatureCollection&quot;,&quot;features&quot;:[&#123;&quot;type&quot;:&quot;Feature&quot;,&quot;properties&quot;:&#123;&#125;,&quot;geometry&quot;:&#123;&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[99.1845703125,38.85682013474361],[98.0859375,38.58252615935333],[99.1845703125,36.70365959719456],[104.8974609375,35.28150065789119],[100.94238281249998,34.88593094075317],[103.22753906249998,31.653381399664],[106.435546875,31.31610138349565],[113.90625,32.287132632616384],[114.60937499999998,34.70549341022544],[112.06054687499998,38.685509760012],[107.9736328125,39.842286020743394],[99.1845703125,38.85682013474361]]]&#125;&#125;]&#125;&#x27;]</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;–&gt;3&#x3D;&#x3D;.此时的CMD命令不再 先在容器里执行，当遇到了ENTRYPOINT，则先执行ENTRYPOINT为执行命令，而CMD则为后执行，当做向容器内传参。即ENTRYPOINT执行脚本，CMD后面的内容都是向regional_outlier_test.py脚本传参</p><h2 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile/entrypoint">ENTRYPOINT 入口点</a></h2><p>ENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。</p><p>ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 –entrypoint 来指定。</p><p>当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</span><br></pre></td></tr></table></figure><p>文章：<a href="https://blog.csdn.net/chenxing109/article/details/85319489">如何向Docker容器传递参数</a></p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;echo&quot;, &quot;hello&quot;]</span><br><span class="line">CMD [&quot;echo&quot;, &quot;world&quot;]</span><br></pre></td></tr></table></figure><p>实际入口是它们拼接起来，形成 [“echo”, “hello”, “echo”, “world”], 执行 docker run test 显示为 hello echo world</p><p>定义了 ENTRYPOINT, CMD 由 docker run 提供</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT  [&quot;echo&quot;, &quot;hello&quot;]</span><br></pre></td></tr></table></figure><p>执行命令 docker run <image> rm -rf &#x2F;, 实际入口是由 [“echo”, “hello”] 与 [“rm”, “-rf”, “&#x2F;“] 拼接而成的 [“echo”, “hello”, “rm”, “-rf”, “&#x2F;“], 输出为 hello rm -rf &#x2F;。看到 rm -rf &#x2F; 也不用担心，用 ENTRYPOINT 就是让人放心</p><p>注：ENTRYPOINT 同样可以被覆盖，如 docker run –entrypoint ls test -l &#x2F;，将会执行 ls -l &#x2F; 命令。</p><p>如果 ENTRYPOINT 用 shell 格式定义的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT java -jar /app.jar</span><br><span class="line">CMD [&quot;hello&quot;, &quot;world&quot;]</span><br></pre></td></tr></table></figure><p>通过 docker inspect 命令看到镜像中实际的 ENTRYPOINT 是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;java -jar /app.jar&quot;]</span><br></pre></td></tr></table></figure><p>所以与 CMD 连接起来的入口就是 [“&#x2F;bin&#x2F;sh”, “-c”, “java -jar &#x2F;app.jar”, “hello”, “world”]，”bin&#x2F;sh” 直接忽略掉后面的 “hello” 与 “world”，这就是为什么shell 命令方式无法获取参数。</p><h2 id="未定义-ENTRYPOINT"><a href="#未定义-ENTRYPOINT" class="headerlink" title="未定义 ENTRYPOINT"></a>未定义 ENTRYPOINT</h2><p>没有定义 ENTRYPOINT 的镜像想怎么来就怎么来，docker run <image> 后面的输入你自己作主。</p><h2 id="有定义-ENTRYPOINT"><a href="#有定义-ENTRYPOINT" class="headerlink" title="有定义 ENTRYPOINT"></a>有定义 ENTRYPOINT</h2><p>定义了 ENTRYPOINT 的镜像，则是 CMD 或 docker run <image> 后的输入作为  ENTRYPOINT 中命令的附加参数。再次提醒 shell 格式的 ENTRYPOINT 和 CMD  务必要转换为相应 exec  格式来理解。</p><h2 id="shell-格式的-ENTRYPOINT"><a href="#shell-格式的-ENTRYPOINT" class="headerlink" title="shell 格式的 ENTRYPOINT"></a>shell 格式的 ENTRYPOINT</h2><p>如果是复杂的 shell 命令不容易拆解出一个个参数，而希望用  shell 格式来定义 ENTRYPOINT 的话，也有办法。shell 格式的 ENTRYPOINT 是由 “&#x2F;bin&#x2F;sh -c” 启动的，而它是可以解析变量的。另一方面 CMD 或 docker run <image> 的输入第一个元素存成了 $0，其他剩余元素存为 $@, 所以 shell 格式的 ENTRYPOINT 可以这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT echo hello $0 $@</span><br></pre></td></tr></table></figure><p>注：shell 中 $0 表示命令本身，$@ 为所有参数</p><p>这样执行下面 docker 命令将可获得所有的参数输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run test world and China</span><br><span class="line"></span><br><span class="line">hello world and China</span><br></pre></td></tr></table></figure><p>如果只是按常规 shell 脚本来对待，想当然的写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT echo hello $@</span><br></pre></td></tr></table></figure><p>效果将是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run test world and China</span><br><span class="line"></span><br><span class="line">hello and China</span><br></pre></td></tr></table></figure><p>第一个参数将被丢失，docker run <image> 后第一个输入通常是一个命令，所以是 $0, 而 ENTRYPOINT 又希望它是一个普通参数，</p><h2 id="直接用-docker-inspect-查看"><a href="#直接用-docker-inspect-查看" class="headerlink" title="直接用 docker inspect  查看"></a>直接用 docker inspect <container-id> 查看</h2><p>最简单且准确的方式就是直接用 docker inspect <container-id> 查看实际启动的命令及参数，不用猜测，docker inspect 也不会撒谎。对于如下 Dockerfile 定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT java -Xmx256M -jar /app.jar</span><br><span class="line">CMD [&quot;echo&quot;, &quot;hello&quot;]</span><br></pre></td></tr></table></figure><p>运行容器后，docker inspect <container-id>, 注意是容器 ID 而非镜像 ID。在显示的 inspect JSON 结果的最顶端我们可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;Path&quot;: &quot;/bin/sh&quot;,    </span><br><span class="line">&quot;Args&quot;: [ </span><br><span class="line">  &quot;-c&quot;, </span><br><span class="line">  &quot;java -Xmx256M -jar /app.jar&quot;, </span><br><span class="line">  &quot;echo&quot;, </span><br><span class="line">  &quot;hello&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>ENTRYPOINT 和 CMD 如何组成实际入口，从这里的 Path 和 Args 是一目了然，也不用诧异为何 CMD 中的命令部分也变成了 ENTRYPOINT 命令的参数。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker上传镜像至私有仓库、docker注册中心（+拉取镜像）</title>
      <link href="/post/b5598520.html"/>
      <url>/post/b5598520.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="一、配置host配置文件-为了将域名解析成IP地址"><a href="#一、配置host配置文件-为了将域名解析成IP地址" class="headerlink" title="一、配置host配置文件(为了将域名解析成IP地址)"></a>一、配置host配置文件(为了将域名解析成IP地址)</h2><h5 id="例：ubuntu-20-04（为hosts配置文件）"><a href="#例：ubuntu-20-04（为hosts配置文件）" class="headerlink" title="例：ubuntu:20.04（为hosts配置文件）"></a>例：ubuntu:20.04（为hosts配置文件）</h5><p><img src="https://z3.ax1x.com/2021/08/09/f8wJEQ.png" alt="f8wJEQ.png"></p><h2 id="二、配置仓库上传权限（即配置登录用户）"><a href="#二、配置仓库上传权限（即配置登录用户）" class="headerlink" title="二、配置仓库上传权限（即配置登录用户）"></a>二、配置仓库上传权限（即配置登录用户）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker login harbor-test.ecoweather.cn -u admin -p Harbor12345</span><br><span class="line"># harbor-test.ecoweather.cn仓库地址</span><br><span class="line"># admin 用户名</span><br><span class="line"># Harbor12345 密码</span><br></pre></td></tr></table></figure><h2 id="三、上传镜像"><a href="#三、上传镜像" class="headerlink" title="三、上传镜像"></a>三、上传镜像</h2><h4 id="1-首先将本地准备上传的镜像进行标记"><a href="#1-首先将本地准备上传的镜像进行标记" class="headerlink" title="1.首先将本地准备上传的镜像进行标记"></a>1.首先将本地准备上传的镜像进行标记</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker tag SOURCE_IMAGE[:TAG] harbor-test.ecoweather.cn/library/IMAGE[:TAG]</span><br><span class="line"># SOURCE_IMAGE 为本地镜像名</span><br><span class="line"># [:TAG] 本地镜像标签 （使用时去掉[])</span><br><span class="line"># harbor-test.ecoweather.cn（为私有仓库地址）</span><br><span class="line"># library/IMAGE[:TAG] 为仓库中的路径 IMAGE为仓库镜像名 [:TAG]仓库镜像标签</span><br></pre></td></tr></table></figure><h5 id="—-例如："><a href="#—-例如：" class="headerlink" title="—-例如："></a>—-例如：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag python:37 harbor-test.ecoweather.cn/library/python:37</span><br></pre></td></tr></table></figure><h4 id="标记成功：（第二个为本地镜像，第三个为标记之后生成的）"><a href="#标记成功：（第二个为本地镜像，第三个为标记之后生成的）" class="headerlink" title="标记成功：（第二个为本地镜像，第三个为标记之后生成的）"></a>标记成功：（第二个为本地镜像，第三个为标记之后生成的）</h4><p><img src="https://z3.ax1x.com/2021/08/09/f8cc1H.png" alt="f8cc1H.png"></p><h4 id="2-推送本地镜像到当前项目（上传的镜像仓库）："><a href="#2-推送本地镜像到当前项目（上传的镜像仓库）：" class="headerlink" title="2.推送本地镜像到当前项目（上传的镜像仓库）："></a>2.推送本地镜像到当前项目（上传的镜像仓库）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker push harbor-test.ecoweather.cn/library/IMAGE[:TAG]</span><br><span class="line"># harbor-test.ecoweather.cn/library/IMAGE[:TAG] 同上</span><br></pre></td></tr></table></figure><h4 id="上传成功："><a href="#上传成功：" class="headerlink" title="上传成功："></a>上传成功：</h4><p><img src="https://z3.ax1x.com/2021/08/09/f8D4K0.png" alt="f8D4K0.png"></p><h2 id="一、拉取镜像"><a href="#一、拉取镜像" class="headerlink" title="一、拉取镜像"></a>一、拉取镜像</h2><h4 id="使用-pull-命令即可"><a href="#使用-pull-命令即可" class="headerlink" title="使用 pull 命令即可"></a>使用 pull 命令即可</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull harbor-test.ecoweather.cn/library/IMAGE[:TAG]</span><br><span class="line"># harbor-test.ecoweather.cn/library/IMAGE[:TAG] 同上</span><br></pre></td></tr></table></figure><p>注：如果拉取时需要权限，执行第二步，配置权限即可</p><p>附：（参考）<br><a href="https://blog.csdn.net/qq_18598403/article/details/91349114">Docker: 上传镜像至私有仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netCDF4--解析nc文件，分析数据结构</title>
      <link href="/post/8dfb7b23.html"/>
      <url>/post/8dfb7b23.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="nc格式的文件可谓随处可见，这种文件可以存储多维数字矩阵，同时又封装了自描述信息（例如经纬度、高度层、时间戳、单位等），因此使用起来十分方便，不用担心数据和描述信息分离而导致数据不可用。"><a href="#nc格式的文件可谓随处可见，这种文件可以存储多维数字矩阵，同时又封装了自描述信息（例如经纬度、高度层、时间戳、单位等），因此使用起来十分方便，不用担心数据和描述信息分离而导致数据不可用。" class="headerlink" title="nc格式的文件可谓随处可见，这种文件可以存储多维数字矩阵，同时又封装了自描述信息（例如经纬度、高度层、时间戳、单位等），因此使用起来十分方便，不用担心数据和描述信息分离而导致数据不可用。"></a>nc格式的文件可谓随处可见，这种文件可以存储多维数字矩阵，同时又封装了自描述信息（例如经纬度、高度层、时间戳、单位等），因此使用起来十分方便，不用担心数据和描述信息分离而导致数据不可用。</h4><h4 id="netCDF4就是网络通用数据格式，是python一个专门用来处理nc文件的库"><a href="#netCDF4就是网络通用数据格式，是python一个专门用来处理nc文件的库" class="headerlink" title="netCDF4就是网络通用数据格式，是python一个专门用来处理nc文件的库"></a>netCDF4就是网络通用数据格式，是python一个专门用来处理nc文件的库</h4><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入netCDF4库</span></span><br><span class="line"><span class="keyword">import</span> netCDF4 <span class="keyword">as</span> nc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 netCDF4的 Dataset方法读取文件</span></span><br><span class="line">dataset = nc.Dataset(<span class="string">&quot;/mnt/hgfs/pojiebao/2021070612.026&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件的结构</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查看文件的结构：\n&quot;</span>,dataset)</span><br><span class="line"><span class="comment"># &lt;class &#x27;netCDF4._netCDF4.Dataset&#x27;&gt;</span></span><br><span class="line"><span class="comment"># root group (NETCDF4 data model, file format HDF5):</span></span><br><span class="line"><span class="comment">#     title:  EC 5km spatial interpolation</span></span><br><span class="line"><span class="comment">#     dimensions(sizes): lon(1401), lat(1201), isobaric(19)</span></span><br><span class="line"><span class="comment">#     variables(dimensions): float32 lon(lon), float32 lat(lat), float32 isobaric(isobaric), int16 TMP(lat,lon), int16 TCC(lat,lon), int16 VIS(lat,lon), int16 PRE(lat,lon), int16 10U(lat,lon), int16 10V(lat,lon), int16 RH(lat,lon), int16 10WS(lat,lon), int16 10WD(lat,lon)</span></span><br><span class="line"><span class="comment">#     groups: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件的变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查看文件的变量：\n&quot;</span>,dataset.variables.keys())</span><br><span class="line"><span class="comment"># dict_keys([&#x27;lon&#x27;, &#x27;lat&#x27;, &#x27;isobaric&#x27;, &#x27;TMP&#x27;, &#x27;TCC&#x27;, &#x27;VIS&#x27;, &#x27;PRE&#x27;, &#x27;10U&#x27;, &#x27;10V&#x27;, &#x27;RH&#x27;, &#x27;10WS&#x27;, &#x27;10WD&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件的某变量名的属性信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查看TMP的属性信息：&quot;</span>,dataset.variables[<span class="string">&#x27;TMP&#x27;</span>])</span><br><span class="line"><span class="comment"># &lt;class &#x27;netCDF4._netCDF4.Variable&#x27;&gt;</span></span><br><span class="line"><span class="comment"># int16 TMP(lat, lon)</span></span><br><span class="line"><span class="comment">#     scale_factor: 0.1</span></span><br><span class="line"><span class="comment">#     units: Celsius</span></span><br><span class="line"><span class="comment"># unlimited dimensions: </span></span><br><span class="line"><span class="comment"># current shape = (1201, 1401)</span></span><br><span class="line"><span class="comment"># filling on, default _FillValue of -32767 used</span></span><br><span class="line"><span class="comment"># 1、变量的维度信息：</span></span><br><span class="line"><span class="comment"># 属性信息的第二行显示了该变量的维度组成，即air(time, lat, lon)。这表示该变量是三维数组，其维度顺序是时间、纬度、经度。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dataset.variables.keys():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看文件的数据</span></span><br><span class="line">    data = dataset.variables[i][:].data</span><br><span class="line">    data2 = dataset.variables[i][:]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data：&quot;</span>,data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data2：&quot;</span>,data2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取矩阵的长度</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;——————————————&quot;</span>,i,data.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个变量的信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查看RH变量的信息：\n&quot;</span>,dataset.variables[<span class="string">&#x27;RH&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查看PRE变量的信息：\n&quot;</span>,dataset.variables[<span class="string">&#x27;PRE&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个变量的属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查看RH变量的属性：\n&quot;</span>,dataset.variables[<span class="string">&#x27;RH&#x27;</span>].ncattrs())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查看PRE变量的属性：\n&quot;</span>,dataset.variables[<span class="string">&#x27;PRE&#x27;</span>].ncattrs())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个变量的数据值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查看RH变量的数据值：\n&quot;</span>,dataset.variables[<span class="string">&#x27;RH&#x27;</span>][:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;查看PRE变量的数据值：\n&quot;</span>,dataset.variables[<span class="string">&#x27;PRE&#x27;</span>][:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">dataset.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-数据解析-netCDF4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pipreqs查询并安装项目所依赖的所有包</title>
      <link href="/post/f993221f.html"/>
      <url>/post/f993221f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>如果需要进行代码的移植，肯定少不了在另一台pc或者服务器上进行环境的搭建，那么首先是要知道在已有的工程的代码中用到了哪些包，此时，如果是用人工去一个一个的代码文件中去查看调用了哪些包，这个工作甚是繁琐。</p><p>平时所用的IDE是PyCharm，在里面找了一找，似乎也没有相关的功能（？）。但是，之后又发现了pipreqs这个包，可以比较完美地解决这个问题。</p><h2 id="pipreqs的安装与查询"><a href="#pipreqs的安装与查询" class="headerlink" title="pipreqs的安装与查询"></a>pipreqs的安装与查询</h2><p>在官方的第三方库的仓库pypi中有其相关的详细介绍：pipreqs · pypi</p><p>下面简单介绍一下pipreqs的安装与查询依赖包的方法。</p><p>首先是安装，方法和其它python 的包的安装方式相同，可以使用pip install或者pip3 install等方法安装，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure><p>安装完成之后，在控制台&#x2F;终端中cd进项目的根目录，如对于如下一个工程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">其项目根目录为: D:\codes\slider_operation</span><br><span class="line">则进入该目录：D:\codes\slider_operation</span><br></pre></td></tr></table></figure><p>然后，运行该指令(当然，首先要确保可以运行python指令，否则可以手动激活python环境，这里就不赘述了）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure><p>之后等待程序运行完成即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wanghan@ubuntu:~/Documents$ pipreqs ./</span><br><span class="line">INFO: Successfully saved requirements file in ./requirements.txt</span><br></pre></td></tr></table></figure><p>可以从图中看到，已经成功运行完成了。</p><p>之后，我们可以在工程的根目录中看到有这样一个.txt文件：requirements.txt</p><p>打开之后，便可以看到项目所依赖的环境啦，不光有包的名称，同时每个包的版本也都可以看到。</p><h2 id="安装所需的环境"><a href="#安装所需的环境" class="headerlink" title="安装所需的环境"></a>安装所需的环境</h2><p>看到上面requirements.txt的文件名和内容，可以看到，对于pip install -r的所需的文件格式是完全符合的，因此，我们可以将这个文件放在需要安装工程所需环境的机器上，然后在放置的路径下运行如下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>即可一次将所需的包全部以指定的版本进行安装了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ftplib模块</title>
      <link href="/post/1de28dd1.html"/>
      <url>/post/1de28dd1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="Python中默认安装的ftplib模块定义了FTP类-可用来实现简单的ftp客户端，用于上传或下载文件"><a href="#Python中默认安装的ftplib模块定义了FTP类-可用来实现简单的ftp客户端，用于上传或下载文件" class="headerlink" title="Python中默认安装的ftplib模块定义了FTP类,可用来实现简单的ftp客户端，用于上传或下载文件"></a>Python中默认安装的ftplib模块定义了FTP类,可用来实现简单的ftp客户端，用于上传或下载文件</h2><ul><li><p><font colo='black' size=5>FTP有两种传输模式：</font><font size=4 color='red'>ASCII传输模式和BINARY传输模式。</font></p><ul><li><font size=4 color='blue'>ASCII传输模式：</font><br><br>  该方式可以根据服务器系统对文件进行自动调整，将原始文件的回车换行转换为系统对应的回车字符，比如Unix下是\n,Windows下是\r\n，Mac下是\r。CGI脚本和普通HTML文件（或其他文本文件）用ASCII模式上传，而其他的一些文件则使用二进制传输模式。</li><li><font size=4 color='blue'>BINARY传输模式：</font><br><br>  在二进制传输中，保存文件的位序，以便原始和拷贝的是逐位一一对应的。即使目的地机器上包含位序列的文件是没意义的。例如，macintosh以二进制方式传送可执行文件到Windows系统，在对方系统上，此文件不能执行。如果你在ASCII方式下传输二进制文件，即使不需要也仍会转译。这会使传输稍微变慢 ，也会损坏数据，使文件变得不能用。（在大多数计算机上，ASCII方式一般假设每一字符的第一有效位无意义，因为ASCII字符组合不使用它。如果你传输二进制文件，所有的位都是重要的。）如果你知道这两台机器具有相同的系统，则二进制方式对文本文件和数据文件都是有效的。</li><li>&#x3D;&#x3D;列举&#x3D;&#x3D;：<ul><li>ASCII传输模式：用HTML和文本编写的文件必须用ASCII模式上传</li><li>二进制传输模式：BINARY模式用来传送可执行文件，压缩文件，和图片文件</li></ul></li></ul></li></ul><p><a href="https://blog.csdn.net/cl965081198/article/details/82803333?utm_medium=distribute.pc_relevant_download.none-task-blog-2~default~BlogCommendFromBaidu~default-1.test_version_3&depth_1-utm_source=distribute.pc_relevant_download.none-task-blog-2~default~BlogCommendFromBaidu~default-1.test_version_">FTP传输模式应用</a></p><h2 id="1-ftp登陆连接"><a href="#1-ftp登陆连接" class="headerlink" title="1.ftp登陆连接"></a>1.ftp登陆连接</h2><h4 id="先设置FTP连接的参数"><a href="#先设置FTP连接的参数" class="headerlink" title="先设置FTP连接的参数"></a>先设置FTP连接的参数</h4><h4 id="文件服务器参数"><a href="#文件服务器参数" class="headerlink" title="文件服务器参数"></a>文件服务器参数</h4><p>ftp_param &#x3D; {<br>‘host’: ‘10.12.8.22’,</p><p>‘port’: 2121,</p><p>‘user’: ‘user’,</p><p>‘pwd’: ‘uesr1234’,</p><p>‘points_dir’: ‘comm&#x2F;cust_point&#x2F;‘,</p><p>‘xsl’: ‘xsl&#x2F;dps’</p><p>}</p><h2 id="登录连接"><a href="#登录连接" class="headerlink" title="登录连接"></a>登录连接</h2><h4 id="引入FTP模块"><a href="#引入FTP模块" class="headerlink" title="引入FTP模块"></a>引入FTP模块</h4><p>from ftplib import FTP</p><p>import logging.config</p><p>logger &#x3D; logging.getLogger(<strong>name</strong>)</p><h4 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h4><p>ftp&#x3D;FTP()</p><h4 id="连接的ftp-sever和端口"><a href="#连接的ftp-sever和端口" class="headerlink" title="连接的ftp sever和端口"></a>连接的ftp sever和端口</h4><p>ftp.connect(ftp_param[‘host’], ftp_param[‘port’])</p><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>ftp.login(ftp_param[‘user’], ftp_param[‘pwd’])</p><h4 id="打印欢迎信息"><a href="#打印欢迎信息" class="headerlink" title="打印欢迎信息"></a>打印欢迎信息</h4><p>logger.debug(ftp.getwelcome())</p><h4 id="进入远程目录"><a href="#进入远程目录" class="headerlink" title="进入远程目录"></a>进入远程目录</h4><p>ftp.cwd(ftp_param[‘xsl’])</p><h4 id="需要下载的文件"><a href="#需要下载的文件" class="headerlink" title="需要下载的文件"></a>需要下载的文件</h4><p>filename&#x3D;”xsl.txt”</p><h4 id="以写的模式在本地打开文件"><a href="#以写的模式在本地打开文件" class="headerlink" title="以写的模式在本地打开文件"></a>以写的模式在本地打开文件</h4><p>file_handle&#x3D;open(filename,”wb”).write</p><h4 id="接收服务器上文件并写入本地文件"><a href="#接收服务器上文件并写入本地文件" class="headerlink" title="接收服务器上文件并写入本地文件"></a>接收服务器上文件并写入本地文件</h4><p>ftp.retrbinaly(“RETR xsl.txt”,file_handle,bufsize)</p><h4 id="退出ftp"><a href="#退出ftp" class="headerlink" title="退出ftp"></a>退出ftp</h4><p>ftp.quit()</p><h2 id="2-FTP相关命令操作"><a href="#2-FTP相关命令操作" class="headerlink" title="2.FTP相关命令操作"></a>2.FTP相关命令操作</h2><h4 id="设置FTP当前操作的路径"><a href="#设置FTP当前操作的路径" class="headerlink" title="设置FTP当前操作的路径"></a>设置FTP当前操作的路径</h4><p>ftp.cwd(pathname)</p><h4 id="显示目录下所有目录信息"><a href="#显示目录下所有目录信息" class="headerlink" title="显示目录下所有目录信息"></a>显示目录下所有目录信息</h4><p>ftp.dir()</p><h4 id="获取目录下的文件"><a href="#获取目录下的文件" class="headerlink" title="获取目录下的文件"></a>获取目录下的文件</h4><p>ftp.nlst()</p><h4 id="新建远程目录"><a href="#新建远程目录" class="headerlink" title="新建远程目录"></a>新建远程目录</h4><p>ftp.mkd(pathname)</p><h4 id="返回当前所在位置"><a href="#返回当前所在位置" class="headerlink" title="返回当前所在位置"></a>返回当前所在位置</h4><p>ftp.pwd()</p><h4 id="删除远程目录"><a href="#删除远程目录" class="headerlink" title="删除远程目录"></a>删除远程目录</h4><p>ftp.rmd(dirname)</p><h4 id="删除远程文件"><a href="#删除远程文件" class="headerlink" title="删除远程文件"></a>删除远程文件</h4><p>ftp.delete(filename)</p><h4 id="将fromname修改名称为toname"><a href="#将fromname修改名称为toname" class="headerlink" title="将fromname修改名称为toname"></a>将fromname修改名称为toname</h4><p>ftp.rename(fromname, toname)</p><h4 id="上传目标文件"><a href="#上传目标文件" class="headerlink" title="上传目标文件"></a>上传目标文件</h4><p>ftp.storbinary(“STOR filename.txt”,file_handel,bufsize)</p><h4 id="下载FTP文件"><a href="#下载FTP文件" class="headerlink" title="下载FTP文件"></a>下载FTP文件</h4><p>ftp.retrbinary(“RETR filename.txt”,file_handel,bufsize)</p><h4 id="设置缓存大小"><a href="#设置缓存大小" class="headerlink" title="设置缓存大小"></a>设置缓存大小</h4><p>bufsize &#x3D; 1024</p><h4 id="打开调试级别2，显示详细信息"><a href="#打开调试级别2，显示详细信息" class="headerlink" title="打开调试级别2，显示详细信息"></a>打开调试级别2，显示详细信息</h4><p>ftp.set_debuglevel(2)</p><h4 id="关闭调试模式"><a href="#关闭调试模式" class="headerlink" title="关闭调试模式"></a>关闭调试模式</h4><p>ftp.set_debuglevel(0)</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>FTP.quit()：发送QUIT命令给服务器并关闭掉连接。这是一个比较“缓和”的关闭连接方式，但是如果服务器对QUIT命令返回错误时，会抛出异常。</p><p>FTP.close()：单方面的关闭掉连接，不应该用在已经关闭的连接之后，例如不应用在FTP.quit()之后。</p><h2 id="3-例子"><a href="#3-例子" class="headerlink" title="3.例子"></a>3.例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ftpconnect</span>(<span class="params">host, username, password</span>)</span><br><span class="line">ftp = FTP()</span><br><span class="line">ftp.connect(host, <span class="number">21</span>)</span><br><span class="line">ftp.login(username, password)</span><br><span class="line"><span class="keyword">return</span> ftp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downloadfile</span>(<span class="params">ftp, remotepath, localpath</span>):</span><br><span class="line">bufsize = <span class="number">1024</span></span><br><span class="line">fp = <span class="built_in">open</span>(localpath, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">ftp.retrbinary(<span class="string">&#x27;RETR&#x27;</span>+remotepath, fp.write, bufsize)</span><br><span class="line"></span><br><span class="line">ftp.set_debuglevel(<span class="number">0</span>)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uploadfile</span>(<span class="params">ftp, remotepath, localpath</span>):</span><br><span class="line">bufsize = <span class="number">1024</span></span><br><span class="line">fp = <span class="built_in">open</span>(localpath, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">ftp.storbinary(<span class="string">&#x27;STOR&#x27;</span>+remotepath, fp, bufsize)</span><br><span class="line">ftp.set_debuglevel(<span class="number">0</span>)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">ftp = ftpconnect(<span class="string">&quot;******&quot;</span>, <span class="string">&quot;***&quot;</span>, <span class="string">&quot;***&quot;</span>)</span><br><span class="line">    downloadfile(ftp, <span class="string">&quot;***&quot;</span>, <span class="string">&quot;***&quot;</span>)</span><br><span class="line">    uploadfile(ftp, <span class="string">&quot;***&quot;</span>, <span class="string">&quot;***&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    ftp.quit()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu挂载共享文件</title>
      <link href="/post/977258ab.html"/>
      <url>/post/977258ab.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="一、Ubuntu-vmware共享文件夹挂载hgfs-root用户下"><a href="#一、Ubuntu-vmware共享文件夹挂载hgfs-root用户下" class="headerlink" title="一、Ubuntu vmware共享文件夹挂载hgfs(root用户下)"></a>一、Ubuntu vmware共享文件夹挂载hgfs(root用户下)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmhgfs-fuse .host:/ /mnt/hgfs</span><br></pre></td></tr></table></figure><h4 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h4><p>修改&#x2F;etc&#x2F;fstab，加入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.host:/ /mnt/hgfs fuse.vmhgfs-fuse allow_other,defaults 0 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python定时下载FTP指定文件</title>
      <link href="/post/41c6d2bc.html"/>
      <url>/post/41c6d2bc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h4 id="一、定期从远端ftp下载指定昨天的数据，写了2个函数一个是连接远端ftp，另一个是定期下载远端数据，用到了ftplib、datetime和正则re三个模块"><a href="#一、定期从远端ftp下载指定昨天的数据，写了2个函数一个是连接远端ftp，另一个是定期下载远端数据，用到了ftplib、datetime和正则re三个模块" class="headerlink" title="一、定期从远端ftp下载指定昨天的数据，写了2个函数一个是连接远端ftp，另一个是定期下载远端数据，用到了ftplib、datetime和正则re三个模块"></a>一、定期从远端ftp下载指定昨天的数据，写了2个函数一个是连接远端ftp，另一个是定期下载远端数据，用到了ftplib、datetime和正则re三个模块</h4><blockquote><ol><li>ftplib:连接和下载ftp数据</li><li>datetime:指定下载日期–每天的前一天</li><li>re过滤掉其他日期的数据</li></ol></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">#!/usr/bin/env python</span><br><span class="line">from ftplib import FTP</span><br><span class="line">import datetime</span><br><span class="line">import re</span><br><span class="line">def ftpconnect():</span><br><span class="line">ftp_server = &#x27;IP&#x27;</span><br><span class="line">username = &#x27;账号&#x27;</span><br><span class="line">password = &#x27;密码&#x27;</span><br><span class="line">ftp = FTP()</span><br><span class="line">ftp.connect(ftp_server,21)</span><br><span class="line">ftp.login(username,password)</span><br><span class="line"> print ftp.getwelcome()</span><br><span class="line">return ftp</span><br><span class="line"></span><br><span class="line">def downloadfile():</span><br><span class="line">        #格式化取到昨天的日期</span><br><span class="line">d = (datetime.datetime.now() - datetime.timedelta(days=1)).strftime(&#x27;%Y%m%d&#x27;)</span><br><span class="line">remotepath = &#x27;/bssdata1/interface/yw_files/bak/&#x27;</span><br><span class="line">#调用ftp连接函数</span><br><span class="line">ftp = ftpconnect()</span><br><span class="line">bufsize = 1024</span><br><span class="line">ftp.cwd(remotepath)</span><br><span class="line">list = ftp.nlst()</span><br><span class="line">for name in list:</span><br><span class="line">        #正则过滤掉其他日期</span><br><span class="line">L = re.match(d,name)</span><br><span class="line">if L:</span><br><span class="line">path = &#x27;/data/download/&#x27; + name</span><br><span class="line">f = open(path,&#x27;wb&#x27;)</span><br><span class="line">filename = &#x27;RETR &#x27;+name</span><br><span class="line">ftp.retrbinary(filename,f.write,bufsize)</span><br><span class="line">f.close()</span><br><span class="line">ftp.quit()</span><br><span class="line">downloadfile()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现ftp文件定时自动下载</title>
      <link href="/post/ffc92977.html"/>
      <url>/post/ffc92977.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="一、需求："><a href="#一、需求：" class="headerlink" title="一、需求："></a>一、需求：</h1><p>　　每日15:00~17:00之间，在其FTP发布当日数据供下载，我方需及时下载当日数据至指定本地目录。</p><h1 id="二、分析："><a href="#二、分析：" class="headerlink" title="二、分析："></a>二、分析：</h1><h3 id="1、需实现FTP登陆、查询、下载功能；"><a href="#1、需实现FTP登陆、查询、下载功能；" class="headerlink" title="1、需实现FTP登陆、查询、下载功能；"></a>1、需实现FTP登陆、查询、下载功能；</h3><p>　　使用内置的ftplib模块中FTP类；</p><h3 id="2、需判断文件是否下载；"><a href="#2、需判断文件是否下载；" class="headerlink" title="2、需判断文件是否下载；"></a>2、需判断文件是否下载；</h3><p>　　使用os模块中path.exists方法；</p><h3 id="3、需判断在指定时间段内才执行下载任务；"><a href="#3、需判断在指定时间段内才执行下载任务；" class="headerlink" title="3、需判断在指定时间段内才执行下载任务；"></a>3、需判断在指定时间段内才执行下载任务；</h3><p>　　使用内置的time模块抓取当前时间，并与指定时间做比较；</p><h3 id="4、需考虑日期切换问题；"><a href="#4、需考虑日期切换问题；" class="headerlink" title="4、需考虑日期切换问题；"></a>4、需考虑日期切换问题；</h3><p>　　使用内置的time模块抓取当前日期，并与变量中的日期做比较。</p><h1 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@Time    : 2021-07-26 13:30</span></span><br><span class="line"><span class="string">@Author  : wanghan</span></span><br><span class="line"><span class="string">@FileName: 123.py</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remote_path = <span class="string">&quot;/xxx/yy/z/&quot;</span>  <span class="comment"># 远端目录</span></span><br><span class="line">begin_time = <span class="number">1500</span>  <span class="comment"># 任务开始时间</span></span><br><span class="line">end_time = <span class="number">1700</span>  <span class="comment"># 任务结束时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">today = time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)  <span class="comment"># 当天日期</span></span><br><span class="line">today_file = today + <span class="string">&#x27;test.txt&#x27;</span>  <span class="comment"># 得到当天日期的目标文件名</span></span><br><span class="line">remote_file = remote_path + today_file  <span class="comment"># 远端文件名</span></span><br><span class="line">local_file = <span class="string">&#x27;\\\\local\\&#x27;</span> + today + <span class="string">&#x27;\\&#x27;</span> + today_file  <span class="comment"># 本地文件名</span></span><br><span class="line">log_file = <span class="string">&#x27;C:\\\\log\\ftp_log.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ftp_connect</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用于FTP连接&quot;&quot;&quot;</span></span><br><span class="line">    ftp_server = <span class="string">&#x27;w.x.y.z&#x27;</span>  <span class="comment"># ftp站点对应的IP地址</span></span><br><span class="line">    username = <span class="string">&#x27;ftpuser&#x27;</span>  <span class="comment"># 用户名</span></span><br><span class="line">    password = <span class="string">&#x27;ftppass&#x27;</span>  <span class="comment"># 密码</span></span><br><span class="line">    ftp = FTP()</span><br><span class="line">    ftp.set_debuglevel(<span class="number">0</span>) <span class="comment"># 较高的级别方便排查问题</span></span><br><span class="line">    ftp.connect(ftp_server, <span class="number">21</span>)</span><br><span class="line">    ftp.login(username, password)</span><br><span class="line">    <span class="keyword">return</span> ftp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remote_file_exists</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用于FTP站点目标文件存在检测&quot;&quot;&quot;</span></span><br><span class="line">    ftp = ftp_connect()</span><br><span class="line">    ftp.cwd(remote_path) <span class="comment"># 进入目标目录</span></span><br><span class="line">    remote_file_names = ftp.nlst()  <span class="comment"># 获取文件列表</span></span><br><span class="line">    ftp.quit()</span><br><span class="line">    <span class="keyword">if</span> today_file <span class="keyword">in</span> remote_file_names:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用于目标文件下载&quot;&quot;&quot;</span></span><br><span class="line">    ftp = ftp_connect()</span><br><span class="line">    bufsize = <span class="number">1024</span></span><br><span class="line">    fp = <span class="built_in">open</span>(local_file, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    ftp.set_debuglevel(<span class="number">0</span>) <span class="comment"># 较高的级别方便排查问题</span></span><br><span class="line">    ftp.retrbinary(<span class="string">&#x27;RETR &#x27;</span> + remote_file, fp.write, bufsize)</span><br><span class="line">    fp.close()</span><br><span class="line">    ftp.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(time.strftime(<span class="string">&quot;%H%M&quot;</span>)) <span class="keyword">in</span> <span class="built_in">range</span>(begin_time, end_time):  <span class="comment"># 判断是否在执行时间范围</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)) - <span class="built_in">int</span>(today) == <span class="number">0</span>:  <span class="comment"># 判断是否跨日期</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> os.path.exists(local_file):  <span class="comment"># 判断本地是否已有文件</span></span><br><span class="line">                <span class="keyword">if</span> remote_file_exists():  <span class="comment"># 判断远端是否已有文件</span></span><br><span class="line">                    download_file()</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(<span class="string">&#x27;\n&#x27;</span> + time.strftime(<span class="string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>) + <span class="string">&quot; 今日文件已下载！&quot;</span>)</span><br><span class="line">                    time.sleep(<span class="number">60</span>)  <span class="comment"># 下载完毕静默1分钟</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    time.sleep(<span class="number">180</span>)</span><br><span class="line">                    <span class="keyword">break</span> <span class="comment"># 注意，此处跳出循环重新判断日期，避免周末或当天没文件时陷入内层循环</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">180</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="string">&quot;&quot;&quot;如果跨日期，则根据当前日期，更新各文件日期&quot;&quot;&quot;</span></span><br><span class="line">            today = time.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)  <span class="comment"># 当天日期</span></span><br><span class="line">            today_file = today + <span class="string">&#x27;test.txt&#x27;</span>  <span class="comment"># 得到当天日期的目标文件名</span></span><br><span class="line">            remote_file = remote_path + today_file  <span class="comment"># 远端文件名</span></span><br><span class="line">            local_file = <span class="string">&#x27;\\\\local\\&#x27;</span> + today + <span class="string">&#x27;\\&#x27;</span> + today_file  <span class="comment"># 本地文件名</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">&#x27;\n&#x27;</span> + time.strftime(<span class="string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>) + <span class="string">&quot; 任务启动, 文件日期已更新。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        time.sleep(<span class="number">1800</span>)</span><br></pre></td></tr></table></figure><p>.sleep(1800)</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-模块-FTP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
