<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python3+Django2集成PayPal(贝宝)跨境支付三方接口以及订单查询和退款业务</title>
      <link href="/2020/08/06/python/%E6%A1%86%E6%9E%B6/Django_vue/Python3-Django2%E9%9B%86%E6%88%90PayPal-%E8%B4%9D%E5%AE%9D-%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%9F%A5%E8%AF%A2%E5%92%8C%E9%80%80%E6%AC%BE%E4%B8%9A%E5%8A%A1/"/>
      <url>/2020/08/06/python/%E6%A1%86%E6%9E%B6/Django_vue/Python3-Django2%E9%9B%86%E6%88%90PayPal-%E8%B4%9D%E5%AE%9D-%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E8%AE%A2%E5%8D%95%E6%9F%A5%E8%AF%A2%E5%92%8C%E9%80%80%E6%AC%BE%E4%B8%9A%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>如果您所在的公司涉及外贸或者跨境支付业务，那一定听说过大名鼎鼎的PayPal，总的来说，PayPal在跨国贸易里的优势还是比较大的，作为一种外贸支付方式，目前在国际贸易支付服务中倍受亿万用户追捧，是全球商户和消费者最受欢迎的电子支付方式之一，在跨境交易中有着超过90%的卖家和超过85%的买家认可并正在使用PayPal电子支付业务。当然，PayPal国际业务体量如此惊人，肯定不是毫无原因的。</p><p>PayPal支付的优势就是其业务网络遍布全球。目前PayPal的庞大网络覆盖了全球200多个国家，可提供20多种语言服务，并接受100多种货币付款和56种货币提现。同时，还允许在账户中持有25种货币余额。换句话说，只要付款人拥有一个PayPal账户，他就拥有了在200多个国家进行电子支付购物，并在需要服务的时候享受到母语支持的各种便捷服务。</p><p>之前的几篇文章分别介绍了国内的支付宝支付：Python3.7.2+Django2.0.4 美多商城集成最新版支付宝支付接口(2019.04)和微信支付：mpvue1.0+python3.7+Django2.0.4实现微信小程序的支付功能</p><p>本次我们首次尝试用Django2来集成跨境三方支付接口PayPal</p><p>首先注册官网 <a href="https://www.paypal.com/">https://www.paypal.com</a>  以及开发者平台：<a href="https://developer.paypal.com/developer/accounts/">https://developer.paypal.com/developer/accounts/</a></p><p>注册成功后，在沙盒的账号控制页面：<a href="https://developer.paypal.com/developer/accounts/">https://developer.paypal.com/developer/accounts/</a></p><p>会默认创建两个账号，一个是商户的，另外一个是个人的</p><p><img src="https://s1.ax1x.com/2020/08/06/agBz9S.png" alt="默认账号"></p><p>我们演示的流程就是以个人账号登录三方网站对商户账号进行支付业务，当然了，如果你不想使用默认账号，也可以点击右边的Create account的蓝色按钮单独创建。</p><p>随后进入应用管理页面：<a href="https://developer.paypal.com/developer/applications/">https://developer.paypal.com/developer/applications/</a></p><p>这里已经默认创建好了一个支付应用，记录下它的client_id和client_secret，一会要用到</p><p><img src="https://s1.ax1x.com/2020/08/06/agruPf.png" alt="点击默认应用"></p><p><img src="https://s1.ax1x.com/2020/08/06/agrHot.png" alt="Client ID 和 Secret"></p><p>随后，我们可以回到账号管理页面修改一下个人账号的支付余额</p><p><img src="https://s1.ax1x.com/2020/08/06/agsgmj.png" alt="点击设置账户"></p><p>额度设置最高</p><p><img src="https://s1.ax1x.com/2020/08/06/agy0b9.png" alt="额度设置"></p><p>如果愿意，也可以修改一下登录密码，因为一会我们会用这个账号进行登录操作，注意这些登录和支付操作全都会在沙盒环境中完成，完全不会影响生产环境的使用</p><pre><code>ok,做完了这些，前置任务就搞定了，现在运行命令安装paypal在python端的sdk</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paypalrestsdk</span><br></pre></td></tr></table></figure><p>现在可以在django中新建一个支付视图views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paypalrestsdk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payment</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    paypalrestsdk.configure(&#123;</span><br><span class="line">  <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;sandbox&quot;</span>, <span class="comment"># sandbox代表沙盒</span></span><br><span class="line">  <span class="string">&quot;client_id&quot;</span>: <span class="string">&quot;你的client_id,</span></span><br><span class="line"><span class="string">  &quot;</span>client_secret<span class="string">&quot;: &quot;</span>你的client_secret<span class="string">&quot; &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    payment = paypalrestsdk.Payment(&#123;</span></span><br><span class="line"><span class="string">        &quot;</span>intent<span class="string">&quot;: &quot;</span>sale<span class="string">&quot;,</span></span><br><span class="line"><span class="string">        &quot;</span>paye<span class="string">r&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;</span>payment_method<span class="string">&quot;: &quot;</span>paypal<span class="string">&quot;&#125;,</span></span><br><span class="line"><span class="string">        &quot;</span>redirect_urls<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;</span>return_url<span class="string">&quot;: &quot;</span>http://localhost:<span class="number">8000</span>/palpay/pay/<span class="string">&quot;,#支付成功跳转页面</span></span><br><span class="line"><span class="string">            &quot;</span>cancel_url<span class="string">&quot;: &quot;</span>http://localhost:<span class="number">3000</span>/paypal/cancel/<span class="string">&quot;&#125;,#取消支付页面</span></span><br><span class="line"><span class="string">        &quot;</span>transactions<span class="string">&quot;: [&#123;</span></span><br><span class="line"><span class="string">            &quot;</span>amount<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">                &quot;</span>total<span class="string">&quot;: &quot;</span><span class="number">5.00</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">                &quot;</span>currency<span class="string">&quot;: &quot;</span>USD<span class="string">&quot;&#125;,</span></span><br><span class="line"><span class="string">            &quot;</span>description<span class="string">&quot;: &quot;</span>这是一个订单测试<span class="string">&quot;&#125;]&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if payment.create():</span></span><br><span class="line"><span class="string">        print(&quot;</span>Payment created successfully<span class="string">&quot;)</span></span><br><span class="line"><span class="string">        for link in payment.links:</span></span><br><span class="line"><span class="string">            if link.rel == &quot;</span>approval_url<span class="string">&quot;:</span></span><br><span class="line"><span class="string">                approval_url = str(link.href)</span></span><br><span class="line"><span class="string">                print(&quot;</span>Redirect <span class="keyword">for</span> approval: %s<span class="string">&quot; % (approval_url))</span></span><br><span class="line"><span class="string">                return redirect(approval_url)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        print(payment.error)</span></span><br><span class="line"><span class="string">        return HttpResponse(&quot;</span>支付失败<span class="string">&quot;)</span></span><br></pre></td></tr></table></figure><p>这里解释一下重点参数，return_url是支付成功后回调的页面，paypal会将一个支付者id回传，然后服务端需要验证支付才能真的完成支付，total是付款金额，精确到分，currency是币种，支持多钟类型的货币。</p><p>当Django的服务端创建好支付订单后，重定向到paypal的沙盒环境，这时候一定要使用沙盒的个人账号进行登录和支付。</p><p><img src="https://s1.ax1x.com/2020/08/06/agy2vD.png" alt="本人支付"></p><p>支付完成后，会跳回刚刚传过去的回调页面：<a href="http://localhost:8000/palpay/pay/?paymentId=PAYID-L3SYORA3C031930S1733650J&amp;token=EC-9TG269735K620131N&amp;PayerID=ETYYRCDN8C3XJ">http://localhost:8000/palpay/pay/?paymentId=PAYID-L3SYORA3C031930S1733650J&amp;token=EC-9TG269735K620131N&amp;PayerID=ETYYRCDN8C3XJ</a>    </p><p>这里paypal会传过来三个参数，支付id,token和支付者id</p><p>此时，在回调方法里，我们需要通过支付者id进行确认验证支付</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">payment_execute</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    paymentid = request.Get.get(<span class="string">&quot;paymentId&quot;</span>) <span class="comment">#订单id</span></span><br><span class="line">    payerid = request.Get.get(<span class="string">&quot;PayerID&quot;</span>)  <span class="comment">#支付者id</span></span><br><span class="line"></span><br><span class="line">    payment = paypalrestsdk.Payment.find(paymentid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payment.execute(&#123;<span class="string">&quot;payer_id&quot;</span>: payerid&#125;):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Payment execute successfully&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;支付成功&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(payment.error) <span class="comment"># Error Hash</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;支付失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后，回到管理页面，发现已经少了5美元，说明支付流程已经走完。</p><p><img src="https://s1.ax1x.com/2020/08/06/agyjbj.png" alt="扣款页面"></p><p>这次交易就愉快的结束了，当然了，某些时候我们需要对交易流水进行一些核对，也可以通过接口查看交易明细</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#明细</span></span><br><span class="line"></span><br><span class="line">payment = paypalrestsdk.Payment.find(<span class="string">&quot;订单号&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(payment)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/06/ag63se.png" alt="打印详情"></p><p>可以看到，通过传入订单id,我们该笔交易的状态，流水id，以及创建日期。</p><p>如果用户想要退款的话，可以利用交易明细中的流水号进行退款业务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#退款</span></span><br><span class="line"><span class="keyword">from</span> paypalrestsdk <span class="keyword">import</span> Sale</span><br><span class="line"></span><br><span class="line">sale = Sale.find(<span class="string">&quot;流水号&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make Refund API call</span></span><br><span class="line"><span class="comment"># Set amount only if the refund is partial</span></span><br><span class="line">refund = sale.refund(&#123;</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span>: <span class="string">&quot;5.00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;currency&quot;</span>: <span class="string">&quot;USD&quot;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check refund status</span></span><br><span class="line"><span class="keyword">if</span> refund.success():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Refund[%s] Success&quot;</span> % (refund.<span class="built_in">id</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unable to Refund&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(refund.error)</span><br></pre></td></tr></table></figure><p>结语：</p><p>总体而言，没有什么特别的难度，整个支付流程相对支付宝来说，更加的紧凑，但是做支付安全是第一要务，就个人体验（仅是个人体验）层面来说，支付宝在安全方面做的还是要比Paypal略强一些，起码在信用卡欺诈和盗刷方面风控做的更好，在风险保障和赔付方面都有提供保险，当然由于金融环境的差异较大，并不是说Paypal的风控做的不好，只是机制不同，在国外，如果持卡人的信用卡被盗刷，一般发卡组织会让商家去承担责任，而国内只能在交易环节设置更多的验证，本质上说是要持卡人承担责任。这也是为什么支付宝的风控看起来更好的原因。</p><p>最后就是关于费率问题，Paypal官方给出的费率是每笔交易收取3.9%+$0.3（根据你的交易流水，比例可以优惠，具体下限看接入者的月营业额度），不过这可是美刀，不得不说这个费率是相当的高，但是国内做境外支付的电商，一般还是要接入Paypal作为支付方式。支付宝的费率基本上在1.2%左右，具体的费率也看交易流水，有实力的下限可以做到基本没有，单纯的看费率似乎支付宝更有优势，但是别忘记了，这样对比是不科学的，因为凡是接入Paypal的都是看中覆盖外币业务的地区，费率则是投资人该考虑的问题了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3.7.2+Django2.0.4 美多商城集成最新版支付宝支付接口(2019.04)</title>
      <link href="/2020/08/06/python/%E6%A1%86%E6%9E%B6/Django_vue/Python3-7-2-Django2-0-4-%E7%BE%8E%E5%A4%9A%E5%95%86%E5%9F%8E%E9%9B%86%E6%88%90%E6%9C%80%E6%96%B0%E7%89%88%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3-2019-04/"/>
      <url>/2020/08/06/python/%E6%A1%86%E6%9E%B6/Django_vue/Python3-7-2-Django2-0-4-%E7%BE%8E%E5%A4%9A%E5%95%86%E5%9F%8E%E9%9B%86%E6%88%90%E6%9C%80%E6%96%B0%E7%89%88%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3-2019-04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>  最新版支付宝算法的改变就是RSA升级了RSA2,长度推荐2048,其他的逻辑变化不大，关于秘钥的生成在之前的一篇文章已经有所介绍</p><p>  在Mac系统下生成新版支付宝（2019年4月）支付接口私钥和公钥</p><p>  在Django中集成支付接口的前置操作就是需要安装pycryptodome</p><p>  pip3 install -i <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a> pycryptodome</p><p>  然后将之前生成好的私钥和公钥（注意这里的公钥是指支付宝公钥），放入到项目目录中去</p><p><img src="https://s1.ax1x.com/2020/08/06/agwi0x.png" alt="展示"></p><p>  文档地址：<a href="https://docs.open.alipay.com/api">https://docs.open.alipay.com/api</a></p><p>  然后根据支付宝官网文档写一个支付基类 pay.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, parse_qs</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> decodebytes, encodebytes</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliPay</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    支付宝支付接口(PC端支付接口)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, appid, app_notify_url, app_private_key_path,</span></span><br><span class="line"><span class="params">                 alipay_public_key_path, return_url, debug=<span class="literal">False</span></span>):</span><br><span class="line">        self.appid = appid</span><br><span class="line">        self.app_notify_url = app_notify_url</span><br><span class="line">        self.app_private_key_path = app_private_key_path</span><br><span class="line">        self.app_private_key = <span class="literal">None</span></span><br><span class="line">        self.return_url = return_url</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.app_private_key_path) <span class="keyword">as</span> fp:</span><br><span class="line">            self.app_private_key = RSA.importKey(fp.read())</span><br><span class="line">        self.alipay_public_key_path = alipay_public_key_path</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.alipay_public_key_path) <span class="keyword">as</span> fp:</span><br><span class="line">            self.alipay_public_key = RSA.importKey(fp.read())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> debug <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            self.__gateway = <span class="string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__gateway = <span class="string">&quot;https://openapi.alipay.com/gateway.do&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">direct_pay</span>(<span class="params">self, subject, out_trade_no, total_amount, return_url=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        biz_content = &#123;</span><br><span class="line">            <span class="string">&quot;subject&quot;</span>: subject,</span><br><span class="line">            <span class="string">&quot;out_trade_no&quot;</span>: out_trade_no,</span><br><span class="line">            <span class="string">&quot;total_amount&quot;</span>: total_amount,</span><br><span class="line">            <span class="string">&quot;product_code&quot;</span>: <span class="string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>,</span><br><span class="line">            <span class="comment"># &quot;qr_pay_mode&quot;:4</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        biz_content.update(kwargs)</span><br><span class="line">        data = self.build_body(<span class="string">&quot;alipay.trade.page.pay&quot;</span>, biz_content, self.return_url)</span><br><span class="line">        <span class="keyword">return</span> self.sign_data(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_body</span>(<span class="params">self, method, biz_content, return_url=<span class="literal">None</span></span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;app_id&quot;</span>: self.appid,</span><br><span class="line">            <span class="string">&quot;method&quot;</span>: method,</span><br><span class="line">            <span class="string">&quot;charset&quot;</span>: <span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sign_type&quot;</span>: <span class="string">&quot;RSA2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;timestamp&quot;</span>: datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>),</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;biz_content&quot;</span>: biz_content</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> return_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            data[<span class="string">&quot;notify_url&quot;</span>] = self.app_notify_url</span><br><span class="line">            data[<span class="string">&quot;return_url&quot;</span>] = self.return_url</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign_data</span>(<span class="params">self, data</span>):</span><br><span class="line">        data.pop(<span class="string">&quot;sign&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 排序后的字符串</span></span><br><span class="line">        unsigned_items = self.ordered_data(data)</span><br><span class="line">        unsigned_string = <span class="string">&quot;&amp;&quot;</span>.join(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line">        sign = self.sign(unsigned_string.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="comment"># ordered_items = self.ordered_data(data)</span></span><br><span class="line">        quoted_string = <span class="string">&quot;&amp;&quot;</span>.join(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(k, quote_plus(v)) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获得最终的订单信息字符串</span></span><br><span class="line">        signed_string = quoted_string + <span class="string">&quot;&amp;sign=&quot;</span> + quote_plus(sign)</span><br><span class="line">        <span class="keyword">return</span> signed_string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ordered_data</span>(<span class="params">self, data</span>):</span><br><span class="line">        complex_keys = []</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">dict</span>):</span><br><span class="line">                complex_keys.append(key)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字典类型的数据dump出来</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> complex_keys:</span><br><span class="line">            data[key] = json.dumps(data[key], separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>([(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> data.items()])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, unsigned_string</span>):</span><br><span class="line">        <span class="comment"># 开始计算签名</span></span><br><span class="line">        key = self.app_private_key</span><br><span class="line">        signer = PKCS1_v1_5.new(key)</span><br><span class="line">        signature = signer.sign(SHA256.new(unsigned_string))</span><br><span class="line">        <span class="comment"># base64 编码，转换为unicode表示并移除回车</span></span><br><span class="line">        sign = encodebytes(signature).decode(<span class="string">&quot;utf8&quot;</span>).replace(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify</span>(<span class="params">self, raw_content, signature</span>):</span><br><span class="line">        <span class="comment"># 开始计算签名</span></span><br><span class="line">        key = self.alipay_public_key</span><br><span class="line">        signer = PKCS1_v1_5.new(key)</span><br><span class="line">        digest = SHA256.new()</span><br><span class="line">        digest.update(raw_content.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> signer.verify(digest, decodebytes(signature.encode(<span class="string">&quot;utf8&quot;</span>))):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, data, signature</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;sign_type&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">            sign_type = data.pop(<span class="string">&quot;sign_type&quot;</span>)</span><br><span class="line">        <span class="comment"># 排序后的字符串</span></span><br><span class="line">        unsigned_items = self.ordered_data(data)</span><br><span class="line">        message = <span class="string">&quot;&amp;&quot;</span>.join(<span class="string">u&quot;&#123;&#125;=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line">        <span class="keyword">return</span> self._verify(message, signature)</span><br></pre></td></tr></table></figure><p>最后在视图文件中定义方法就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入支付基类</span></span><br><span class="line"><span class="keyword">from</span> .pay <span class="keyword">import</span> Alipay</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化阿里支付对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ali_object</span>():</span><br><span class="line">    <span class="comment"># 沙箱环境地址：https://openhome.alipay.com/platform/appDaily.htm?tab=info</span></span><br><span class="line">    app_id = <span class="string">&quot;2016102900775315&quot;</span>  <span class="comment">#  APPID （沙箱应用）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 支付完成后，支付偷偷向这里地址发送一个post请求，识别公网IP,如果是 192.168.20.13局域网IP ,支付宝找不到，def page2() 接收不到这个请求</span></span><br><span class="line">    notify_url = <span class="string">&quot;http://localhost:8080/&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 支付完成后，跳转的地址。</span></span><br><span class="line">    return_url = <span class="string">&quot;http://localhost:8000/zfb_pay/&quot;</span></span><br><span class="line"></span><br><span class="line">    merchant_private_key_path = <span class="string">&#x27;C:/Users/wanghan/Desktop/shixun_2/D_1908_training/django_test/mydjango/keys/app_private_2048.pem&#x27;</span>  <span class="comment"># 应用私钥</span></span><br><span class="line">    alipay_public_key_path = <span class="string">&#x27;C:/Users/wanghan/Desktop/shixun_2/D_1908_training/django_test/mydjango/keys/alipay_public_2048.pem&#x27;</span> <span class="comment"># 支付宝公钥</span></span><br><span class="line"></span><br><span class="line">    alipay = AliPay(</span><br><span class="line">        appid=app_id,</span><br><span class="line">        app_notify_url=notify_url,</span><br><span class="line">        return_url=return_url,</span><br><span class="line">        app_private_key_path=merchant_private_key_path,</span><br><span class="line">        alipay_public_key_path=alipay_public_key_path,  <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥</span></span><br><span class="line">        debug=<span class="literal">True</span>,  <span class="comment"># 默认False,</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> alipay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page1</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据当前用户的配置，生成URL，并跳转。</span></span><br><span class="line">        money = <span class="built_in">float</span>(request.POST.get(<span class="string">&#x27;money&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        alipay = get_ali_object()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成支付的url</span></span><br><span class="line">        query_params = alipay.direct_pay(</span><br><span class="line">            subject=<span class="string">&quot;购买课程&quot;</span>,  <span class="comment"># 商品简单描述</span></span><br><span class="line">            out_trade_no=snow_id,  <span class="comment"># 用户购买的商品订单号（每次不一样）</span></span><br><span class="line">            total_amount=zongjia,  <span class="comment"># 交易金额(单位: 元 保留俩位小数)</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pay_url = <span class="string">&quot;https://openapi.alipaydev.com/gateway.do?&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(query_params)  <span class="comment"># 支付宝网关地址（沙箱应用）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">200</span>, <span class="string">&#x27;pay_url&#x27;</span>: pay_url&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alipay_return</span>(<span class="params">request</span>):</span><br><span class="line">    alipay = get_ali_object()</span><br><span class="line">    params = request.GET.<span class="built_in">dict</span>()</span><br><span class="line">    sign = params.pop(<span class="string">&#x27;sign&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    status = alipay.verify(params, sign)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;==================开始==================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GET验证&#x27;</span>, status)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;==================结束==================&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;支付成功&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP和UDP的区别以及应用场景</title>
      <link href="/2020/07/30/%E9%9D%A2%E8%AF%95%E9%A2%98/TCP-IP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2020/07/30/%E9%9D%A2%E8%AF%95%E9%A2%98/TCP-IP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="TCP-x2F-IP-中有两个具有代表性的传输层协议，分别是-TCP-和-UDP。"><a href="#TCP-x2F-IP-中有两个具有代表性的传输层协议，分别是-TCP-和-UDP。" class="headerlink" title="TCP&#x2F;IP 中有两个具有代表性的传输层协议，分别是 TCP 和 UDP。"></a>TCP&#x2F;IP 中有两个具有代表性的传输层协议，分别是 TCP 和 UDP。</h1><p>来看看传输层位于OSI七层协议和TCP&#x2F;IP四层协议的位置：<br><img src="https://s1.ax1x.com/2020/08/06/agNYOP.png" alt="四层协议"><br>那么TCP和UDP的区别和使用场景分别是怎样的？</p><p>我们用一个图来对比一下UDP和TCP：<br><img src="https://s1.ax1x.com/2020/08/06/agNNef.png" alt="UDP和TCP"></p><h1 id="一、TCP-UDP"><a href="#一、TCP-UDP" class="headerlink" title="一、TCP UDP"></a>一、TCP UDP</h1><p>TCP与UDP基本区别<br>  1.基于连接与无连接<br>  2.TCP要求系统资源较多，UDP较少；<br>  3.UDP程序结构较简单<br>  4.流模式（TCP）与数据报模式(UDP);<br>  5.TCP保证数据正确性，UDP可能丢包<br>  6.TCP保证数据顺序，UDP不保证 　　</p><h1 id="二、UDP应用场景："><a href="#二、UDP应用场景：" class="headerlink" title="二、UDP应用场景："></a>二、UDP应用场景：</h1><p>  1.面向数据报方式<br>  2.网络数据大多为短消息<br>  3.拥有大量Client<br>  4.对数据安全性无特殊要求<br>  5.网络负担非常重，但对响应速度要求高</p><h1 id="三、具体编程时的区别"><a href="#三、具体编程时的区别" class="headerlink" title="三、具体编程时的区别"></a>三、具体编程时的区别</h1><p>   1.socket()的参数不同<br>　　 2.UDP Server不需要调用listen和accept<br>　　 3.UDP收发数据用sendto&#x2F;recvfrom函数<br>　　 4.TCP：地址信息在connect&#x2F;accept时确定<br>　　 5.UDP：在sendto&#x2F;recvfrom函数中每次均 需指定地址信息<br>　　 6.UDP：shutdown函数无效</p><h1 id="四、编程区别"><a href="#四、编程区别" class="headerlink" title="四、编程区别"></a>四、编程区别</h1><p>   通常我们在说到网络编程时默认是指TCP编程，即用前面提到的socket函数创建一个socket用于TCP通讯，函数参数我们通常填为SOCK_STREAM。即socket(PF_INET, SOCK_STREAM, 0)，这表示建立一个socket用于流式网络通讯。<br>　  SOCK_STREAM这种的特点是面向连接的，即每次收发数据之前必须通过connect建立连接，也是双向的，即任何一方都可以收发数据，协议本身提供了一些保障机制保证它是可靠的、有序的，即每个包按照发送的顺序到达接收方。 </p><p>　　而SOCK_DGRAM这种是User Datagram Protocol协议的网络通讯，它是无连接的，不可靠的，因为通讯双方发送数据后不知道对方是否已经收到数据，是否正常收到数据。任何一方建立一个socket以后就可以用sendto发送数据，也可以用recvfrom接收数据。根本不关心对方是否存在，是否发送了数据。它的特点是通讯速度比较快。大家都知道TCP是要经过三次握手的，而UDP没有。 </p><p>基于上述不同，UDP和TCP编程步骤也有些不同，如下：</p><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP:"></a>TCP:</h1><p>TCP编程的服务器端一般步骤是：<br>　　1、创建一个socket，用函数socket()；<br>　　2、设置socket属性，用函数setsockopt(); * 可选<br>　　3、绑定IP地址、端口等信息到socket上，用函数bind();<br>　　4、开启监听，用函数listen()；<br>　　5、接收客户端上来的连接，用函数accept()；<br>　　6、收发数据，用函数send()和recv()，或者read()和write();<br>　　7、关闭网络连接；<br>　　8、关闭监听； </p><h2 id="TCP编程的客户端一般步骤是："><a href="#TCP编程的客户端一般步骤是：" class="headerlink" title="TCP编程的客户端一般步骤是："></a>TCP编程的客户端一般步骤是：</h2><p>　　1、创建一个socket，用函数socket()；<br>　　2、设置socket属性，用函数setsockopt();* 可选<br>　　3、绑定IP地址、端口等信息到socket上，用函数bind();* 可选<br>　　4、设置要连接的对方的IP地址和端口等属性；<br>　　5、连接服务器，用函数connect()；<br>　　6、收发数据，用函数send()和recv()，或者read()和write();<br>　　7、关闭网络连接；</p><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP:"></a>UDP:</h1><p>与之对应的UDP编程步骤要简单许多，分别如下：<br>　　UDP编程的服务器端一般步骤是：<br>　　1、创建一个socket，用函数socket()；<br>　　2、设置socket属性，用函数setsockopt();* 可选<br>　　3、绑定IP地址、端口等信息到socket上，用函数bind();<br>　　4、循环接收数据，用函数recvfrom();<br>　　5、关闭网络连接； </p><h2 id="UDP编程的客户端一般步骤是："><a href="#UDP编程的客户端一般步骤是：" class="headerlink" title="UDP编程的客户端一般步骤是："></a>UDP编程的客户端一般步骤是：</h2><p>　　1、创建一个socket，用函数socket()；<br>　　2、设置socket属性，用函数setsockopt();* 可选<br>　　3、绑定IP地址、端口等信息到socket上，用函数bind();* 可选<br>　　4、设置对方的IP地址和端口等属性;<br>　　5、发送数据，用函数sendto();<br>　　6、关闭网络连接；</p><p>TCP和UDP是OSI模型中的运输层中的协议。TCP提供可靠的通信传输，而UDP则常被用于让广播和细节控制交给应用的通信传输。</p><h2 id="UDP补充："><a href="#UDP补充：" class="headerlink" title="UDP补充："></a>UDP补充：</h2><p>   UDP不提供复杂的控制机制，利用IP提供面向无连接的通信服务。并且它是将应用程序发来的数据在收到的那一刻，立刻按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况下，UDP也无法进行流量控制等避免网络拥塞的行为。此外，传输途中如果出现了丢包，UDO也不负责重发。甚至当出现包的到达顺序乱掉时也没有纠正的功能。如果需要这些细节控制，那么不得不交给由采用UDO的应用程序去处理。换句话说，UDP将部分控制转移到应用程序去处理，自己却只提供作为传输层协议的最基本功能。UDP有点类似于用户说什么听什么的机制，但是需要用户充分考虑好上层协议类型并制作相应的应用程序。</p><h2 id="TCP补充："><a href="#TCP补充：" class="headerlink" title="TCP补充："></a>TCP补充：</h2><p>  TCP充分实现了数据传输时各种控制功能，可以进行丢包的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在UDP中都没有。此外，TCP作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。</p><h1 id="TCP与UDP区别总结："><a href="#TCP与UDP区别总结：" class="headerlink" title="TCP与UDP区别总结："></a>TCP与UDP区别总结：</h1><p>1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接<br>2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保   证可靠交付<br>3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的<br>  UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）<br>4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信<br>5、TCP首部开销20字节;UDP的首部开销小，只有8个字节<br>6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道</p><h1 id="TCP应用场景："><a href="#TCP应用场景：" class="headerlink" title="TCP应用场景："></a>TCP应用场景：</h1><p>效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。举几个例子：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。</p><h1 id="UDP应用场景："><a href="#UDP应用场景：" class="headerlink" title="UDP应用场景："></a>UDP应用场景：</h1><p>效率要求相对高，对准确性要求相对低的场景。举几个例子：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> TCP/UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP与HTTPS的区别</title>
      <link href="/2020/07/30/python/%E6%A1%86%E6%9E%B6/Django_vue/HTTP%E4%B8%8EHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/07/30/python/%E6%A1%86%E6%9E%B6/Django_vue/HTTP%E4%B8%8EHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="HTTP协议包含：通用头域、请求消息、响应消息和主体信息。"><a href="#HTTP协议包含：通用头域、请求消息、响应消息和主体信息。" class="headerlink" title="HTTP协议包含：通用头域、请求消息、响应消息和主体信息。"></a>HTTP协议包含：通用头域、请求消息、响应消息和主体信息。</h2><h2 id="http协议和http是协议的区别"><a href="#http协议和http是协议的区别" class="headerlink" title="http协议和http是协议的区别"></a>http协议和http是协议的区别</h2><pre><code>超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。　　为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全 套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</code></pre><h1 id="一、HTTP和HTTPS的基本概念"><a href="#一、HTTP和HTTPS的基本概念" class="headerlink" title="一、HTTP和HTTPS的基本概念"></a>一、HTTP和HTTPS的基本概念</h1><pre><code>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</code></pre><h1 id="二、HTTP与HTTPS有什么区别？"><a href="#二、HTTP与HTTPS有什么区别？" class="headerlink" title="二、HTTP与HTTPS有什么区别？"></a>二、HTTP与HTTPS有什么区别？</h1><pre><code>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</code></pre><p>　　HTTPS和HTTP的区别主要如下：</p><p>　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p><p>　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p><p>　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h1 id="三、HTTPS的工作原理"><a href="#三、HTTPS的工作原理" class="headerlink" title="三、HTTPS的工作原理"></a>三、HTTPS的工作原理</h1><p>　　我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p><p>HTTP与HTTPS的区别</p><p>　客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。</p><p>　　（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</p><p>　　（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p><p>　　（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</p><p>　　（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p><p>　　（5）Web服务器利用自己的私钥解密出会话密钥。</p><p>　　（6）Web服务器利用会话密钥加密与客户端之间的通信。</p><p><img src="https://i.loli.net/2020/07/30/BJq4Rg6wdVYt3AE.png" alt="工作原理"></p><h1 id="四、HTTPS的优点"><a href="#四、HTTPS的优点" class="headerlink" title="四、HTTPS的优点"></a>四、HTTPS的优点</h1><p>　　尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p><p>　　（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>　　（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p><p>　　（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p><p>　　（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p><h1 id="五、HTTPS的缺点"><a href="#五、HTTPS的缺点" class="headerlink" title="五、HTTPS的缺点"></a>五、HTTPS的缺点</h1><p>　　虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p><p>　　（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p><p>　　（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p><p>　　（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p><p>　   （4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p><p>　　（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p><h1 id="六、http切换到HTTPS"><a href="#六、http切换到HTTPS" class="headerlink" title="六、http切换到HTTPS"></a>六、http切换到HTTPS</h1><p>　　如果需要将网站从http切换到https到底该如何实现呢？</p><pre><code> 这里需要将页面中所有的链接，例如js，css，图片等等链接都由http改为https。例如：http://www.baidu.com改为https://www.baidu.com</code></pre><p>　　BTW，这里虽然将http切换为了https，还是建议保留http。所以我们在切换的时候可以做http和https的兼容，<br>    具体实现方式是，去掉页面链接中的http头部，这样可以自动匹配http头和https头。<br>    例如：将<a href="http://www.baidu.com改为//www.baidu.com%E3%80%82">http://www.baidu.com改为//www.baidu.com。</a><br>    然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即使https的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask配置MySQL数据库</title>
      <link href="/2020/07/29/python/%E6%A1%86%E6%9E%B6/Flask/flask%E9%85%8D%E7%BD%AEMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/07/29/python/%E6%A1%86%E6%9E%B6/Flask/flask%E9%85%8D%E7%BD%AEMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="一、打开MySQL服务"><a href="#一、打开MySQL服务" class="headerlink" title="一、打开MySQL服务"></a>一、打开MySQL服务</h1><p><img src="https://i.loli.net/2020/07/29/dQjbIkw6eDRNZtm.png" alt="打开MySQL服务"></p><h1 id="二、新建数据库"><a href="#二、新建数据库" class="headerlink" title="二、新建数据库"></a>二、新建数据库</h1><p><img src="https://i.loli.net/2020/07/29/aOTIJF9YSA2Qt47.png" alt="新建数据库"></p><h1 id="三、安装Flask-SQLAlchemy"><a href="#三、安装Flask-SQLAlchemy" class="headerlink" title="三、安装Flask-SQLAlchemy"></a>三、安装Flask-SQLAlchemy</h1><pre><code>pip install Flask-SQLALchemy</code></pre><h1 id="四、新建-py编写代码，配置mysql数据库"><a href="#四、新建-py编写代码，配置mysql数据库" class="headerlink" title="四、新建***.py编写代码，配置mysql数据库"></a>四、新建***.py编写代码，配置mysql数据库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入模块</span></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建flask对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql数据库文件存放地址(尾端的flask是你的数据库名)</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&quot;mysql://root:@127.0.0.1:3306/flask&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取SQLAlchemy实例对象，接下来就可以使用对象调用数据</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建模型对象(字段可以自行设计)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">80</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;User %r&gt;&#x27;</span> % self.username</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建表</span></span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/29/4N1XKBoMqI3pgcS.png" alt="mysql字段展示"></p>]]></content>
      
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沙箱支付存在钓鱼风险解决办法</title>
      <link href="/2020/07/20/python/%E5%BA%94%E7%94%A8/%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98%E5%AD%98%E5%9C%A8%E9%92%93%E9%B1%BC%E9%A3%8E%E9%99%A9%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/07/20/python/%E5%BA%94%E7%94%A8/%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98%E5%AD%98%E5%9C%A8%E9%92%93%E9%B1%BC%E9%A3%8E%E9%99%A9%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="沙箱支付存在钓鱼风险解决办法"><a href="#沙箱支付存在钓鱼风险解决办法" class="headerlink" title="沙箱支付存在钓鱼风险解决办法"></a>沙箱支付存在钓鱼风险解决办法</h1><p>支付宝开放平台开发 电脑网站支付，在沙箱环境中运行</p><p>提交支付请求后，却给我拦截了，跳到了，存在钓鱼风险提示页面</p><p><img src="https://s1.ax1x.com/2020/07/20/U46fjH.png" alt="钓鱼问题"></p><p>这个好尴尬，自己研究了一下午，在网络上查阅了有关资料，根本没有实质性解决这一方面的答案。</p><p>查阅了网上的一些资料，有人说回顾检查下流程，还有人说把浏览器关掉重新打开。我试了下都不行。</p><p>后来抱着试试的态度，把浏览器上打开的所有沙箱支付、支付宝官方等的页面全部关闭，然后Crtl+Shift+delete,清空浏览器缓存。再试一下果然就打开了。</p><p>莫名其妙的问题，记录一下。</p><p><img src="https://s1.ax1x.com/2020/07/21/U5Dk4S.png" alt="正常显示"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 支付宝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用场景</title>
      <link href="/2020/06/29/git/Git%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2020/06/29/git/Git%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="Git运用场景"><a href="#Git运用场景" class="headerlink" title="Git运用场景"></a>Git运用场景</h1><h4 id="场景一："><a href="#场景一：" class="headerlink" title="场景一："></a>场景一：</h4><p>​当你正在写代码的时候突然线上服务器出现了个bug，这时候你不得不赶快处理线上的bug。一般我们会将正在写的代码，git add, git commit 一下，再切换到bug分支解决bug。解决完成以后git commit bug分支的代码。在切换回来。除了这样的操作，我们还有一种可选方案：</p><p>　　1.正在写东西，突然有bug需要解决。</p><p>　　　　　　git stash　　　　#将当前的代码放在一个新的临时区&#x2F;暂存区。以免带入其他分支。</p><p>　　　　　　git checkout bug　　　　#切换到bug分支</p><p>　　　　　　vim views.py 　　　　 #修改代码，解决bug</p><p>　　　　　　git add views.py　　　　#添加修改内容到暂存区</p><p>　　　　　　git commit “change_bug”　　#提交代码到本地仓库</p><p>　　　　　　git checkout master　　　#切换都master分支</p><p>　　　　　　git merge bug　　　　　　#将bug分支的修改后的代码合并到master上</p><p>　　　　　　git push origin master　　#将本地master分支的代码推到远程</p><p>　　　　　　git checkout dev　　　　#切换到修改代码前的分支（原来的代码在dev分支上写的）</p><p>　　　　　　git status　　　　　　　　#查看dev分支的状态，发现原来对代码的修改没有了（写了半天，没有保存，心里很慌有没有啊。。。）</p><p>　　　　　　more readme　　　　　　　#查看更久远的操作，发现依然没有。（这是真的有点慌，甚至有点小绝望啊）　　　</p><p>　　　　　　git stash list　　　　　　　　#查看临时保存的文件列表（我擦，找到了，过山车般的体验）</p><p>　　　　　　git stash apply　　　　　　#恢复到上次保存的位置（终于找到你，还好我没放弃）</p><p>　　　　　　git status　　　　　　　　#查看状态，发现一切和好如初（这个世界完美了。可以继续愉快的写代码了）</p><p>　　　　git stash的一些其他操作：</p><p>　　　　　　git stash drop 　　　#删除最久的那个使用了git stash 保存的临时状态</p><p>　　　　　　git stash apply stash@{0}　　　　#恢复到指定的那个临时状态</p><p>　　　　　　git stash pop　　　　#恢复并删除上一个临时状态</p><p>　　　　　　（ps: 1.git stash apply 恢复后，stash内容并不会删除，需要使用git stash drop 来删除</p><p>　　　　　　　　 2.另一种方式是使用git stash pop, 删除的同时把stash的内容也删除了）</p><h4 id="场景二："><a href="#场景二：" class="headerlink" title="场景二："></a>场景二：</h4><p>　　多人合作开发，最后把所有人的代码合并到一起，然后测试并推到master中：</p><p>　　　　　　git add *  git commit “success”　　　　　　#将完成的代码添加到本地仓库，等待合并</p><p>　　　　　　checkout maste　　　　#切换到本地master分支</p><p>　　　　　　git pull 　　　　　　　#将远程master分支的代码下载到本地</p><p>　　　　　　git merge dev　　　　　#将本地dev中开发的代码合并到master中（这时候发现有冲突。自己的代码和master里最新的代码有不一致的地方，不要慌，我和别人同时修改了原文代码导致的这种问题。下面需要进行手动合并。）</p><p>　　　　　　git status　　　　　　  #查看文件状态，看都有哪些文件有冲突</p><p>　　　　　　git diff views.py　　　　#查看文件冲突的具体情况</p><p>　　　　　　vim views.py　　　　　　#手动修改文件</p><p>　　　　　　git add views.py　　git commit “change_merge”　　#添加到本地仓库</p><p>　　　　　　git push origin master　　　　#推送到远程master分支</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用基于Go Lang的Hugo配合nginx来打造属于自己的纯静态博客系统</title>
      <link href="/2020/06/29/Hugo/%E5%88%A9%E7%94%A8%E5%9F%BA%E4%BA%8EGo-Lang%E7%9A%84Hugo%E9%85%8D%E5%90%88nginx%E6%9D%A5%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BA%AF%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/06/29/Hugo/%E5%88%A9%E7%94%A8%E5%9F%BA%E4%BA%8EGo-Lang%E7%9A%84Hugo%E9%85%8D%E5%90%88nginx%E6%9D%A5%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BA%AF%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p> Go lang无疑是目前的当红炸子鸡，极大地提高了后端编程的效率，同时有着极高的性能。借助Go语言我们 可以用同步的方式写出高并发的服务端软件，同时，Go语言也是云原生第一语言，Docker，Kubernetes等等著名的项目都是使用Go语言实现的。</p><p> Hugo 是基于 Go 语言的静态网站生成器。</p><p> 什么是静态网站生成器？顾名思义，就是以最快的速度生成一个高可用的web页面，我们知道Django作为一款非常流行的框架被广泛应用，但是部署起来实在是太麻烦了，各种命令各种配置，动态页面必然要涉及数据库的配置和操作，另外只要涉及数据库操作，你就不得不考虑sql注入等一系列的安全因素。而纯静态页面则没有这个烦恼，如果我们只需要一个简单的站点，一些简单的功能和页面，比如博客，我们只想以极简的方式用markdown语法写下文字或者代码，让服务器访问纯静态页面，这就是静态网站生成器可以提供给我们的好处。</p><p> 为啥选择Hugo?</p><p> Hugo是一种go语言编写的静态网站生成器。适用于搭建个人blog、公司主页、help等网站，是一种小型的CMS系统。静态站点的好处就是快速、安全、易于部署，方便管理。</p><p> Hugo的优点包含但不限于：</p><p> 得益于Go的高性能，性能很快<br> 世界上最快的静态网站生成工具，5秒生成6000个页面<br> 文档为Markdown格式,语法超简单<br> Hugo 可以做静态文件生成工具，还是高性能web 服务；<br> 丰富的站点迁移工具，可以将wordpress，Ghost，Jekyll，DokuWiki，Blogger轻松迁移至 Hugo<br> 超详细的文档<br> 活跃的社区<br> 更加自由的内容组织方式<br> 丰富的主题模板，可以让你的网站更加炫目多彩<br> 多环境支持：macos ，linux，windows</p><p>首先，可以去go的官网网站下载安装包  <a href="https://golang.org/dl/">https://golang.org/dl/</a> 然后直接双击安装即可，<br>不需要配置环境变量，因为安装过程自动配置，安装完毕后，打开命令行，输入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> version</span><br></pre></td></tr></table></figure><p>显示主版本号即表示安装成功</p><p>然后，可以进行hugo的在线源码编译安装，打开命令行，输入下面的命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u -v github.com/spf13/hugo</span><br><span class="line"><span class="keyword">go</span> build -o hugo main.<span class="keyword">go</span></span><br><span class="line">mv hugo $GOPATH/bin</span><br></pre></td></tr></table></figure><p>如果你不想在线编译安装，也可以去hugo的官网<br><a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a> 下载稳定版的压缩包，<br>解压之后配置一下环境变量也可以</p><p>装完以后，在命令行内输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure><p>打印出版本号即表示hugo安装成功</p><p>在命令行中输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new site hugo_blog</span><br></pre></td></tr></table></figure><p>就生成了一个名字为hugo_blog的新站点，可以感受到速度非常快，<br>和vue.js创建新站点的速度比起来简直天差地别</p><p>打开配置文件config.toml，这是hugo的站点的相关配置，可以进行一些个性化的定制，<br>改为下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">baseURL = <span class="string">&quot;/&quot;</span></span><br><span class="line">languageCode = <span class="string">&quot;en-us&quot;</span></span><br><span class="line">title = <span class="string">&quot;我的博客&quot;</span></span><br><span class="line"><span class="comment">#指定主题</span></span><br><span class="line">theme = <span class="string">&quot;hyde&quot;</span></span><br><span class="line"></span><br><span class="line">[params]</span><br><span class="line"><span class="comment">#博客简介</span></span><br><span class="line">description = <span class="string">&quot;这里是刘悦的个人博客&quot;</span></span><br><span class="line"><span class="comment">#博客主题颜色</span></span><br><span class="line">themeColor = <span class="string">&quot;theme-base-08&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到我们制定了一个主题hyde，添加了Theme后的站点才有血有肉，丰富多彩。</p><p>更多的主题可以在这个上面下载，都是免费而开源的：<a href="https://themes.gohugo.io/">https://themes.gohugo.io/</a></p><p>进入到站点内的themes目录，输入命令下载hyde主题，hugo有很多漂亮的主题可以选择</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/spf13/hyde.git</span><br></pre></td></tr></table></figure><p>结构和样式有了，我们还没有内容。我们来创建站点的第一篇文章</p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new one.md</span><br></pre></td></tr></table></figure><p>hugo在content下创建one.md文件，我们编写一些文件内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">date: <span class="string">&quot;2019-05-23&quot;</span></span><br><span class="line">title: <span class="string">&quot;第一篇文章&quot;</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">### 你好啊</span></span><br><span class="line"></span><br><span class="line"><span class="number">123123123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在命令行中输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo server</span><br></pre></td></tr></table></figure><p>来热启动项目</p><p><img src="https://i.loli.net/2020/06/29/bSjNkemsnhLGlEH.png" alt="启动hugo"></p><p>可以看到已经在1313端口起了一个hugo服务</p><p>访问一下<br><img src="https://i.loli.net/2020/06/29/qXI69Ghpw7OlvQb.png" alt="展示hugo主题页面"></p><p>至此，非常快速而简单博客已经做好了，那么如何部署到线上呢？非常简单输入命令进行打包操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hugo --baseUrl=&quot;/&quot;</span><br></pre></td></tr></table></figure><p>hugo就会把你的站点生成纯静态页面，然后打包到public文件夹</p><p>将public上传到阿里云服务器的root目录下</p><p>修改nginx配置文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/nginx/<span class="keyword">conf</span>.d/default.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>监听80端口，并且项目目录指定&#x2F;root&#x2F;public</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    access_log      /root/md_vue_access.log;</span><br><span class="line">    error_log       /root/md_vue_error.log;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">        root /root/public;</span><br><span class="line">        index index.html;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_log    /root/md_vue/error.log    error;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx systemctl restart nginx.service 然后访问一下</p><p><img src="https://i.loli.net/2020/06/29/5TUKcFhoLuWlxsZ.png" alt="展示"></p><p>得益于hugo的快速而高效，三分钟之内你就拥有了一个纯静态的个人博客</p>]]></content>
      
      
      
        <tags>
            
            <tag> hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀超卖问题</title>
      <link href="/2020/06/11/python/%E6%A1%86%E6%9E%B6/Django_vue/%E7%A7%92%E6%9D%80%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/11/python/%E6%A1%86%E6%9E%B6/Django_vue/%E7%A7%92%E6%9D%80%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="使用ApacheBench来对美多商城的秒杀功能进行高并发压力测试"><a href="#使用ApacheBench来对美多商城的秒杀功能进行高并发压力测试" class="headerlink" title="使用ApacheBench来对美多商城的秒杀功能进行高并发压力测试"></a>使用ApacheBench来对美多商城的秒杀功能进行高并发压力测试</h1><p>  秒杀功能众所周知，低廉的价格会引来很多用户趋之若鹜的争抢点击，导致一系列的服务器负载问题，<br>  服务器负载太大而影响程序效率也是很常见的，Apache服务器自带有一个叫AB(ApacheBench)的工具，<br>  可以对服务器进行负载测试</p><pre><code>同时美多商城的秒杀功能也会被高负载影响，从而导致超卖现象安装xampp软件进入 c:/xampp/apache/bin</code></pre><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法:"></a>基本用法:</h2><p>ab  -n 全部请求数 -c 并发数测试url</p><p>可以将ab.exe 加入系统环境变量；或直接切换置 ab 目录执行。如： C:WindowsSystem32&gt; cd C:xamppapachebin</p><p>关于秒杀很好理解，就是每一个用户抢到商品之后，库存进行递减操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义秒杀视图</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Hello</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    res = User.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res.num &gt; <span class="number">0</span>:</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="comment">#修改库存</span></span><br><span class="line">        <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> c:</span><br><span class="line">            <span class="comment"># 执行sql语句</span></span><br><span class="line">            c.execute(<span class="string">&quot; update user set num = num - 1 where id = 1&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;购买成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;购买失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>索然逻辑上很严谨，代码也很简单，但是在高并发没有锁的情况下，数据库会过载导致超卖现象，也就是库存变为负数</p><p>于是就得引入redis来解决这一个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line">r = redis.Redis(host=host,port=port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义过载限制</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">limit_handler</span>(<span class="params">title</span>):</span><br><span class="line">    <span class="comment"># return True :允许; False: 拒绝</span></span><br><span class="line">    amount_limit = <span class="number">20</span> <span class="comment">#限制数量</span></span><br><span class="line">    keyname = title</span><br><span class="line">    incr_amount = <span class="number">1</span> <span class="comment">#每次增加数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断key是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> r.exists(keyname):</span><br><span class="line">        <span class="comment">#为了方便测试，这里设置默认初始值为95</span></span><br><span class="line">        <span class="comment">#setnx可以防止并发多次设置key</span></span><br><span class="line">        r.setnx(keyname,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#数据插入后在判断是否大于限制数</span></span><br><span class="line">    <span class="keyword">if</span> r.incrby(keyname,incr_amount) &lt;= amount_limit:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义秒杀接口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">miaosha</span>(<span class="params">request</span>):</span><br><span class="line">    title = request.GET.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br><span class="line"></span><br><span class="line">    res = Course.objects.<span class="built_in">filter</span>(title=title).first()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> limit_handler(title):</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改库存</span></span><br><span class="line">        <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> c:</span><br><span class="line">            <span class="comment"># 执行sql语句</span></span><br><span class="line">            c.execute(<span class="string">&quot; update course set num = num - 1 where id = %s&quot;</span>%res.<span class="built_in">id</span>)</span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;购买成功&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">200</span>,<span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;购买成功&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">200</span>,<span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;购买失败&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>这样只要配合这个方法，在进行修改mysql数据库的操作，就可以防止超限</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又拍云多线程异步分块上传</title>
      <link href="/2020/06/10/python/%E6%A1%86%E6%9E%B6/Django_vue/%E5%8F%88%E6%8B%8D%E4%BA%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/06/10/python/%E6%A1%86%E6%9E%B6/Django_vue/%E5%8F%88%E6%8B%8D%E4%BA%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="https://i.loli.net/2020/06/10/iAyYkjEqOcr9DPL.png" alt="多线程异步上传流程图"></p><p>注册又拍云：<a href="https://www.upyun.com/">https://www.upyun.com/</a></p><font face="黑体">点击控制台 > 云产品 > 云存储 > 创建服务</font><p>在创建服务的时候，选择新建一个授权操作员，输入操作员名，生成密码(这个密码要保存好，后面只会显示这一次)<br><img src="https://i.loli.net/2020/06/10/C2Sq67vDFOBIYLd.png" alt="操作流程"></p><pre><code>1.如果想配置新的操作员：可以点击配置 》 存储管理，下面有一个操作员授权，可以新建一个新的操作员2.如果你的密码丢失：可以进行密码重置操作，点击用户名 》账号管理》操作员》编辑》密码生成</code></pre><p> 项目实现：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">&#x27;wanghan-upyun&#x27;</span>,<span class="string">&#x27;baobei&#x27;</span>,<span class="string">&#x27;Xs9eNDSyXlMluFM3YRDGuk1v1q7h7CEa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#分块上传</span></span><br><span class="line"><span class="comment">#新建一个分块上传实例</span></span><br><span class="line">uploader = up.init_multi_uploader(<span class="string">&quot;/upyun2.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># uploader.upload(0,os.urandom(1024*1024))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># uploader.upload(1,os.urandom(1024*1024))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#采用多线程调用上传</span></span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=uploader.upload,args=(<span class="number">0</span>,os.urandom(<span class="number">1024</span>*<span class="number">1024</span>)))</span><br><span class="line"></span><br><span class="line">threads.append(t1)</span><br><span class="line"></span><br><span class="line">t2 = threading.Thread(target=uploader.upload,args=(<span class="number">1</span>,os.urandom(<span class="number">1024</span>*<span class="number">1024</span>)))</span><br><span class="line"></span><br><span class="line">threads.append(t2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动多线程</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="comment">#阻塞主线程</span></span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#声明调用结束</span></span><br><span class="line">res = uploader.complete()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 云存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上下文管理器-with的用法</title>
      <link href="/2020/06/09/python/%E6%A8%A1%E5%9D%97/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
      <url>/2020/06/09/python/%E6%A8%A1%E5%9D%97/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-什么是with语句"><a href="#1-什么是with语句" class="headerlink" title="1.什么是with语句"></a>1.什么是with语句</h2><pre><code>1. with是一种上下文管理协议，目的在于从流程图中把，try、except和finally关键字和资源分配释放相关代码统统去掉，简化try...except...finally的处理流程，简化了代码操作2. 所以使用with处理的对象必须有enter()和exit()这两个方法    1) with通过enter方法初始化（enter方法在语句体执行之前运行）    2) 然后在exit中做善后以及处理异常（exit()方法在语句执行完毕退出后运行）</code></pre><h2 id="2-with-语句使用场景"><a href="#2-with-语句使用场景" class="headerlink" title="2.with 语句使用场景"></a>2.with 语句使用场景</h2><pre><code>1. with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源2. 比如文件使用后自动关闭、某项工作完成后需要有释放资源或者其他清理工作，数据库连接等，资源操作完了之后，最重要的就是关闭该资源，否则资源打开太多而没有关闭。程序就会报错。</code></pre><h2 id="例子一"><a href="#例子一" class="headerlink" title="例子一"></a>例子一</h2><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Func</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;实例化一个对象&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;进入&#x27;</span>)    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;退出&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> obj:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在执行&#x27;</span>)</span><br></pre></td></tr></table></figure><p>插入：</p><p>__exit__方法的参数<br><strong>exit</strong> 方法中有三个参数，用来接收处理异常，如果代码在运行时发生异常，异常会被保存到这里。<br>exc_type : 异常类型<br>exc_val : 异常值<br>exc_tb : 异常回溯追踪</p><p><font size=3>上面代码执行结果为：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">实例化一个对象</span><br><span class="line">进入</span><br><span class="line">正在执行</span><br><span class="line">退出</span><br></pre></td></tr></table></figure><h2 id="结论1："><a href="#结论1：" class="headerlink" title="结论1："></a>结论1：</h2><p>实例化Func，得到obj对象，会执行Func的__init__方法，也就是打印了第一句。<br>按照程序从上到下执行，应该会打印“正在执行”才对，但是却在它之前先打印了“进入”，在他之后打印了“退出”</p><p>因为我们在定义Func时，定义了__enter__和__exit__方法，那么我们实例化的对象obj就是一个上下文管理器,<br>即<font color=red>含有__enter__和__exit__方法的对象就是上下文管理器</font></p><pre><code>with 上下文管理器：    语句体</code></pre><p><font color=red>当with遇到上下文管理器，就会在执行语句体之前，先执行上下文管理器的__enter__方法，然后再执行语句体，执行完语句体后，<br>最后执行__exit__方法</font></p><h2 id="例子二："><a href="#例子二：" class="headerlink" title="例子二："></a>例子二：</h2><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Func</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;实例化一个对象&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;进入&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;退出&#x27;</span>)</span><br><span class="line">        <span class="comment"># return True</span></span><br><span class="line"></span><br><span class="line">obj = Func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> obj:</span><br><span class="line">    <span class="keyword">raise</span> ImportError</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在执行&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://i.loli.net/2020/06/09/zUCd5eRMD6FlI2i.png" alt="执行结果"></p><p>把上面代码中我们注释掉的那一行代码取消注释，结果如下</p><p> 我们会发现，虽然我们故意在语句体中抛出一个错误，按照正常情况，执行到报错地方就不会执行了，而__exit__是在语句体执行完之后执行的，<br> 但还是执行了__exit__方法；当我们在__exit__中给一个返回值为Ture时，就会忽略错误。</p><h2 id="结论2："><a href="#结论2：" class="headerlink" title="结论2："></a>结论2：</h2><p>所以我们可以发现</p><p>with语句类似</p><p>　　try :</p><p>　　except:</p><p>　　finally:</p><p>的功能：这样做一个不好的地方是，在代码的主逻辑里，会有大量的异常处理代理，这会很大的影响我们的可读性。<br>好一点的做法呢，可以使用 with 将异常的处理隐藏起来。由此可以看出with语句更简洁。而且更安全。代码量更少。</p><p>　　 <font color=red face="黑体">出现异常时，如果 <strong>exit</strong> 返回 False（默认不写返回值时，即为False），则会重新抛出异常，<br>让with 之外的语句逻辑来处理异常，这也是通用做法；如果返回 True，则忽略异常，不再对异常进行处理</font></p><h2 id="例子三："><a href="#例子三：" class="headerlink" title="例子三："></a>例子三：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Func</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;实例化一个对象&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;进入&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;退出&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Func() <span class="keyword">as</span> obj:</span><br><span class="line">    <span class="built_in">print</span>(obj,<span class="built_in">type</span>(obj))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在执行&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/09/XHOz8dMT7VQxgwE.png" alt="执行结果"></p><h2 id="结论3："><a href="#结论3：" class="headerlink" title="结论3："></a>结论3：</h2><p><font color=red>调用上下文管理器的 <strong>enter</strong> 方法时；如果使用了 as 子句，则将 <strong>enter</strong>()<br>方法的返回值赋值给 as 子句中的目标</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> 上下文管理器  <span class="keyword">as</span>  target:</span><br><span class="line">    代码语句体</span><br></pre></td></tr></table></figure><p><font color=red size=3>with后面必须跟一个上下文管理器，如果使用了as，则是把上下文管理器的__enter__() 方法的返回值赋值给 target，<br>target 可以是单个变量，或者由“()”括起来的元组（不能是仅仅由“,”分隔的变量列表，必须加“()”）</font></p><h2 id="例子四"><a href="#例子四" class="headerlink" title="例子四"></a>例子四</h2><p>我们经常会看到这样的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用with</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="built_in">print</span>(file.read())</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="结论4"><a href="#结论4" class="headerlink" title="结论4:"></a>结论4:</h2><p>这里<font color=red>使用了with语句，不管在处理文件过程中是否发生异常，都能保证weth语句执行完毕后已经关闭了打开的文件句柄</font>。<br>如果使用传统的 try&#x2F;finally 范式，则要使用类似如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">somefile = <span class="built_in">open</span>(<span class="string">r&#x27;test.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> somefile:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    somefile.close()</span><br></pre></td></tr></table></figure><p>比较起来，使用 with 语句可以减少编码量，使代码变得更加简洁。已经加入对上下文管理协议支持的还有模块 threading 等。</p><p>补充：<br>with只能配合上下文管理器使用，常见的上下文管理器有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file</span><br><span class="line">thread.LockType</span><br><span class="line">threading.Lock</span><br><span class="line">threading.RLock</span><br><span class="line">threading.Condition</span><br><span class="line">threading.Semaphore</span><br><span class="line">threading.BoundedSemaphore</span><br></pre></td></tr></table></figure><h2 id="理解并使用contextlib"><a href="#理解并使用contextlib" class="headerlink" title="理解并使用contextlib"></a>理解并使用contextlib</h2><p> Python还提供了一个contextmanager装饰器，允许用户将一个生成器定义为上下文管理器，该装饰器将生成器中的代码通过yield语句分成两部分，<br> yield之前的代码为__enter__方法，yield之后的代码为__exit__方法，yield的返回值即__enter__方法的返回值，用于赋给as后的变量。</p><pre><code>实现资源管理</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_func</span>(<span class="params">file_name</span>):</span><br><span class="line">    <span class="comment"># __enter__方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;open file:&#x27;</span>, file_name, <span class="string">&#x27;in __enter__&#x27;</span>)</span><br><span class="line">    file_handler = <span class="built_in">open</span>(file_name, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 【重点】：yield</span></span><br><span class="line">    <span class="keyword">yield</span> file_handler</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __exit__方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;close file:&#x27;</span>, file_name, <span class="string">&#x27;in __exit__&#x27;</span>)</span><br><span class="line">    file_handler.close()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open_func(<span class="string">&#x27;test.txt&#x27;</span>) <span class="keyword">as</span> file_in:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_in:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i.loli.net/2020/06/09/SiozxmYXLVC2rj7.png" alt="执行结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis存储购物车</title>
      <link href="/2020/06/08/redis/redis%E5%AD%98%E5%82%A8%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
      <url>/2020/06/08/redis/redis%E5%AD%98%E5%82%A8%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>先来看添加流程图：<br>    <img src="https://i.loli.net/2020/06/08/4QbLgzf1vxhDXwR.png" alt="redis添加购物车"></p><h2 id="1-附上前端代码"><a href="#1-附上前端代码" class="headerlink" title="1.附上前端代码"></a>1.附上前端代码</h2><p>首先我们通过前端来向后端传递数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;a style=&quot;color: #71dd8a&quot; href=&quot;javascript:void(0)&quot; @click=&quot;add_cart&quot;&gt;添加购物车&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">//添加购物车</span><br><span class="line">        add_cart:function()&#123;</span><br><span class="line"></span><br><span class="line">          var cart_data = new FormData();</span><br><span class="line">          cart_data.append(&#x27;username&#x27;,你的用户名);</span><br><span class="line">          cart_data.append(&#x27;title&#x27;,你的title);</span><br><span class="line">          cart_data.append(&#x27;num&#x27;,1);  //这边我们将添加数量初始化为1</span><br><span class="line">          //请求后端接口</span><br><span class="line">          this.axios.post(&#x27;http://localhost:8000/cart/&#x27;,cart_data).then((res)=&gt;&#123;</span><br><span class="line">            console.log(res.data);</span><br><span class="line">            alert(res.data.message);</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="这里我们先回顾一下启动服务以及如何redis存储"><a href="#这里我们先回顾一下启动服务以及如何redis存储" class="headerlink" title="这里我们先回顾一下启动服务以及如何redis存储"></a>这里我们先回顾一下启动服务以及如何redis存储</h3><p><img src="https://i.loli.net/2020/06/08/nMLG9qkscdp3jKu.png" alt="redis存取"></p><p>总结：</p><pre><code>redis-cli 启动服务set       字符串用set存储hset      存储数据hexists   可以判断你是否存过这个数据hincrpy   添加数据的数量加一   (正数加一，负数减一)hget      获取数据补充：    hdel cart Phone  删除phone    hgetall cart 查询cart的所有数据</code></pre><h2 id="Redis持久化功能"><a href="#Redis持久化功能" class="headerlink" title="Redis持久化功能"></a>Redis持久化功能</h2><h3 id="1-找到你的redis文件夹"><a href="#1-找到你的redis文件夹" class="headerlink" title="1.找到你的redis文件夹"></a>1.找到你的redis文件夹</h3><p><img src="https://i.loli.net/2020/06/08/pqULMK7VFHPnNWJ.png" alt="redis文件夹"></p><h3 id="2-打开redis-window-conf-，搜索Save"><a href="#2-打开redis-window-conf-，搜索Save" class="headerlink" title="2.打开redis.window.conf ，搜索Save"></a>2.打开redis.window.conf ，搜索Save</h3><p><img src="https://i.loli.net/2020/06/08/Bq4ybWZvEg2tfLl.png" alt="redis持久化存储"></p><p>注意：</p><pre><code>假如每300秒内写入了redis9条数据，不满足写入10条数据来存储到内存中，在这个时候如果电脑死机重启了，那么你的这九条数据就会丢失，这也就是RDB本身的缺陷：当系统停止，或者无意中Redis被Kill掉，最后写入的Redis数据就会丢失</code></pre><p>解决办法：</p><pre><code>还是在redis.window.conf ， 搜索appendonly（打开日志）</code></pre><p><img src="https://i.loli.net/2020/06/08/3hpmGbUNHrK5S2u.png" alt="redis存储日志"></p><p>打开这个日志的作用就是，你任何一次的读写操作他都会写到日志里,这样你的数据就永远不会丢</p><h2 id="2-后端代码"><a href="#2-后端代码" class="headerlink" title="2.后端代码"></a>2.后端代码</h2><pre><code>注意先配置redis</code></pre><p>在views视图配置redis</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line">r = redis.Redis(host=host,port=port)</span><br></pre></td></tr></table></figure><p>在views视图编写添加购物车逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="comment">#购物车</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cart</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment">#添加购物车</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="comment"># 获取前端传递过来的数据</span></span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        title = request.data.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        num = request.data.get(<span class="string">&#x27;num&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将数据存储到redis  </span></span><br><span class="line">        res = r.hset(username,title,num)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>:<span class="number">200</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;成功添加购物车&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着配置url，就完成redis存储购物车了</p><h2 id="3-前端展示购物车"><a href="#3-前端展示购物车" class="headerlink" title="3.前端展示购物车"></a>3.前端展示购物车</h2><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;h3&gt;我的购物车&lt;/h3&gt;</span><br><span class="line">        &lt;table border=&quot;1&quot;&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;标题&lt;/td&gt;</span><br><span class="line">&lt;!--            &lt;td&gt;价格&lt;/td&gt;--&gt;</span><br><span class="line">            &lt;td&gt;数量&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">          &lt;tr v-for=&quot;cart in carts&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;cart.title&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;cart.price&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;cart.num&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;cart_redis&quot;,</span><br><span class="line">      data:function()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">          //购物车列表</span><br><span class="line">          carts:[],</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted() &#123;</span><br><span class="line">            </span><br><span class="line">          //展示购物车</span><br><span class="line">        this.show_cart();</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line"></span><br><span class="line">          //展示购物车</span><br><span class="line">          show_cart:function () &#123;</span><br><span class="line">            this.axios.get(&#x27;http://localhost:8000/cart/&#x27;,&#123;params:&#123;username:localStorage.getItem(&#x27;username&#x27;)&#125;&#125;).then((res)=&gt;&#123;</span><br><span class="line">                console.log(res.data.data);</span><br><span class="line">                this.carts = res.data.data;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="后端展示购物车逻辑（这里我们还在添加视图里写，用的是get请求）"><a href="#后端展示购物车逻辑（这里我们还在添加视图里写，用的是get请求）" class="headerlink" title="后端展示购物车逻辑（这里我们还在添加视图里写，用的是get请求）"></a>后端展示购物车逻辑（这里我们还在添加视图里写，用的是get请求）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#购物车</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cart</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 展示</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">    </span><br><span class="line">        username = request.GET.get(<span class="string">&#x27;username&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        data = r.hgetall(username)</span><br><span class="line">        </span><br><span class="line">        alist = []</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> data.items():</span><br><span class="line">            <span class="comment">#解码title和num</span></span><br><span class="line">            title = <span class="built_in">str</span>(i,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            num = <span class="built_in">str</span>(j,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="comment">#根据title想数据库查询获取价格</span></span><br><span class="line">            <span class="comment"># course = Course.objects.filter(title=title).first()</span></span><br><span class="line">            <span class="comment"># price = course.price</span></span><br><span class="line">            <span class="comment">#字典</span></span><br><span class="line">            <span class="comment"># dic = &#123;&#x27;title&#x27;:title,&#x27;num&#x27;:num,&#x27;price&#x27;:price&#125;</span></span><br><span class="line">            dic = &#123;<span class="string">&#x27;title&#x27;</span>:title,<span class="string">&#x27;num&#x27;</span>:num&#125;</span><br><span class="line">            <span class="comment"># 添加到alist变为列表</span></span><br><span class="line">            alist.append(dic)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>:<span class="number">200</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>:alist</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中富文本编辑器的使用</title>
      <link href="/2020/06/06/python/%E6%A1%86%E6%9E%B6/Django_vue/vue%E4%B8%AD%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/06/python/%E6%A1%86%E6%9E%B6/Django_vue/vue%E4%B8%AD%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><pre><code>官方文档地址：https://www.npmjs.com/package/vue-quill-editor</code></pre><h2 id="1-安装vue-quill-editor"><a href="#1-安装vue-quill-editor" class="headerlink" title="1.安装vue-quill-editor"></a>1.安装vue-quill-editor</h2><pre><code>npm install vue-quill-editor</code></pre><h2 id="2-安装quill-这个是vue-quill-editor的一个依赖"><a href="#2-安装quill-这个是vue-quill-editor的一个依赖" class="headerlink" title="2. 安装quill   (这个是vue-quill-editor的一个依赖)"></a>2. 安装quill   (这个是vue-quill-editor的一个依赖)</h2><pre><code>npm install quill</code></pre><h2 id="两种-引用方法，全局引用和局部引用"><a href="#两种-引用方法，全局引用和局部引用" class="headerlink" title="两种 引用方法，全局引用和局部引用"></a>两种 引用方法，全局引用和局部引用</h2><ol><li><p>全局引用，项目入口文件中（main.js）注册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueQuillEditor from &#x27;vue-quill-editor&#x27;</span><br><span class="line"></span><br><span class="line">// require styles</span><br><span class="line">import &#x27;quill/dist/quill.core.css&#x27;</span><br><span class="line">import &#x27;quill/dist/quill.snow.css&#x27;</span><br><span class="line">import &#x27;quill/dist/quill.bubble.css&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(VueQuillEditor)</span><br></pre></td></tr></table></figure></li><li><p>局部引用，在需调用的vue页面中声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;quill/dist/quill.core.css&#x27;</span><br><span class="line">import &#x27;quill/dist/quill.snow.css&#x27;</span><br><span class="line">import &#x27;quill/dist/quill.bubble.css&#x27;</span><br><span class="line"></span><br><span class="line">import &#123; quillEditor &#125; from &#x27;vue-quill-editor&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    quillEditor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>完成上述步骤后即可使用</p><h2 id="附上局部引用代码，关于事件和参数可查阅文档，这里不一一说明"><a href="#附上局部引用代码，关于事件和参数可查阅文档，这里不一一说明" class="headerlink" title="附上局部引用代码，关于事件和参数可查阅文档，这里不一一说明"></a>附上局部引用代码，关于事件和参数可查阅文档，这里不一一说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;quill-editor ref=&quot;myTextEditor&quot; v-model=&quot;content&quot; :options=&quot;editorOption&quot; style=&quot;height:600px;&quot;&gt;&lt;/quill-editor&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;quill/dist/quill.core.css&#x27;</span><br><span class="line">import &#x27;quill/dist/quill.snow.css&#x27;</span><br><span class="line">import &#x27;quill/dist/quill.bubble.css&#x27;</span><br><span class="line">import &#123; quillEditor &#125; from &#x27;vue-quill-editor&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            content: &#x27;&#x27;,</span><br><span class="line">            editorOption: &#123;</span><br><span class="line">               placeholder: &#x27;编辑文章内容&#x27;</span><br><span class="line">             &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        quillEditor</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        onEditorChange(&#123; editor, html, text &#125;) &#123;</span><br><span class="line">            this.content = html;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/06/19beNJcBKpdYkgF.png" alt="富文本编辑器"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>权限系统(ACL、Rbac、Abac)</title>
      <link href="/2020/06/06/python/%E6%A1%86%E6%9E%B6/Django_vue/%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F-ACL%E3%80%81Rbac%E3%80%81Abac/"/>
      <url>/2020/06/06/python/%E6%A1%86%E6%9E%B6/Django_vue/%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F-ACL%E3%80%81Rbac%E3%80%81Abac/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><img src="https://i.loli.net/2020/06/06/mb4DVTtjXEac2vr.png" alt="权限系统"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度云-自然语言分析</title>
      <link href="/2020/06/05/python/%E6%A1%86%E6%9E%B6/Django_vue/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%88%86%E6%9E%90/"/>
      <url>/2020/06/05/python/%E6%A1%86%E6%9E%B6/Django_vue/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-安装组件"><a href="#1-安装组件" class="headerlink" title="1.安装组件"></a>1.安装组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip insttall baidu-aip</span><br></pre></td></tr></table></figure><h2 id="2-注册百度智能云，进入管理控制台"><a href="#2-注册百度智能云，进入管理控制台" class="headerlink" title="2.注册百度智能云，进入管理控制台"></a>2.注册百度智能云，进入管理控制台</h2><p><a href="https://cloud.baidu.com/">百度智能云</a></p><h2 id="3-点击产品服务-gt-人工智能-gt-自然语言处理"><a href="#3-点击产品服务-gt-人工智能-gt-自然语言处理" class="headerlink" title="3.点击产品服务 &gt; 人工智能 &gt; 自然语言处理"></a>3.点击产品服务 &gt; 人工智能 &gt; 自然语言处理</h2><p><img src="https://i.loli.net/2020/06/07/k61jsnBDOYyFqV2.png" alt="自然语言处理"></p><h2 id="4-创建一个自己的应用"><a href="#4-创建一个自己的应用" class="headerlink" title="4.创建一个自己的应用"></a>4.创建一个自己的应用</h2><p><img src="https://i.loli.net/2020/06/07/s14TeQmGyvwqLjJ.png" alt="展示应用"></p><pre><code>要记清楚这里的：AppID、APIKey、SecretKey，这里后面会用到</code></pre><h3 id="5-创建一个-py文件，在里面写入配置"><a href="#5-创建一个-py文件，在里面写入配置" class="headerlink" title="5.创建一个.py文件，在里面写入配置"></a>5.创建一个.py文件，在里面写入配置</h3><p>附上代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipNlp</span><br><span class="line"></span><br><span class="line">app_id = <span class="string">&quot;你的AppID&quot;</span></span><br><span class="line">app_key = <span class="string">&quot;你的APIKey&quot;</span></span><br><span class="line">app_secret = <span class="string">&quot;你的SecretKey&quot;</span></span><br><span class="line"><span class="comment">#实例化对象</span></span><br><span class="line">client = AipNlp(app_id,app_key,app_secret)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>一下内容，均要有以上内容为基础的前提下才能执行</code></pre><ol><li><p>纠错功能<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">text = <span class="string">&quot;我再北京学人工智能&quot;</span></span><br><span class="line"><span class="built_in">print</span>(client.ecnet(text))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/07/5NrzfdFhJSyQTjm.png" alt="纠错功能"></p></li><li><p>提取标签<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title = <span class="string">&quot;python人工智能在线学习&quot;</span></span><br><span class="line">content = <span class="string">&quot;我在北京学习人工智能，它是基于python的一门学科&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调取标签</span></span><br><span class="line"><span class="built_in">print</span>(client.keyword(title,content))</span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line"><span class="comment"># &#123;&#x27;log_id&#x27;: 2881434032874199239, &#x27;items&#x27;: [&#123;&#x27;score&#x27;: 0.948696, &#x27;tag&#x27;: &#x27;人工智能&#x27;&#125;, &#123;&#x27;score&#x27;: 0.768706, &#x27;tag&#x27;: &#x27;python&#x27;&#125;]&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>情感分析<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;教学质量太差，老师没有经验&quot;</span></span><br><span class="line">data_text = client.commentTag(text,&#123;<span class="string">&#x27;type&#x27;</span>:<span class="number">7</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(data_text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/07/2Ey9T4ajiNgFS3q.png" alt="情感分析打印结果"></p></li></ol><p>注：<br>情感分析里的type值，百度云文档里面有，在此附上网址：<a href="https://cloud.baidu.com/doc/NLP/s/dk85ii6r4">https://cloud.baidu.com/doc/NLP/s/dk85ii6r4</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 百度云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库-多对多表设计及应用</title>
      <link href="/2020/06/05/Mysql/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%A4%9A%E5%AF%B9%E5%A4%9A%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8F%8A%E5%BA%94%E7%94%A8%E6%B3%95/"/>
      <url>/2020/06/05/Mysql/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%A4%9A%E5%AF%B9%E5%A4%9A%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8F%8A%E5%BA%94%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>  在数据库中，如果两个表之间的关系为，多对多关系，如“课程表和标签表”，一门课程可以有多个标签，<br>  一个标签也可以对应多个课程，根据数据库的设计原则，应当形成第三张关联表<br>  应用：添加、查找(后续还有补充)</p><h2 id="步骤1：创建两张数据表（课程、标签）来形成第三张表"><a href="#步骤1：创建两张数据表（课程、标签）来形成第三张表" class="headerlink" title="步骤1：创建两张数据表（课程、标签）来形成第三张表"></a>步骤1：创建两张数据表（课程、标签）来形成第三张表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="comment">#标签表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tag</span>(models.Model):</span><br><span class="line">name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">db_table = <span class="string">&quot;tag&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#课程表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>(models.Model):</span><br><span class="line">title = models.CharField(max_length=<span class="number">150</span>)</span><br><span class="line">content = models.CharField(max_length=<span class="number">400</span>,null=<span class="literal">True</span>)</span><br><span class="line">img = models.ImageField(upload_to=<span class="string">&quot;static/upload/&quot;</span>,null=<span class="literal">True</span>)</span><br><span class="line">tag = models.ManyToManyField(to=<span class="string">&quot;Tag&quot;</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">db_table = <span class="string">&quot;course&quot;</span></span><br></pre></td></tr></table></figure><h2 id="步骤2：在数据库生成表"><a href="#步骤2：在数据库生成表" class="headerlink" title="步骤2：在数据库生成表"></a>步骤2：在数据库生成表</h2><p>执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">-------------------------------------------</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="步骤3：创建序列化"><a href="#步骤3：创建序列化" class="headerlink" title="步骤3：创建序列化"></a>步骤3：创建序列化</h2><p>下面可能有点复杂，看好了，不要走神哦~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#序列化标签表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TagSer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Tag</span><br><span class="line">        fields=<span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#序列化课程表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseSer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment">#这里是在执行is_valid()之前把tag字段变为只读，就可以通过is_valid()了</span></span><br><span class="line">    tag = TagSer(read_only=<span class="literal">True</span>,many=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#这里的tag_ids从前端传过来是一个list，根据需求，把它变为只写</span></span><br><span class="line">    tag_ids = serializers.CharField(write_only=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Course</span><br><span class="line">        fields=<span class="string">&quot;__all__&quot;</span></span><br><span class="line">    <span class="comment">#这里就是因为前端传过来的tag_ids是list不能直接添加进数据库，所以我们要重写create方法，来方便写入库</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        tag_ids = validated_data.pop(<span class="string">&quot;tag_ids&quot;</span>)</span><br><span class="line">        tag = tag_ids.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        course = Course.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> tag:</span><br><span class="line">            course.tag.add(t)</span><br><span class="line">        <span class="keyword">return</span> course</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/05/CyLdGKPXBETkv1Z.png" alt="序列化出来的执行数据"></p><h2 id="步骤4：实际应用"><a href="#步骤4：实际应用" class="headerlink" title="步骤4：实际应用"></a>步骤4：实际应用</h2><ol><li><p>后端添加课程接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddCourse</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line"></span><br><span class="line">    course_ser = CourseSer(data=request.data)</span><br><span class="line">    <span class="built_in">print</span>(course_ser)</span><br><span class="line">    <span class="keyword">if</span> course_ser.is_valid():</span><br><span class="line">        course_ser.save()</span><br><span class="line">        res = &#123;&#125;</span><br><span class="line">        res[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">        res[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;添加成功&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = &#123;&#125;</span><br><span class="line">        res[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        res[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;添加失败&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>前端添加课程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;myheader&gt;&lt;/myheader&gt;</span><br><span class="line">      &lt;h3&gt;</span><br><span class="line">        添加课程页</span><br><span class="line">      &lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">      &lt;van-form&gt;</span><br><span class="line">        &lt;van-field</span><br><span class="line">          v-model=&quot;title&quot;</span><br><span class="line">          label=&quot;课程名&quot;</span><br><span class="line">          placeholder=&quot;课程名&quot;</span><br><span class="line">          :rules=&quot;[&#123; required: true, message: &#x27;请填写课程名&#x27; &#125;]&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;van-field</span><br><span class="line">          v-model=&quot;content&quot;</span><br><span class="line">          label=&quot;内容&quot;</span><br><span class="line">          placeholder=&quot;内容&quot;</span><br><span class="line">          :rules=&quot;[&#123; required: true, message: &#x27;请填写内容&#x27; &#125;]&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &amp;nbsp;&amp;nbsp;</span><br><span class="line">        课程标签：</span><br><span class="line">        &lt;select v-model=&quot;tag_ids&quot; multiple&gt; //multiple 可以起到多选的作用</span><br><span class="line">          &lt;option v-for=&quot;i in taglist&quot; :value=&quot;i.id&quot;&gt;&#123;&#123;i.name&#125;&#125;&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">        &lt;van-field</span><br><span class="line">          id=&quot;img&quot;</span><br><span class="line">          type=&quot;file&quot;</span><br><span class="line">          label=&quot;图片&quot;</span><br><span class="line">          placeholder=&quot;图片&quot;</span><br><span class="line">          :rules=&quot;[&#123; required: true, message: &#x27;请填写图片&#x27; &#125;]&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;</span><br><span class="line">        &lt;van-button round type=&quot;info&quot; @click=&quot;addcourse&quot;&gt;</span><br><span class="line">           添 加</span><br><span class="line">        &lt;/van-button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;/van-form&gt;</span><br><span class="line"></span><br><span class="line">      &lt;myfooter&gt;&lt;/myfooter&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Myheader from &quot;./myheader&quot;;</span><br><span class="line">    import Myfooter from &quot;./myfooter&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;addcourse&quot;,</span><br><span class="line">      data:function()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">          //标签列表</span><br><span class="line">          taglist:[],</span><br><span class="line">          title:&#x27;&#x27;,</span><br><span class="line">          content:&#x27;&#x27;,</span><br><span class="line">          //标签id</span><br><span class="line">          tag_ids:[],</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;Myfooter, Myheader&#125;,</span><br><span class="line"></span><br><span class="line">      mounted:function()&#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      methods:&#123;</span><br><span class="line"></span><br><span class="line">          //添加课程</span><br><span class="line">          addcourse:function () &#123;</span><br><span class="line">            var courselist = new FormData();</span><br><span class="line">            var img = document.getElementById(&quot;img&quot;).files[0];</span><br><span class="line">            courselist.append(&quot;title&quot;,this.title);</span><br><span class="line">            courselist.append(&quot;content&quot;,this.content);</span><br><span class="line">            courselist.append(&quot;tag_ids&quot;,this.tag_ids);</span><br><span class="line">            courselist.append(&quot;img&quot;,img);</span><br><span class="line"></span><br><span class="line">            this.axios.post(&#x27;http://localhost:8000/addcourse/&#x27;,courselist).then((res)=&gt;&#123;</span><br><span class="line">                if(res.data.code == 200)&#123;</span><br><span class="line">                  alert(res.data.message);</span><br><span class="line">                  this.$router.push(&#x27;/&#x27;)</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                  alert(res.data.message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/05/ExgVMQFI6wkKDWu.png" alt="vue展示"></p></li></ol><h2 id="查询课程表（接下来就是写查询课程数据了）"><a href="#查询课程表（接下来就是写查询课程数据了）" class="headerlink" title="查询课程表（接下来就是写查询课程数据了）"></a>查询课程表（接下来就是写查询课程数据了）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#查询课程表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseList</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        courselist = Course.objects.<span class="built_in">all</span>()</span><br><span class="line">        courselist_ser = CourseSer(courselist,many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>:<span class="number">200</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>:courselist_ser.data</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询完你可以在浏览器上试一下：<br><img src="https://i.loli.net/2020/06/05/GlEqszjmeop1cVA.png" alt="查询展示"></p><h2 id="展示课程（不多说了，前端展示课程走起-——）"><a href="#展示课程（不多说了，前端展示课程走起-——）" class="headerlink" title="展示课程（不多说了，前端展示课程走起-——）"></a>展示课程（不多说了，前端展示课程走起-——）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;myheader&gt;&lt;/myheader&gt;</span><br><span class="line">      &lt;table border=&quot;1&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;课程排序&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;标题&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;内容&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;图片&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;标签&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr v-for=&quot;course in courselist&quot;&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;course.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;course.title&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&#123;&#123;course.content&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;img width=&quot;100&quot; height=&quot;100&quot; :src=&quot;&#x27;http://localhost:8000/&#x27;+course.img&quot; alt=&quot;&quot;&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;span v-for=&quot;tag in course.tag&quot;&gt;&#123;&#123;tag.name&#125;&#125;、&lt;/span&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">      &lt;myfooter&gt;&lt;/myfooter&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Myheader from &quot;./myheader&quot;;</span><br><span class="line">    import Myfooter from &quot;./myfooter&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;course&quot;,</span><br><span class="line">      components: &#123;Myfooter, Myheader&#125;,</span><br><span class="line">      data:function () &#123;</span><br><span class="line">        return&#123;</span><br><span class="line">          courselist:[],</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted:function()&#123;</span><br><span class="line">          this.get_course();</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">          get_course:function()&#123;</span><br><span class="line">            this.axios.get(&#x27;http://localhost:8000/courselist/&#x27;).then((res)=&gt;&#123;</span><br><span class="line">                console.log(res.data.data);</span><br><span class="line">                this.courselist = res.data.data;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/05/4vRVqMn2Q359GCy.png" alt="效果图"></p><p>  对了——小虎板门，别忘了添加url哦，溜了溜了！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最全面试题-算法</title>
      <link href="/2020/06/03/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%AE%97%E6%B3%95/"/>
      <url>/2020/06/03/%E9%9D%A2%E8%AF%95%E9%A2%98/%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="高斯求和"><a href="#高斯求和" class="headerlink" title="高斯求和"></a>高斯求和</h2><p>一定范围内做累加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_number</span>(<span class="params">n</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        total += i</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(sum_number(<span class="number">5</span>))    <span class="comment">## 15 </span></span><br></pre></td></tr></table></figure><h2 id="递归函数-逆性思维，要调用自身"><a href="#递归函数-逆性思维，要调用自身" class="headerlink" title="递归函数(逆性思维，要调用自身)"></a>递归函数(逆性思维，要调用自身)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_number</span>(<span class="params">n</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#出口   ##递归一定要有出口，也就是跳出循环 </span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">#调用自身</span></span><br><span class="line">    <span class="keyword">return</span> n + sum_number(n-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(sum_number(<span class="number">5</span>))    <span class="comment"># 15</span></span><br></pre></td></tr></table></figure><p>举例：司马光砸缸</p><h3 id="递归次数太多会导致栈溢出"><a href="#递归次数太多会导致栈溢出" class="headerlink" title="递归次数太多会导致栈溢出"></a>递归次数太多会导致栈溢出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_number</span>(<span class="params">n</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#出口   ##递归一定要有出口，也就是跳出循环 </span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">#调用自身</span></span><br><span class="line">    <span class="keyword">return</span> n + sum_number(n-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(sum_number(<span class="number">1000</span>))    <span class="comment"># 500500</span></span><br></pre></td></tr></table></figure><h2 id="递归实现斐波那契"><a href="#递归实现斐波那契" class="headerlink" title="递归实现斐波那契"></a>递归实现斐波那契</h2><p> 1 1 2 3 5 8 ……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">feibonaqi</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment">#有零的话可以多加一个判断 if n == 0 返回一个 0</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> feibonaqi(n-<span class="number">1</span>) + feibonaqi(n-<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(feibonaqi(i))     <span class="comment">##打印结果：1 1 2 3 5 8 13 21 34</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact_number</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment">#出口为1，Because零乘任何数都等于零</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n + fact_number(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fact_number(<span class="number">5</span>))   <span class="comment">##120</span></span><br></pre></td></tr></table></figure><h2 id="课程分类（层级关系-递归）"><a href="#课程分类（层级关系-递归）" class="headerlink" title="课程分类（层级关系 + 递归）"></a>课程分类（层级关系 + 递归）</h2><p>层级关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mylist = [&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;面包&#x27;</span>,<span class="string">&#x27;pid&#x27;</span>:<span class="number">0</span>&#125;,</span><br><span class="line">          &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;大面包&#x27;</span>,<span class="string">&#x27;pid&#x27;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;牛奶&#x27;</span>,<span class="string">&#x27;pid&#x27;</span>:<span class="number">0</span>&#125;,</span><br><span class="line">          &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;大牛奶&#x27;</span>,<span class="string">&#x27;pid&#x27;</span>:<span class="number">3</span>&#125;,]</span><br><span class="line"></span><br><span class="line"><span class="comment">#层级关系</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cenci</span>(<span class="params">data</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    tree = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        tree[item[<span class="string">&#x27;id&#x27;</span>]] = item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment">#判断顶级分类</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> i[<span class="string">&#x27;pid&#x27;</span>]:</span><br><span class="line">            <span class="built_in">list</span>.append(tree[i[<span class="string">&#x27;id&#x27;</span>]])</span><br><span class="line">        <span class="comment">#子分类</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent_id = i[<span class="string">&#x27;pid&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;child&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> tree[parent_id]:</span><br><span class="line">                tree[parent_id][<span class="string">&#x27;child&#x27;</span>] = []</span><br><span class="line">            <span class="comment">#将子类填充到父类child里</span></span><br><span class="line">            tree[parent_id][<span class="string">&#x27;child&#x27;</span>].append(tree[i[<span class="string">&#x27;id&#x27;</span>]])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cenci(mylist))</span><br></pre></td></tr></table></figure><p>递归实现课程的分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mylist = [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;面包&#x27;</span>, <span class="string">&#x27;pid&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;child&#x27;</span>:</span><br><span class="line">    [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;大面包&#x27;</span>, <span class="string">&#x27;pid&#x27;</span>: <span class="number">1</span>&#125;]&#125;,</span><br><span class="line">          &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;牛奶&#x27;</span>, <span class="string">&#x27;pid&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;child&#x27;</span>:</span><br><span class="line">              [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;大牛奶&#x27;</span>, <span class="string">&#x27;pid&#x27;</span>: <span class="number">3</span>&#125;]&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印层级结构</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_dic</span>(<span class="params">d,n_tab=-<span class="number">1</span></span>):</span><br><span class="line">    <span class="comment">#判断数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(d,<span class="built_in">list</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">            list_dic(i,n_tab)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(d,<span class="built_in">dict</span>):</span><br><span class="line">        n_tab += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> key,value <span class="keyword">in</span> d.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;\t&quot;</span>*n_tab,key))</span><br><span class="line">            list_dic(value,n_tab)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;\t&quot;</span>*n_tab,d))</span><br><span class="line"></span><br><span class="line">list_dic(mylist)</span><br></pre></td></tr></table></figure><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick</span>(<span class="params"><span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">list</span>) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">    tmp = <span class="built_in">list</span>[<span class="number">0</span>]  <span class="comment"># 临时变量 可以取随机值</span></span><br><span class="line">    left = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>[<span class="number">1</span>:] <span class="keyword">if</span> x &lt;= tmp]  <span class="comment"># 左列表</span></span><br><span class="line">    right = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>[<span class="number">1</span>:] <span class="keyword">if</span> x &gt; tmp]  <span class="comment"># 右列表</span></span><br><span class="line">    <span class="keyword">return</span> quick(left) + [tmp] + quick(right)</span><br><span class="line"></span><br><span class="line">li = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(quick(li))  <span class="comment"># [2, 3, 4, 5, 7, 8]</span></span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>原理：拿自己与上面一个比较，如果上面一个比自己小就将自己和上面一个调换位置，依次再与上面一个比较，<br>第一轮结束后最上面那个一定是最大的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j],li[j+<span class="number">1</span>]=li[j+<span class="number">1</span>],li[j]</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">bubble_sort(li)</span><br><span class="line"><span class="built_in">print</span>(li)               <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h2 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">l = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin_search</span>(<span class="params">data_set,val</span>):</span><br><span class="line">   low = <span class="number">0</span></span><br><span class="line">   high = <span class="built_in">len</span>(data_set) - <span class="number">1</span></span><br><span class="line">   <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">      mid = (low+high)//<span class="number">2</span></span><br><span class="line">      <span class="keyword">if</span> data_set[mid] == val:</span><br><span class="line">         <span class="keyword">return</span> mid</span><br><span class="line">      <span class="keyword">elif</span> data_set[mid] &lt; val:</span><br><span class="line">         low = mid + <span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         high = mid - <span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">n = bin_search(l,<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(n)            <span class="comment"># 返回结果是： 10</span></span><br></pre></td></tr></table></figure><h2 id="青蛙跳台阶"><a href="#青蛙跳台阶" class="headerlink" title="青蛙跳台阶"></a>青蛙跳台阶</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fib = <span class="keyword">lambda</span> n: n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span> * fib(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">max_num</span>):</span><br><span class="line">    a,b = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; max_num:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b=b,a+b</span><br><span class="line"></span><br><span class="line">g = fib(<span class="number">10</span>)               <span class="comment">#生成一个生成器：[1，2, 3, 5, 8, 13]</span></span><br><span class="line"><span class="built_in">print</span>(g.__next__())       <span class="comment">#第一次调用返回：1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(g))            <span class="comment">#把剩下元素变成列表：[2, 3, 5, 8, 13]</span></span><br></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>作用：静态方法可以更好的组织代码，防止代码变大后变得比较混乱。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am a static method&quot;</span>)</span><br><span class="line">        </span><br><span class="line">d = Dog(<span class="string">&quot;ChenRonghua&quot;</span>)</span><br><span class="line">d.eat()                     <span class="comment">#方法1：使用实例调用     打印：I am a static method</span></span><br><span class="line">Dog.eat()                   <span class="comment">#方法2：使用类直接调用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>作用：无需实例化直接被类调用  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name = <span class="string">&#x27;类变量&#x27;</span> <span class="comment">#在这里如果不定义类变量仅定义实例变量依然报错</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = <span class="string">&#x27;实例变量&#x27;</span></span><br><span class="line">        self.name = name</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self,food</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s is eating %s&quot;</span>%(self.name,food))</span><br><span class="line">Dog.eat(<span class="string">&#x27;baozi&#x27;</span>)                   <span class="comment">#方法1：使用类直接调用  打印：类变量 is eating baozi</span></span><br><span class="line">d = Dog(<span class="string">&quot;ChenRonghua&quot;</span>)          </span><br><span class="line">d.eat(<span class="string">&quot;包子&quot;</span>)                      <span class="comment">#方法2：使用实例d调用   打印：类变量 is eating 包子</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法"></a>属性方法</h2><p>作用：属性方法把一个方法变成一个属性，隐藏了实现细节,调用时不必加括号直接d.eat即可调用self.eat()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; %s is eating&quot;</span> % self.name)</span><br><span class="line">d = Dog(<span class="string">&quot;ChenRonghua&quot;</span>)</span><br><span class="line">d.eat</span><br></pre></td></tr></table></figure><h2 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__new__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span>.__new__(cls)   <span class="comment"># 必须返回父类的__new__方法，否则不不执行__init__方法，无法创建实例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__init__&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):                <span class="comment"># 作用：打印实例时显示指定字符串，而不是内存地址</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__str__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):        <span class="comment"># 当执行C()(*args) 或者 s1(*args) 就会执行__call__</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__call__&#x27;</span>,*args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):                <span class="comment"># 作用：清除无用的实例对内存的暂用</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__del__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1、实例化时机会执行__new__、__init__</span></span><br><span class="line">s1 = Student(<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、执行 实例()  就会执行__call__ 方法，并将参数传递给__call__函数</span></span><br><span class="line">s1(<span class="string">&#x27;call01&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、当打印实例时就会执行 __str__ 方法下返回的字符串（默认返回的实例地址）</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、析构方法：当删除实例时就会调用 __del__ 方法</span></span><br><span class="line"><span class="keyword">del</span> s1</span><br><span class="line"><span class="comment"># 析构方法作用：在程序结束后会自动执行析构方法删除所有实例</span></span><br><span class="line"><span class="comment"># 但是在程序运行时有很多实例是无用的，但是python内存回收机制却不会自动删除他们，这样就浪费内存</span></span><br><span class="line"><span class="comment"># 我们可以执行 del s1 ，那么在程序运行时，python内存回收机制会检测到这些实例时无用的，才会删除</span></span><br><span class="line"><span class="comment"># 其实我们执行del s1，并没有回收内存，只不过是摘除门牌号，python内存回收机制发现没有门牌号后会自动回收内存</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="lambda基本使用"><a href="#lambda基本使用" class="headerlink" title="lambda基本使用"></a>lambda基本使用</h2><p>格式：lambda的一般形式是关键字lambda后面跟一个或多个参数，紧跟一个冒号，之后是一个表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x,y,z:x+y+z</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))                    <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line">my_lambda = <span class="keyword">lambda</span> arg : arg + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(my_lambda(<span class="number">10</span>))                <span class="comment"># 11</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h2><p>作用：三元运算，又称三目运算，主要作用是减少代码量，是对简单的条件语句的缩写<br>三元运算格式：  result&#x3D;值1 if x&lt;y else 值2    if条件成立result&#x3D;1,否则result&#x3D;2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;Tom&#x27;</span> <span class="keyword">if</span> <span class="number">1</span> == <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;fly&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="comment"># 运行结果： Tom</span></span><br><span class="line">f = <span class="keyword">lambda</span> x:x <span class="keyword">if</span> x % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">else</span> x + <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">10</span>))                    <span class="comment"># 110</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何将一个列表快速（打乱）输出"><a href="#如何将一个列表快速（打乱）输出" class="headerlink" title="如何将一个列表快速（打乱）输出"></a>如何将一个列表快速（打乱）输出</h2><pre><code>给定一串排好序的列表a=[1,2,3,4,5],设计一个函数，打乱这个列表（即每次输出列表元素的顺序要不一致）random.shuffle() 随机排列输出</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">    random.shuffle(a)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="队列实现栈"><a href="#队列实现栈" class="headerlink" title="队列实现栈"></a>队列实现栈</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">travel</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.items:</span><br><span class="line">            <span class="built_in">print</span>(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.items.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这个是原来的pop函数，更名为pop1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop1</span>(<span class="params">self</span>):</span><br><span class="line">        self.items.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要改造下pop函数，使得这个函数有返回值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.items.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列的基本功能的测试</span></span><br><span class="line">q = Queue()</span><br><span class="line"><span class="built_in">print</span>(q.isEmpty())  <span class="comment"># 应是True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    q.push(i)</span><br><span class="line">q.travel()  <span class="comment"># 0 1 2 3 4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    q.pop1()</span><br><span class="line">q.travel()  <span class="comment"># 3 4</span></span><br><span class="line"><span class="built_in">print</span>(q.size())  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------&#x27;</span>)</span><br><span class="line"><span class="comment"># 队列是先进先出，栈是先进后出</span></span><br><span class="line"><span class="comment"># 都是从尾加入，队列是从头出，栈是从尾出，因此需要针对出的这一块进行模拟</span></span><br><span class="line">q1 = Queue()</span><br><span class="line"><span class="comment"># 进的方式是一样的，下面初始化一下</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    q1.push(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;队列的出队顺序：&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">q1.travel()</span><br><span class="line"><span class="comment"># 假设只用一个栈，要使得输出的序列反过来（既要完成“出”的任务还要保证打印顺序）</span></span><br><span class="line"><span class="comment"># q1 出队的数加到末尾</span></span><br><span class="line">N = q1.size()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;栈的出栈顺序：  &#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 下面的循环：第一次要把最后一个数移到开头需要进行N-1次，然后扔掉这个数，现在items的长度剩下N-1，</span></span><br><span class="line"><span class="comment"># 那么下一次将最后一个元素（即原来的倒数第二个元素）移到开头需要进行N-1-1即N-2次...</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N - j):</span><br><span class="line">        q1.push(q1.pop())</span><br><span class="line">    <span class="built_in">print</span>(q1.items[<span class="number">0</span>], end=<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 打印一下当前的开头</span></span><br><span class="line">    q1.pop1()  <span class="comment"># 然后取出这个出头鸟</span></span><br></pre></td></tr></table></figure><h2 id="反转字符数组"><a href="#反转字符数组" class="headerlink" title="反转字符数组"></a>反转字符数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27; &#x27;</span>]</span><br><span class="line"><span class="comment">#反转为：[&#x27; &#x27;, &#x27;n&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">s</span>):</span><br><span class="line">    result = []</span><br><span class="line">    max_index = <span class="built_in">len</span>(s)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">        result += s[max_index-index]</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">result = func(s) <span class="comment">##[&#x27; &#x27;, &#x27;n&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="反转一条英语句里的每个单词"><a href="#反转一条英语句里的每个单词" class="headerlink" title="反转一条英语句里的每个单词"></a>反转一条英语句里的每个单词</h2><pre><code>例如：Let&#39;s take LeetCode contest反转为：s&#39;teL ekat edoCteeL tsetnoc</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reserverWords</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)[::-<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reserverWords(<span class="string">&quot;Let&#x27;s take LeetCode contest&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第三方登录--码云</title>
      <link href="/2020/06/02/python/%E6%A1%86%E6%9E%B6/Django_vue/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95--%E7%A0%81%E4%BA%91/"/>
      <url>/2020/06/02/python/%E6%A1%86%E6%9E%B6/Django_vue/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95--%E7%A0%81%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="Oauth2-认证基本流程"><a href="#Oauth2-认证基本流程" class="headerlink" title="Oauth2 认证基本流程"></a>Oauth2 认证基本流程</h2><p><a href="https://imgtu.com/i/XgOFZ8"><img src="https://s1.ax1x.com/2022/06/12/XgOFZ8.png" alt="XgOFZ8.png"></a></p><h2 id="1-首先注册码云的账号：gitee-com"><a href="#1-首先注册码云的账号：gitee-com" class="headerlink" title="1.首先注册码云的账号：gitee.com"></a>1.首先注册码云的账号：gitee.com</h2><h2 id="2-创建第三方应用："><a href="#2-创建第三方应用：" class="headerlink" title="2.创建第三方应用："></a>2.创建第三方应用：</h2><h3 id="注册完成后-gt-点击头像-gt-设置-gt-第三方应用-左下角-gt-创建应用-gt"><a href="#注册完成后-gt-点击头像-gt-设置-gt-第三方应用-左下角-gt-创建应用-gt" class="headerlink" title="注册完成后 &gt; 点击头像 &gt; 设置 &gt; 第三方应用(左下角) &gt; 创建应用 &gt;"></a>注册完成后 &gt; 点击头像 &gt; 设置 &gt; 第三方应用(左下角) &gt; 创建应用 &gt;</h3><p>应用名称：自己随便编一个就可以了<br>应用描述：（同上）<br>应用主页：随便写一个自己的网页<br>应用回调地址：<img src="https://i.loli.net/2020/06/02/U1YSPQlfXxmwBik.png" alt="应用回调地址"><br>权限：如果你没特殊的作用，就按默认的提交</p><h2 id="3-创建完以后，会给你一个-Client-ID、Client-Secret-后面面要用到"><a href="#3-创建完以后，会给你一个-Client-ID、Client-Secret-后面面要用到" class="headerlink" title="3.创建完以后，会给你一个 Client ID、Client Secret ,后面面要用到"></a>3.创建完以后，会给你一个 Client ID、Client Secret ,后面面要用到</h2><h3 id="我们也可以参考下官方文档：https-gitee-com-api-v5-oauth-doc"><a href="#我们也可以参考下官方文档：https-gitee-com-api-v5-oauth-doc" class="headerlink" title="我们也可以参考下官方文档：https://gitee.com/api/v5/oauth_doc#/"></a>我们也可以参考下官方文档：<a href="https://gitee.com/api/v5/oauth_doc#/">https://gitee.com/api/v5/oauth_doc#/</a></h3><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><ol><li>应用通过 浏览器 或 Webview 将用户引导到码云三方认证页面上（ GET请求 ）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Gitee</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;https://gitee.com/oauth/authorize?client_id=你的应用id&amp;redirect_uri=http://localhost:8000/gitee_back&amp;response_type=code&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>这个引导呢也可以是在前端(这个和上面的任选其一)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//码云第三方登录</span><br><span class="line">          mayun:function()&#123;</span><br><span class="line"></span><br><span class="line">            let client_id = &quot;你的Client ID&quot;;</span><br><span class="line">            let redirect_uri = &quot;你的回调网址&quot;;</span><br><span class="line"></span><br><span class="line">            let url = &quot;https://gitee.com/oauth/authorize?client_id=&quot;+client_id+&quot;&amp;redirect_uri=&quot;+redirect_uri+&quot;&amp;response_type=code&amp;scope=user_info&quot;;</span><br><span class="line">            </span><br><span class="line">            //跳转</span><br><span class="line">            window.location.href = url</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br></pre></td></tr></table></figure><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>如果用户授权登录成功，gitee则会通过回调网址将code传递给第三方应用，<br>此时三方应用可以通过code换取 access_token ！！！  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GiteeBack</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line"></span><br><span class="line">        code = request.GET.get(<span class="string">&quot;code&quot;</span>,<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        res = requests.post(<span class="string">&quot;https://gitee.com/oauth/token?grant_type=authorization_code&amp;code=%s&amp;client_id=你的应用id&amp;redirect_uri=http://localhost:8000/gitee_back&amp;client_secret=你的应用秘钥&quot;</span> % code)</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/02/rvYCELmHd6hSZsR.png" alt="res.text打印结果"></p><h3 id="第三步：根据得到的数据获取access-token"><a href="#第三步：根据得到的数据获取access-token" class="headerlink" title="第三步：根据得到的数据获取access_token"></a>第三步：根据得到的数据获取access_token</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_token = res.json()[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(access_token)</span><br></pre></td></tr></table></figure><h3 id="最后一步，码云认证服务器成功返回-access-token，三方应用通过-access-token-访问-Open-API-使用用户数据。"><a href="#最后一步，码云认证服务器成功返回-access-token，三方应用通过-access-token-访问-Open-API-使用用户数据。" class="headerlink" title="最后一步，码云认证服务器成功返回 access_token，三方应用通过 access_token 访问 Open API 使用用户数据。"></a>最后一步，码云认证服务器成功返回 access_token，三方应用通过 access_token 访问 Open API 使用用户数据。</h3><p>这里我们以基础用户信息接口为例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(&quot;https://gitee.com/api/v5/user?access_token=获取到的accesstoken&quot;)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>打印结果所示：<br><img src="https://i.loli.net/2020/06/02/atKnoe35phYLkGi.png" alt="r.text打印结果"></p><p>这样就可以结局结果获取你想要的数据。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 第三方登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery服务搭建及使用</title>
      <link href="/2020/06/01/celery/celery%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/01/celery/celery%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h1><h2 id="1-首先要安装以下几个模块"><a href="#1-首先要安装以下几个模块" class="headerlink" title="1. 首先要安装以下几个模块"></a>1. 首先要安装以下几个模块</h2><p>注：要对应版本号，因为此版本号比较稳定，经过测试没有bug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install celery==4.4.2</span><br><span class="line">pip3 install eventlet==0.25.2</span><br><span class="line">pip3 install Django==2.0.4</span><br></pre></td></tr></table></figure><h2 id="2-在-settings-py-里进行相关配置"><a href="#2-在-settings-py-里进行相关配置" class="headerlink" title="2. 在 settings.py 里进行相关配置"></a>2. 在 settings.py 里进行相关配置</h2><p><a href="https://imgtu.com/i/XgDX4J"><img src="https://s1.ax1x.com/2022/06/12/XgDX4J.png" alt="XgDX4J.png"></a></p><h2 id="3-在setting-py-的同级目录下创建-celery-py配置文件（这是一个启动celery服务配置）"><a href="#3-在setting-py-的同级目录下创建-celery-py配置文件（这是一个启动celery服务配置）" class="headerlink" title="3. 在setting.py 的同级目录下创建 celery.py配置文件（这是一个启动celery服务配置）"></a>3. 在setting.py 的同级目录下创建 celery.py配置文件（这是一个启动celery服务配置）</h2><p>在celery.py配置文件写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;mydjango.settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册Celery的APP</span></span><br><span class="line">app = Celery(<span class="string">&#x27;mydjango&#x27;</span>)</span><br><span class="line"><span class="comment"># 绑定配置文件</span></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>, namespace=<span class="string">&#x27;CELERY&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动发现各个app下的tasks.py文件</span></span><br><span class="line">app.autodiscover_tasks()</span><br></pre></td></tr></table></figure><h2 id="4-同样是在同级目录下-init-py配置文件写入：（这是一个预加载celery文件）"><a href="#4-同样是在同级目录下-init-py配置文件写入：（这是一个预加载celery文件）" class="headerlink" title="4. 同样是在同级目录下__init__.py配置文件写入：（这是一个预加载celery文件）"></a>4. 同样是在同级目录下__init__.py配置文件写入：（这是一个预加载celery文件）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">&#x27;celery_app&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="5-在你当前使用的子应用下创建tasks-py文件，进行自定义异步任务方法"><a href="#5-在你当前使用的子应用下创建tasks-py文件，进行自定义异步任务方法" class="headerlink" title="5.在你当前使用的子应用下创建tasks.py文件，进行自定义异步任务方法"></a>5.在你当前使用的子应用下创建tasks.py文件，进行自定义异步任务方法</h2><p>  也就是写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.task <span class="keyword">import</span> task</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义异步任务</span></span><br><span class="line"><span class="meta">@task()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">async_test</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;异步任务&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;123123&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-配置完重启下你的Django服务"><a href="#6-配置完重启下你的Django服务" class="headerlink" title="6. 配置完重启下你的Django服务"></a>6. 配置完重启下你的Django服务</h2><h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h2><p>写一个简单的视图来调用异步任务队列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> tasks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#触发异步任务视图</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">celery_test</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用异步任务</span></span><br><span class="line">res = tasks.async_test.delay()</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回结果</span></span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;task_id&#x27;</span>:res.task_id&#125;)</span><br></pre></td></tr></table></figure><h2 id="8-在url里配置路由"><a href="#8-在url里配置路由" class="headerlink" title="8. 在url里配置路由"></a>8. 在url里配置路由</h2><h1 id="二、启动celery服务"><a href="#二、启动celery服务" class="headerlink" title="二、启动celery服务"></a>二、启动celery服务</h1><h2 id="1-cmd进入你的项目目录下启动celery服务"><a href="#1-cmd进入你的项目目录下启动celery服务" class="headerlink" title="1. cmd进入你的项目目录下启动celery服务"></a>1. cmd进入你的项目目录下启动celery服务</h2><p>以这种协程的方式启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery worker -A mydjango -l info -P eventlet</span><br></pre></td></tr></table></figure><p>注：这里的mydjango是你的项目名称</p><h2 id="2-如下图所示，就是成功启动了celery服务"><a href="#2-如下图所示，就是成功启动了celery服务" class="headerlink" title="2. 如下图所示，就是成功启动了celery服务"></a>2. 如下图所示，就是成功启动了celery服务</h2><p><a href="https://imgtu.com/i/XgDHBT"><img src="https://s1.ax1x.com/2022/06/12/XgDHBT.png" alt="XgDHBT.png"></a></p><h2 id="3-启动redis服务"><a href="#3-启动redis服务" class="headerlink" title="3. 启动redis服务"></a>3. 启动redis服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><ol><li>在Chrome浏览器输入访问刚刚的视图路径，正确打印为：<br><a href="https://imgtu.com/i/XgD53n"><img src="https://s1.ax1x.com/2022/06/12/XgD53n.md.png" alt="XgD53n.md.png"></a></li></ol><h2 id="4-访问完以后你的celery服务会打印如下内容："><a href="#4-访问完以后你的celery服务会打印如下内容：" class="headerlink" title="4. 访问完以后你的celery服务会打印如下内容："></a>4. 访问完以后你的celery服务会打印如下内容：</h2><p><a href="https://imgtu.com/i/XgDbHU"><img src="https://s1.ax1x.com/2022/06/12/XgDbHU.png" alt="XgDbHU.png"></a></p><h2 id="5-这时你可以去redis服务下获取一个值"><a href="#5-这时你可以去redis服务下获取一个值" class="headerlink" title="5. 这时你可以去redis服务下获取一个值"></a>5. 这时你可以去redis服务下获取一个值</h2><p>输入：get celery-task-meta-“你网页上的task_id的值”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get celery-task-meta-81f47655-3276-4134-8741-9dd1cc3792d3</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/XgDzg1"><img src="https://s1.ax1x.com/2022/06/12/XgDzg1.png" alt="XgDzg1.png"></a></p><p>这样你的celery服务的搭建才算是成功了</p><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p>这是我在使用过程中遇到的一个小坑，当你用get请求的时候可以用：celery worker -A mydjango -l info -P eventlet<br>命令执行，但是当你用post请求时这个命令是无法正确运行，这时要用: celery worker -A mydjango -l info –pool&#x3D;solo命令执行<br>或者celery worker -A mydjango –loglevel&#x3D;info –pool&#x3D;solo</p>]]></content>
      
      
      
        <tags>
            
            <tag> celery异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery定时服务</title>
      <link href="/2020/06/01/celery/celery%E5%AE%9A%E6%97%B6%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/06/01/celery/celery%E5%AE%9A%E6%97%B6%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><a href="https://imgtu.com/i/XgDLEF"><img src="https://s1.ax1x.com/2022/06/12/XgDLEF.png" alt="XgDLEF.png"></a></p><ol><li><p>在配置文件setting.py 文件内配置，直接写入一下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入celery定时模块</span></span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">CELERY_BEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="comment">#定义定时任务</span></span><br><span class="line">    <span class="string">&#x27;celery_work&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>:<span class="string">&quot;myapp.tasks.create_text&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>:timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>运行celery定时服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A mydjango beat -l info</span><br></pre></td></tr></table></figure></li><li><p>定时在项目中写入文件<br>需求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用定时任务每两小时写入一个celery.log文件，采用追加的方式，将定时任务执行的时间点吸入日志</span><br></pre></td></tr></table></figure></li></ol><p>实现步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 创建celery日志    （task同上篇文章）</span></span><br><span class="line"><span class="meta">@task </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_text</span>():</span><br><span class="line">    time = datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d-%H:%M:%S&#x27;</span>)</span><br><span class="line">    text_h = datetime.now().strftime(<span class="string">&#x27;%H&#x27;</span>)</span><br><span class="line">    text_m = datetime.now().strftime(<span class="string">&#x27;%M&#x27;</span>)</span><br><span class="line">    text_s = datetime.now().strftime(<span class="string">&#x27;%S&#x27;</span>)</span><br><span class="line">    filename = <span class="string">&#x27;%s小时%s分%s秒&#x27;</span>%(text_h,text_m,text_s)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C:\\users\\wanghan\\Desktop\\shixun\\mydiango_dev\\%s&#x27;</span> % filename + <span class="string">&#x27;.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(time)</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="built_in">print</span>(time)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;celery&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> celery异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机短信验证码</title>
      <link href="/2020/05/30/python/%E6%A1%86%E6%9E%B6/Django_vue/%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2020/05/30/python/%E6%A1%86%E6%9E%B6/Django_vue/%E6%89%8B%E6%9C%BA%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><pre><code>首先注册腾讯云服务：https://cloud.tencent.com注册成功后，腾讯云会自动生成一个短信应用，如果没有默认应用，需要新建一下</code></pre><p><a href="https://imgtu.com/i/XgrvdS"><img src="https://s1.ax1x.com/2022/06/12/XgrvdS.png" alt="XgrvdS.png"></a></p><pre><code>记录一下应用的 appid 以及 appkey 一会要用到之后配置短信的签名，签名顾名思义，用来限制短信接口的权限，防止被恶意调用，同时签名需要腾讯客服人工审核，大概需要两个小时左右。</code></pre><p><a href="https://imgtu.com/i/Xgs9Rs"><img src="https://s1.ax1x.com/2022/06/12/Xgs9Rs.png" alt="Xgs9Rs.png"></a></p><pre><code>这里推荐使用小程序来做签名类型，同时签名内容是自定义的，证明类型很简单，只需要去微信小程序后台界面截个图即可。配置好签名，还需要配置一下短信模板，模板的含义也很简单，就是给用户发送的短信内容</code></pre><p><a href="https://imgtu.com/i/XgsSiQ"><img src="https://s1.ax1x.com/2022/06/12/XgsSiQ.png" alt="XgsSiQ.png"></a></p><pre><code>模板中的&#123;&#125;符号是类似通配符的东西，发送短信时用变量进行替换，注意表明索引数量，模板也需要腾讯客服人工审核，大概需要两个小时左右。另外短信长度最好不要超过70字，超过以后长短信就会按每67字一条来计算，那就亏大发了。以上就是前期的配置，下面安装腾讯云短信的sdk</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install qcloudsms_py</span><br></pre></td></tr></table></figure><pre><code>编写发送脚本</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 短信应用SDK AppID</span></span><br><span class="line">appid = 你的appid  <span class="comment"># SDK AppID是1400开头</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 短信应用SDK AppKey</span></span><br><span class="line">appkey = <span class="string">&quot;你的appkey&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要发送短信的手机号码</span></span><br><span class="line">phone_numbers = [<span class="string">&quot;你要发送的手机号&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 短信模板ID，需要在短信应用中申请</span></span><br><span class="line">template_id = 在模板列表里获取  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 签名</span></span><br><span class="line">sms_sign = <span class="string">&quot;刘悦的技术博客&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> qcloudsms_py <span class="keyword">import</span> SmsSingleSender</span><br><span class="line"><span class="keyword">from</span> qcloudsms_py.httpclient <span class="keyword">import</span> HTTPError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line"></span><br><span class="line">ssender = SmsSingleSender(appid, appkey)</span><br><span class="line">params = [<span class="string">&quot;6666&quot;</span>,<span class="string">&quot;5&quot;</span>]  <span class="comment"># 当模板没有参数时，`params = []`</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = ssender.send_with_param(<span class="number">86</span>, phone_numbers[<span class="number">0</span>],</span><br><span class="line">        template_id, params, sign=sms_sign, extend=<span class="string">&quot;&quot;</span>, ext=<span class="string">&quot;&quot;</span>)  <span class="comment"># 签名参数不允许为空串</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><pre><code>整个流程没什么难度，需要注意一点这里为了避免ssl证书的问题需要导入ssl库单独设置一下，最后查看一下结果</code></pre><p><a href="https://imgtu.com/i/XgspGj"><img src="https://s1.ax1x.com/2022/06/12/XgspGj.jpg" alt="XgspGj.jpg"></a></p><pre><code>同时腾讯云服务短信比Twilio体验好的一点在于它具有详细的统计后台，方便我们对短信到达率进行监控和统计，对海量用户的群发也比较友好。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QQ邮箱验证码</title>
      <link href="/2020/05/28/python/%E5%BA%94%E7%94%A8/QQ%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2020/05/28/python/%E5%BA%94%E7%94%A8/QQ%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="一、流程图"><a href="#一、流程图" class="headerlink" title="一、流程图"></a>一、流程图</h3><p><a href="https://imgtu.com/i/XgroPH"><img src="https://s1.ax1x.com/2022/06/12/XgroPH.png" alt="XgroPH.png"></a></p><h3 id="二、操作流程"><a href="#二、操作流程" class="headerlink" title="二、操作流程"></a>二、操作流程</h3><h2 id="1-先进入网站QQ邮箱"><a href="#1-先进入网站QQ邮箱" class="headerlink" title="1.先进入网站QQ邮箱"></a>1.先进入网站<a href="http://mail.qq.com/">QQ邮箱</a></h2><h2 id="2-点击设置"><a href="#2-点击设置" class="headerlink" title="2.点击设置"></a>2.点击设置</h2><p><a href="https://imgtu.com/i/XgrlVS"><img src="https://s1.ax1x.com/2022/06/12/XgrlVS.png" alt="XgrlVS.png"></a></p><h2 id="3-点击账户"><a href="#3-点击账户" class="headerlink" title="3.点击账户"></a>3.点击账户</h2><p><a href="https://imgtu.com/i/Xgr35Q"><img src="https://s1.ax1x.com/2022/06/12/Xgr35Q.png" alt="Xgr35Q.png"></a></p><h2 id="4-开启下面的-POP3-x2F-IMAP-x2F-SMTP-x2F-Exchange-x2F-CardDAV-x2F-CalDAV服务"><a href="#4-开启下面的-POP3-x2F-IMAP-x2F-SMTP-x2F-Exchange-x2F-CardDAV-x2F-CalDAV服务" class="headerlink" title="4.开启下面的 POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV&#x2F;CalDAV服务"></a>4.开启下面的 POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV&#x2F;CalDAV服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：开启服务后会给你一个授权码，这个一定要保存好</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/XgrMb8"><img src="https://s1.ax1x.com/2022/06/12/XgrMb8.png" alt="XgrMb8.png"></a></p><h2 id="QQ邮件服务器配置"><a href="#QQ邮件服务器配置" class="headerlink" title="QQ邮件服务器配置"></a>QQ邮件服务器配置</h2><p><img src="https://s1.ax1x.com/2020/07/06/UPonOS.png" alt="QQ邮件服务器配置"></p><h2 id="三、测试–发送QQ邮箱"><a href="#三、测试–发送QQ邮箱" class="headerlink" title="三、测试–发送QQ邮箱"></a>三、测试–发送QQ邮箱</h2><p>测试一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义参数</span></span><br><span class="line"><span class="comment">#我的邮箱</span></span><br><span class="line">my_mail = <span class="string">&quot;自己的QQ邮箱地址&quot;</span></span><br><span class="line"><span class="comment">#授权码</span></span><br><span class="line">my_pass = <span class="string">&quot;开启smtp服务时的授权码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义发送邮件的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mail</span>(<span class="params">subject,content,mailaddress</span>):</span><br><span class="line">    <span class="comment">#声明邮件对象</span></span><br><span class="line">    msg = MIMEText(content,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置smtp服务器</span></span><br><span class="line">    server = smtplib.SMTP_SSL(<span class="string">&#x27;smtp.qq.com&#x27;</span>,<span class="number">465</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#登录邮箱</span></span><br><span class="line">    server.login(my_mail,my_pass)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#发送邮件</span></span><br><span class="line">    <span class="comment">#第一个参数表示邮箱地址，第二个参数是一个list，表示收件人地址，可以多个；第三个参数是邮件正文，这里as_string()是把MIMEText对象变成str。</span></span><br><span class="line">    server.sendmail(my_mail,[mailaddress],msg.as_string())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#关闭smtp链接</span></span><br><span class="line">    server.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#标题 内容 收件人邮箱地址</span></span><br><span class="line">    mail(<span class="string">&#x27;QQ邮箱测试&#x27;</span>,<span class="string">&#x27;测试&#x27;</span>,<span class="string">&#x27;收件人邮箱地址&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-展示效果图："><a href="#2-展示效果图：" class="headerlink" title="2.展示效果图："></a>2.展示效果图：</h2><p><img src="https://s1.ax1x.com/2020/07/06/UPq954.png" alt="效果图"></p><p>可以看到这封邮件有内容，但是并没有发件人和主题，这里可以用到另外一个模块formataddr来给我们的邮件添加发件人和主题：</p><p>测试二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> formataddr</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义参数</span></span><br><span class="line"><span class="comment">#我的邮箱</span></span><br><span class="line">my_mail = <span class="string">&quot;发送者的QQ邮箱&quot;</span></span><br><span class="line"><span class="comment">#授权码</span></span><br><span class="line">my_pass = <span class="string">&quot;授权码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义发送邮件的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mail</span>(<span class="params">subject,content,mailaddress</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#声明邮件对象</span></span><br><span class="line">    msg = MIMEText(content,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置发送对象</span></span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = formataddr([<span class="string">&quot;你的称呼&quot;</span>,my_mail])</span><br><span class="line">    <span class="comment"># 设置收件方对象</span></span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = formataddr([<span class="string">&quot;尊敬的客户&quot;</span>,mailaddress])</span><br><span class="line">    <span class="comment"># 设置标题</span></span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = subject</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置smtp服务器</span></span><br><span class="line">    server = smtplib.SMTP_SSL(<span class="string">&#x27;smtp.qq.com&#x27;</span>,<span class="number">465</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#登录邮箱</span></span><br><span class="line">    server.login(my_mail,my_pass)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#发送邮件</span></span><br><span class="line">    <span class="comment">#第一个参数表示邮箱地址，第二个参数是一个list，表示收件人地址，可以多个；第三个参数是邮件正文，这里as_string()是把MIMEText对象变成str。</span></span><br><span class="line">    server.sendmail(my_mail,[mailaddress],msg.as_string())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#关闭smtp链接</span></span><br><span class="line">    server.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#标题 内容 收件人邮箱地址</span></span><br><span class="line">    mail(<span class="string">&#x27;QQ邮箱测试&#x27;</span>,<span class="string">&#x27;测试&#x27;</span>,<span class="string">&#x27;收件人的邮箱地址&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-展示效果图"><a href="#2-展示效果图" class="headerlink" title="2.展示效果图"></a>2.展示效果图</h2><p>这时就有主题和发送人了<br><img src="https://s1.ax1x.com/2020/07/06/UPq954.png" alt="效果图"></p><h3 id="四、应用-QQ邮箱发送验证码"><a href="#四、应用-QQ邮箱发送验证码" class="headerlink" title="四、应用-QQ邮箱发送验证码"></a>四、应用-QQ邮箱发送验证码</h3><h2 id="1-生成随机验证码"><a href="#1-生成随机验证码" class="headerlink" title="1.生成随机验证码"></a>1.生成随机验证码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get_random_str():</span><br><span class="line">    # 验证码是由 字母a~z  A~Z 数字 0~9 组成</span><br><span class="line">    # 在 ascii 码中 小写a的起点是97 大写A起点是65</span><br><span class="line">    num_ = [str(var) for var in range(0, 9)]  # 数字的</span><br><span class="line">    # 使用sample 在列表中随机生成6个任意字母数字</span><br><span class="line">    return &#x27;&#x27;.join(random.sample(num_, 4))</span><br></pre></td></tr></table></figure><h3 id="2-发送验证码到QQ邮箱"><a href="#2-发送验证码到QQ邮箱" class="headerlink" title="2.发送验证码到QQ邮箱"></a>2.发送验证码到QQ邮箱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> formataddr</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=host,port=port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义参数</span></span><br><span class="line">my_mail = <span class="string">&quot;自己的QQ邮箱&quot;</span></span><br><span class="line"><span class="comment">#授权码</span></span><br><span class="line">my_pass = <span class="string">&quot;自己的授权码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Send_QQ_Mail</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment">#定义发送邮件的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="comment">#接入用户输入的邮箱地址</span></span><br><span class="line">        email_address = request.data.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(email_address)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#定义标题</span></span><br><span class="line">        subject = <span class="string">&#x27;验证码验证服务&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#生成随机验证码</span></span><br><span class="line">        code = get_random_str()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#发送内容</span></span><br><span class="line">        content = <span class="string">&quot;您的验证码是%s，有效期为1分钟&quot;</span>%code</span><br><span class="line"></span><br><span class="line">        <span class="comment">#获取redis中的邮箱</span></span><br><span class="line">        token = r.get(email_address)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查看Redis中是否已有此邮箱</span></span><br><span class="line">        <span class="keyword">if</span> token:</span><br><span class="line">            res = &#123;&#125;</span><br><span class="line">            res[<span class="string">&#x27;code&#x27;</span>] = <span class="number">402</span></span><br><span class="line">            res[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;请一分钟后再次发送&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(token)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(res)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#声明邮件对象</span></span><br><span class="line">            msg = MIMEText(content,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置发送方对象</span></span><br><span class="line">            msg[<span class="string">&#x27;From&#x27;</span>] = formataddr([<span class="string">&#x27;在线教育平台&#x27;</span>,my_mail])</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置收件方对象</span></span><br><span class="line">            msg[<span class="string">&#x27;To&#x27;</span>] = formataddr([<span class="string">&#x27;尊敬的客户&#x27;</span>,email_address])</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置标题</span></span><br><span class="line">            msg[<span class="string">&#x27;Subject&#x27;</span>] = subject</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置smtp服务器</span></span><br><span class="line">            server = smtplib.SMTP_SSL(<span class="string">&quot;smtp.qq.com&quot;</span>,<span class="number">465</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#登录邮箱</span></span><br><span class="line">            server.login(my_mail,my_pass)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#发送邮件</span></span><br><span class="line">            server.sendmail(my_mail,[email_address],msg.as_string())</span><br><span class="line"></span><br><span class="line">            <span class="comment">#关闭smtp链接</span></span><br><span class="line">            server.quit()</span><br><span class="line"></span><br><span class="line">            <span class="comment">#将邮箱地址和验证码存到 redis</span></span><br><span class="line">            r.<span class="built_in">set</span>(email_address,code)</span><br><span class="line">            <span class="comment">#设置访问周期</span></span><br><span class="line">            r.expire(email_address,<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">            res = &#123;&#125;</span><br><span class="line">            res[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            res[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;验证码已发送&quot;</span></span><br><span class="line">            res[<span class="string">&#x27;or&#x27;</span>] = r.get(email_address)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(res)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git分支</title>
      <link href="/2020/05/27/git/git%E5%88%86%E6%94%AF/"/>
      <url>/2020/05/27/git/git%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="1-查看当前分支"><a href="#1-查看当前分支" class="headerlink" title="1.查看当前分支"></a>1.查看当前分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="2-建立分支"><a href="#2-建立分支" class="headerlink" title="2.建立分支"></a>2.建立分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><h3 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3.切换分支"></a>3.切换分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><h3 id="4-将分支提交到线上"><a href="#4-将分支提交到线上" class="headerlink" title="4.将分支提交到线上"></a>4.将分支提交到线上</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin dev</span><br></pre></td></tr></table></figure><h3 id="5-修改分支内容后同步到线上"><a href="#5-修改分支内容后同步到线上" class="headerlink" title="5.修改分支内容后同步到线上"></a>5.修改分支内容后同步到线上</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &quot;first&quot;</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h3 id="6-合并分支-合并完提交"><a href="#6-合并分支-合并完提交" class="headerlink" title="6.合并分支(合并完提交)"></a>6.合并分支(合并完提交)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="7-查看所有分支"><a href="#7-查看所有分支" class="headerlink" title="7.查看所有分支"></a>7.查看所有分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h3 id="8-删除本地分支"><a href="#8-删除本地分支" class="headerlink" title="8.删除本地分支"></a>8.删除本地分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h3 id="9-将删除操作同步到线上"><a href="#9-将删除操作同步到线上" class="headerlink" title="9.将删除操作同步到线上"></a>9.将删除操作同步到线上</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete dev</span><br></pre></td></tr></table></figure><h3 id="10-远程拉取代码"><a href="#10-远程拉取代码" class="headerlink" title="10.远程拉取代码"></a>10.远程拉取代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分页逻辑</title>
      <link href="/2020/05/13/python/%E6%A1%86%E6%9E%B6/Django_vue/%E5%88%86%E9%A1%B5%E9%80%BB%E8%BE%91/"/>
      <url>/2020/05/13/python/%E6%A1%86%E6%9E%B6/Django_vue/%E5%88%86%E9%A1%B5%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-第一种自动分页"><a href="#1-第一种自动分页" class="headerlink" title="1. 第一种自动分页"></a>1. 第一种自动分页</h2><ol><li>后端分页逻辑<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#商品列表页</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsList</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment">#当前页</span></span><br><span class="line">        page = request.GET.get(<span class="string">&#x27;page&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#一页显示个数</span></span><br><span class="line">        size = request.GET.get(<span class="string">&#x27;size&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#计算从哪开始切</span></span><br><span class="line">        data_start = (<span class="built_in">int</span>(page)-<span class="number">1</span>) * <span class="built_in">int</span>(size)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#计算切到哪</span></span><br><span class="line">        data_end = <span class="built_in">int</span>(page) * <span class="built_in">int</span>(size)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#查询  切片操作</span></span><br><span class="line">        goods = Goods.objects.<span class="built_in">all</span>()[data_start:data_end]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#查询所有商品个数</span></span><br><span class="line">        count = Goods.objects.count()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#序列化</span></span><br><span class="line">        goods_ser = GoodsSer(goods,many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;data&#x27;</span>:goods_ser.data,<span class="string">&#x27;total&#x27;</span>:count&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-前端依赖HeyUI实现"><a href="#1-前端依赖HeyUI实现" class="headerlink" title="1. 前端依赖HeyUI实现"></a>1. 前端依赖HeyUI实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--      分页标签--&gt;</span><br><span class="line">      &lt;Pagination layout=&quot;pager,jumper&quot; small @change=&quot;get_goods&quot; v-model=&quot;pagination&quot;&gt;&lt;/Pagination&gt;</span><br></pre></td></tr></table></figure><p>设置变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//分页器变量</span><br><span class="line">      pagination:&#123;</span><br><span class="line">        //当前页</span><br><span class="line">        page:1,</span><br><span class="line">        size:1,</span><br><span class="line">        total:4,</span><br><span class="line">      &#125;,</span><br><span class="line">      //商品列表</span><br><span class="line">      goodslist:[],</span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted:function()&#123;</span><br><span class="line"></span><br><span class="line">    this.get_goods();</span><br><span class="line">  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//自动分页</span><br><span class="line"> //获取商品</span><br><span class="line">    get_goods:function()&#123;</span><br><span class="line"></span><br><span class="line">      //发送请求</span><br><span class="line">      this.axios.get(&#x27;http://localhost:8000/goodslist/&#x27;,&#123;params:&#123;&#x27;page&#x27;:this.pagination.page,&#x27;size&#x27;:this.pagination.size&#125;&#125;).then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        this.goodslist = res.data.data;</span><br><span class="line"></span><br><span class="line">        this.pagination.total = res.data.total;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    最后在上面对goodslist进行遍历</span><br></pre></td></tr></table></figure><h2 id="2-第二种自主分页"><a href="#2-第二种自主分页" class="headerlink" title="2. 第二种自主分页"></a>2. 第二种自主分页</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--      分页--&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">            &lt;a @click=&quot;get_goods_self(1)&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">    </span><br><span class="line">          &lt;Button v-show=&quot;lastpage&quot; @click=&quot;get_goods_self(lastpage)&quot;&gt;上一页&lt;/Button&gt;</span><br><span class="line">    </span><br><span class="line">          &lt;span v-for=&quot;item in last_page&quot;&gt;</span><br><span class="line">            &lt;a @click=&quot;get_goods_self(item)&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">    </span><br><span class="line">            &lt;a @click=&quot;get_goods_self(page)&quot;&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&amp;nbsp;</span><br><span class="line">    </span><br><span class="line">            &lt;span v-for=&quot;item in next_page&quot;&gt;</span><br><span class="line">            &lt;a @click=&quot;get_goods_self(item)&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">          &lt;Button v-show=&quot;nextpage&quot; @click=&quot;get_goods_self(nextpage)&quot;&gt;下一页&lt;/Button&gt;</span><br><span class="line">    </span><br><span class="line">          &lt;a @click=&quot;get_goods_self(allpage)&quot;&gt;尾页&lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>定义变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//商品列表</span><br><span class="line">goodslist_self:[],</span><br><span class="line">//偏移距离</span><br><span class="line">last_page:[],</span><br><span class="line">next_page:[],</span><br><span class="line">//商品总数</span><br><span class="line">total_self:0,</span><br><span class="line">//上一页</span><br><span class="line">lastpage:0,</span><br><span class="line">//下一页</span><br><span class="line">nextpage:0,</span><br><span class="line">//当前页</span><br><span class="line">page:1,</span><br><span class="line">//总页数</span><br><span class="line">allpage:0,</span><br><span class="line">//每页展示数</span><br><span class="line">size:1,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> mounted:function()&#123;</span><br><span class="line"></span><br><span class="line">   this.get_goods_self(1);</span><br><span class="line">  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">//自主分页</span><br><span class="line">    //获取商品</span><br><span class="line">    get_goods_self:function(page)&#123;</span><br><span class="line"></span><br><span class="line">      this.page = page;</span><br><span class="line">      // console.log(page);</span><br><span class="line"></span><br><span class="line">      //发送请求</span><br><span class="line">      this.axios.get(&#x27;http://localhost:8000/goodslist/&#x27;,&#123;params:&#123;page:page,size:this.size&#125;&#125;).then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        this.goodslist_self = res.data.data;</span><br><span class="line"></span><br><span class="line">        //商品总个数</span><br><span class="line">        this.total_self = res.data.total;</span><br><span class="line"></span><br><span class="line">        //判断上一页</span><br><span class="line">        if(page == 1)&#123;</span><br><span class="line">          this.lastpage = 0;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          this.lastpage = page - 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //计算总页数   Math.ceil() 向上取整</span><br><span class="line">        this.allpage = Math.ceil(this.total_self / this.size);</span><br><span class="line"></span><br><span class="line">        //判断下一页</span><br><span class="line">        if(page == this.allpage)&#123;</span><br><span class="line"></span><br><span class="line">          this.nextpage = 0;</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          this.nextpage = page + 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //设置偏移量</span><br><span class="line">      var move_page = 2;</span><br><span class="line"></span><br><span class="line">      var my_last = [];</span><br><span class="line"></span><br><span class="line">      //计算左侧偏移量</span><br><span class="line">      for(let i=page-move_page;i&lt;page;i++)&#123;</span><br><span class="line">        if(i&gt;0)&#123;</span><br><span class="line">          my_last.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //计算右侧偏移量</span><br><span class="line"></span><br><span class="line">      var my_next = [];</span><br><span class="line"></span><br><span class="line">      for(let i=page+1;i&lt;=page+move_page;i++)&#123;</span><br><span class="line">        if(i&lt;=this.allpage)&#123;</span><br><span class="line">          my_next.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // console.log(my_last);</span><br><span class="line">      // console.log(my_next);</span><br><span class="line"></span><br><span class="line">      this.last_page = my_last;</span><br><span class="line">      this.next_page = my_next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>将普通字段转换为JSON，以及反转</title>
      <link href="/2020/05/12/python/%E6%A1%86%E6%9E%B6/Django_vue/%E6%99%AE%E9%80%9A%E5%AD%97%E6%AE%B5%E4%BA%8EJSON%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96/"/>
      <url>/2020/05/12/python/%E6%A1%86%E6%9E%B6/Django_vue/%E6%99%AE%E9%80%9A%E5%AD%97%E6%AE%B5%E4%BA%8EJSON%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-将普通字段转换为JSON，并传入后端，以及后端接口"><a href="#1-将普通字段转换为JSON，并传入后端，以及后端接口" class="headerlink" title="1. 将普通字段转换为JSON，并传入后端，以及后端接口"></a>1. 将普通字段转换为JSON，并传入后端，以及后端接口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//添加商品逻辑</span><br><span class="line">    submit:function () &#123;</span><br><span class="line"></span><br><span class="line">      //将普通字段转换为json</span><br><span class="line">      var param = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">      param[&#x27;color&#x27;] = this.color;</span><br><span class="line">      param[&#x27;size&#x27;] = this.size;</span><br><span class="line">      param[&#x27;season&#x27;] = this.season;</span><br><span class="line"></span><br><span class="line">      console.log(param);</span><br><span class="line"></span><br><span class="line">      //转换字符串</span><br><span class="line">      param = JSON.stringify(param);</span><br><span class="line">      console.log(param);</span><br><span class="line"></span><br><span class="line">      //发送请求</span><br><span class="line">      this.axios.get(&#x27;http://localhost:8000/insertgoods/&#x27;,&#123;params:&#123;name:this.name,</span><br><span class="line">        price:this.price,params:param&#125;&#125;).then((res)=&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">        // this.src = &#x27;http://localhost:8000/static/upload/&#x27;+res.data.img;</span><br><span class="line">        this.$Message(res.data.message)</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>拓展(将JSON转换为普通字段)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//定义变量param = &#123;&#125;</span><br><span class="line"> //获取商品详情</span><br><span class="line">    get_good:function()&#123;</span><br><span class="line"></span><br><span class="line">      //发送请求</span><br><span class="line">      this.axios.get(&#x27;http://localhost:8000/goodsinfo/&#x27;,&#123;params:&#123;&#x27;id&#x27;:this.id&#125;&#125;).then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        console.log(res.data);</span><br><span class="line">        this.info = res.data;</span><br><span class="line"></span><br><span class="line">        //类型转换</span><br><span class="line">        this.param = JSON.parse(res.data.params)</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li><li>后端接口<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#商品入库接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InsertGoods</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment">#接参</span></span><br><span class="line">        name = request.GET.get(<span class="string">&quot;name&quot;</span>,<span class="literal">None</span>)</span><br><span class="line">        price = request.GET.get(<span class="string">&quot;price&quot;</span>,<span class="literal">None</span>)</span><br><span class="line">        params = request.GET.get(<span class="string">&quot;params&quot;</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="comment">#排重操作</span></span><br><span class="line">        goods = Goods.objects.<span class="built_in">filter</span>(name=name).first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> goods:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">403</span>,<span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;您已经添加过该商品&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#入库</span></span><br><span class="line">        goods = Goods(name=name,price=price,params=params)</span><br><span class="line"></span><br><span class="line">        goods.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">200</span>,<span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;添加商品成功&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>href/img传参接参</title>
      <link href="/2020/05/11/python/%E6%A1%86%E6%9E%B6/Django_vue/href%E3%80%81img%E4%BC%A0%E5%8F%82%E6%8E%A5%E5%8F%82/"/>
      <url>/2020/05/11/python/%E6%A1%86%E6%9E%B6/Django_vue/href%E3%80%81img%E4%BC%A0%E5%8F%82%E6%8E%A5%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-href传参以及接参"><a href="#1-href传参以及接参" class="headerlink" title="1. href传参以及接参"></a>1. href传参以及接参</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.传参</span><br><span class="line">&lt;a :href=&quot;&#x27;http://localhost:8080/item?id=&#x27;+item.id&quot;&gt;&lt;/a&gt;</span><br><span class="line">2.接参</span><br><span class="line">//获取商品id</span><br><span class="line">this.id = this.$route.query.id;</span><br></pre></td></tr></table></figure><ol start="2"><li>拓展<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src=&quot;&#x27;http://localhost:8000/static/upload/&#x27;+item.img&quot; alt=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django笔记</title>
      <link href="/2020/04/23/python/%E6%A1%86%E6%9E%B6/Django_vue/Django%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/23/python/%E6%A1%86%E6%9E%B6/Django_vue/Django%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-创建时间表"><a href="#1-创建时间表" class="headerlink" title="1. 创建时间表"></a>1. 创建时间表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>(models.Model):</span><br><span class="line">    create_time = models.DatetimeField(default=timezone,null=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        abstract = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="2-md5加密"><a href="#2-md5加密" class="headerlink" title="2. md5加密"></a>2. md5加密</h2><p>注意：如果传过来的mypass是整型，就要把他强转为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_password</span>(<span class="params">mypass</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#生成md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#转码操作</span></span><br><span class="line">    mypass_utf8 = <span class="built_in">str</span>(mypass).encode(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#加密操作</span></span><br><span class="line">    md5.update(mypass_utf8)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#返回密文</span></span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br></pre></td></tr></table></figure><h2 id="3-redis存取"><a href="#3-redis存取" class="headerlink" title="3. redis存取"></a>3. redis存取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包 redis速度快</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义ip和端口</span></span><br><span class="line">host = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建立链接</span></span><br><span class="line">r = redis.Redis(host=host,port=port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#赋值</span></span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&#x27;asd&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#取值</span></span><br><span class="line">code = r.get(<span class="string">&#x27;asd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转码</span></span><br><span class="line">code = code.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(code)     <span class="comment"># b&#x27;test&#x27;  b是二进制 需要转码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-自定义图片验证码"><a href="#4-自定义图片验证码" class="headerlink" title="4.自定义图片验证码"></a>4.自定义图片验证码</h2><p>注：HttpResponse和View是一对，Respone和APIView是一对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="comment">#导入图片库</span></span><br><span class="line"><span class="comment">#绘画库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw</span><br><span class="line"><span class="comment">#字体库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont</span><br><span class="line"><span class="comment">#图片库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment">#随机库</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#文件流</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义ip和端口</span></span><br><span class="line">host = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建立链接</span></span><br><span class="line">r = redis.Redis(host=host,port=port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义图片验证码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mycode</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义rgb随机颜色</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_random_color</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        R = random.randrange(<span class="number">255</span>)</span><br><span class="line">        G = random.randrange(<span class="number">255</span>)</span><br><span class="line">        B = random.randrange(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (R,G,B)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义图片视图</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="comment">#画布</span></span><br><span class="line">        img_size = (<span class="number">120</span>,<span class="number">50</span>)</span><br><span class="line">        <span class="comment">#定义图片对象</span></span><br><span class="line">        image = Image.new(<span class="string">&#x27;RGB&#x27;</span>,img_size,<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">        <span class="comment">#定义画笔</span></span><br><span class="line">        draw = ImageDraw.Draw(image,<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">        source = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">        <span class="comment">#接受容器</span></span><br><span class="line">        code_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">#进入循环绘制</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="comment">#获取字母颜色</span></span><br><span class="line">            text_color = self.get_random_color()</span><br><span class="line">            <span class="comment">#获取随机下标</span></span><br><span class="line">            tmp_num = random.randrange(<span class="built_in">len</span>(source))</span><br><span class="line">            <span class="comment">#随机字符串</span></span><br><span class="line">            random_str = source[tmp_num]</span><br><span class="line">            <span class="comment">#装入容器</span></span><br><span class="line">            code_str += random_str</span><br><span class="line">            <span class="comment">#绘制字符串</span></span><br><span class="line">            draw.text((<span class="number">10</span>+<span class="number">30</span>*i,<span class="number">20</span>),random_str,text_color)</span><br><span class="line">        <span class="comment">#获取缓存区</span></span><br><span class="line">        buf = io.BytesIO()</span><br><span class="line">        <span class="comment">#将临时图片保存到缓冲</span></span><br><span class="line">        image.save(buf,<span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">        <span class="comment">#保存随机码</span></span><br><span class="line">        r.<span class="built_in">set</span>(<span class="string">&#x27;code&#x27;</span>, code_str)</span><br><span class="line">        <span class="built_in">print</span>(r.get(<span class="string">&#x27;code&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(buf.getvalue(),<span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-2-更换图片验证码的字体颜色为黑色（为了便于识别）"><a href="#4-2-更换图片验证码的字体颜色为黑色（为了便于识别）" class="headerlink" title="4.2 更换图片验证码的字体颜色为黑色（为了便于识别）"></a>4.2 更换图片验证码的字体颜色为黑色（为了便于识别）</h2><p>注意：安装 pip install opencv-py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#图像处理</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#读图</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;./code.png&#x27;</span>,cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment">#写一张新图</span></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;./code1.png&#x27;</span>,img)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-将redis存储的验证码与输入的进行比较"><a href="#5-将redis存储的验证码与输入的进行比较" class="headerlink" title="5. 将redis存储的验证码与输入的进行比较"></a>5. 将redis存储的验证码与输入的进行比较</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">    <span class="comment">#获取数据</span></span><br><span class="line">    code = request.GET.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#取出验证码并转码</span></span><br><span class="line">    redis_code = r.get(<span class="string">&#x27;code&#x27;</span>).decode(<span class="string">&quot;utf-8&quot;</span>)   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#比较输入的验证码和取出的验证码是否一致</span></span><br><span class="line">    <span class="keyword">if</span> code == redis_code:</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>:<span class="number">200</span>,<span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;验证码一致&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-登录密码输入五次以上锁账号功能"><a href="#6-登录密码输入五次以上锁账号功能" class="headerlink" title="6.登录密码输入五次以上锁账号功能"></a>6.登录密码输入五次以上锁账号功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your tests here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span>    <span class="comment">#计数器</span></span><br><span class="line">username = <span class="string">&quot;zhangsan&quot;</span>  <span class="comment">#登录用户名</span></span><br><span class="line">userpassword = <span class="string">&quot;123&quot;</span>   <span class="comment">#登录密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取黑名单用户   black_name.txt 手动创建的文件夹</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;black_name.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">file_list = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line">lock= []</span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;登录用户名：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断用户是否在黑名单</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">    line = i.strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    lock.append(line)</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> lock:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你的账户已锁定，请联系管理员。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#如果用户没有在黑名单，判断用户是否存在</span></span><br><span class="line">    <span class="keyword">if</span> name == username:</span><br><span class="line">    <span class="comment">#如果密码连续输错了三次，锁定账号</span></span><br><span class="line">        <span class="keyword">while</span> count &lt;<span class="number">3</span>:</span><br><span class="line">            password = <span class="built_in">input</span>(<span class="string">&quot;登录密码：&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> name == username <span class="keyword">and</span> password == userpassword:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;欢迎%s!&quot;</span>%name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;账号和密码不匹配&quot;</span>)</span><br><span class="line">                count +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;对不起，您的账号连续输错三次密码已被锁定，请联系管理员。&quot;</span>)</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&quot;black_name.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line">            li = [<span class="string">&#x27;%s&#x27;</span>%username]</span><br><span class="line">            f.writelines(li)</span><br><span class="line">            f.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名不存在，请输入正确的用户名。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-百度识别图片验证码"><a href="#7-百度识别图片验证码" class="headerlink" title="7. 百度识别图片验证码"></a>7. 百度识别图片验证码</h2><p><a href="https://v3u.cn/a_id_134">百度具体操作</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取token</span></span><br><span class="line">res = requests.get(<span class="string">&quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&quot;</span></span><br><span class="line">                   <span class="string">&quot;&amp;client_id=uCuZFAkyNgiaWKv5XPRI0ukp&quot;</span></span><br><span class="line">                   <span class="string">&quot;&amp;client_secret=zz2aDq4cQzYxHtYu53HjeXnyibX0CIL1&quot;</span>)</span><br><span class="line"></span><br><span class="line">token = res.json()[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始智能识图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#接口地址</span></span><br><span class="line">url = <span class="string">&#x27;https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=&#x27;</span>+token</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义头部信息</span></span><br><span class="line">myheaders = &#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#操作图片</span></span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">myimg = <span class="built_in">open</span>(<span class="string">&#x27;./code.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">temp_img = myimg.read()</span><br><span class="line">myimg.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#进行base64编码</span></span><br><span class="line">temp_data = &#123;<span class="string">&#x27;image&#x27;</span>:base64.b64encode(temp_img)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#对你的图片地址进行urlencode操作</span></span><br><span class="line">temp_data = urllib.parse.urlencode(temp_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请求识图接口</span></span><br><span class="line">res = requests.post(url=url,data=temp_data,headers=myheaders)</span><br><span class="line"><span class="built_in">print</span>(res.json())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment">#&#123;&#x27;log_id&#x27;: 4741714855438778170, &#x27;words_result_num&#x27;: 4, </span></span><br><span class="line"><span class="comment"># &#x27;words_result&#x27;: [&#123;&#x27;words&#x27;: &#x27;3&#x27;&#125;, &#123;&#x27;words&#x27;: &#x27;5&#x27;&#125;, &#123;&#x27;words&#x27;: &#x27;5&#x27;&#125;, &#123;&#x27;words&#x27;: &#x27;7&#x27;&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    code = res.json()[<span class="string">&#x27;words_result&#x27;</span>][i][<span class="string">&#x27;words&#x27;</span>]</span><br><span class="line">    a = a + code</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-关于jwt模块没有encode属性的报错"><a href="#1-关于jwt模块没有encode属性的报错" class="headerlink" title="1. 关于jwt模块没有encode属性的报错"></a>1. 关于jwt模块没有encode属性的报错</h2><p>报错提示如下：<br>module ‘jwt’ has no attribute ‘encode’</p><p>根据错误的提示，应该是jwt下面没有encode这个方法，但是我是在导入了jwt并且在安装了<br>pip install Pyjwt模块以及jwt和djangorestframework-jwt的前提下依旧报上面的错，<br>所以我怀疑是我安装的jwt版本问题，我就卸载、重装了jwt；<br>重试之后发现仍然报错，我网上搜索这个错误，发现网上并没有和我类似的。<br>我就有查询了在Django下使用jwt的方法，发现有两个，一是安装PyJWT、<br>二是使用djangrestframework-jwt，我发现那些文章中从没有说明要单独安装jwt这个包，<br>我想这个包应该是安装上面两个包时自己安装的，所以我先卸载jwt、然后卸载<br>PyJWT、djangrestframework-jwt，重新安装PyJWT、djangrestframework-jwt，<br>重试一次，发现成功了！</p><p>总结这次解决问题的心路历程，安装依赖库时应该安装依赖顺序安装，否则可能会导致版本问题，<br>如果卸载一个包不行，那就把相关的包都卸载再按顺序安装～</p><h2 id="2-jwt测试脚本"><a href="#2-jwt测试脚本" class="headerlink" title="2. jwt测试脚本"></a>2. jwt测试脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">#载荷中加入生命周期的概念</span></span><br><span class="line">playload = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#过期时间</span></span><br><span class="line">    <span class="string">&#x27;exp&#x27;</span>:<span class="built_in">int</span>((datetime.datetime.now() + datetime.timedelta(seconds=<span class="number">120</span>)).timestamp()),</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>:&#123;<span class="string">&#x27;uid&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成jwt</span></span><br><span class="line">encode_jwt = jwt.encode(playload,<span class="string">&#x27;123&#x27;</span>,algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转码</span></span><br><span class="line">encode_str = <span class="built_in">str</span>(encode_jwt,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#解密操作</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line">decode_jwt = jwt.decode(encode_str,<span class="string">&#x27;123&#x27;</span>,algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line"><span class="comment"># except Exception as e:</span></span><br><span class="line"><span class="comment">#     print(&quot;该密钥已经过期&quot;)</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encode_str)</span><br><span class="line"><span class="built_in">print</span>(decode_jwt[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;uid&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="1-商品详情接口"><a href="#1-商品详情接口" class="headerlink" title="1.商品详情接口"></a>1.商品详情接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#商品详情页</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsInfo</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">id</span> = request.GET.get(<span class="string">&#x27;id&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#查询</span></span><br><span class="line">        goods = Goods.objects.get(<span class="built_in">id</span>=<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#序列化</span></span><br><span class="line">        goods_ser = GoodsSer(goods)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(goods_ser.data)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue笔记</title>
      <link href="/2020/04/23/python/%E6%A1%86%E6%9E%B6/Django_vue/vue%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/23/python/%E6%A1%86%E6%9E%B6/Django_vue/vue%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-滑块验证码"><a href="#1-滑块验证码" class="headerlink" title="1. 滑块验证码"></a>1. 滑块验证码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--              滑块验证码--&gt;</span><br><span class="line">              &lt;drag-verify</span><br><span class="line">                :width=&quot;width&quot;</span><br><span class="line">                :height=&quot;height&quot;</span><br><span class="line">                :text=&quot;text&quot;</span><br><span class="line">                ref=&quot;Verify&quot;</span><br><span class="line">              &gt;&lt;/drag-verify&gt;</span><br><span class="line">              </span><br><span class="line">//导入滑块验证码</span><br><span class="line">import dragVerify from &#x27;vue-drag-verify&#x27;;</span><br><span class="line"></span><br><span class="line">//声明滑块验证码相关数据</span><br><span class="line">      width:320,</span><br><span class="line">      height:42,</span><br><span class="line">      text:&#x27;请将滑块拨动到右边&#x27;,</span><br><span class="line">      </span><br><span class="line">//注册组件</span><br><span class="line">components:&#123;</span><br><span class="line">    &#x27;dragVerify&#x27;:dragVerify,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2-点击刷新图片验证码"><a href="#1-2-点击刷新图片验证码" class="headerlink" title="1.2 点击刷新图片验证码"></a>1.2 点击刷新图片验证码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;img class=&quot;imgcode&quot; :src=&quot;src&quot; alt=&quot;点击刷新&quot; @click=&quot;changecode&quot; id=&quot;loginImgVcode&quot;&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          //刷新图片</span><br><span class="line">    changecode:function()&#123;</span><br><span class="line"></span><br><span class="line">      //生成随机数</span><br><span class="line">      var num = Math.ceil(Math.random()*10);</span><br><span class="line"></span><br><span class="line">      //进行传参</span><br><span class="line">      this.src = this.src + &quot;?num&quot; + num;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="1-前端显示验证码图片"><a href="#1-前端显示验证码图片" class="headerlink" title="1.前端显示验证码图片"></a>1.前端显示验证码图片</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;验证码：&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&quot;code&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;img :src=&quot;src&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"> </span><br><span class="line"> data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      //定义验证码变量</span><br><span class="line">      code:&#x27;&#x27;,</span><br><span class="line">      //图片</span><br><span class="line">      src:&#x27;http://localhost:8000/code/&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  // 发送请求</span><br><span class="line">  this.axios.get(&#x27;http://localhost:8000/login/&#x27;,&#123;params:&#123;code:this.code&#125;&#125;).then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">          this.$Message(res.data.message);</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="2-组件"><a href="#2-组件" class="headerlink" title="2. 组件"></a>2. 组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;myheader&gt;&lt;/myheader&gt;</span><br><span class="line"></span><br><span class="line">//导包</span><br><span class="line">import myheader from &#x27;./myheader.vue&#x27;</span><br><span class="line"></span><br><span class="line">components:&#123;</span><br><span class="line">    &quot;myheader&quot;:myheader,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-面包屑导航"><a href="#1-面包屑导航" class="headerlink" title="1. 面包屑导航"></a>1. 面包屑导航</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Breadcrumb :datas=&quot;datas&quot;&gt;&lt;/Breadcrumb&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        //面包屑导航变量</span><br><span class="line">        datas:[&#123;title:&#x27;首页&#x27;,route:&#123;name:&#x27;index&#x27;&#125;&#125;,&#123;title:&#x27;注册页面&#x27;&#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-v-html"><a href="#1-v-html" class="headerlink" title="1.v-html"></a>1.v-html</h2><p>解析HTML标签时用到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">msg:&#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个变量<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure><h2 id="2-v-show-展示"><a href="#2-v-show-展示" class="headerlink" title="2.v-show 展示"></a>2.v-show 展示</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello Word<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">ok:0,</span><br></pre></td></tr></table></figure><h2 id="3-v-if-v-else-if-v-else"><a href="#3-v-if-v-else-if-v-else" class="headerlink" title="3.v-if v-else-if v-else"></a>3.v-if v-else-if v-else</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>既不是A也不是B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">type:&quot;A&quot;,</span><br></pre></td></tr></table></figure><h2 id="4-x3D-x3D-和-x3D-x3D-x3D-的区别"><a href="#4-x3D-x3D-和-x3D-x3D-x3D-的区别" class="headerlink" title="4.&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别"></a>4.&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;text ==1 &quot;</span>&gt;</span></span><br><span class="line">    1--值一样，类型不同，两个等号显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;text ===1 &quot;</span>&gt;</span></span><br><span class="line">    2--值一样，类型不同，三个等号不显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;text ===&#x27;1&#x27; &quot;</span>&gt;</span></span><br><span class="line">    3--值一样，类型相同，三个等号显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">text = &quot;1&quot;</span><br></pre></td></tr></table></figure><h2 id="5-v-for-循环"><a href="#5-v-for-循环" class="headerlink" title="5.v-for 循环"></a>5.v-for 循环</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in tlist&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">tlist:[&#123;text:&#x27;汽车&#x27;&#125;,&#123;text:&#x27;化妆品&#x27;&#125;,&#123;text:&#x27;衣服&#x27;&#125;,&#123;text:&#x27;牛奶&#x27;&#125;],</span><br></pre></td></tr></table></figure><h2 id="6-v-bind-x3D-”class”-和-class-一样"><a href="#6-v-bind-x3D-”class”-和-class-一样" class="headerlink" title="6.v-bind&#x3D;”class” 和 :class 一样"></a>6.v-bind&#x3D;”class” 和 :class 一样</h2><h4 id="以及根据标签的奇偶改变颜色"><a href="#以及根据标签的奇偶改变颜色" class="headerlink" title="以及根据标签的奇偶改变颜色"></a>以及根据标签的奇偶改变颜色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in tlist&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;on:index%2==0,off:index%2!=0&#125;&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">tlist同上</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.on</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#9b9b9b</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.off</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#3a9b6f</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#0b2e13</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-计算属性"><a href="#7-计算属性" class="headerlink" title="7.计算属性"></a>7.计算属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    reverse_msg: function () &#123;</span><br><span class="line">        return this.msg.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">调用：&#123;&#123; reverse_msg &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="8-监听属性"><a href="#8-监听属性" class="headerlink" title="8.监听属性"></a>8.监听属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    //nval 新的值  oval 旧的值</span><br><span class="line">    counter(nval, oval) &#123;</span><br><span class="line">        console.log(&#x27;计数器的变化：&#x27; + oval + &#x27;变成了&#x27; + nval)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">counter = 0</span><br><span class="line">&#123;&#123; counter &#125;&#125;</span><br><span class="line">调用：<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>点我加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-过滤器"><a href="#9-过滤器" class="headerlink" title="9.过滤器"></a>9.过滤器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  myfilter(value) &#123;</span><br><span class="line">    if (value == 1) &#123;</span><br><span class="line">      return &#x27;已支付&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return &#x27;未支付&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">调用：&#123;&#123;1 | myfilter&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="10-总价格-总数量"><a href="#10-总价格-总数量" class="headerlink" title="10. 总价格,总数量"></a>10. 总价格,总数量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//注意：parseInt()强转整型</span><br><span class="line">      total:function(type)&#123;</span><br><span class="line"></span><br><span class="line">        let total = 0;</span><br><span class="line">        let totalprice=0;</span><br><span class="line"></span><br><span class="line">        for(let i=0;i&lt;this.datalist.length;i++)&#123;</span><br><span class="line">          total += parseInt(this.datalist[i].num);</span><br><span class="line">          totalprice+=this.datalist[i].price*this.datalist[i].num</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (type === 0)&#123;</span><br><span class="line">          return total</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          return totalprice</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><h2 id="1-视频进入画中画模式"><a href="#1-视频进入画中画模式" class="headerlink" title="1. 视频进入画中画模式"></a>1. 视频进入画中画模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">&lt;!--              controls 控制（快进播放暂停） autoplay  自动播放--&gt;</span><br><span class="line">              &lt;video id=&quot;video&quot; v-show=&quot;videosrc&quot; width=&quot;300&quot; height=&quot;200&quot; :src=&quot;videosrc&quot; controls=&quot;controls&quot; autoplay=&quot;autoplay&quot; muted loop=&quot;loop&quot;&gt;你的浏览器不支持video 标签&lt;/video&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">&lt;!--              进入画中画--&gt;</span><br><span class="line">              &lt;Button @click=&quot;into&quot;&gt;&#123;&#123;mymsg&#125;&#125;&lt;/Button&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//定义画中画变量</span><br><span class="line">      mymsg:&#x27;进入画中画&#x27;,</span><br><span class="line">//视频播放地址</span><br><span class="line">      videosrc:&#x27;&#x27;,</span><br><span class="line">      </span><br><span class="line"> </span><br><span class="line"> //定义画中画方法</span><br><span class="line">    into:function()&#123;</span><br><span class="line"></span><br><span class="line">      if(video !== document.pictureInPictureElement)&#123;</span><br><span class="line"></span><br><span class="line">        //尝试进入画中画模式</span><br><span class="line">        video.requestPictureInPicture();</span><br><span class="line">        this.mymsg = &#x27;退出画中画&#x27;</span><br><span class="line"></span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        //退出画中画</span><br><span class="line">        document.exitPictureInPicture();</span><br><span class="line">        this.mymsg = &#x27;进入画中画&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="2-定义圆行头像"><a href="#2-定义圆行头像" class="headerlink" title="2. 定义圆行头像"></a>2. 定义圆行头像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">        &lt;!--            圆角头像--&gt;</span><br><span class="line">        &lt;Avatar :src=&quot;src&quot; :width=&quot;150&quot; height=&quot;150px&quot;&gt;&lt;/Avatar&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">src=&#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="1-进度条"><a href="#1-进度条" class="headerlink" title="1. 进度条"></a>1. 进度条</h2><p><a href="https://imgtu.com/i/XgsiMq"><img src="https://s1.ax1x.com/2022/06/12/XgsiMq.png" alt="XgsiMq.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--第一种方法整型进度展示--&gt;</span><br><span class="line">&#123;&#123;load_percent&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--第二种方法上传进度展示--&gt;</span><br><span class="line">&lt;!--              进度条标签--&gt;</span><br><span class="line">              &lt;Progress v-show=&quot;load_int&quot; :percent=&quot;load_int&quot; color=&quot;green&quot;&gt;</span><br><span class="line">                &lt;span slot=&quot;text&quot;&gt;&#123;&#123;load_int&#125;&#125;%&lt;/span&gt;</span><br><span class="line">              &lt;/Progress&gt;</span><br></pre></td></tr></table></figure><p>定义变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//整形进度</span><br><span class="line">      load_int:0,</span><br><span class="line">      //上传进度展示</span><br><span class="line">      load_percent:&#x27;&#x27;,</span><br></pre></td></tr></table></figure><p>实现方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">//七牛云上传</span><br><span class="line">    upload_qiniu:function(e)&#123;</span><br><span class="line">      //获取文件</span><br><span class="line">      let file = e.target.files[0];</span><br><span class="line">      //声明表单参数</span><br><span class="line">      let param = new FormData();</span><br><span class="line"></span><br><span class="line">      param.append(&#x27;file&#x27;,file,file.name);</span><br><span class="line">      param.append(&#x27;token&#x27;,this.token);</span><br><span class="line"></span><br><span class="line">      //自定义axios</span><br><span class="line">      const axios_qiniu = this.axios.create(&#123;withCredentials:false&#125;);</span><br><span class="line"></span><br><span class="line">      //发送请求</span><br><span class="line">      axios_qiniu(&#123;</span><br><span class="line">        method:&quot;POST&quot;,</span><br><span class="line">        url:&#x27;http://up-z1.qiniu.com/&#x27;,</span><br><span class="line">        data:param,</span><br><span class="line">        timeout:30000,</span><br><span class="line">        //上传过程中的方法</span><br><span class="line">        onUploadProgress:(e)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">          //计算上传百分比</span><br><span class="line">          var complete = (e.loaded / e.total);</span><br><span class="line"></span><br><span class="line">          //处理美化</span><br><span class="line">          if(complete &lt; 1)&#123;</span><br><span class="line"></span><br><span class="line">            this.load_percent = (complete * 100).toFixed(2) + &#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">            this.load_int = parseInt((complete * 100).toFixed(2));</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        //手动赋值进度条为100%</span><br><span class="line">        this.load_percent = &#x27;100%&#x27;;</span><br><span class="line">        this.load_int = 100;</span><br><span class="line"></span><br><span class="line">          console.log(res);</span><br><span class="line">        this.src = &quot;http://q9ks8exuv.bkt.clouddn.com/&quot;+res.data.key;</span><br><span class="line">        this.videosrc = config[&#x27;baseurl&#x27;]+res.data.key;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="国际化语言操作"><a href="#国际化语言操作" class="headerlink" title="国际化语言操作"></a>国际化语言操作</h2><p>先在main.js里进行配置<br><a href="https://imgtu.com/i/XgrWqK"><img src="https://s1.ax1x.com/2022/06/12/XgrWqK.png" alt="XgrWqK.png"></a><br>在src文件下创建lang文件夹,在lang文件夹下创建zh.js和en.js，并在里面进行相关配置<br><a href="https://imgtu.com/i/XgryG9"><img src="https://s1.ax1x.com/2022/06/12/XgryG9.png" alt="XgryG9.png"></a><br><a href="https://imgtu.com/i/Xgr2Kx"><img src="https://s1.ax1x.com/2022/06/12/Xgr2Kx.png" alt="Xgr2Kx.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--        开关标签--&gt;</span><br><span class="line">        &lt;h-switch @change=&quot;lang_change&quot; v-model=&quot;lang&quot;&gt;中/英&lt;/h-switch&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//定义变量</span><br><span class="line">lang:1,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//初始化方法 钩子方法</span><br><span class="line">    mounted() &#123;</span><br><span class="line"></span><br><span class="line">      this.iflang();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//常用方法  自定义</span><br><span class="line">    methods: &#123;</span><br><span class="line">      </span><br><span class="line">      iflang:function ()&#123;</span><br><span class="line">        var lang_locale = localStorage.getItem(&quot;lang&quot;);</span><br><span class="line"></span><br><span class="line">      if (lang_locale)&#123;</span><br><span class="line"></span><br><span class="line">        this.$i18n.locale = lang_locale;</span><br><span class="line"></span><br><span class="line">        if(lang_locale == &#x27;zh&#x27;)&#123;</span><br><span class="line"></span><br><span class="line">          this.lang = 0;</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line"></span><br><span class="line">          this.lang = 1;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line"></span><br><span class="line">        this.$i18n.locale = &#x27;zh&#x27;;</span><br><span class="line">        this.lang = 1;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      //切换语言</span><br><span class="line">      lang_change:function()&#123;</span><br><span class="line"></span><br><span class="line">        console.log(this.lang);</span><br><span class="line"></span><br><span class="line">        if (this.lang == true)&#123;</span><br><span class="line"></span><br><span class="line">          //英文</span><br><span class="line">          this.$i18n.locale = &quot;en&quot;;</span><br><span class="line">          localStorage.setItem(&quot;lang&quot;,&#x27;en&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //中文</span><br><span class="line">          this.$i18n.locale = &quot;zh&quot;;</span><br><span class="line">          localStorage.setItem(&quot;lang&quot;,&#x27;zh&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-商品详情"><a href="#2-商品详情" class="headerlink" title="2. 商品详情"></a>2. 商品详情</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 class=&quot;mb-3 mt-0&quot;&gt;&#123;&#123;info.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;p class=&quot;lead mt-2 mb-3 primary-color&quot;&gt;$&#123;&#123;info.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &#123;&#123;info.params&#125;&#125;&lt;br&gt;</span><br><span class="line">  颜色：&#123;&#123;param.color&#125;&#125;&lt;br&gt;</span><br><span class="line">  尺寸：&#123;&#123;param.size&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">   return &#123;</span><br><span class="line">     msg: &quot;这是一个变量&quot;,</span><br><span class="line">     //商品id</span><br><span class="line">     id:&#x27;&#x27;,</span><br><span class="line">     //商品详情</span><br><span class="line">     info:&#123;&#125;,</span><br><span class="line">     //商品规格</span><br><span class="line">     param:&#123;&#125;,</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mounted:function()&#123;</span><br><span class="line">//获取商品信息</span><br><span class="line">    this.get_good();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//获取商品详情</span><br><span class="line">    get_good:function()&#123;</span><br><span class="line"></span><br><span class="line">      //发送请求</span><br><span class="line">      this.axios.get(&#x27;http://localhost:8000/goodsinfo/&#x27;,&#123;params:&#123;&#x27;id&#x27;:this.id&#125;&#125;).then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        console.log(res.data);</span><br><span class="line">        this.info = res.data;</span><br><span class="line">        this.mysrc = &#x27;http://localhost:8000/static/upload/&#x27;+this.info.img;</span><br><span class="line">        //类型转换</span><br><span class="line">        this.param = JSON.parse(res.data.params)</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="1-购物车"><a href="#1-购物车" class="headerlink" title="1. 购物车"></a>1. 购物车</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:void(0)&quot; @click=&quot;add_cart&quot; class=&quot;btn btn-full-width btn-lg btn-outline-primary&quot;&gt;添加购物车&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;这是一个变量&quot;,</span><br><span class="line">      //购物车列表</span><br><span class="line">      cartlist:[],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted:function()&#123;</span><br><span class="line"></span><br><span class="line">    //获取购物车列表</span><br><span class="line">    this.init_cart();</span><br><span class="line">  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">    //初始化购物车</span><br><span class="line">    init_cart:function()&#123;</span><br><span class="line"></span><br><span class="line">      var cartdata = localStorage.getItem(&quot;cart&quot;);</span><br><span class="line">      if (cartdata == null)&#123;</span><br><span class="line">        this.cartlist = [];</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        this.cartlist = JSON.parse(cartdata);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //添加购物车</span><br><span class="line">    add_cart:function()&#123;</span><br><span class="line">      //默认购物车内没有该商品</span><br><span class="line">      let findgood = 0;</span><br><span class="line"></span><br><span class="line">      for(let i=0;i&lt;this.cartlist.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">          if (this.info.name = this.cartlist[i][&#x27;name&#x27;])&#123;</span><br><span class="line"></span><br><span class="line">            this.cartlist[i][&#x27;num&#x27;]++;</span><br><span class="line"></span><br><span class="line">            //声明找到了该商品</span><br><span class="line">            findgood = 1;</span><br><span class="line">            //结束循环</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //如果该商品没有在购物车添加</span><br><span class="line">      if(findgood == 0)&#123;</span><br><span class="line">        //注：这个this.info 是商品详情请求里面的</span><br><span class="line">        this.cartlist.push(&#123;&#x27;name&#x27;:this.info.name,&#x27;price&#x27;:this.info.price,&#x27;num&#x27;:1,</span><br><span class="line">        &#x27;img&#x27;:this.info.img&#125;);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      console.log(this.cartlist);</span><br><span class="line"></span><br><span class="line">      //状态保持</span><br><span class="line">      localStorage.setItem(&quot;cart&quot;,JSON.stringify(this.cartlist));</span><br><span class="line">    &#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/2020/04/21/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/04/21/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>注意：hexo搭建博客的前提是电脑内安装有node.js和npm</p><h4 id="步骤一："><a href="#步骤一：" class="headerlink" title="步骤一："></a>步骤一：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd进入命令行</span><br></pre></td></tr></table></figure><h4 id="步骤二："><a href="#步骤二：" class="headerlink" title="步骤二："></a>步骤二：</h4><ol><li>利用npm安装cnpm配置淘宝镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li>测试(如果有出现版本号证明安装成功)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure></li></ol><h4 id="步骤三："><a href="#步骤三：" class="headerlink" title="步骤三："></a>步骤三：</h4><ol><li>利用cnpm安装hexo文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line">验证：</span><br><span class="line">hexo-v</span><br></pre></td></tr></table></figure></li></ol><h4 id="步骤四："><a href="#步骤四：" class="headerlink" title="步骤四："></a>步骤四：</h4><ol><li>创建文件夹<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line">进入blog文件</span><br><span class="line">cd blog</span><br></pre></td></tr></table></figure></li></ol><h4 id="步骤五："><a href="#步骤五：" class="headerlink" title="步骤五："></a>步骤五：</h4><ol><li>利用hexo生成我们的博客<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init(初始化一个博客)</span><br></pre></td></tr></table></figure></li></ol><h4 id="步骤六："><a href="#步骤六：" class="headerlink" title="步骤六："></a>步骤六：</h4><p>启动hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ol><li>创建成功后它会默认端口<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></li><li>并自动生成一片Hello Word 文章</li><li>文章内有hexo的使用</li></ol><h1 id="二、Hexo的使用"><a href="#二、Hexo的使用" class="headerlink" title="二、Hexo的使用"></a>二、Hexo的使用</h1><h3 id="1-创建博客文章"><a href="#1-创建博客文章" class="headerlink" title="1. 创建博客文章"></a>1. 创建博客文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我的第一篇博客文章&quot;</span><br></pre></td></tr></table></figure><h3 id="2-生成"><a href="#2-生成" class="headerlink" title="2. 生成"></a>2. 生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate(简写：hexo g)</span><br></pre></td></tr></table></figure><h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server(简写：hexo s)</span><br></pre></td></tr></table></figure><h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy(简写：hexo d)</span><br></pre></td></tr></table></figure><h2 id="4-部署到GitHUb"><a href="#4-部署到GitHUb" class="headerlink" title="4.部署到GitHUb"></a>4.部署到GitHUb</h2><p>部署前要先注册GitHub哦，可以给你网站github.com,快去注册吧！</p><h4 id="步骤一：-1"><a href="#步骤一：-1" class="headerlink" title="步骤一："></a>步骤一：</h4><ol><li>先安装一个插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h4 id="步骤二：-1"><a href="#步骤二：-1" class="headerlink" title="步骤二："></a>步骤二：</h4></li><li>用pycharm打开blog文件，修改_config.yml配置文件最下面的#Deployment<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;Wanghan123-github&#x2F;wanghan123-github.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>注意：这个repo后面的网站是你新建仓库的地址</li></ol><h4 id="步骤三：-1"><a href="#步骤三：-1" class="headerlink" title="步骤三："></a>步骤三：</h4><ol><li>部署GitHub：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy(简写：hexo d)</span><br></pre></td></tr></table></figure>接下来输入你的GitHub用户名和密码就可以部署完毕</li></ol><h4 id="上述操作成功以后："><a href="#上述操作成功以后：" class="headerlink" title="上述操作成功以后："></a>上述操作成功以后：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">刷新你的GitHub页面就可以看到上传的文件了,再复制你网页路由上的最后一段,</span><br><span class="line">粘贴到新的浏览器页面打开就可以看到你线上的个人博客了</span><br><span class="line">例如：</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Wanghan123-github&#x2F;wanghan123-github.github.io</span><br><span class="line">打开wanghan123-github.github.io就可以看到了</span><br></pre></td></tr></table></figure><h1 id="Hexo的主题更换"><a href="#Hexo的主题更换" class="headerlink" title="Hexo的主题更换"></a>Hexo的主题更换</h1><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><ol><li>进入themes文件下克隆下你想要的主题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git</span><br></pre></td></tr></table></figure></li></ol><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><ol start="2"><li>修改config.toml配置文件里的theme<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yilia</span><br></pre></td></tr></table></figure></li></ol><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步:"></a>第三步:</h3><ol start="3"><li>先生成后部署<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate(简写：hexo g)</span><br><span class="line">hexo deploy(简写：hexo d)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑白主题的切换</title>
      <link href="/2020/04/21/Hugo/%E9%BB%91%E7%99%BD%E4%B8%BB%E9%A2%98%E7%9A%84%E5%88%87%E6%8D%A2/"/>
      <url>/2020/04/21/Hugo/%E9%BB%91%E7%99%BD%E4%B8%BB%E9%A2%98%E7%9A%84%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-黑白主题切换"><a href="#1-黑白主题切换" class="headerlink" title="1. 黑白主题切换"></a>1. 黑白主题切换</h2><ol><li><p>先找到样式style.css<br><a href="https://imgtu.com/i/XgrdbT"><img src="https://s1.ax1x.com/2022/06/12/XgrdbT.png" alt="XgrdbT.png"></a><br><a href="https://imgtu.com/i/XgrUK0"><img src="https://s1.ax1x.com/2022/06/12/XgrUK0.png" alt="XgrUK0.png"></a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attr">--bg-color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attr">--a-color</span>:black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav_text</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--a-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写切换按钮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h-switch v-model=&quot;style&quot; @change=&quot;change_back&quot; &gt;&#123;&#123;style_night&#125;&#125;&lt;/h-switch&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//定义变量</span><br><span class="line">//夜间模式切换按钮信息</span><br><span class="line">      style_night:&#x27;夜间模式&#x27;,</span><br><span class="line">      style:0,</span><br></pre></td></tr></table></figure></li><li><p>写方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//按钮切换主题颜色方法</span><br><span class="line">  change_back:function()&#123;</span><br><span class="line">console.log(this.style);</span><br><span class="line">  if(this.style==true)&#123;</span><br><span class="line">    //获取样式表 所有节点</span><br><span class="line">var styles = getComputedStyle(document.documentElement);</span><br><span class="line">//动态更改 背景颜色</span><br><span class="line">document.documentElement.style.setProperty(&quot;--bg-color&quot;,&quot;#292a2d&quot;);</span><br><span class="line">//字体颜色</span><br><span class="line">document.documentElement.style.setProperty(&quot;--a-color&quot;,&quot;white&quot;)</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">  //获取样式表 所有节点</span><br><span class="line">var styles = getComputedStyle(document.documentElement);</span><br><span class="line">//动态更改 背景颜色</span><br><span class="line">document.documentElement.style.setProperty(&quot;--bg-color&quot;,&quot;white&quot;);</span><br><span class="line">//字体颜色</span><br><span class="line">document.documentElement.style.setProperty(&quot;--a-color&quot;,&quot;black&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2020/04/20/git/git%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/20/git/git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="1-从远程仓库拉到本地"><a href="#1-从远程仓库拉到本地" class="headerlink" title="1.从远程仓库拉到本地"></a>1.从远程仓库拉到本地</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master   </span><br></pre></td></tr></table></figure><h3 id="2-从远程仓库克隆到本地"><a href="#2-从远程仓库克隆到本地" class="headerlink" title="2.从远程仓库克隆到本地"></a>2.从远程仓库克隆到本地</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 克隆链接</span><br></pre></td></tr></table></figure><h3 id="3-git提交操作流程"><a href="#3-git提交操作流程" class="headerlink" title="3.git提交操作流程"></a>3.git提交操作流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">前两步主要按照自己创建完库的提示写</span><br><span class="line">git config --global user.name &quot;wanghan123&quot;   全局</span><br><span class="line">git config --global user.email &quot;2484760160@qq.com&quot;</span><br><span class="line"></span><br><span class="line">git init    初始化</span><br><span class="line">git add -A  将工作区的修改提交到暂存区</span><br><span class="line">git commit -m &quot;备注名&quot;  将暂存区的文件或目录提交到版本库区</span><br><span class="line">git remote add origin https://gitee.com/wanghan123456/mydjango123.git    连接远程仓库(后边链接写自己的)</span><br><span class="line">git push -u origin master  将提交到本地库中的内容推送到远程库中</span><br><span class="line">git clone -b &quot;分支名字&quot;</span><br></pre></td></tr></table></figure><h3 id="4-回退步骤"><a href="#4-回退步骤" class="headerlink" title="4.回退步骤"></a>4.回退步骤</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">提交记录</span><br><span class="line">git log</span><br><span class="line">本地回退到上一个版本</span><br><span class="line">git reset --hard 157a02de0ce0d128068a87344c2db29d1a6beb3f(commit 码)</span><br><span class="line">回退后提交到线上</span><br><span class="line">git push origin HEAD --force</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看历史操作</span><br><span class="line">git reflog</span><br><span class="line">查看文件的修改</span><br><span class="line">git diff 文件名</span><br></pre></td></tr></table></figure><h5 id="备用知识点-建项目着-如果想让其他人通过输入账号密码才能上传文件-则输入如下命令-这些命令用不到"><a href="#备用知识点-建项目着-如果想让其他人通过输入账号密码才能上传文件-则输入如下命令-这些命令用不到" class="headerlink" title="备用知识点 建项目着 如果想让其他人通过输入账号密码才能上传文件 则输入如下命令  (这些命令用不到)"></a>备用知识点 建项目着 如果想让其他人通过输入账号密码才能上传文件 则输入如下命令  (这些命令用不到)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">插入如下代码使项目中的组员每次修改数据都要输入账号和密码：</span><br><span class="line"></span><br><span class="line">- git config --global user.name [username]</span><br><span class="line">- git config --global user.password [userpassword]</span><br><span class="line">- PS：想要保存密码，则需要插入如下代码： git config –global credential.helper store。</span><br></pre></td></tr></table></figure><h3 id="5-清掉配置"><a href="#5-清掉配置" class="headerlink" title="5.清掉配置"></a>5.清掉配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --system --unset credential.helper</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">### 6.保存密码</span><br></pre></td></tr></table></figure><p>git config –global credential.helper store</p><pre><code></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hugo命令操作</title>
      <link href="/2020/04/20/Hugo/hugo%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/20/Hugo/hugo%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="1-查看当前hugo版本"><a href="#1-查看当前hugo版本" class="headerlink" title="1.查看当前hugo版本"></a>1.查看当前hugo版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure><h3 id="2-创建一个自己的网站"><a href="#2-创建一个自己的网站" class="headerlink" title="2.创建一个自己的网站"></a>2.创建一个自己的网站</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new site hugo_blog</span><br></pre></td></tr></table></figure><h3 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3.启动服务"></a>3.启动服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo server</span><br></pre></td></tr></table></figure><h3 id="4-修改主题颜色"><a href="#4-修改主题颜色" class="headerlink" title="4.修改主题颜色"></a>4.修改主题颜色</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.找到thems下</span><br><span class="line">2.当前主题文件下的static/css样式下</span><br><span class="line">3.例如hyde.css</span><br></pre></td></tr></table></figure><h3 id="主题颜色网站"><a href="#主题颜色网站" class="headerlink" title="主题颜色网站"></a>主题颜色网站</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://colorhunt.co/</span><br></pre></td></tr></table></figure><h3 id="5-创建新的文件"><a href="#5-创建新的文件" class="headerlink" title="5.创建新的文件"></a>5.创建新的文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new day01.md</span><br></pre></td></tr></table></figure><h3 id="6-网址"><a href="#6-网址" class="headerlink" title="6.网址"></a>6.网址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</span><br><span class="line">[md语法](https://www.jianshu.com/p/399e5a3c7cc5)</span><br></pre></td></tr></table></figure><p>效果:<br><a href="https://www.jianshu.com/p/399e5a3c7cc5">md语法</a><br>(点击显示)</p><h3 id="7-图片"><a href="#7-图片" class="headerlink" title="7.图片"></a>7.图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上!</span><br><span class="line">![](/img/图片名)</span><br></pre></td></tr></table></figure><p>效果：<br><a href="https://imgtu.com/i/XgrPHO"><img src="https://s1.ax1x.com/2022/06/12/XgrPHO.jpg" alt="XgrPHO.jpg"></a></p><p>图床：<br><img src="https://i.loli.net/2020/06/01/Li97ZBcEOzYqIpP.jpg" alt="小姐姐"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hugo提交步骤</title>
      <link href="/2020/04/20/Hugo/Hugo%E6%8F%90%E4%BA%A4%E6%AD%A5%E9%AA%A4/"/>
      <url>/2020/04/20/Hugo/Hugo%E6%8F%90%E4%BA%A4%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h5 id="创建md文件"><a href="#创建md文件" class="headerlink" title="创建md文件"></a>创建md文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new ***.md</span><br></pre></td></tr></table></figure><h5 id="上传gitee步骤"><a href="#上传gitee步骤" class="headerlink" title="上传gitee步骤"></a>上传gitee步骤</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hugo</span><br><span class="line">cd public</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h5 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h5><p>将配置文件里的base_url改为baseURL &#x3D; “&#x2F;“</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行</span><br><span class="line">hugo server</span><br></pre></td></tr></table></figure><h4 id="npm升级命令"><a href="#npm升级命令" class="headerlink" title="npm升级命令"></a>npm升级命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先设置源</span><br><span class="line">npm set registry https://registry.npm.taobao.org</span><br><span class="line">升级npm</span><br><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>selenium自动登录</title>
      <link href="/2020/04/20/python/%E6%A8%A1%E5%9D%97/selenium/selenium/"/>
      <url>/2020/04/20/python/%E6%A8%A1%E5%9D%97/selenium/selenium/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-selenium自动登录-包含输入图片验证码和拖动滑动验证码"><a href="#1-selenium自动登录-包含输入图片验证码和拖动滑动验证码" class="headerlink" title="1. selenium自动登录(包含输入图片验证码和拖动滑动验证码)"></a>1. selenium自动登录(包含输入图片验证码和拖动滑动验证码)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立浏览器实例</span></span><br><span class="line">browser = webdriver.Chrome(<span class="string">&quot;./chromedriver.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开网址</span></span><br><span class="line">browser.get(<span class="string">&#x27;http://localhost:8080/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#群体选择器</span></span><br><span class="line">browser.find_elements_by_tag_name(<span class="string">&#x27;input&#x27;</span>)[<span class="number">1</span>].send_keys(<span class="string">&#x27;wanghan&#x27;</span>)</span><br><span class="line">browser.find_elements_by_tag_name(<span class="string">&#x27;input&#x27;</span>)[<span class="number">2</span>].send_keys(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">nodes = browser.find_element_by_id(<span class="string">&#x27;loginImgVcode&#x27;</span>)</span><br><span class="line">nodes.screenshot(<span class="string">&#x27;test.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请求百度api接口获取token</span></span><br><span class="line">res = requests.get(<span class="string">&quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&quot;</span></span><br><span class="line">                   <span class="string">&quot;&amp;client_id=uCuZFAkyNgiaWKv5XPRI0ukp&quot;</span></span><br><span class="line">                   <span class="string">&quot;&amp;client_secret=zz2aDq4cQzYxHtYu53HjeXnyibX0CIL1&quot;</span>)</span><br><span class="line"></span><br><span class="line">token = res.json()[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始智能识图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#接口地址</span></span><br><span class="line">url = <span class="string">&#x27;https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=&#x27;</span>+token</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义头部信息</span></span><br><span class="line">myheaders = &#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#操作图片</span></span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">myimg = <span class="built_in">open</span>(<span class="string">&#x27;./test.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">temp_img = myimg.read()</span><br><span class="line">myimg.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#进行base64编码</span></span><br><span class="line">temp_data = &#123;<span class="string">&#x27;image&#x27;</span>:base64.b64encode(temp_img)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#对你的图片地址进行urlencode操作</span></span><br><span class="line">temp_data = urllib.parse.urlencode(temp_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请求识图接口</span></span><br><span class="line">res = requests.post(url=url,data=temp_data,headers=myheaders)</span><br><span class="line"></span><br><span class="line">code = res.json()[<span class="string">&#x27;words_result&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;words&#x27;</span>]</span><br><span class="line"></span><br><span class="line">code = <span class="built_in">str</span>(code).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">browser.find_elements_by_tag_name(<span class="string">&#x27;input&#x27;</span>)[<span class="number">3</span>].send_keys(code.strip().replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#进行拖动操作</span></span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">&#x27;dv_handler&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(button)</span><br><span class="line"><span class="comment">#声明动作实例</span></span><br><span class="line">action = ActionChains(browser)</span><br><span class="line"><span class="comment">#点击并且按住</span></span><br><span class="line">action.click_and_hold(button).perform()</span><br><span class="line">action.reset_actions()</span><br><span class="line"><span class="comment">#实际拖动像素和轨迹长度是有出入的</span></span><br><span class="line">action.move_by_offset(<span class="number">280</span>,<span class="number">0</span>).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取总长度</span></span><br><span class="line"><span class="comment"># mytext = browser.find_element_by_class_name(&quot;dv_text&quot;)</span></span><br><span class="line"><span class="comment"># print(mytext.size.get(&quot;width&quot;))</span></span><br><span class="line"><span class="comment">#精准获取滑动的小球长度</span></span><br><span class="line"><span class="comment"># print(button.size.get(&#x27;width&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#点击登录按钮</span></span><br><span class="line">browser.find_element_by_class_name(<span class="string">&#x27;h-btn&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment">#延迟等待</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django+vue基础命令</title>
      <link href="/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/Django+vue%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/Django+vue%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-执行生成迁移文件"><a href="#1-执行生成迁移文件" class="headerlink" title="1. 执行生成迁移文件"></a>1. 执行生成迁移文件</h2><p>注意：后缀的myapp一定要带上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations myapp</span><br></pre></td></tr></table></figure><h2 id="2-执行迁移生成数据表"><a href="#2-执行迁移生成数据表" class="headerlink" title="2. 执行迁移生成数据表"></a>2. 执行迁移生成数据表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="3-反向迁移"><a href="#3-反向迁移" class="headerlink" title="3. 反向迁移"></a>3. 反向迁移</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb</span><br></pre></td></tr></table></figure><h2 id="4-清除pip缓存"><a href="#4-清除pip缓存" class="headerlink" title="4. 清除pip缓存"></a>4. 清除pip缓存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 打开命令行</span><br><span class="line">2. cd %LocalAppData%/</span><br><span class="line">3. cd pip</span><br><span class="line">4. 然后删除此文件夹下的cache文件就可以清除了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一、创建VUE脚手架："><a href="#一、创建VUE脚手架：" class="headerlink" title="一、创建VUE脚手架："></a>一、创建VUE脚手架：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、vue init webpack 文件名</span><br><span class="line">2、cd 文件名 //进入目录</span><br><span class="line">3、cnpm install  //安装依赖</span><br><span class="line">4、cnpm run dev  //开启服务</span><br><span class="line">5、cnpm install –save axios  //安装axios</span><br></pre></td></tr></table></figure><h4 id="配置axios："><a href="#配置axios：" class="headerlink" title="配置axios："></a>配置axios：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在src 中main.js‘’</span><br><span class="line">Import axios from ‘axios’   //导包</span><br><span class="line">Vue.prototype.axios  // 配置</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">&#x27;/api&#x27;: &#123;  //使用&quot;/api&quot;来代替&quot;http://f.apiplus.c&quot;</span><br><span class="line">  target: &#x27;http://127.0.0.1:8000/&#x27;, //源地址</span><br><span class="line">  changeOrigin: true, //改变源</span><br><span class="line">  pathRewrite: &#123;</span><br><span class="line">    &#x27;^/api&#x27;: &#x27;&#x27; //路径重写</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="1-删除node-modules"><a href="#1-删除node-modules" class="headerlink" title="1.删除node-modules"></a>1.删除node-modules</h3><p>如果出现任何关于node依赖的问题导致服务无法启动,<br>执行npm install无法解决的,则安装rimraf,然后进入项目目录下,<br>执行rimraf node-modules删除后,重新执行npm install安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除: node-modules</span><br><span class="line">npm install rimraf -g </span><br><span class="line">rimraf node modules</span><br></pre></td></tr></table></figure><h3 id="2-配置上传时去除node-modules"><a href="#2-配置上传时去除node-modules" class="headerlink" title="2.配置上传时去除node-modules"></a>2.配置上传时去除node-modules</h3><ol><li>在vue项目里找到.gitignore配置文件配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules/</span><br><span class="line">dist/</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>上传文件</title>
      <link href="/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="上传文件流程图"><a href="#上传文件流程图" class="headerlink" title="上传文件流程图"></a>上传文件流程图</h2><p><a href="https://imgtu.com/i/XgrsPJ"><img src="https://s1.ax1x.com/2022/06/12/XgrsPJ.png" alt="XgrsPJ.png"></a></p><h2 id="1-上传文件"><a href="#1-上传文件" class="headerlink" title="1. 上传文件"></a>1. 上传文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            // Avatar 使图片展示为圆形</span><br><span class="line">            &lt;Avatar :src=&quot;src&quot; :width=&quot;150&quot; height=&quot;150px&quot;&gt;&lt;/Avatar&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;用户头像：&lt;/td&gt;</span><br><span class="line">            //当图片发生改变是@change不是click！！！</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;file&quot; @change=&quot;upload&quot;&gt;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">src:&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//上传文件</span><br><span class="line">    upload:function (e) &#123;</span><br><span class="line"></span><br><span class="line">      //获取文件</span><br><span class="line">      let file = e.target.files[0];</span><br><span class="line">      //声明表单参数</span><br><span class="line">      let param = new FormData();</span><br><span class="line"></span><br><span class="line">      param.append(&#x27;file&#x27;,file,file.name);</span><br><span class="line"></span><br><span class="line">      //声明请求头</span><br><span class="line">       let config = &#123;headers:&#123;&#x27;Content-Type&#x27;:&#x27;multipart/form-data&#x27;&#125;&#125;;</span><br><span class="line"></span><br><span class="line">      // 发送请求</span><br><span class="line">      this.axios.post(&#x27;http://localhost:8000/upload/&#x27;,param,config).then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">            console.log(res);</span><br><span class="line">            //图片的路径要拼接起来</span><br><span class="line">            this.src = &#x27;http://localhost:8000/static/upload/&#x27;+res.data.filename;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-配置setting文件上传路径"><a href="#2-配置setting文件上传路径" class="headerlink" title="2. 配置setting文件上传路径"></a>2. 配置setting文件上传路径</h2><p><a href="https://imgtu.com/i/XgrJ8s"><img src="https://s1.ax1x.com/2022/06/12/XgrJ8s.png" alt="XgrJ8s.png"></a></p><h2 id="2-1上传文件接口"><a href="#2-1上传文件接口" class="headerlink" title="2.1上传文件接口"></a>2.1上传文件接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入上传文件夹配置</span></span><br><span class="line"><span class="keyword">from</span> mydjango.settings <span class="keyword">import</span> UPLOAD_ROOT</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件上传通用类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadFile</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment">#接收参数</span></span><br><span class="line">        myfile = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#建立文件流对象</span></span><br><span class="line">        f = <span class="built_in">open</span>(os.path.join(UPLOAD_ROOT,<span class="string">&#x27;&#x27;</span>,myfile.name.replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)),<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        <span class="comment">#写入</span></span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> myfile.chunks():</span><br><span class="line">            f.write(chunk)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;filename&#x27;</span>:myfile.name.replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-用Postman测试文件上传步骤"><a href="#3-用Postman测试文件上传步骤" class="headerlink" title="3. 用Postman测试文件上传步骤"></a>3. 用Postman测试文件上传步骤</h2><ol><li><p>请求改为post</p></li><li><p>输入对应的url地址<br><a href="https://imgtu.com/i/XgrVCd"><img src="https://s1.ax1x.com/2022/06/12/XgrVCd.png" alt="XgrVCd.png"></a></p></li><li><p>在Headers里声明，也就是输入 key：Content-Type  value: multipart&#x2F;form-data<br><a href="https://imgtu.com/i/XgregI"><img src="https://s1.ax1x.com/2022/06/12/XgregI.png" alt="XgregI.png"></a></p></li><li><p>在body里输入对应的key并切换为File，这样就可以上传图片了<br><a href="https://imgtu.com/i/Xgrmvt"><img src="https://s1.ax1x.com/2022/06/12/Xgrmvt.png" alt="Xgrmvt.png"></a></p></li><li><p>最后send提交</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>七牛云上传</title>
      <link href="/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-七牛云上传接口"><a href="#1-七牛云上传接口" class="headerlink" title="1.七牛云上传接口"></a>1.七牛云上传接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#七牛云token</span></span><br><span class="line"><span class="keyword">from</span> qiniu <span class="keyword">import</span> Auth</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QiNiu</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="comment">#声明认证对象</span></span><br><span class="line">        q = Auth(<span class="string">&#x27;bVEAAhBCirI9Q5eQdXnRCf1VaQ5BhZVJEQ-DzT6q&#x27;</span>,<span class="string">&#x27;GMKUwBSpwMpWZfsFYHOas0L8wwCePl5YmUSrec0B&#x27;</span>)</span><br><span class="line">        <span class="comment">#获取token</span></span><br><span class="line">        token = q.upload_token(<span class="string">&#x27;1907aqiniu&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;token&#x27;</span>:token&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意定义路由</span></span><br></pre></td></tr></table></figure><h2 id="2-七牛云上传前端"><a href="#2-七牛云上传前端" class="headerlink" title="2. 七牛云上传前端"></a>2. 七牛云上传前端</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">            &lt;td&gt;七牛云上传：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;file&quot; @change=&quot;upload_qiniu&quot;&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">//定义七牛云token变量</span><br><span class="line">      token:&#x27;&#x27;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mounted:function()&#123;</span><br><span class="line">    this.get_token();</span><br><span class="line">    </span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">    //获取token</span><br><span class="line">    get_token:function()&#123;</span><br><span class="line">        //请求后台接口</span><br><span class="line">        this.axios.get(&#x27;http://localhost:8000/qiniu/&#x27;).then((res)=&gt;&#123;</span><br><span class="line">         console.log(res);</span><br><span class="line">         this.token = res.data.token;</span><br><span class="line">         console.log(this.token)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">//七牛云上传</span><br><span class="line">upload_qiniu:function(e)&#123;</span><br><span class="line">      //获取文件</span><br><span class="line">      let file = e.target.files[0];</span><br><span class="line">      //声明表单参数</span><br><span class="line">      let param = new FormData();</span><br><span class="line"></span><br><span class="line">      param.append(&#x27;file&#x27;,file,file.name);</span><br><span class="line">      param.append(&#x27;token&#x27;,this.token);</span><br><span class="line"></span><br><span class="line">      //自定义axios</span><br><span class="line">      const axios_qiniu = this.axios.create(&#123;withCredentials:false&#125;);</span><br><span class="line"></span><br><span class="line">      //发送请求</span><br><span class="line">      axios_qiniu(&#123;</span><br><span class="line">        method:&quot;POST&quot;,</span><br><span class="line">        url:&#x27;http://up-z1.qiniu.com/&#x27;,</span><br><span class="line">        data:param,</span><br><span class="line">        timeout:30000</span><br><span class="line">      &#125;).then((res)=&gt;&#123;</span><br><span class="line">          console.log(res);</span><br><span class="line">        this.src = &quot;http://q9ks8exuv.bkt.clouddn.com/&quot;+res.data.key;</span><br><span class="line">        this.videosrc = config[&#x27;baseurl&#x27;]+res.data.key;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 云存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又拍云上传</title>
      <link href="/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/%E5%8F%88%E6%8B%8D%E4%BA%91%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/%E5%8F%88%E6%8B%8D%E4%BA%91%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="1-又拍云上传接口"><a href="#1-又拍云上传接口" class="headerlink" title="1. 又拍云上传接口"></a>1. 又拍云上传接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#又拍云上传</span></span><br><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#定义文件上传类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UpYun</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="comment">#获取文件</span></span><br><span class="line">        file = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        <span class="comment">#新建又拍云实例</span></span><br><span class="line">        up = upyun.UpYun(<span class="string">&#x27;12341234&#x27;</span>,<span class="string">&#x27;test123456&#x27;</span>,<span class="string">&#x27;Rg2jkofHqSr9ArTtlvvHSWnElmm1rSqj&#x27;</span>)</span><br><span class="line">        <span class="comment">#声明头部信息</span></span><br><span class="line">        headers = &#123;<span class="string">&#x27;x-gmkerl-rotate&#x27;</span>:<span class="string">&#x27;auto&#x27;</span>&#125;</span><br><span class="line">        <span class="comment">#上传图片</span></span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> file.chunks():</span><br><span class="line">            res = up.put(<span class="string">&#x27;/touxiang_test.jpg&#x27;</span>,chunk,checksum=<span class="literal">True</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;filename&#x27;</span>:file.name&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意定义url</span></span><br></pre></td></tr></table></figure><h2 id="2-七牛云拖拽上传"><a href="#2-七牛云拖拽上传" class="headerlink" title="2.七牛云拖拽上传"></a>2.七牛云拖拽上传</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          拖拽上传又拍云</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;input type=&quot;file&quot; @click=&quot;upload_upyun&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;div id=&quot;upload&quot;&gt;</span><br><span class="line">            拖拽上传</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mounted:function()&#123;</span><br><span class="line"></span><br><span class="line">    //注册拖拽容器</span><br><span class="line">    let upload = document.querySelector(&quot;#upload&quot;);</span><br><span class="line">    //声明监听事件</span><br><span class="line">    upload.addEventListener(&#x27;dragenter&#x27;,this.onDrag,false);</span><br><span class="line">    upload.addEventListener(&#x27;dragover&#x27;,this.onDrag,false);</span><br><span class="line">    upload.addEventListener(&#x27;drop&#x27;,this.onDrop,false);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">    //监听用户鼠标</span><br><span class="line">    onDrag(e)&#123;</span><br><span class="line"></span><br><span class="line">      e.stopPropagation();</span><br><span class="line">      e.preventDefault();</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    onDrop(e)&#123;</span><br><span class="line"></span><br><span class="line">      e.stopPropagation();</span><br><span class="line">      e.preventDefault();</span><br><span class="line"></span><br><span class="line">      //调用自定义上传方法</span><br><span class="line">      this.upload_upyun(e.dataTransfer.files);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //又拍云拖拽上传</span><br><span class="line">    upload_upyun:function(files)&#123;</span><br><span class="line"></span><br><span class="line">      //获取拖拽的文件</span><br><span class="line">      let file = files[0];</span><br><span class="line"></span><br><span class="line">      //声明参数</span><br><span class="line">      let param = new FormData();</span><br><span class="line">      param.append(&#x27;file&#x27;,file);</span><br><span class="line"></span><br><span class="line">      //声明头部信息</span><br><span class="line">      const config = &#123;</span><br><span class="line">        headers:&#123;&#x27;Content-Type&#x27;:&#x27;multipart/form-data&#x27;&#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      //发送请求</span><br><span class="line">      this.axios.post(&#x27;http://localhost:8000/upyun/&#x27;,param,config).then((res)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">        console.log(res);</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  /*标签选择器*/</span><br><span class="line">td&#123;</span><br><span class="line">  padding:10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.imgcode&#123;</span><br><span class="line">  cursor:pointer;</span><br><span class="line">&#125;</span><br><span class="line">  #upload&#123;</span><br><span class="line"></span><br><span class="line">    margin:100px auto;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 150px;</span><br><span class="line">    border:2px dashed #f00;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 云存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三方登录</title>
      <link href="/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2020/04/20/python/%E6%A1%86%E6%9E%B6/Django_vue/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="微博登录流程图"><a href="#微博登录流程图" class="headerlink" title="微博登录流程图"></a>微博登录流程图</h2><p><a href="https://imgtu.com/i/Xgr5Ie"><img src="https://s1.ax1x.com/2022/06/12/Xgr5Ie.png" alt="Xgr5Ie.png"></a></p><h2 id="1-微博的登录"><a href="#1-微博的登录" class="headerlink" title="1.微博的登录"></a>1.微博的登录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;img @click=&quot;sina&quot; class=&quot;imgcode&quot; src=&quot;http://localhost:8000/static/sina.png&quot; alt=&quot;&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//新浪微博三方登录</span><br><span class="line">    sina:function()&#123;</span><br><span class="line">      //拼接url</span><br><span class="line">      let client_id = 1734360731;</span><br><span class="line">      //注意事项：redirect_uri</span><br><span class="line">      let url = &quot;https://api.weibo.com/oauth2/authorize?client_id=1734360731&amp;redirect_uri=http://127.0.0.1:8000/md_admin/weibo&quot;;</span><br><span class="line"></span><br><span class="line">      //跳转</span><br><span class="line">      window.location.href = url</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="1-2-微博登录接口"><a href="#1-2-微博登录接口" class="headerlink" title="1.2 微博登录接口"></a>1.2 微博登录接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新浪微博回调方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wb_back</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment">#接收参数</span></span><br><span class="line">    code = request.GET.get(<span class="string">&#x27;code&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义token接口地址</span></span><br><span class="line">    url = <span class="string">&quot;https://api.weibo.com/oauth2/access_token&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义参数</span></span><br><span class="line">    re = requests.post(url,data=&#123;</span><br><span class="line">        <span class="string">&quot;client_id&quot;</span>:<span class="string">&quot;1734360731&quot;</span>,</span><br><span class="line">        <span class="string">&quot;client_secret&quot;</span>:<span class="string">&quot;893b0fae3b1bad3fdbb1c4b7db8d81a4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;grant_type&quot;</span>:<span class="string">&quot;authorization_code&quot;</span>,</span><br><span class="line">        <span class="string">&quot;code&quot;</span>:code,</span><br><span class="line">        <span class="string">&quot;redirect_uri&quot;</span>:<span class="string">&#x27;http://127.0.0.1:8000/md_admin/weibo&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#换区新浪微博用户昵称</span></span><br><span class="line">    res = requests.get(<span class="string">&#x27;https://api.weibo.com/2/users/show.json&#x27;</span>,params=&#123;<span class="string">&#x27;access_token&#x27;</span>:re.json()[<span class="string">&#x27;access_token&#x27;</span>],<span class="string">&#x27;uid&#x27;</span>:re.json()[<span class="string">&#x27;uid&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(res.json()[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断该用户是否注册过</span></span><br><span class="line">    user = User.objects.<span class="built_in">filter</span>(username=<span class="built_in">str</span>(res.json()[<span class="string">&#x27;name&#x27;</span>])).first()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sina_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    user_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        sina_id = user.username</span><br><span class="line">        user_id = user.<span class="built_in">id</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#手动创建账号</span></span><br><span class="line">        user = User(username=<span class="built_in">str</span>(res.json()[<span class="string">&#x27;name&#x27;</span>]),password=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        user.save()</span><br><span class="line"></span><br><span class="line">        sina_id = res.json()[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#查询一下刚刚入库的新账号id</span></span><br><span class="line">        user = User.objects.<span class="built_in">filter</span>(username=res.json()[<span class="string">&#x27;name&#x27;</span>]).first()</span><br><span class="line">        user_id = user.<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#重定向回去</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;http://localhost:8080?sina_id=&quot;</span>+sina_id+<span class="string">&quot;&amp;uid=&quot;</span>+<span class="built_in">str</span>(user_id))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-钉钉第三方登录"><a href="#2-钉钉第三方登录" class="headerlink" title="2.钉钉第三方登录"></a>2.钉钉第三方登录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;img @click=&quot;dingding&quot; class=&quot;imgcode&quot; src=&quot;http://localhost:8000/static/dingding.png&quot; alt=&quot;&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//钉钉第三方登录</span><br><span class="line">    dingding:function()&#123;</span><br><span class="line"></span><br><span class="line">      let url = &quot;https://oapi.dingtalk.com/connect/qrconnect?appid=dingoaqntxrvpkimtutsny&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri=http://localhost:8000/dingding_back/&quot;</span><br><span class="line"></span><br><span class="line">      window.location.href = url</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="2-2-钉钉登录接口"><a href="#2-2-钉钉登录接口" class="headerlink" title="2.2 钉钉登录接口"></a>2.2 钉钉登录接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造钉钉回调方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ding_back</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment">#获取code</span></span><br><span class="line">    code = request.GET.get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line"></span><br><span class="line">    t = time.time()</span><br><span class="line">    <span class="comment">#时间戳</span></span><br><span class="line">    timestamp = <span class="built_in">str</span>((<span class="built_in">int</span>(<span class="built_in">round</span>(t * <span class="number">1000</span>))))</span><br><span class="line">    appSecret = <span class="string">&#x27;oSNU0I01n3J_Q5-LIR9hO5Q-Esu3ieaybn_13vJpnde8v61u28bxJ6C41zCn7ZiA&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#构造签名</span></span><br><span class="line">    signature = base64.b64encode(</span><br><span class="line">    hmac.new(appSecret.encode(<span class="string">&#x27;utf-8&#x27;</span>), timestamp.encode(<span class="string">&#x27;utf-8&#x27;</span>), digestmod=sha256).digest())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#请求接口，换取钉钉用户名</span></span><br><span class="line">    payload = &#123;<span class="string">&#x27;tmp_auth_code&#x27;</span>: code&#125;</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">    res = requests.post(<span class="string">&#x27;https://oapi.dingtalk.com/sns/getuserinfo_bycode?signature=&#x27;</span>+urllib.parse.quote(signature.decode(<span class="string">&quot;utf-8&quot;</span>))+<span class="string">&quot;&amp;timestamp=&quot;</span>+timestamp+<span class="string">&quot;&amp;accessKey=dingoaqntxrvpkimtutsny&quot;</span>,data=json.dumps(payload),headers=headers)</span><br><span class="line">    res_dict = json.loads(res.text)</span><br><span class="line">    <span class="built_in">print</span>(res_dict)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(res_dict[<span class="string">&#x27;user_info&#x27;</span>][<span class="string">&#x27;nick&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断该用户是否注册过</span></span><br><span class="line">    user = User.objects.<span class="built_in">filter</span>(username=<span class="built_in">str</span>(res_dict[<span class="string">&#x27;user_info&#x27;</span>][<span class="string">&#x27;nick&#x27;</span>])).first()</span><br><span class="line"></span><br><span class="line">    sina_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    user_id = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        sina_id = user.username</span><br><span class="line">        user_id = user.<span class="built_in">id</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 手动创建账号</span></span><br><span class="line">        user = User(username=<span class="built_in">str</span>(res_dict[<span class="string">&#x27;user_info&#x27;</span>][<span class="string">&#x27;nick&#x27;</span>]), password=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        user.save()</span><br><span class="line"></span><br><span class="line">        sina_id = <span class="built_in">str</span>(res_dict[<span class="string">&#x27;user_info&#x27;</span>][<span class="string">&#x27;nick&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询一下刚刚入库的新账号id</span></span><br><span class="line">        user = User.objects.<span class="built_in">filter</span>(username=<span class="built_in">str</span>(res_dict[<span class="string">&#x27;user_info&#x27;</span>][<span class="string">&#x27;nick&#x27;</span>])).first()</span><br><span class="line">        user_id = user.<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重定向回去</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;http://localhost:8080?sina_id=&quot;</span> + sina_id + <span class="string">&quot;&amp;uid=&quot;</span> + <span class="built_in">str</span>(user_id))</span><br></pre></td></tr></table></figure><h2 id="3-接受第三方参数"><a href="#3-接受第三方参数" class="headerlink" title="3. 接受第三方参数"></a>3. 接受第三方参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//接收三方参数</span><br><span class="line">      var sina_id = this.$route.query.sina_id;</span><br><span class="line">      var user_id = this.$route.query.uid;</span><br><span class="line"></span><br><span class="line">      if (sina_id)&#123;</span><br><span class="line">        //自动帮用户进行登陆操作</span><br><span class="line">        localStorage.setItem(&quot;username&quot;,sina_id);</span><br><span class="line">        localStorage.setItem(&quot;uid&quot;,user_id);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 第三方登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础</title>
      <link href="/2020/04/19/python/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/04/19/python/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="1-1-列表常用方法"><a href="#1-1-列表常用方法" class="headerlink" title="1.1 列表常用方法"></a>1.1 列表常用方法</h1><ol><li>append用于在列表末尾追加新的对象<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">a.append(4)                       #the result ： [1, 2, 3, 4]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>count方法统计某个元素在列表中出现的次数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [&#x27;aa&#x27;,&#x27;bb&#x27;,&#x27;cc&#x27;,&#x27;aa&#x27;,&#x27;aa&#x27;]</span><br><span class="line">print(a.count(&#x27;aa&#x27;))                 #the result ： 3</span><br></pre></td></tr></table></figure></li><li>extend方法可以在列表的末尾一次性追加另一个序列中的多个值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">b = [4,5,6]</span><br><span class="line">a.extend(b)                          #the result ：[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure></li><li>index函数用于从列表中找出某个值第一个匹配项的索引位置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,1]</span><br><span class="line">print(a.index(1))                   #the result ： 0</span><br></pre></td></tr></table></figure></li><li>insert方法用于将对象插入到列表中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">a.insert(0,&#x27;aa&#x27;)            #the result : [&#x27;aa&#x27;, 1, 2, 3]</span><br></pre></td></tr></table></figure></li><li>pop方法会移除列表中的一个元素（默认是最后一个），并且返回该元素的值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">a.pop()                             #the result ： [1, 2]</span><br><span class="line">a.pop(0)</span><br></pre></td></tr></table></figure></li><li>remove方法用于移除列表中某个值的第一个匹配项<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [&#x27;aa&#x27;,&#x27;bb&#x27;,&#x27;cc&#x27;,&#x27;aa&#x27;]</span><br><span class="line">a.remove(&#x27;aa&#x27;)                      #the result ： [&#x27;bb&#x27;, &#x27;cc&#x27;, &#x27;aa&#x27;]</span><br></pre></td></tr></table></figure></li><li>reverse方法将列表中的元素反向存放<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">a.reverse()                         #the result ： [&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span><br></pre></td></tr></table></figure></li><li>sort方法用于在原位置对列表进行排序，意味着改变原来的列表，让其中的元素按一定顺序排列<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,1,2,3]</span><br><span class="line">a.sort()                           #the result ：[1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure></li><li>enumrate<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [11,22,33]</span><br><span class="line">for k,v in enumerate(li, 1):</span><br><span class="line">    print(k,v)</span><br></pre></td></tr></table></figure></li></ol><h1 id="1-2-字符串常用方法"><a href="#1-2-字符串常用方法" class="headerlink" title="1.2 字符串常用方法"></a>1.2 字符串常用方法</h1><ol><li>find方法可以在一个较长的字符串中查找子串，他返回子串所在位置的最左端索引，如果没有找到则返回-1<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#x27;abcdefghijk&#x27;</span><br><span class="line">print(a.find(&#x27;abc&#x27;))                                  #the result ： 0</span><br><span class="line">print(a.find(&#x27;abc&#x27;,10,100))                           #the result ： 11  指定查找的起始和结束查找位置</span><br></pre></td></tr></table></figure></li><li>join方法是非常重要的字符串方法，他是split方法的逆方法，用来连接序列中的元素，并且需要被连接的元素都必须是字符串。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br><span class="line">print(&#x27;+&#x27;.join(a))                                    #the result ： 1+2+3</span><br></pre></td></tr></table></figure></li><li>split方法,是一个非常重要的字符串，它是join的逆方法，用来将字符串分割成序列<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;1+2+3+4&#x27;.split(&#x27;+&#x27;))                          #the result ： [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span><br></pre></td></tr></table></figure></li><li>strip 方法返回去除首位空格（不包括内部）的字符串<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;   test   test    &quot;.strip())                  #the result ：“test   test”</span><br></pre></td></tr></table></figure></li><li>replace方法返回某字符串所有匹配项均被替换之后得到字符串<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;This is a test&quot;.replace(&#x27;is&#x27;,&#x27;is_test&#x27;))     #the result ： This_test is_test a test</span><br></pre></td></tr></table></figure></li></ol><h1 id="1-3-字典常用方法"><a href="#1-3-字典常用方法" class="headerlink" title="1.3 字典常用方法"></a>1.3 字典常用方法</h1><ol><li><p>clear方法清除字典中所有的项，这是一个原地操作，所以无返回值（或则说返回None）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;name&#x27;:&quot;tom&quot;&#125;</span><br><span class="line">d.clear()</span><br><span class="line">print(d)                                         #the result : &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>fromkeys方法使用给定的键建立新的字典，每个键都对应一个默认的值None</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#123;&#125;.fromkeys([&#x27;name&#x27;,&#x27;age&#x27;]))              #the result　：　&#123;&#x27;age&#x27;: None, &#x27;name&#x27;: None&#125;</span><br></pre></td></tr></table></figure></li><li><p>get方法是个更宽松的访问字典项的方法，如果试图访问字典中不存在的项时不会报错仅会      返回：None</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;Tom&#x27;:8777,&#x27;Jack&#x27;:8888,&#x27;Fly&#x27;:6666&#125;</span><br><span class="line">print(d.get(&#x27;Tom&#x27;))                              #the result ：     8777</span><br><span class="line">print(d.get(&#x27;not_exist&#x27;))                       #the result ：     None</span><br></pre></td></tr></table></figure></li><li><p>for循环字典的三种方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;Tom&#x27;:8777,&#x27;Jack&#x27;:8888,&#x27;Fly&#x27;:6666&#125;</span><br><span class="line">for k,v in d.items():</span><br><span class="line">    print(k,v)</span><br><span class="line">for k in d.values():</span><br><span class="line">    print(k)</span><br><span class="line">for k in d.keys():</span><br><span class="line">    print(k)</span><br></pre></td></tr></table></figure></li><li><p>pop方法用于获得对应与给定键的值，然后将这个”键-值”对从字典中移除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;Tom&#x27;:8777,&#x27;Jack&#x27;:8888,&#x27;Fly&#x27;:6666&#125;</span><br><span class="line">v = d.pop(&#x27;Tom&#x27;)</span><br><span class="line">print(v)                    #8777</span><br></pre></td></tr></table></figure></li><li><p>setdefault方法在某种程度上类似于get方法，能够获得与给定键相关联的值，除此之外，setdefault还能在字典中不含有给定键的情况下设定相应的键值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;Tom&#x27;:8777,&#x27;Jack&#x27;:8888,&#x27;Fly&#x27;:6666&#125;</span><br><span class="line">d.setdefault(&#x27;Tom&#x27;)                           #the result ： 8777</span><br><span class="line">print(d.setdefault(&#x27;Test&#x27;))                  #the result ： None</span><br><span class="line">print(d)                                      #&#123;&#x27;Fly&#x27;: 6666, &#x27;Jack&#x27;: 8888, &#x27;Tom&#x27;: 8777, &#x27;Test&#x27;: None&#125;</span><br></pre></td></tr></table></figure></li><li><p>update方法可以利用一个字典项更新另一个字典，提供的字典中的项会被添加到旧的字典中，如有相同的键则会被覆盖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#x27;Tom&#x27;:8777,&#x27;Jack&#x27;:8888,&#x27;Fly&#x27;:6666&#125;</span><br><span class="line">a = &#123;&#x27;Tom&#x27;:110,&#x27;Test&#x27;:119&#125;</span><br><span class="line">d.update(a)</span><br><span class="line">print(d)                                       #the result ：&#123;&#x27;Fly&#x27;: 6666, &#x27;Test&#x27;: 119, &#x27;Jack&#x27;: 8888, &#x27;Tom&#x27;: 110&#125;</span><br></pre></td></tr></table></figure></li><li><p>将两个列表组合成字典</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keys = [&#x27;a&#x27;, &#x27;b&#x27;]</span><br><span class="line">values = [1, 2]</span><br><span class="line">print(dict(zip(keys,values)))                                      # &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="1-4-集合常用方法"><a href="#1-4-集合常用方法" class="headerlink" title="1.4 集合常用方法"></a>1.4 集合常用方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_1 = [1,2,3,4,5,1,2]</span><br></pre></td></tr></table></figure><p>1、去重(去除list_1中重复元素1,2)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_1 = set(list_1)                                    #去重： &#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">print(list_1)</span><br><span class="line">list_2 = set([4,5,6,7,8])</span><br></pre></td></tr></table></figure><p>2、交集（在list_1和list_2中都有的元素4,5）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list_1.intersection(list_2))                      #交集： &#123;4, 5&#125;</span><br></pre></td></tr></table></figure><p>3、并集（在list_1和list_2中的元素全部打印出来，重复元素仅打印一次）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list_1.union(list_2))                             #并集： &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure><p>4、差集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(list_1.difference(list_2))                        #差集：在list_1中有在list_2中没有：   &#123;1, 2, 3&#125;</span><br><span class="line">print(list_2.difference(list_1))                        #差集：在list_1中有在list_2中没有：   &#123;8, 6, 7&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简历</title>
      <link href="/2020/04/19/%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%80%E5%8E%86/"/>
      <url>/2020/04/19/%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h3 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h3><h4 id="王涵"><a href="#王涵" class="headerlink" title="王涵"></a>王涵</h4><p>23岁 |  男  |  本科  |  3年经验<br>16601512166   |   <a href="mailto:&#x32;&#52;&#x38;&#x34;&#55;&#54;&#48;&#49;&#x36;&#x30;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#x32;&#52;&#x38;&#x34;&#55;&#54;&#48;&#49;&#x36;&#x30;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a></p><h4 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h4><p>  有3年的python相关开发经验,能独立开发项目,能熟练运用MVC设计模式, DJango框架,来提高应用性<br>能和代码的质量,掌握Redis, MySQL数据库与Linux系统的常见机制与原理,主力开发语言为Python,具备<br>较强的逻辑思维,团队意识强,有较好的沟通能力,工作态度积极, 自学能力很强,能快速的接受新的技术并<br>使用在项目的开发中</p><h4 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h4><p>web开发: python<br>前端开发: javascript. vue. js<br>Web框架: Django, Flask<br>前端框架: Jquery. js, Vue. js<br>数据库: MySQL, Mongodb, Redis<br>爬虫相关: scrapy, Selenium</p><h4 id="求职意向"><a href="#求职意向" class="headerlink" title="求职意向"></a>求职意向</h4><p>Python 中级开发工程师  薪资：面议</p><h4 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h4><p>中国石油大学<br>计算机科学与技术  | 本科</p><h4 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h4><p>深圳易峰科技开发有限公司（2016-11—-至今）</p><h4 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h4><p>项目名称:快验借贷系统(p2p)</p><p>1.技术栈: Django+ Element-UI +Vue. jstWebsocket+Mys l-RodistCelery</p><p>2.项目介绍:快融借货是个人通过平台向其他个人提供小额借贷的金融模式。以金融和科技能力见长,借助互联<br>网+金融的风口,以科技手段服务用户、满足用户需求为初心,为大众提供便捷、高效的金融服务</p><p>3.核心模块:前台网站镇块、账户中心模块、后台运营管理模块</p><h4 id="项目负责："><a href="#项目负责：" class="headerlink" title="项目负责："></a>项目负责：</h4><p>1.负责django后台开发,整体采MVC分层设计,提高项目的可扩展性、稳定性</p><p>2.遵循restfulAPI接口设计规范,实现JWT接口安全开发,支持单点登录会话跟踪</p><p>3.负责基于Django-drf第三方框架,实现API接口开发,设计APIview等类视图</p><p>4.使用Element-UI对页面进行简洁布局,使用户视觉体验增强</p><p>5.客服聊天采用websocket,实现全工双向通信机制,提高用户体验度</p><p>6.消息管理采用第三方短信服务, Celery实现高效异步消息推送</p><p>7.采用Redis+Nginx集群实现负载均衡,确保高并发性能</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>进程</title>
      <link href="/2020/04/19/python/%E6%A8%A1%E5%9D%97/%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E7%A8%8B/"/>
      <url>/2020/04/19/python/%E6%A8%A1%E5%9D%97/%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="1-5-进程"><a href="#1-5-进程" class="headerlink" title="1.5 进程"></a>1.5 进程</h1><ol><li>进程定义<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 进程是资源分配最小单位</span><br><span class="line">2. 当一个可执行程序被系统执行（分配内存等资源）就变成了一个进程</span><br></pre></td></tr></table></figure>2.进程定义拓展回答内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，这种执行的程序就称之为进程</span><br><span class="line">2. 程序和进程的区别就在于：程序是指令的集合，它是进程运行的静态描述文本；进程是程序的一次执行活动，属于动态概念</span><br><span class="line">3. 在多道编程中，我们允许多个程序同时加载到内存中，在操作系统的调度下，可以实现并发地执行。</span><br><span class="line">4. 进程的出现让每个用户感觉到自己独享CPU，因此，进程就是为了在CPU上实现多道编程而提出的。</span><br><span class="line">5. 进程之间有自己独立的内存，各进程之间不能相互访问</span><br><span class="line">6. 创建一个新线程很简单，创建新进程需要对父进程进行复制</span><br></pre></td></tr></table></figure>3.多道编程概念<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多道编程： 在计算机内存中同时存放几道相互独立的程序，他们共享系统资源，相互穿插运行</span><br><span class="line">单道编程： 计算机内存中只允许一个的程序运行</span><br></pre></td></tr></table></figure></li><li>有了进程为什么还要线程？<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 进程优点：</span><br><span class="line">提供了多道编程，让我们感觉我们每个人都拥有自己的CPU和其他资源，可以提高计算机的利用率</span><br><span class="line">2. 进程的两个重要缺点</span><br><span class="line">a. 第一点：进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。</span><br><span class="line">b. 第二点：进程在执行的过程中如果阻塞，即使进程中有些工作不依赖于输入的数据，也将无法执行（例如等待输入，整个进程就会挂起）。</span><br><span class="line">c. 例如，我们在使用qq聊天， qq做为一个独立进程如果同一时间只能干一件事，那他如何实现在同一时刻 即能监听键盘输入、又能监听其它人给你发的消息</span><br><span class="line">d. 你会说，操作系统不是有分时么？分时是指在不同进程间的分时呀</span><br><span class="line">e. 即操作系统处理一会你的qq任务，又切换到word文档任务上了，每个cpu时间片分给你的qq程序时，你的qq还是只能同时干一件事呀</span><br></pre></td></tr></table></figure></li><li>进程间互相访问数据的四种方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注：不同进程间内存是不共享的，所以互相之间不能访问对方数据</span><br><span class="line">法1:  利用Queues实现父进程到子进程（或子进程间）的数据传递</span><br><span class="line">法2:  使用管道pipe实现两个进程间数据传递</span><br><span class="line">法3:  Managers实现很多进程间数据共享</span><br><span class="line">法4：借助redis中间件进行数据共享</span><br></pre></td></tr></table></figure></li><li>进程池<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from  multiprocessing import Process,Pool</span><br><span class="line">import time,os</span><br><span class="line">def foo(i):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;in the process&quot;,os.getpid()) #打印子进程的pid</span><br><span class="line">return i+100</span><br><span class="line"></span><br><span class="line">def call(arg):</span><br><span class="line">print(&#x27;--&gt;exec done:&#x27;,arg,os.getpid())</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    pool = Pool(3)                      #进程池最多允许5个进程放入进程池</span><br><span class="line">    print(&quot;主进程pid：&quot;,os.getpid())     #打印父进程的pid</span><br><span class="line">    for i in range(10):</span><br><span class="line">       #用法1 callback作用是指定只有当Foo运行结束后就执行callback调用的函数,父进程调用的callback函数</span><br><span class="line">        pool.apply_async(func=foo, args=(i,),callback=call)</span><br><span class="line">        #用法2 串行 启动进程不在用Process而是直接用pool.apply()</span><br><span class="line">        # pool.apply(func=foo, args=(i,))</span><br><span class="line">    print(&#x27;end&#x27;)</span><br><span class="line">    pool.close()    #关闭pool</span><br><span class="line">    pool.join()     #进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span><br></pre></td></tr></table></figure></li><li>进程和程序的区别<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 程序只是一个普通文件，是一个机器代码指令和数据的集合，所以，程序是一个静态的实体</span><br><span class="line">2. 而进程是程序运行在数据集上的动态过程，进程是一个动态实体，它应创建而产生，应调度执行因等待资源或事件而被处于等待状态，因完成任务而被撤消</span><br><span class="line">3. 进程是系统进行资源分配和调度的一个独立单位</span><br><span class="line">4．一个程序对应多个进程，一个进程为多个程序服务（两者之间是多对多的关系）</span><br><span class="line">5. 一个程序执行在不同的数据集上就成为不同的进程，可以用进程控制块来唯一地标识每个进程</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
